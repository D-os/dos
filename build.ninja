BUILDROOT = out/build
SYSROOT = out/sysroot
TARGET = x86_64-unknown-linux-musl
CC = out/tc/target/bin/${TARGET}-clang -isystem $SYSROOT/include -Isystem/bioniccompat/include
CXX = out/tc/target/bin/${TARGET}-clang++ -nostdinc++ -cxx-isystem $SYSROOT/include/c++/v1 -cxx-isystem $SYSROOT/include -Isystem/bioniccompat/include
LINKER = out/tc/target/bin/${TARGET}-clang -isysroot $SYSROOT
AR = out/tc/target/bin/${TARGET}-ar

HOSTCC = out/tc/host/bin/clang
HOSTCXX = out/tc/host/bin/clang++

rule cc
  depfile = $out.d
  command = $cc -MD -MF $out.d $cflags $includes -c $in -o $out

rule cxx
  depfile = $out.d
  command = $cxx -MD -MF $out.d $cxxflags $includes -c $in -o $out

rule ar
  command = $AR rcs $out $in

rule so
  command = $LINKER $libs -Wl,-x -shared -g -L$$(dirname $out) -Wl,-soname,$$(basename $out) -o $out $in

rule soa
  command = $LINKER $libs -Wl,-x -shared -g -L$$(dirname $out) -Wl,-soname,$$(basename $out) -o $out -Wl,--whole-archive $in -Wl,--no-whole-archive

rule link
  command = $LINKER $libs $in -o $out

rule copy
  command = mkdir -p $$(basename $out) && cp -f $in $out

subninja build/libbase.ninja
build $SYSROOT/lib/libbase.so: copy $BUILDROOT/libbase/libbase.so

subninja build/libcutils.ninja
build $SYSROOT/lib/libcutils.so: copy $BUILDROOT/libcutils/libcutils.so

subninja build/liblog.ninja
build $SYSROOT/lib/liblog.so: copy $BUILDROOT/liblog/liblog.so

subninja build/protobuf.ninja
build out/tc/host/bin/protoc: copy $BUILDROOT/protobuf/aprotoc
rule protoc
  command = out/tc/host/bin/protoc --cpp_out=lite:$BUILDROOT/init/proto --dependency_out=$out -I . $in #&& out/soong/host/linux-x86/bin/dep_fixer out/soong/.intermediates/system/core/init/host_init_verifier/linux_glibc_x86_64/gen/proto/system/core/init/subcontext.pb.d
  generator = out/tc/host/bin/protoc

subninja build/libcap.ninja
build $SYSROOT/include/sys/capability.h: copy external/libcap/libcap/include/sys/capability.h

subninja build/libmodprobe.ninja

subninja build/fs_mgr.ninja

subninja build/init.ninja
