/* Generated by ./src/xlat/gen.sh from ./src/xlat/personality_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PER_LINUX) || (defined(HAVE_DECL_PER_LINUX) && HAVE_DECL_PER_LINUX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_LINUX) == (0), "PER_LINUX != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_LINUX 0
#endif
#if defined(PER_LINUX_32BIT) || (defined(HAVE_DECL_PER_LINUX_32BIT) && HAVE_DECL_PER_LINUX_32BIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_LINUX_32BIT) == (ADDR_LIMIT_32BIT), "PER_LINUX_32BIT != ADDR_LIMIT_32BIT");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_LINUX_32BIT ADDR_LIMIT_32BIT
#endif
#if defined(PER_LINUX_FDPIC) || (defined(HAVE_DECL_PER_LINUX_FDPIC) && HAVE_DECL_PER_LINUX_FDPIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_LINUX_FDPIC) == (FDPIC_FUNCPTRS), "PER_LINUX_FDPIC != FDPIC_FUNCPTRS");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_LINUX_FDPIC FDPIC_FUNCPTRS
#endif
#if defined(PER_SVR4) || (defined(HAVE_DECL_PER_SVR4) && HAVE_DECL_PER_SVR4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_SVR4) == ((0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO)), "PER_SVR4 != (0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_SVR4 (0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO)
#endif
#if defined(PER_SVR3) || (defined(HAVE_DECL_PER_SVR3) && HAVE_DECL_PER_SVR3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_SVR3) == ((0x0002 | STICKY_TIMEOUTS | SHORT_INODE)), "PER_SVR3 != (0x0002 | STICKY_TIMEOUTS | SHORT_INODE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_SVR3 (0x0002 | STICKY_TIMEOUTS | SHORT_INODE)
#endif
#if defined(PER_SCOSVR3) || (defined(HAVE_DECL_PER_SCOSVR3) && HAVE_DECL_PER_SCOSVR3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_SCOSVR3) == ((0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS | SHORT_INODE)), "PER_SCOSVR3 != (0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS | SHORT_INODE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_SCOSVR3 (0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS | SHORT_INODE)
#endif
#if defined(PER_OSR5) || (defined(HAVE_DECL_PER_OSR5) && HAVE_DECL_PER_OSR5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_OSR5) == ((0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS)), "PER_OSR5 != (0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_OSR5 (0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS)
#endif
#if defined(PER_WYSEV386) || (defined(HAVE_DECL_PER_WYSEV386) && HAVE_DECL_PER_WYSEV386)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_WYSEV386) == ((0x0004 | STICKY_TIMEOUTS | SHORT_INODE)), "PER_WYSEV386 != (0x0004 | STICKY_TIMEOUTS | SHORT_INODE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_WYSEV386 (0x0004 | STICKY_TIMEOUTS | SHORT_INODE)
#endif
#if defined(PER_ISCR4) || (defined(HAVE_DECL_PER_ISCR4) && HAVE_DECL_PER_ISCR4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_ISCR4) == ((0x0005 | STICKY_TIMEOUTS)), "PER_ISCR4 != (0x0005 | STICKY_TIMEOUTS)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_ISCR4 (0x0005 | STICKY_TIMEOUTS)
#endif
#if defined(PER_BSD) || (defined(HAVE_DECL_PER_BSD) && HAVE_DECL_PER_BSD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_BSD) == (0x0006), "PER_BSD != 0x0006");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_BSD 0x0006
#endif
#if defined(PER_SUNOS) || (defined(HAVE_DECL_PER_SUNOS) && HAVE_DECL_PER_SUNOS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_SUNOS) == ((0x0006 | STICKY_TIMEOUTS)), "PER_SUNOS != (0x0006 | STICKY_TIMEOUTS)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_SUNOS (0x0006 | STICKY_TIMEOUTS)
#endif
#if defined(PER_XENIX) || (defined(HAVE_DECL_PER_XENIX) && HAVE_DECL_PER_XENIX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_XENIX) == ((0x0007 | STICKY_TIMEOUTS | SHORT_INODE)), "PER_XENIX != (0x0007 | STICKY_TIMEOUTS | SHORT_INODE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_XENIX (0x0007 | STICKY_TIMEOUTS | SHORT_INODE)
#endif
#if defined(PER_LINUX32) || (defined(HAVE_DECL_PER_LINUX32) && HAVE_DECL_PER_LINUX32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_LINUX32) == (0x0008), "PER_LINUX32 != 0x0008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_LINUX32 0x0008
#endif
#if defined(PER_LINUX32_3GB) || (defined(HAVE_DECL_PER_LINUX32_3GB) && HAVE_DECL_PER_LINUX32_3GB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_LINUX32_3GB) == ((0x0008 | ADDR_LIMIT_3GB)), "PER_LINUX32_3GB != (0x0008 | ADDR_LIMIT_3GB)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_LINUX32_3GB (0x0008 | ADDR_LIMIT_3GB)
#endif
#if defined(PER_IRIX32) || (defined(HAVE_DECL_PER_IRIX32) && HAVE_DECL_PER_IRIX32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_IRIX32) == ((0x0009 | STICKY_TIMEOUTS)), "PER_IRIX32 != (0x0009 | STICKY_TIMEOUTS)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_IRIX32 (0x0009 | STICKY_TIMEOUTS)
#endif
#if defined(PER_IRIXN32) || (defined(HAVE_DECL_PER_IRIXN32) && HAVE_DECL_PER_IRIXN32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_IRIXN32) == ((0x000a | STICKY_TIMEOUTS)), "PER_IRIXN32 != (0x000a | STICKY_TIMEOUTS)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_IRIXN32 (0x000a | STICKY_TIMEOUTS)
#endif
#if defined(PER_IRIX64) || (defined(HAVE_DECL_PER_IRIX64) && HAVE_DECL_PER_IRIX64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_IRIX64) == ((0x000b | STICKY_TIMEOUTS)), "PER_IRIX64 != (0x000b | STICKY_TIMEOUTS)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_IRIX64 (0x000b | STICKY_TIMEOUTS)
#endif
#if defined(PER_RISCOS) || (defined(HAVE_DECL_PER_RISCOS) && HAVE_DECL_PER_RISCOS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_RISCOS) == (0x000c), "PER_RISCOS != 0x000c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_RISCOS 0x000c
#endif
#if defined(PER_SOLARIS) || (defined(HAVE_DECL_PER_SOLARIS) && HAVE_DECL_PER_SOLARIS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_SOLARIS) == ((0x000d | STICKY_TIMEOUTS)), "PER_SOLARIS != (0x000d | STICKY_TIMEOUTS)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_SOLARIS (0x000d | STICKY_TIMEOUTS)
#endif
#if defined(PER_UW7) || (defined(HAVE_DECL_PER_UW7) && HAVE_DECL_PER_UW7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_UW7) == ((0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO)), "PER_UW7 != (0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_UW7 (0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO)
#endif
#if defined(PER_OSF4) || (defined(HAVE_DECL_PER_OSF4) && HAVE_DECL_PER_OSF4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_OSF4) == (0x000f), "PER_OSF4 != 0x000f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_OSF4 0x000f
#endif
#if defined(PER_HPUX) || (defined(HAVE_DECL_PER_HPUX) && HAVE_DECL_PER_HPUX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_HPUX) == (0x0010), "PER_HPUX != 0x0010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_HPUX 0x0010
#endif
#if defined(PER_MASK) || (defined(HAVE_DECL_PER_MASK) && HAVE_DECL_PER_MASK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PER_MASK) == (0x00ff), "PER_MASK != 0x00ff");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PER_MASK 0x00ff
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat personality_types in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data personality_types_xdata[] = {
 XLAT(PER_LINUX),
 #define XLAT_VAL_0 ((unsigned) (PER_LINUX))
 #define XLAT_STR_0 STRINGIFY(PER_LINUX)
 XLAT(PER_LINUX_32BIT),
 #define XLAT_VAL_1 ((unsigned) (PER_LINUX_32BIT))
 #define XLAT_STR_1 STRINGIFY(PER_LINUX_32BIT)
 XLAT(PER_LINUX_FDPIC),
 #define XLAT_VAL_2 ((unsigned) (PER_LINUX_FDPIC))
 #define XLAT_STR_2 STRINGIFY(PER_LINUX_FDPIC)
 XLAT(PER_SVR4),
 #define XLAT_VAL_3 ((unsigned) (PER_SVR4))
 #define XLAT_STR_3 STRINGIFY(PER_SVR4)
 XLAT(PER_SVR3),
 #define XLAT_VAL_4 ((unsigned) (PER_SVR3))
 #define XLAT_STR_4 STRINGIFY(PER_SVR3)
 XLAT(PER_SCOSVR3),
 #define XLAT_VAL_5 ((unsigned) (PER_SCOSVR3))
 #define XLAT_STR_5 STRINGIFY(PER_SCOSVR3)
 XLAT(PER_OSR5),
 #define XLAT_VAL_6 ((unsigned) (PER_OSR5))
 #define XLAT_STR_6 STRINGIFY(PER_OSR5)
 XLAT(PER_WYSEV386),
 #define XLAT_VAL_7 ((unsigned) (PER_WYSEV386))
 #define XLAT_STR_7 STRINGIFY(PER_WYSEV386)
 XLAT(PER_ISCR4),
 #define XLAT_VAL_8 ((unsigned) (PER_ISCR4))
 #define XLAT_STR_8 STRINGIFY(PER_ISCR4)
 XLAT(PER_BSD),
 #define XLAT_VAL_9 ((unsigned) (PER_BSD))
 #define XLAT_STR_9 STRINGIFY(PER_BSD)
 XLAT(PER_SUNOS),
 #define XLAT_VAL_10 ((unsigned) (PER_SUNOS))
 #define XLAT_STR_10 STRINGIFY(PER_SUNOS)
 XLAT(PER_XENIX),
 #define XLAT_VAL_11 ((unsigned) (PER_XENIX))
 #define XLAT_STR_11 STRINGIFY(PER_XENIX)
 XLAT(PER_LINUX32),
 #define XLAT_VAL_12 ((unsigned) (PER_LINUX32))
 #define XLAT_STR_12 STRINGIFY(PER_LINUX32)
 XLAT(PER_LINUX32_3GB),
 #define XLAT_VAL_13 ((unsigned) (PER_LINUX32_3GB))
 #define XLAT_STR_13 STRINGIFY(PER_LINUX32_3GB)
 XLAT(PER_IRIX32),
 #define XLAT_VAL_14 ((unsigned) (PER_IRIX32))
 #define XLAT_STR_14 STRINGIFY(PER_IRIX32)
 XLAT(PER_IRIXN32),
 #define XLAT_VAL_15 ((unsigned) (PER_IRIXN32))
 #define XLAT_STR_15 STRINGIFY(PER_IRIXN32)
 XLAT(PER_IRIX64),
 #define XLAT_VAL_16 ((unsigned) (PER_IRIX64))
 #define XLAT_STR_16 STRINGIFY(PER_IRIX64)
 XLAT(PER_RISCOS),
 #define XLAT_VAL_17 ((unsigned) (PER_RISCOS))
 #define XLAT_STR_17 STRINGIFY(PER_RISCOS)
 XLAT(PER_SOLARIS),
 #define XLAT_VAL_18 ((unsigned) (PER_SOLARIS))
 #define XLAT_STR_18 STRINGIFY(PER_SOLARIS)
 XLAT(PER_UW7),
 #define XLAT_VAL_19 ((unsigned) (PER_UW7))
 #define XLAT_STR_19 STRINGIFY(PER_UW7)
 XLAT(PER_OSF4),
 #define XLAT_VAL_20 ((unsigned) (PER_OSF4))
 #define XLAT_STR_20 STRINGIFY(PER_OSF4)
 XLAT(PER_HPUX),
 #define XLAT_VAL_21 ((unsigned) (PER_HPUX))
 #define XLAT_STR_21 STRINGIFY(PER_HPUX)
 XLAT(PER_MASK),
 #define XLAT_VAL_22 ((unsigned) (PER_MASK))
 #define XLAT_STR_22 STRINGIFY(PER_MASK)
};
static
const struct xlat personality_types[1] = { {
 .data = personality_types_xdata,
 .size = ARRAY_SIZE(personality_types_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
