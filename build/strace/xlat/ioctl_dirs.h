/* Generated by ./src/xlat/gen.sh from ./src/xlat/ioctl_dirs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ioctl_dirs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data ioctl_dirs_xdata[] = {
#if defined(_IOC_NONE) || (defined(HAVE_DECL__IOC_NONE) && HAVE_DECL__IOC_NONE)
  XLAT(_IOC_NONE),
 #define XLAT_VAL_0 ((unsigned) (_IOC_NONE))
 #define XLAT_STR_0 STRINGIFY(_IOC_NONE)
#endif
#if defined(_IOC_READ) || (defined(HAVE_DECL__IOC_READ) && HAVE_DECL__IOC_READ)
  XLAT(_IOC_READ),
 #define XLAT_VAL_1 ((unsigned) (_IOC_READ))
 #define XLAT_STR_1 STRINGIFY(_IOC_READ)
#endif
#if defined(_IOC_WRITE) || (defined(HAVE_DECL__IOC_WRITE) && HAVE_DECL__IOC_WRITE)
  XLAT(_IOC_WRITE),
 #define XLAT_VAL_2 ((unsigned) (_IOC_WRITE))
 #define XLAT_STR_2 STRINGIFY(_IOC_WRITE)
#endif
};
static
const struct xlat ioctl_dirs[1] = { {
 .data = ioctl_dirs_xdata,
 .size = ARRAY_SIZE(ioctl_dirs_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
