/* Generated by ./src/xlat/gen.sh from ./src/xlat/btrfs_key_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_INODE_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_INODE_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_INODE_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_INODE_REF_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_INODE_REF_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_INODE_REF_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_INODE_EXTREF_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_INODE_EXTREF_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_INODE_EXTREF_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_XATTR_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_XATTR_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_XATTR_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_VERITY_DESC_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_VERITY_DESC_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_VERITY_DESC_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_VERITY_MERKLE_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_VERITY_MERKLE_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_VERITY_MERKLE_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_ORPHAN_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_ORPHAN_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_ORPHAN_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_DIR_LOG_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_DIR_LOG_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_DIR_LOG_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_DIR_LOG_INDEX_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_DIR_LOG_INDEX_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_DIR_LOG_INDEX_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_DIR_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_DIR_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_DIR_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_DIR_INDEX_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_DIR_INDEX_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_DIR_INDEX_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_EXTENT_DATA_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_EXTENT_DATA_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_EXTENT_DATA_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_EXTENT_CSUM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_EXTENT_CSUM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_EXTENT_CSUM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_ROOT_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_ROOT_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_ROOT_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_ROOT_BACKREF_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_ROOT_BACKREF_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_ROOT_BACKREF_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_ROOT_REF_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_ROOT_REF_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_ROOT_REF_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_EXTENT_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_EXTENT_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_EXTENT_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_METADATA_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_METADATA_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_METADATA_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_TREE_BLOCK_REF_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_TREE_BLOCK_REF_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_TREE_BLOCK_REF_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_EXTENT_DATA_REF_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_EXTENT_DATA_REF_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_EXTENT_DATA_REF_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_EXTENT_REF_V0_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_EXTENT_REF_V0_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_EXTENT_REF_V0_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_SHARED_BLOCK_REF_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_SHARED_BLOCK_REF_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_SHARED_BLOCK_REF_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_SHARED_DATA_REF_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_SHARED_DATA_REF_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_SHARED_DATA_REF_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_BLOCK_GROUP_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_BLOCK_GROUP_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_BLOCK_GROUP_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_FREE_SPACE_INFO_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_FREE_SPACE_INFO_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_FREE_SPACE_INFO_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_FREE_SPACE_EXTENT_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_FREE_SPACE_EXTENT_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_FREE_SPACE_EXTENT_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_FREE_SPACE_BITMAP_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_FREE_SPACE_BITMAP_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_FREE_SPACE_BITMAP_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_DEV_EXTENT_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_DEV_EXTENT_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_DEV_EXTENT_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_DEV_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_DEV_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_DEV_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_CHUNK_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_CHUNK_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_CHUNK_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_QGROUP_STATUS_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_QGROUP_STATUS_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_QGROUP_STATUS_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_QGROUP_INFO_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_QGROUP_INFO_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_QGROUP_INFO_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_QGROUP_LIMIT_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_QGROUP_LIMIT_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_QGROUP_LIMIT_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_QGROUP_RELATION_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_QGROUP_RELATION_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_QGROUP_RELATION_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_TEMPORARY_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_TEMPORARY_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_TEMPORARY_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_PERSISTENT_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_PERSISTENT_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_PERSISTENT_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_DEV_REPLACE_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_DEV_REPLACE_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_DEV_REPLACE_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_UUID_KEY_SUBVOL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_UUID_KEY_SUBVOL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_UUID_KEY_SUBVOL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_UUID_KEY_RECEIVED_SUBVOL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_UUID_KEY_RECEIVED_SUBVOL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_UUID_KEY_RECEIVED_SUBVOL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_STRING_ITEM_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_STRING_ITEM_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_STRING_ITEM_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (UINT32_MAX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: UINT32_MAX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (UINT32_MAX)
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat btrfs_key_types[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data btrfs_key_types_xdata[] = {
 XLAT_TYPE(uint64_t, BTRFS_INODE_ITEM_KEY),
 #define XLAT_VAL_0 ((uint64_t) (BTRFS_INODE_ITEM_KEY))
 #define XLAT_STR_0 STRINGIFY(BTRFS_INODE_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_INODE_REF_KEY),
 #define XLAT_VAL_1 ((uint64_t) (BTRFS_INODE_REF_KEY))
 #define XLAT_STR_1 STRINGIFY(BTRFS_INODE_REF_KEY)
 XLAT_TYPE(uint64_t, BTRFS_INODE_EXTREF_KEY),
 #define XLAT_VAL_2 ((uint64_t) (BTRFS_INODE_EXTREF_KEY))
 #define XLAT_STR_2 STRINGIFY(BTRFS_INODE_EXTREF_KEY)
 XLAT_TYPE(uint64_t, BTRFS_XATTR_ITEM_KEY),
 #define XLAT_VAL_3 ((uint64_t) (BTRFS_XATTR_ITEM_KEY))
 #define XLAT_STR_3 STRINGIFY(BTRFS_XATTR_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_VERITY_DESC_ITEM_KEY),
 #define XLAT_VAL_4 ((uint64_t) (BTRFS_VERITY_DESC_ITEM_KEY))
 #define XLAT_STR_4 STRINGIFY(BTRFS_VERITY_DESC_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_VERITY_MERKLE_ITEM_KEY),
 #define XLAT_VAL_5 ((uint64_t) (BTRFS_VERITY_MERKLE_ITEM_KEY))
 #define XLAT_STR_5 STRINGIFY(BTRFS_VERITY_MERKLE_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_ORPHAN_ITEM_KEY),
 #define XLAT_VAL_6 ((uint64_t) (BTRFS_ORPHAN_ITEM_KEY))
 #define XLAT_STR_6 STRINGIFY(BTRFS_ORPHAN_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_DIR_LOG_ITEM_KEY),
 #define XLAT_VAL_7 ((uint64_t) (BTRFS_DIR_LOG_ITEM_KEY))
 #define XLAT_STR_7 STRINGIFY(BTRFS_DIR_LOG_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_DIR_LOG_INDEX_KEY),
 #define XLAT_VAL_8 ((uint64_t) (BTRFS_DIR_LOG_INDEX_KEY))
 #define XLAT_STR_8 STRINGIFY(BTRFS_DIR_LOG_INDEX_KEY)
 XLAT_TYPE(uint64_t, BTRFS_DIR_ITEM_KEY),
 #define XLAT_VAL_9 ((uint64_t) (BTRFS_DIR_ITEM_KEY))
 #define XLAT_STR_9 STRINGIFY(BTRFS_DIR_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_DIR_INDEX_KEY),
 #define XLAT_VAL_10 ((uint64_t) (BTRFS_DIR_INDEX_KEY))
 #define XLAT_STR_10 STRINGIFY(BTRFS_DIR_INDEX_KEY)
 XLAT_TYPE(uint64_t, BTRFS_EXTENT_DATA_KEY),
 #define XLAT_VAL_11 ((uint64_t) (BTRFS_EXTENT_DATA_KEY))
 #define XLAT_STR_11 STRINGIFY(BTRFS_EXTENT_DATA_KEY)
 XLAT_TYPE(uint64_t, BTRFS_EXTENT_CSUM_KEY),
 #define XLAT_VAL_12 ((uint64_t) (BTRFS_EXTENT_CSUM_KEY))
 #define XLAT_STR_12 STRINGIFY(BTRFS_EXTENT_CSUM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_ROOT_ITEM_KEY),
 #define XLAT_VAL_13 ((uint64_t) (BTRFS_ROOT_ITEM_KEY))
 #define XLAT_STR_13 STRINGIFY(BTRFS_ROOT_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_ROOT_BACKREF_KEY),
 #define XLAT_VAL_14 ((uint64_t) (BTRFS_ROOT_BACKREF_KEY))
 #define XLAT_STR_14 STRINGIFY(BTRFS_ROOT_BACKREF_KEY)
 XLAT_TYPE(uint64_t, BTRFS_ROOT_REF_KEY),
 #define XLAT_VAL_15 ((uint64_t) (BTRFS_ROOT_REF_KEY))
 #define XLAT_STR_15 STRINGIFY(BTRFS_ROOT_REF_KEY)
 XLAT_TYPE(uint64_t, BTRFS_EXTENT_ITEM_KEY),
 #define XLAT_VAL_16 ((uint64_t) (BTRFS_EXTENT_ITEM_KEY))
 #define XLAT_STR_16 STRINGIFY(BTRFS_EXTENT_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_METADATA_ITEM_KEY),
 #define XLAT_VAL_17 ((uint64_t) (BTRFS_METADATA_ITEM_KEY))
 #define XLAT_STR_17 STRINGIFY(BTRFS_METADATA_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_TREE_BLOCK_REF_KEY),
 #define XLAT_VAL_18 ((uint64_t) (BTRFS_TREE_BLOCK_REF_KEY))
 #define XLAT_STR_18 STRINGIFY(BTRFS_TREE_BLOCK_REF_KEY)
 XLAT_TYPE(uint64_t, BTRFS_EXTENT_DATA_REF_KEY),
 #define XLAT_VAL_19 ((uint64_t) (BTRFS_EXTENT_DATA_REF_KEY))
 #define XLAT_STR_19 STRINGIFY(BTRFS_EXTENT_DATA_REF_KEY)
 XLAT_TYPE(uint64_t, BTRFS_EXTENT_REF_V0_KEY),
 #define XLAT_VAL_20 ((uint64_t) (BTRFS_EXTENT_REF_V0_KEY))
 #define XLAT_STR_20 STRINGIFY(BTRFS_EXTENT_REF_V0_KEY)
 XLAT_TYPE(uint64_t, BTRFS_SHARED_BLOCK_REF_KEY),
 #define XLAT_VAL_21 ((uint64_t) (BTRFS_SHARED_BLOCK_REF_KEY))
 #define XLAT_STR_21 STRINGIFY(BTRFS_SHARED_BLOCK_REF_KEY)
 XLAT_TYPE(uint64_t, BTRFS_SHARED_DATA_REF_KEY),
 #define XLAT_VAL_22 ((uint64_t) (BTRFS_SHARED_DATA_REF_KEY))
 #define XLAT_STR_22 STRINGIFY(BTRFS_SHARED_DATA_REF_KEY)
 XLAT_TYPE(uint64_t, BTRFS_BLOCK_GROUP_ITEM_KEY),
 #define XLAT_VAL_23 ((uint64_t) (BTRFS_BLOCK_GROUP_ITEM_KEY))
 #define XLAT_STR_23 STRINGIFY(BTRFS_BLOCK_GROUP_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_FREE_SPACE_INFO_KEY),
 #define XLAT_VAL_24 ((uint64_t) (BTRFS_FREE_SPACE_INFO_KEY))
 #define XLAT_STR_24 STRINGIFY(BTRFS_FREE_SPACE_INFO_KEY)
 XLAT_TYPE(uint64_t, BTRFS_FREE_SPACE_EXTENT_KEY),
 #define XLAT_VAL_25 ((uint64_t) (BTRFS_FREE_SPACE_EXTENT_KEY))
 #define XLAT_STR_25 STRINGIFY(BTRFS_FREE_SPACE_EXTENT_KEY)
 XLAT_TYPE(uint64_t, BTRFS_FREE_SPACE_BITMAP_KEY),
 #define XLAT_VAL_26 ((uint64_t) (BTRFS_FREE_SPACE_BITMAP_KEY))
 #define XLAT_STR_26 STRINGIFY(BTRFS_FREE_SPACE_BITMAP_KEY)
 XLAT_TYPE(uint64_t, BTRFS_DEV_EXTENT_KEY),
 #define XLAT_VAL_27 ((uint64_t) (BTRFS_DEV_EXTENT_KEY))
 #define XLAT_STR_27 STRINGIFY(BTRFS_DEV_EXTENT_KEY)
 XLAT_TYPE(uint64_t, BTRFS_DEV_ITEM_KEY),
 #define XLAT_VAL_28 ((uint64_t) (BTRFS_DEV_ITEM_KEY))
 #define XLAT_STR_28 STRINGIFY(BTRFS_DEV_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_CHUNK_ITEM_KEY),
 #define XLAT_VAL_29 ((uint64_t) (BTRFS_CHUNK_ITEM_KEY))
 #define XLAT_STR_29 STRINGIFY(BTRFS_CHUNK_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_STATUS_KEY),
 #define XLAT_VAL_30 ((uint64_t) (BTRFS_QGROUP_STATUS_KEY))
 #define XLAT_STR_30 STRINGIFY(BTRFS_QGROUP_STATUS_KEY)
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_INFO_KEY),
 #define XLAT_VAL_31 ((uint64_t) (BTRFS_QGROUP_INFO_KEY))
 #define XLAT_STR_31 STRINGIFY(BTRFS_QGROUP_INFO_KEY)
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_LIMIT_KEY),
 #define XLAT_VAL_32 ((uint64_t) (BTRFS_QGROUP_LIMIT_KEY))
 #define XLAT_STR_32 STRINGIFY(BTRFS_QGROUP_LIMIT_KEY)
 XLAT_TYPE(uint64_t, BTRFS_QGROUP_RELATION_KEY),
 #define XLAT_VAL_33 ((uint64_t) (BTRFS_QGROUP_RELATION_KEY))
 #define XLAT_STR_33 STRINGIFY(BTRFS_QGROUP_RELATION_KEY)
 XLAT_TYPE(uint64_t, BTRFS_TEMPORARY_ITEM_KEY),
 #define XLAT_VAL_34 ((uint64_t) (BTRFS_TEMPORARY_ITEM_KEY))
 #define XLAT_STR_34 STRINGIFY(BTRFS_TEMPORARY_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_PERSISTENT_ITEM_KEY),
 #define XLAT_VAL_35 ((uint64_t) (BTRFS_PERSISTENT_ITEM_KEY))
 #define XLAT_STR_35 STRINGIFY(BTRFS_PERSISTENT_ITEM_KEY)
 XLAT_TYPE(uint64_t, BTRFS_DEV_REPLACE_KEY),
 #define XLAT_VAL_36 ((uint64_t) (BTRFS_DEV_REPLACE_KEY))
 #define XLAT_STR_36 STRINGIFY(BTRFS_DEV_REPLACE_KEY)
 XLAT_TYPE(uint64_t, BTRFS_UUID_KEY_SUBVOL),
 #define XLAT_VAL_37 ((uint64_t) (BTRFS_UUID_KEY_SUBVOL))
 #define XLAT_STR_37 STRINGIFY(BTRFS_UUID_KEY_SUBVOL)
 XLAT_TYPE(uint64_t, BTRFS_UUID_KEY_RECEIVED_SUBVOL),
 #define XLAT_VAL_38 ((uint64_t) (BTRFS_UUID_KEY_RECEIVED_SUBVOL))
 #define XLAT_STR_38 STRINGIFY(BTRFS_UUID_KEY_RECEIVED_SUBVOL)
 XLAT_TYPE(uint64_t, BTRFS_STRING_ITEM_KEY),
 #define XLAT_VAL_39 ((uint64_t) (BTRFS_STRING_ITEM_KEY))
 #define XLAT_STR_39 STRINGIFY(BTRFS_STRING_ITEM_KEY)
 XLAT_TYPE(uint64_t, UINT32_MAX),
 #define XLAT_VAL_40 ((uint64_t) (UINT32_MAX))
 #define XLAT_STR_40 STRINGIFY(UINT32_MAX)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat btrfs_key_types[1] = { {
 .data = btrfs_key_types_xdata,
 .size = ARRAY_SIZE(btrfs_key_types_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
