/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtnl_rta_metrics_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_rta_metrics_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtnl_rta_metrics_attrs_xdata[] = {
 [RTAX_UNSPEC] = XLAT(RTAX_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (RTAX_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(RTAX_UNSPEC)
 [RTAX_LOCK] = XLAT(RTAX_LOCK),
 #define XLAT_VAL_1 ((unsigned) (RTAX_LOCK))
 #define XLAT_STR_1 STRINGIFY(RTAX_LOCK)
 [RTAX_MTU] = XLAT(RTAX_MTU),
 #define XLAT_VAL_2 ((unsigned) (RTAX_MTU))
 #define XLAT_STR_2 STRINGIFY(RTAX_MTU)
 [RTAX_WINDOW] = XLAT(RTAX_WINDOW),
 #define XLAT_VAL_3 ((unsigned) (RTAX_WINDOW))
 #define XLAT_STR_3 STRINGIFY(RTAX_WINDOW)
 [RTAX_RTT] = XLAT(RTAX_RTT),
 #define XLAT_VAL_4 ((unsigned) (RTAX_RTT))
 #define XLAT_STR_4 STRINGIFY(RTAX_RTT)
 [RTAX_RTTVAR] = XLAT(RTAX_RTTVAR),
 #define XLAT_VAL_5 ((unsigned) (RTAX_RTTVAR))
 #define XLAT_STR_5 STRINGIFY(RTAX_RTTVAR)
 [RTAX_SSTHRESH] = XLAT(RTAX_SSTHRESH),
 #define XLAT_VAL_6 ((unsigned) (RTAX_SSTHRESH))
 #define XLAT_STR_6 STRINGIFY(RTAX_SSTHRESH)
 [RTAX_CWND] = XLAT(RTAX_CWND),
 #define XLAT_VAL_7 ((unsigned) (RTAX_CWND))
 #define XLAT_STR_7 STRINGIFY(RTAX_CWND)
 [RTAX_ADVMSS] = XLAT(RTAX_ADVMSS),
 #define XLAT_VAL_8 ((unsigned) (RTAX_ADVMSS))
 #define XLAT_STR_8 STRINGIFY(RTAX_ADVMSS)
 [RTAX_REORDERING] = XLAT(RTAX_REORDERING),
 #define XLAT_VAL_9 ((unsigned) (RTAX_REORDERING))
 #define XLAT_STR_9 STRINGIFY(RTAX_REORDERING)
 [RTAX_HOPLIMIT] = XLAT(RTAX_HOPLIMIT),
 #define XLAT_VAL_10 ((unsigned) (RTAX_HOPLIMIT))
 #define XLAT_STR_10 STRINGIFY(RTAX_HOPLIMIT)
 [RTAX_INITCWND] = XLAT(RTAX_INITCWND),
 #define XLAT_VAL_11 ((unsigned) (RTAX_INITCWND))
 #define XLAT_STR_11 STRINGIFY(RTAX_INITCWND)
 [RTAX_FEATURES] = XLAT(RTAX_FEATURES),
 #define XLAT_VAL_12 ((unsigned) (RTAX_FEATURES))
 #define XLAT_STR_12 STRINGIFY(RTAX_FEATURES)
 [RTAX_RTO_MIN] = XLAT(RTAX_RTO_MIN),
 #define XLAT_VAL_13 ((unsigned) (RTAX_RTO_MIN))
 #define XLAT_STR_13 STRINGIFY(RTAX_RTO_MIN)
 [RTAX_INITRWND] = XLAT(RTAX_INITRWND),
 #define XLAT_VAL_14 ((unsigned) (RTAX_INITRWND))
 #define XLAT_STR_14 STRINGIFY(RTAX_INITRWND)
 [RTAX_QUICKACK] = XLAT(RTAX_QUICKACK),
 #define XLAT_VAL_15 ((unsigned) (RTAX_QUICKACK))
 #define XLAT_STR_15 STRINGIFY(RTAX_QUICKACK)
 [RTAX_CC_ALGO] = XLAT(RTAX_CC_ALGO),
 #define XLAT_VAL_16 ((unsigned) (RTAX_CC_ALGO))
 #define XLAT_STR_16 STRINGIFY(RTAX_CC_ALGO)
 [RTAX_FASTOPEN_NO_COOKIE] = XLAT(RTAX_FASTOPEN_NO_COOKIE),
 #define XLAT_VAL_17 ((unsigned) (RTAX_FASTOPEN_NO_COOKIE))
 #define XLAT_STR_17 STRINGIFY(RTAX_FASTOPEN_NO_COOKIE)
};
static
const struct xlat rtnl_rta_metrics_attrs[1] = { {
 .data = rtnl_rta_metrics_attrs_xdata,
 .size = ARRAY_SIZE(rtnl_rta_metrics_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
