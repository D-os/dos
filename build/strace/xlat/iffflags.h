/* Generated by ./src/xlat/gen.sh from ./src/xlat/iffflags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(IFF_UP) || (defined(HAVE_DECL_IFF_UP) && HAVE_DECL_IFF_UP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_UP) == ((1 << 0)), "IFF_UP != (1 << 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_UP (1 << 0)
#endif
#if defined(IFF_UP) || (defined(HAVE_DECL_IFF_UP) && HAVE_DECL_IFF_UP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_UP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_UP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_UP)
#endif
#if defined(IFF_BROADCAST) || (defined(HAVE_DECL_IFF_BROADCAST) && HAVE_DECL_IFF_BROADCAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_BROADCAST) == ((1 << 1)), "IFF_BROADCAST != (1 << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_BROADCAST (1 << 1)
#endif
#if defined(IFF_BROADCAST) || (defined(HAVE_DECL_IFF_BROADCAST) && HAVE_DECL_IFF_BROADCAST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_BROADCAST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_BROADCAST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_BROADCAST)
#endif
#if defined(IFF_DEBUG) || (defined(HAVE_DECL_IFF_DEBUG) && HAVE_DECL_IFF_DEBUG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_DEBUG) == ((1 << 2)), "IFF_DEBUG != (1 << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_DEBUG (1 << 2)
#endif
#if defined(IFF_DEBUG) || (defined(HAVE_DECL_IFF_DEBUG) && HAVE_DECL_IFF_DEBUG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_DEBUG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_DEBUG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_DEBUG)
#endif
#if defined(IFF_LOOPBACK) || (defined(HAVE_DECL_IFF_LOOPBACK) && HAVE_DECL_IFF_LOOPBACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_LOOPBACK) == ((1 << 3)), "IFF_LOOPBACK != (1 << 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_LOOPBACK (1 << 3)
#endif
#if defined(IFF_LOOPBACK) || (defined(HAVE_DECL_IFF_LOOPBACK) && HAVE_DECL_IFF_LOOPBACK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_LOOPBACK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_LOOPBACK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_LOOPBACK)
#endif
#if defined(IFF_POINTOPOINT) || (defined(HAVE_DECL_IFF_POINTOPOINT) && HAVE_DECL_IFF_POINTOPOINT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_POINTOPOINT) == ((1 << 4)), "IFF_POINTOPOINT != (1 << 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_POINTOPOINT (1 << 4)
#endif
#if defined(IFF_POINTOPOINT) || (defined(HAVE_DECL_IFF_POINTOPOINT) && HAVE_DECL_IFF_POINTOPOINT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_POINTOPOINT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_POINTOPOINT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_POINTOPOINT)
#endif
#if defined(IFF_NOTRAILERS) || (defined(HAVE_DECL_IFF_NOTRAILERS) && HAVE_DECL_IFF_NOTRAILERS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_NOTRAILERS) == ((1 << 5)), "IFF_NOTRAILERS != (1 << 5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_NOTRAILERS (1 << 5)
#endif
#if defined(IFF_NOTRAILERS) || (defined(HAVE_DECL_IFF_NOTRAILERS) && HAVE_DECL_IFF_NOTRAILERS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_NOTRAILERS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_NOTRAILERS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_NOTRAILERS)
#endif
#if defined(IFF_RUNNING) || (defined(HAVE_DECL_IFF_RUNNING) && HAVE_DECL_IFF_RUNNING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_RUNNING) == ((1 << 6)), "IFF_RUNNING != (1 << 6)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_RUNNING (1 << 6)
#endif
#if defined(IFF_RUNNING) || (defined(HAVE_DECL_IFF_RUNNING) && HAVE_DECL_IFF_RUNNING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_RUNNING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_RUNNING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_RUNNING)
#endif
#if defined(IFF_NOARP) || (defined(HAVE_DECL_IFF_NOARP) && HAVE_DECL_IFF_NOARP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_NOARP) == ((1 << 7)), "IFF_NOARP != (1 << 7)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_NOARP (1 << 7)
#endif
#if defined(IFF_NOARP) || (defined(HAVE_DECL_IFF_NOARP) && HAVE_DECL_IFF_NOARP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_NOARP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_NOARP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_NOARP)
#endif
#if defined(IFF_PROMISC) || (defined(HAVE_DECL_IFF_PROMISC) && HAVE_DECL_IFF_PROMISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_PROMISC) == ((1 << 8)), "IFF_PROMISC != (1 << 8)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_PROMISC (1 << 8)
#endif
#if defined(IFF_PROMISC) || (defined(HAVE_DECL_IFF_PROMISC) && HAVE_DECL_IFF_PROMISC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_PROMISC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_PROMISC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_PROMISC)
#endif
#if defined(IFF_ALLMULTI) || (defined(HAVE_DECL_IFF_ALLMULTI) && HAVE_DECL_IFF_ALLMULTI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_ALLMULTI) == ((1 << 9)), "IFF_ALLMULTI != (1 << 9)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_ALLMULTI (1 << 9)
#endif
#if defined(IFF_ALLMULTI) || (defined(HAVE_DECL_IFF_ALLMULTI) && HAVE_DECL_IFF_ALLMULTI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_ALLMULTI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_ALLMULTI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_ALLMULTI)
#endif
#if defined(IFF_MASTER) || (defined(HAVE_DECL_IFF_MASTER) && HAVE_DECL_IFF_MASTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_MASTER) == ((1 << 10)), "IFF_MASTER != (1 << 10)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_MASTER (1 << 10)
#endif
#if defined(IFF_MASTER) || (defined(HAVE_DECL_IFF_MASTER) && HAVE_DECL_IFF_MASTER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_MASTER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_MASTER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_MASTER)
#endif
#if defined(IFF_SLAVE) || (defined(HAVE_DECL_IFF_SLAVE) && HAVE_DECL_IFF_SLAVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_SLAVE) == ((1 << 11)), "IFF_SLAVE != (1 << 11)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_SLAVE (1 << 11)
#endif
#if defined(IFF_SLAVE) || (defined(HAVE_DECL_IFF_SLAVE) && HAVE_DECL_IFF_SLAVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_SLAVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_SLAVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_SLAVE)
#endif
#if defined(IFF_MULTICAST) || (defined(HAVE_DECL_IFF_MULTICAST) && HAVE_DECL_IFF_MULTICAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_MULTICAST) == ((1 << 12)), "IFF_MULTICAST != (1 << 12)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_MULTICAST (1 << 12)
#endif
#if defined(IFF_MULTICAST) || (defined(HAVE_DECL_IFF_MULTICAST) && HAVE_DECL_IFF_MULTICAST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_MULTICAST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_MULTICAST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_MULTICAST)
#endif
#if defined(IFF_PORTSEL) || (defined(HAVE_DECL_IFF_PORTSEL) && HAVE_DECL_IFF_PORTSEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_PORTSEL) == ((1 << 13)), "IFF_PORTSEL != (1 << 13)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_PORTSEL (1 << 13)
#endif
#if defined(IFF_PORTSEL) || (defined(HAVE_DECL_IFF_PORTSEL) && HAVE_DECL_IFF_PORTSEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_PORTSEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_PORTSEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_PORTSEL)
#endif
#if defined(IFF_AUTOMEDIA) || (defined(HAVE_DECL_IFF_AUTOMEDIA) && HAVE_DECL_IFF_AUTOMEDIA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_AUTOMEDIA) == ((1 << 14)), "IFF_AUTOMEDIA != (1 << 14)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_AUTOMEDIA (1 << 14)
#endif
#if defined(IFF_AUTOMEDIA) || (defined(HAVE_DECL_IFF_AUTOMEDIA) && HAVE_DECL_IFF_AUTOMEDIA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_AUTOMEDIA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_AUTOMEDIA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_AUTOMEDIA)
#endif
#if defined(IFF_DYNAMIC) || (defined(HAVE_DECL_IFF_DYNAMIC) && HAVE_DECL_IFF_DYNAMIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_DYNAMIC) == ((1 << 15)), "IFF_DYNAMIC != (1 << 15)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_DYNAMIC (1 << 15)
#endif
#if defined(IFF_DYNAMIC) || (defined(HAVE_DECL_IFF_DYNAMIC) && HAVE_DECL_IFF_DYNAMIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_DYNAMIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_DYNAMIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_DYNAMIC)
#endif
#if defined(IFF_LOWER_UP) || (defined(HAVE_DECL_IFF_LOWER_UP) && HAVE_DECL_IFF_LOWER_UP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_LOWER_UP) == ((1 << 16)), "IFF_LOWER_UP != (1 << 16)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_LOWER_UP (1 << 16)
#endif
#if defined(IFF_LOWER_UP) || (defined(HAVE_DECL_IFF_LOWER_UP) && HAVE_DECL_IFF_LOWER_UP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_LOWER_UP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_LOWER_UP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_LOWER_UP)
#endif
#if defined(IFF_DORMANT) || (defined(HAVE_DECL_IFF_DORMANT) && HAVE_DECL_IFF_DORMANT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_DORMANT) == ((1 << 17)), "IFF_DORMANT != (1 << 17)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_DORMANT (1 << 17)
#endif
#if defined(IFF_DORMANT) || (defined(HAVE_DECL_IFF_DORMANT) && HAVE_DECL_IFF_DORMANT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_DORMANT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_DORMANT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_DORMANT)
#endif
#if defined(IFF_ECHO) || (defined(HAVE_DECL_IFF_ECHO) && HAVE_DECL_IFF_ECHO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IFF_ECHO) == ((1 << 18)), "IFF_ECHO != (1 << 18)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IFF_ECHO (1 << 18)
#endif
#if defined(IFF_ECHO) || (defined(HAVE_DECL_IFF_ECHO) && HAVE_DECL_IFF_ECHO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (IFF_ECHO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: IFF_ECHO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (IFF_ECHO)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data iffflags_xdata[] = {
 XLAT(IFF_UP),
 #define XLAT_VAL_0 ((unsigned) (IFF_UP))
 #define XLAT_STR_0 STRINGIFY(IFF_UP)
 XLAT(IFF_BROADCAST),
 #define XLAT_VAL_1 ((unsigned) (IFF_BROADCAST))
 #define XLAT_STR_1 STRINGIFY(IFF_BROADCAST)
 XLAT(IFF_DEBUG),
 #define XLAT_VAL_2 ((unsigned) (IFF_DEBUG))
 #define XLAT_STR_2 STRINGIFY(IFF_DEBUG)
 XLAT(IFF_LOOPBACK),
 #define XLAT_VAL_3 ((unsigned) (IFF_LOOPBACK))
 #define XLAT_STR_3 STRINGIFY(IFF_LOOPBACK)
 XLAT(IFF_POINTOPOINT),
 #define XLAT_VAL_4 ((unsigned) (IFF_POINTOPOINT))
 #define XLAT_STR_4 STRINGIFY(IFF_POINTOPOINT)
 XLAT(IFF_NOTRAILERS),
 #define XLAT_VAL_5 ((unsigned) (IFF_NOTRAILERS))
 #define XLAT_STR_5 STRINGIFY(IFF_NOTRAILERS)
 XLAT(IFF_RUNNING),
 #define XLAT_VAL_6 ((unsigned) (IFF_RUNNING))
 #define XLAT_STR_6 STRINGIFY(IFF_RUNNING)
 XLAT(IFF_NOARP),
 #define XLAT_VAL_7 ((unsigned) (IFF_NOARP))
 #define XLAT_STR_7 STRINGIFY(IFF_NOARP)
 XLAT(IFF_PROMISC),
 #define XLAT_VAL_8 ((unsigned) (IFF_PROMISC))
 #define XLAT_STR_8 STRINGIFY(IFF_PROMISC)
 XLAT(IFF_ALLMULTI),
 #define XLAT_VAL_9 ((unsigned) (IFF_ALLMULTI))
 #define XLAT_STR_9 STRINGIFY(IFF_ALLMULTI)
 XLAT(IFF_MASTER),
 #define XLAT_VAL_10 ((unsigned) (IFF_MASTER))
 #define XLAT_STR_10 STRINGIFY(IFF_MASTER)
 XLAT(IFF_SLAVE),
 #define XLAT_VAL_11 ((unsigned) (IFF_SLAVE))
 #define XLAT_STR_11 STRINGIFY(IFF_SLAVE)
 XLAT(IFF_MULTICAST),
 #define XLAT_VAL_12 ((unsigned) (IFF_MULTICAST))
 #define XLAT_STR_12 STRINGIFY(IFF_MULTICAST)
 XLAT(IFF_PORTSEL),
 #define XLAT_VAL_13 ((unsigned) (IFF_PORTSEL))
 #define XLAT_STR_13 STRINGIFY(IFF_PORTSEL)
 XLAT(IFF_AUTOMEDIA),
 #define XLAT_VAL_14 ((unsigned) (IFF_AUTOMEDIA))
 #define XLAT_STR_14 STRINGIFY(IFF_AUTOMEDIA)
 XLAT(IFF_DYNAMIC),
 #define XLAT_VAL_15 ((unsigned) (IFF_DYNAMIC))
 #define XLAT_STR_15 STRINGIFY(IFF_DYNAMIC)
 XLAT(IFF_LOWER_UP),
 #define XLAT_VAL_16 ((unsigned) (IFF_LOWER_UP))
 #define XLAT_STR_16 STRINGIFY(IFF_LOWER_UP)
 XLAT(IFF_DORMANT),
 #define XLAT_VAL_17 ((unsigned) (IFF_DORMANT))
 #define XLAT_STR_17 STRINGIFY(IFF_DORMANT)
 XLAT(IFF_ECHO),
 #define XLAT_VAL_18 ((unsigned) (IFF_ECHO))
 #define XLAT_STR_18 STRINGIFY(IFF_ECHO)
};
const struct xlat iffflags[1] = { {
 .data = iffflags_xdata,
 .size = ARRAY_SIZE(iffflags_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
