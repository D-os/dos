/* Generated by ./src/xlat/gen.sh from ./src/xlat/routing_protocols.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_UNSPEC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_UNSPEC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_UNSPEC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_REDIRECT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_REDIRECT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_REDIRECT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_KERNEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_KERNEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_KERNEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_BOOT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_BOOT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_BOOT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_STATIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_STATIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_STATIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_GATED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_GATED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_GATED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_RA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_RA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_RA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_MRT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_MRT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_MRT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_ZEBRA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_ZEBRA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_ZEBRA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_BIRD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_BIRD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_BIRD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_DNROUTED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_DNROUTED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_DNROUTED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_XORP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_XORP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_XORP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_NTK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_NTK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_NTK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_DHCP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_DHCP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_DHCP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_MROUTED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_MROUTED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_MROUTED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_KEEPALIVED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_KEEPALIVED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_KEEPALIVED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_BABEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_BABEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_BABEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_OPENR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_OPENR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_OPENR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_BGP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_BGP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_BGP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_ISIS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_ISIS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_ISIS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_OSPF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_OSPF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_OSPF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_RIP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_RIP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_RIP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTPROT_EIGRP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTPROT_EIGRP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTPROT_EIGRP)
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data routing_protocols_xdata[] = {
 XLAT(RTPROT_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (RTPROT_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(RTPROT_UNSPEC)
 XLAT(RTPROT_REDIRECT),
 #define XLAT_VAL_1 ((unsigned) (RTPROT_REDIRECT))
 #define XLAT_STR_1 STRINGIFY(RTPROT_REDIRECT)
 XLAT(RTPROT_KERNEL),
 #define XLAT_VAL_2 ((unsigned) (RTPROT_KERNEL))
 #define XLAT_STR_2 STRINGIFY(RTPROT_KERNEL)
 XLAT(RTPROT_BOOT),
 #define XLAT_VAL_3 ((unsigned) (RTPROT_BOOT))
 #define XLAT_STR_3 STRINGIFY(RTPROT_BOOT)
 XLAT(RTPROT_STATIC),
 #define XLAT_VAL_4 ((unsigned) (RTPROT_STATIC))
 #define XLAT_STR_4 STRINGIFY(RTPROT_STATIC)
 XLAT(RTPROT_GATED),
 #define XLAT_VAL_5 ((unsigned) (RTPROT_GATED))
 #define XLAT_STR_5 STRINGIFY(RTPROT_GATED)
 XLAT(RTPROT_RA),
 #define XLAT_VAL_6 ((unsigned) (RTPROT_RA))
 #define XLAT_STR_6 STRINGIFY(RTPROT_RA)
 XLAT(RTPROT_MRT),
 #define XLAT_VAL_7 ((unsigned) (RTPROT_MRT))
 #define XLAT_STR_7 STRINGIFY(RTPROT_MRT)
 XLAT(RTPROT_ZEBRA),
 #define XLAT_VAL_8 ((unsigned) (RTPROT_ZEBRA))
 #define XLAT_STR_8 STRINGIFY(RTPROT_ZEBRA)
 XLAT(RTPROT_BIRD),
 #define XLAT_VAL_9 ((unsigned) (RTPROT_BIRD))
 #define XLAT_STR_9 STRINGIFY(RTPROT_BIRD)
 XLAT(RTPROT_DNROUTED),
 #define XLAT_VAL_10 ((unsigned) (RTPROT_DNROUTED))
 #define XLAT_STR_10 STRINGIFY(RTPROT_DNROUTED)
 XLAT(RTPROT_XORP),
 #define XLAT_VAL_11 ((unsigned) (RTPROT_XORP))
 #define XLAT_STR_11 STRINGIFY(RTPROT_XORP)
 XLAT(RTPROT_NTK),
 #define XLAT_VAL_12 ((unsigned) (RTPROT_NTK))
 #define XLAT_STR_12 STRINGIFY(RTPROT_NTK)
 XLAT(RTPROT_DHCP),
 #define XLAT_VAL_13 ((unsigned) (RTPROT_DHCP))
 #define XLAT_STR_13 STRINGIFY(RTPROT_DHCP)
 XLAT(RTPROT_MROUTED),
 #define XLAT_VAL_14 ((unsigned) (RTPROT_MROUTED))
 #define XLAT_STR_14 STRINGIFY(RTPROT_MROUTED)
 XLAT(RTPROT_KEEPALIVED),
 #define XLAT_VAL_15 ((unsigned) (RTPROT_KEEPALIVED))
 #define XLAT_STR_15 STRINGIFY(RTPROT_KEEPALIVED)
 XLAT(RTPROT_BABEL),
 #define XLAT_VAL_16 ((unsigned) (RTPROT_BABEL))
 #define XLAT_STR_16 STRINGIFY(RTPROT_BABEL)
 XLAT(RTPROT_OPENR),
 #define XLAT_VAL_17 ((unsigned) (RTPROT_OPENR))
 #define XLAT_STR_17 STRINGIFY(RTPROT_OPENR)
 XLAT(RTPROT_BGP),
 #define XLAT_VAL_18 ((unsigned) (RTPROT_BGP))
 #define XLAT_STR_18 STRINGIFY(RTPROT_BGP)
 XLAT(RTPROT_ISIS),
 #define XLAT_VAL_19 ((unsigned) (RTPROT_ISIS))
 #define XLAT_STR_19 STRINGIFY(RTPROT_ISIS)
 XLAT(RTPROT_OSPF),
 #define XLAT_VAL_20 ((unsigned) (RTPROT_OSPF))
 #define XLAT_STR_20 STRINGIFY(RTPROT_OSPF)
 XLAT(RTPROT_RIP),
 #define XLAT_VAL_21 ((unsigned) (RTPROT_RIP))
 #define XLAT_STR_21 STRINGIFY(RTPROT_RIP)
 XLAT(RTPROT_EIGRP),
 #define XLAT_VAL_22 ((unsigned) (RTPROT_EIGRP))
 #define XLAT_STR_22 STRINGIFY(RTPROT_EIGRP)
};
const struct xlat routing_protocols[1] = { {
 .data = routing_protocols_xdata,
 .size = ARRAY_SIZE(routing_protocols_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
