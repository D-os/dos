/* Generated by ./src/xlat/gen.sh from ./src/xlat/inet_diag_bpf_storage_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SK_DIAG_BPF_STORAGE_NONE) == (0), "SK_DIAG_BPF_STORAGE_NONE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SK_DIAG_BPF_STORAGE_PAD) == (1), "SK_DIAG_BPF_STORAGE_PAD != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SK_DIAG_BPF_STORAGE_MAP_ID) == (2), "SK_DIAG_BPF_STORAGE_MAP_ID != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SK_DIAG_BPF_STORAGE_MAP_VALUE) == (3), "SK_DIAG_BPF_STORAGE_MAP_VALUE != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat inet_diag_bpf_storage_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data inet_diag_bpf_storage_attrs_xdata[] = {
 [SK_DIAG_BPF_STORAGE_NONE] = XLAT(SK_DIAG_BPF_STORAGE_NONE),
 #define XLAT_VAL_0 ((unsigned) (SK_DIAG_BPF_STORAGE_NONE))
 #define XLAT_STR_0 STRINGIFY(SK_DIAG_BPF_STORAGE_NONE)
 [SK_DIAG_BPF_STORAGE_PAD] = XLAT(SK_DIAG_BPF_STORAGE_PAD),
 #define XLAT_VAL_1 ((unsigned) (SK_DIAG_BPF_STORAGE_PAD))
 #define XLAT_STR_1 STRINGIFY(SK_DIAG_BPF_STORAGE_PAD)
 [SK_DIAG_BPF_STORAGE_MAP_ID] = XLAT(SK_DIAG_BPF_STORAGE_MAP_ID),
 #define XLAT_VAL_2 ((unsigned) (SK_DIAG_BPF_STORAGE_MAP_ID))
 #define XLAT_STR_2 STRINGIFY(SK_DIAG_BPF_STORAGE_MAP_ID)
 [SK_DIAG_BPF_STORAGE_MAP_VALUE] = XLAT(SK_DIAG_BPF_STORAGE_MAP_VALUE),
 #define XLAT_VAL_3 ((unsigned) (SK_DIAG_BPF_STORAGE_MAP_VALUE))
 #define XLAT_STR_3 STRINGIFY(SK_DIAG_BPF_STORAGE_MAP_VALUE)
};
static
const struct xlat inet_diag_bpf_storage_attrs[1] = { {
 .data = inet_diag_bpf_storage_attrs_xdata,
 .size = ARRAY_SIZE(inet_diag_bpf_storage_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
