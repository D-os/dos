/* Generated by ./src/xlat/gen.sh from ./src/xlat/futexwakeops.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(FUTEX_OP_SET) || (defined(HAVE_DECL_FUTEX_OP_SET) && HAVE_DECL_FUTEX_OP_SET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FUTEX_OP_SET) == (0), "FUTEX_OP_SET != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FUTEX_OP_SET 0
#endif
#if defined(FUTEX_OP_ADD) || (defined(HAVE_DECL_FUTEX_OP_ADD) && HAVE_DECL_FUTEX_OP_ADD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FUTEX_OP_ADD) == (1), "FUTEX_OP_ADD != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FUTEX_OP_ADD 1
#endif
#if defined(FUTEX_OP_OR) || (defined(HAVE_DECL_FUTEX_OP_OR) && HAVE_DECL_FUTEX_OP_OR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FUTEX_OP_OR) == (2), "FUTEX_OP_OR != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FUTEX_OP_OR 2
#endif
#if defined(FUTEX_OP_ANDN) || (defined(HAVE_DECL_FUTEX_OP_ANDN) && HAVE_DECL_FUTEX_OP_ANDN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FUTEX_OP_ANDN) == (3), "FUTEX_OP_ANDN != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FUTEX_OP_ANDN 3
#endif
#if defined(FUTEX_OP_XOR) || (defined(HAVE_DECL_FUTEX_OP_XOR) && HAVE_DECL_FUTEX_OP_XOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FUTEX_OP_XOR) == (4), "FUTEX_OP_XOR != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FUTEX_OP_XOR 4
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat futexwakeops in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data futexwakeops_xdata[] = {
 [FUTEX_OP_SET] = XLAT(FUTEX_OP_SET),
 #define XLAT_VAL_0 ((unsigned) (FUTEX_OP_SET))
 #define XLAT_STR_0 STRINGIFY(FUTEX_OP_SET)
 [FUTEX_OP_ADD] = XLAT(FUTEX_OP_ADD),
 #define XLAT_VAL_1 ((unsigned) (FUTEX_OP_ADD))
 #define XLAT_STR_1 STRINGIFY(FUTEX_OP_ADD)
 [FUTEX_OP_OR] = XLAT(FUTEX_OP_OR),
 #define XLAT_VAL_2 ((unsigned) (FUTEX_OP_OR))
 #define XLAT_STR_2 STRINGIFY(FUTEX_OP_OR)
 [FUTEX_OP_ANDN] = XLAT(FUTEX_OP_ANDN),
 #define XLAT_VAL_3 ((unsigned) (FUTEX_OP_ANDN))
 #define XLAT_STR_3 STRINGIFY(FUTEX_OP_ANDN)
 [FUTEX_OP_XOR] = XLAT(FUTEX_OP_XOR),
 #define XLAT_VAL_4 ((unsigned) (FUTEX_OP_XOR))
 #define XLAT_STR_4 STRINGIFY(FUTEX_OP_XOR)
};
static
const struct xlat futexwakeops[1] = { {
 .data = futexwakeops_xdata,
 .size = ARRAY_SIZE(futexwakeops_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
