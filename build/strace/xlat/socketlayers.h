/* Generated by ./src/xlat/gen.sh from ./src/xlat/socketlayers.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SOL_IP) || (defined(HAVE_DECL_SOL_IP) && HAVE_DECL_SOL_IP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_IP) == (0), "SOL_IP != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_IP 0
#endif
#if defined(SOL_IP) || (defined(HAVE_DECL_SOL_IP) && HAVE_DECL_SOL_IP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_IP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_IP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_IP)
#endif
#if !(defined __alpha__ || defined __hppa__ || defined __mips__ || defined __sparc__)
#if defined(SOL_SOCKET) || (defined(HAVE_DECL_SOL_SOCKET) && HAVE_DECL_SOL_SOCKET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_SOCKET) == (1), "SOL_SOCKET != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_SOCKET 1
#endif
#if defined(SOL_SOCKET) || (defined(HAVE_DECL_SOL_SOCKET) && HAVE_DECL_SOL_SOCKET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_SOCKET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_SOCKET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_SOCKET)
#endif
#endif
#if defined(SOL_TCP) || (defined(HAVE_DECL_SOL_TCP) && HAVE_DECL_SOL_TCP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_TCP) == (6), "SOL_TCP != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_TCP 6
#endif
#if defined(SOL_TCP) || (defined(HAVE_DECL_SOL_TCP) && HAVE_DECL_SOL_TCP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_TCP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_TCP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_TCP)
#endif
#if defined(SOL_UDP) || (defined(HAVE_DECL_SOL_UDP) && HAVE_DECL_SOL_UDP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_UDP) == (17), "SOL_UDP != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_UDP 17
#endif
#if defined(SOL_UDP) || (defined(HAVE_DECL_SOL_UDP) && HAVE_DECL_SOL_UDP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_UDP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_UDP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_UDP)
#endif
#if defined(AF_VSOCK) || (defined(HAVE_DECL_AF_VSOCK) && HAVE_DECL_AF_VSOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AF_VSOCK) == (40), "AF_VSOCK != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AF_VSOCK 40
#endif
#if defined(AF_VSOCK) || (defined(HAVE_DECL_AF_VSOCK) && HAVE_DECL_AF_VSOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AF_VSOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AF_VSOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AF_VSOCK)
#endif
#if defined(SOL_IPV6) || (defined(HAVE_DECL_SOL_IPV6) && HAVE_DECL_SOL_IPV6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_IPV6) == (41), "SOL_IPV6 != 41");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_IPV6 41
#endif
#if defined(SOL_IPV6) || (defined(HAVE_DECL_SOL_IPV6) && HAVE_DECL_SOL_IPV6)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_IPV6)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_IPV6"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_IPV6)
#endif
#if defined(SOL_ICMPV6) || (defined(HAVE_DECL_SOL_ICMPV6) && HAVE_DECL_SOL_ICMPV6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_ICMPV6) == (58), "SOL_ICMPV6 != 58");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_ICMPV6 58
#endif
#if defined(SOL_ICMPV6) || (defined(HAVE_DECL_SOL_ICMPV6) && HAVE_DECL_SOL_ICMPV6)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_ICMPV6)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_ICMPV6"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_ICMPV6)
#endif
#if defined(SOL_CAN_BASE) || (defined(HAVE_DECL_SOL_CAN_BASE) && HAVE_DECL_SOL_CAN_BASE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_CAN_BASE) == (100), "SOL_CAN_BASE != 100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_CAN_BASE 100
#endif
#if defined(SOL_CAN_BASE) || (defined(HAVE_DECL_SOL_CAN_BASE) && HAVE_DECL_SOL_CAN_BASE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_CAN_BASE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_CAN_BASE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_CAN_BASE)
#endif
#if defined(SOL_CAN_RAW) || (defined(HAVE_DECL_SOL_CAN_RAW) && HAVE_DECL_SOL_CAN_RAW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_CAN_RAW) == (101), "SOL_CAN_RAW != 101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_CAN_RAW 101
#endif
#if defined(SOL_CAN_RAW) || (defined(HAVE_DECL_SOL_CAN_RAW) && HAVE_DECL_SOL_CAN_RAW)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_CAN_RAW)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_CAN_RAW"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_CAN_RAW)
#endif
#if defined(SOL_SCTP) || (defined(HAVE_DECL_SOL_SCTP) && HAVE_DECL_SOL_SCTP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_SCTP) == (132), "SOL_SCTP != 132");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_SCTP 132
#endif
#if defined(SOL_SCTP) || (defined(HAVE_DECL_SOL_SCTP) && HAVE_DECL_SOL_SCTP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_SCTP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_SCTP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_SCTP)
#endif
#if defined(SOL_UDPLITE) || (defined(HAVE_DECL_SOL_UDPLITE) && HAVE_DECL_SOL_UDPLITE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_UDPLITE) == (136), "SOL_UDPLITE != 136");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_UDPLITE 136
#endif
#if defined(SOL_UDPLITE) || (defined(HAVE_DECL_SOL_UDPLITE) && HAVE_DECL_SOL_UDPLITE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_UDPLITE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_UDPLITE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_UDPLITE)
#endif
#if defined(SOL_RAW) || (defined(HAVE_DECL_SOL_RAW) && HAVE_DECL_SOL_RAW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_RAW) == (255), "SOL_RAW != 255");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_RAW 255
#endif
#if defined(SOL_RAW) || (defined(HAVE_DECL_SOL_RAW) && HAVE_DECL_SOL_RAW)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_RAW)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_RAW"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_RAW)
#endif
#if defined(SOL_IPX) || (defined(HAVE_DECL_SOL_IPX) && HAVE_DECL_SOL_IPX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_IPX) == (256), "SOL_IPX != 256");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_IPX 256
#endif
#if defined(SOL_IPX) || (defined(HAVE_DECL_SOL_IPX) && HAVE_DECL_SOL_IPX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_IPX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_IPX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_IPX)
#endif
#if defined(SOL_AX25) || (defined(HAVE_DECL_SOL_AX25) && HAVE_DECL_SOL_AX25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_AX25) == (257), "SOL_AX25 != 257");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_AX25 257
#endif
#if defined(SOL_AX25) || (defined(HAVE_DECL_SOL_AX25) && HAVE_DECL_SOL_AX25)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_AX25)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_AX25"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_AX25)
#endif
#if defined(SOL_ATALK) || (defined(HAVE_DECL_SOL_ATALK) && HAVE_DECL_SOL_ATALK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_ATALK) == (258), "SOL_ATALK != 258");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_ATALK 258
#endif
#if defined(SOL_ATALK) || (defined(HAVE_DECL_SOL_ATALK) && HAVE_DECL_SOL_ATALK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_ATALK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_ATALK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_ATALK)
#endif
#if defined(SOL_NETROM) || (defined(HAVE_DECL_SOL_NETROM) && HAVE_DECL_SOL_NETROM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_NETROM) == (259), "SOL_NETROM != 259");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_NETROM 259
#endif
#if defined(SOL_NETROM) || (defined(HAVE_DECL_SOL_NETROM) && HAVE_DECL_SOL_NETROM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_NETROM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_NETROM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_NETROM)
#endif
#if defined(SOL_ROSE) || (defined(HAVE_DECL_SOL_ROSE) && HAVE_DECL_SOL_ROSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_ROSE) == (260), "SOL_ROSE != 260");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_ROSE 260
#endif
#if defined(SOL_ROSE) || (defined(HAVE_DECL_SOL_ROSE) && HAVE_DECL_SOL_ROSE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_ROSE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_ROSE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_ROSE)
#endif
#if defined(SOL_DECNET) || (defined(HAVE_DECL_SOL_DECNET) && HAVE_DECL_SOL_DECNET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_DECNET) == (261), "SOL_DECNET != 261");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_DECNET 261
#endif
#if defined(SOL_DECNET) || (defined(HAVE_DECL_SOL_DECNET) && HAVE_DECL_SOL_DECNET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_DECNET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_DECNET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_DECNET)
#endif
#if defined(SOL_X25) || (defined(HAVE_DECL_SOL_X25) && HAVE_DECL_SOL_X25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_X25) == (262), "SOL_X25 != 262");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_X25 262
#endif
#if defined(SOL_X25) || (defined(HAVE_DECL_SOL_X25) && HAVE_DECL_SOL_X25)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_X25)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_X25"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_X25)
#endif
#if defined(SOL_PACKET) || (defined(HAVE_DECL_SOL_PACKET) && HAVE_DECL_SOL_PACKET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_PACKET) == (263), "SOL_PACKET != 263");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_PACKET 263
#endif
#if defined(SOL_PACKET) || (defined(HAVE_DECL_SOL_PACKET) && HAVE_DECL_SOL_PACKET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_PACKET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_PACKET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_PACKET)
#endif
#if defined(SOL_ATM) || (defined(HAVE_DECL_SOL_ATM) && HAVE_DECL_SOL_ATM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_ATM) == (264), "SOL_ATM != 264");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_ATM 264
#endif
#if defined(SOL_ATM) || (defined(HAVE_DECL_SOL_ATM) && HAVE_DECL_SOL_ATM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_ATM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_ATM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_ATM)
#endif
#if defined(SOL_AAL) || (defined(HAVE_DECL_SOL_AAL) && HAVE_DECL_SOL_AAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_AAL) == (265), "SOL_AAL != 265");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_AAL 265
#endif
#if defined(SOL_AAL) || (defined(HAVE_DECL_SOL_AAL) && HAVE_DECL_SOL_AAL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_AAL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_AAL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_AAL)
#endif
#if defined(SOL_IRDA) || (defined(HAVE_DECL_SOL_IRDA) && HAVE_DECL_SOL_IRDA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_IRDA) == (266), "SOL_IRDA != 266");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_IRDA 266
#endif
#if defined(SOL_IRDA) || (defined(HAVE_DECL_SOL_IRDA) && HAVE_DECL_SOL_IRDA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_IRDA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_IRDA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_IRDA)
#endif
#if defined(SOL_NETBEUI) || (defined(HAVE_DECL_SOL_NETBEUI) && HAVE_DECL_SOL_NETBEUI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_NETBEUI) == (267), "SOL_NETBEUI != 267");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_NETBEUI 267
#endif
#if defined(SOL_NETBEUI) || (defined(HAVE_DECL_SOL_NETBEUI) && HAVE_DECL_SOL_NETBEUI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_NETBEUI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_NETBEUI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_NETBEUI)
#endif
#if defined(SOL_LLC) || (defined(HAVE_DECL_SOL_LLC) && HAVE_DECL_SOL_LLC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_LLC) == (268), "SOL_LLC != 268");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_LLC 268
#endif
#if defined(SOL_LLC) || (defined(HAVE_DECL_SOL_LLC) && HAVE_DECL_SOL_LLC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_LLC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_LLC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_LLC)
#endif
#if defined(SOL_DCCP) || (defined(HAVE_DECL_SOL_DCCP) && HAVE_DECL_SOL_DCCP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_DCCP) == (269), "SOL_DCCP != 269");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_DCCP 269
#endif
#if defined(SOL_DCCP) || (defined(HAVE_DECL_SOL_DCCP) && HAVE_DECL_SOL_DCCP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_DCCP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_DCCP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_DCCP)
#endif
#if defined(SOL_NETLINK) || (defined(HAVE_DECL_SOL_NETLINK) && HAVE_DECL_SOL_NETLINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_NETLINK) == (270), "SOL_NETLINK != 270");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_NETLINK 270
#endif
#if defined(SOL_NETLINK) || (defined(HAVE_DECL_SOL_NETLINK) && HAVE_DECL_SOL_NETLINK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_NETLINK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_NETLINK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_NETLINK)
#endif
#if defined(SOL_TIPC) || (defined(HAVE_DECL_SOL_TIPC) && HAVE_DECL_SOL_TIPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_TIPC) == (271), "SOL_TIPC != 271");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_TIPC 271
#endif
#if defined(SOL_TIPC) || (defined(HAVE_DECL_SOL_TIPC) && HAVE_DECL_SOL_TIPC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_TIPC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_TIPC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_TIPC)
#endif
#if defined(SOL_RXRPC) || (defined(HAVE_DECL_SOL_RXRPC) && HAVE_DECL_SOL_RXRPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_RXRPC) == (272), "SOL_RXRPC != 272");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_RXRPC 272
#endif
#if defined(SOL_RXRPC) || (defined(HAVE_DECL_SOL_RXRPC) && HAVE_DECL_SOL_RXRPC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_RXRPC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_RXRPC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_RXRPC)
#endif
#if defined(SOL_PPPOL2TP) || (defined(HAVE_DECL_SOL_PPPOL2TP) && HAVE_DECL_SOL_PPPOL2TP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_PPPOL2TP) == (273), "SOL_PPPOL2TP != 273");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_PPPOL2TP 273
#endif
#if defined(SOL_PPPOL2TP) || (defined(HAVE_DECL_SOL_PPPOL2TP) && HAVE_DECL_SOL_PPPOL2TP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_PPPOL2TP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_PPPOL2TP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_PPPOL2TP)
#endif
#if defined(SOL_BLUETOOTH) || (defined(HAVE_DECL_SOL_BLUETOOTH) && HAVE_DECL_SOL_BLUETOOTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_BLUETOOTH) == (274), "SOL_BLUETOOTH != 274");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_BLUETOOTH 274
#endif
#if defined(SOL_BLUETOOTH) || (defined(HAVE_DECL_SOL_BLUETOOTH) && HAVE_DECL_SOL_BLUETOOTH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_BLUETOOTH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_BLUETOOTH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_BLUETOOTH)
#endif
#if defined(SOL_PNPIPE) || (defined(HAVE_DECL_SOL_PNPIPE) && HAVE_DECL_SOL_PNPIPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_PNPIPE) == (275), "SOL_PNPIPE != 275");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_PNPIPE 275
#endif
#if defined(SOL_PNPIPE) || (defined(HAVE_DECL_SOL_PNPIPE) && HAVE_DECL_SOL_PNPIPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_PNPIPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_PNPIPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_PNPIPE)
#endif
#if defined(SOL_RDS) || (defined(HAVE_DECL_SOL_RDS) && HAVE_DECL_SOL_RDS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_RDS) == (276), "SOL_RDS != 276");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_RDS 276
#endif
#if defined(SOL_RDS) || (defined(HAVE_DECL_SOL_RDS) && HAVE_DECL_SOL_RDS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_RDS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_RDS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_RDS)
#endif
#if defined(SOL_IUCV) || (defined(HAVE_DECL_SOL_IUCV) && HAVE_DECL_SOL_IUCV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_IUCV) == (277), "SOL_IUCV != 277");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_IUCV 277
#endif
#if defined(SOL_IUCV) || (defined(HAVE_DECL_SOL_IUCV) && HAVE_DECL_SOL_IUCV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_IUCV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_IUCV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_IUCV)
#endif
#if defined(SOL_CAIF) || (defined(HAVE_DECL_SOL_CAIF) && HAVE_DECL_SOL_CAIF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_CAIF) == (278), "SOL_CAIF != 278");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_CAIF 278
#endif
#if defined(SOL_CAIF) || (defined(HAVE_DECL_SOL_CAIF) && HAVE_DECL_SOL_CAIF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_CAIF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_CAIF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_CAIF)
#endif
#if defined(SOL_ALG) || (defined(HAVE_DECL_SOL_ALG) && HAVE_DECL_SOL_ALG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_ALG) == (279), "SOL_ALG != 279");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_ALG 279
#endif
#if defined(SOL_ALG) || (defined(HAVE_DECL_SOL_ALG) && HAVE_DECL_SOL_ALG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_ALG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_ALG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_ALG)
#endif
#if defined(SOL_NFC) || (defined(HAVE_DECL_SOL_NFC) && HAVE_DECL_SOL_NFC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_NFC) == (280), "SOL_NFC != 280");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_NFC 280
#endif
#if defined(SOL_NFC) || (defined(HAVE_DECL_SOL_NFC) && HAVE_DECL_SOL_NFC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_NFC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_NFC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_NFC)
#endif
#if defined(SOL_KCM) || (defined(HAVE_DECL_SOL_KCM) && HAVE_DECL_SOL_KCM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_KCM) == (281), "SOL_KCM != 281");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_KCM 281
#endif
#if defined(SOL_KCM) || (defined(HAVE_DECL_SOL_KCM) && HAVE_DECL_SOL_KCM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_KCM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_KCM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_KCM)
#endif
#if defined(SOL_TLS) || (defined(HAVE_DECL_SOL_TLS) && HAVE_DECL_SOL_TLS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_TLS) == (282), "SOL_TLS != 282");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_TLS 282
#endif
#if defined(SOL_TLS) || (defined(HAVE_DECL_SOL_TLS) && HAVE_DECL_SOL_TLS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_TLS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_TLS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_TLS)
#endif
#if defined(SOL_XDP) || (defined(HAVE_DECL_SOL_XDP) && HAVE_DECL_SOL_XDP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_XDP) == (283), "SOL_XDP != 283");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_XDP 283
#endif
#if defined(SOL_XDP) || (defined(HAVE_DECL_SOL_XDP) && HAVE_DECL_SOL_XDP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_XDP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_XDP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_XDP)
#endif
#if defined __alpha__ || defined __hppa__ || defined __mips__ || defined __sparc__
#if defined(SOL_SOCKET) || (defined(HAVE_DECL_SOL_SOCKET) && HAVE_DECL_SOL_SOCKET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOL_SOCKET) == (0xffff), "SOL_SOCKET != 0xffff");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOL_SOCKET 0xffff
#endif
#if defined(SOL_SOCKET) || (defined(HAVE_DECL_SOL_SOCKET) && HAVE_DECL_SOL_SOCKET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOL_SOCKET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOL_SOCKET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOL_SOCKET)
#endif
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data socketlayers_xdata[] = {
 XLAT(SOL_IP),
 #define XLAT_VAL_0 ((unsigned) (SOL_IP))
 #define XLAT_STR_0 STRINGIFY(SOL_IP)
#if !(defined __alpha__ || defined __hppa__ || defined __mips__ || defined __sparc__)
 XLAT(SOL_SOCKET),
 #define XLAT_VAL_1 ((unsigned) (SOL_SOCKET))
 #define XLAT_STR_1 STRINGIFY(SOL_SOCKET)
#endif
 XLAT(SOL_TCP),
 #define XLAT_VAL_2 ((unsigned) (SOL_TCP))
 #define XLAT_STR_2 STRINGIFY(SOL_TCP)
 XLAT(SOL_UDP),
 #define XLAT_VAL_3 ((unsigned) (SOL_UDP))
 #define XLAT_STR_3 STRINGIFY(SOL_UDP)
 XLAT(AF_VSOCK),
 #define XLAT_VAL_4 ((unsigned) (AF_VSOCK))
 #define XLAT_STR_4 STRINGIFY(AF_VSOCK)
 XLAT(SOL_IPV6),
 #define XLAT_VAL_5 ((unsigned) (SOL_IPV6))
 #define XLAT_STR_5 STRINGIFY(SOL_IPV6)
 XLAT(SOL_ICMPV6),
 #define XLAT_VAL_6 ((unsigned) (SOL_ICMPV6))
 #define XLAT_STR_6 STRINGIFY(SOL_ICMPV6)
 XLAT(SOL_CAN_BASE),
 #define XLAT_VAL_7 ((unsigned) (SOL_CAN_BASE))
 #define XLAT_STR_7 STRINGIFY(SOL_CAN_BASE)
 XLAT(SOL_CAN_RAW),
 #define XLAT_VAL_8 ((unsigned) (SOL_CAN_RAW))
 #define XLAT_STR_8 STRINGIFY(SOL_CAN_RAW)
 XLAT(SOL_SCTP),
 #define XLAT_VAL_9 ((unsigned) (SOL_SCTP))
 #define XLAT_STR_9 STRINGIFY(SOL_SCTP)
 XLAT(SOL_UDPLITE),
 #define XLAT_VAL_10 ((unsigned) (SOL_UDPLITE))
 #define XLAT_STR_10 STRINGIFY(SOL_UDPLITE)
 XLAT(SOL_RAW),
 #define XLAT_VAL_11 ((unsigned) (SOL_RAW))
 #define XLAT_STR_11 STRINGIFY(SOL_RAW)
 XLAT(SOL_IPX),
 #define XLAT_VAL_12 ((unsigned) (SOL_IPX))
 #define XLAT_STR_12 STRINGIFY(SOL_IPX)
 XLAT(SOL_AX25),
 #define XLAT_VAL_13 ((unsigned) (SOL_AX25))
 #define XLAT_STR_13 STRINGIFY(SOL_AX25)
 XLAT(SOL_ATALK),
 #define XLAT_VAL_14 ((unsigned) (SOL_ATALK))
 #define XLAT_STR_14 STRINGIFY(SOL_ATALK)
 XLAT(SOL_NETROM),
 #define XLAT_VAL_15 ((unsigned) (SOL_NETROM))
 #define XLAT_STR_15 STRINGIFY(SOL_NETROM)
 XLAT(SOL_ROSE),
 #define XLAT_VAL_16 ((unsigned) (SOL_ROSE))
 #define XLAT_STR_16 STRINGIFY(SOL_ROSE)
 XLAT(SOL_DECNET),
 #define XLAT_VAL_17 ((unsigned) (SOL_DECNET))
 #define XLAT_STR_17 STRINGIFY(SOL_DECNET)
 XLAT(SOL_X25),
 #define XLAT_VAL_18 ((unsigned) (SOL_X25))
 #define XLAT_STR_18 STRINGIFY(SOL_X25)
 XLAT(SOL_PACKET),
 #define XLAT_VAL_19 ((unsigned) (SOL_PACKET))
 #define XLAT_STR_19 STRINGIFY(SOL_PACKET)
 XLAT(SOL_ATM),
 #define XLAT_VAL_20 ((unsigned) (SOL_ATM))
 #define XLAT_STR_20 STRINGIFY(SOL_ATM)
 XLAT(SOL_AAL),
 #define XLAT_VAL_21 ((unsigned) (SOL_AAL))
 #define XLAT_STR_21 STRINGIFY(SOL_AAL)
 XLAT(SOL_IRDA),
 #define XLAT_VAL_22 ((unsigned) (SOL_IRDA))
 #define XLAT_STR_22 STRINGIFY(SOL_IRDA)
 XLAT(SOL_NETBEUI),
 #define XLAT_VAL_23 ((unsigned) (SOL_NETBEUI))
 #define XLAT_STR_23 STRINGIFY(SOL_NETBEUI)
 XLAT(SOL_LLC),
 #define XLAT_VAL_24 ((unsigned) (SOL_LLC))
 #define XLAT_STR_24 STRINGIFY(SOL_LLC)
 XLAT(SOL_DCCP),
 #define XLAT_VAL_25 ((unsigned) (SOL_DCCP))
 #define XLAT_STR_25 STRINGIFY(SOL_DCCP)
 XLAT(SOL_NETLINK),
 #define XLAT_VAL_26 ((unsigned) (SOL_NETLINK))
 #define XLAT_STR_26 STRINGIFY(SOL_NETLINK)
 XLAT(SOL_TIPC),
 #define XLAT_VAL_27 ((unsigned) (SOL_TIPC))
 #define XLAT_STR_27 STRINGIFY(SOL_TIPC)
 XLAT(SOL_RXRPC),
 #define XLAT_VAL_28 ((unsigned) (SOL_RXRPC))
 #define XLAT_STR_28 STRINGIFY(SOL_RXRPC)
 XLAT(SOL_PPPOL2TP),
 #define XLAT_VAL_29 ((unsigned) (SOL_PPPOL2TP))
 #define XLAT_STR_29 STRINGIFY(SOL_PPPOL2TP)
 XLAT(SOL_BLUETOOTH),
 #define XLAT_VAL_30 ((unsigned) (SOL_BLUETOOTH))
 #define XLAT_STR_30 STRINGIFY(SOL_BLUETOOTH)
 XLAT(SOL_PNPIPE),
 #define XLAT_VAL_31 ((unsigned) (SOL_PNPIPE))
 #define XLAT_STR_31 STRINGIFY(SOL_PNPIPE)
 XLAT(SOL_RDS),
 #define XLAT_VAL_32 ((unsigned) (SOL_RDS))
 #define XLAT_STR_32 STRINGIFY(SOL_RDS)
 XLAT(SOL_IUCV),
 #define XLAT_VAL_33 ((unsigned) (SOL_IUCV))
 #define XLAT_STR_33 STRINGIFY(SOL_IUCV)
 XLAT(SOL_CAIF),
 #define XLAT_VAL_34 ((unsigned) (SOL_CAIF))
 #define XLAT_STR_34 STRINGIFY(SOL_CAIF)
 XLAT(SOL_ALG),
 #define XLAT_VAL_35 ((unsigned) (SOL_ALG))
 #define XLAT_STR_35 STRINGIFY(SOL_ALG)
 XLAT(SOL_NFC),
 #define XLAT_VAL_36 ((unsigned) (SOL_NFC))
 #define XLAT_STR_36 STRINGIFY(SOL_NFC)
 XLAT(SOL_KCM),
 #define XLAT_VAL_37 ((unsigned) (SOL_KCM))
 #define XLAT_STR_37 STRINGIFY(SOL_KCM)
 XLAT(SOL_TLS),
 #define XLAT_VAL_38 ((unsigned) (SOL_TLS))
 #define XLAT_STR_38 STRINGIFY(SOL_TLS)
 XLAT(SOL_XDP),
 #define XLAT_VAL_39 ((unsigned) (SOL_XDP))
 #define XLAT_STR_39 STRINGIFY(SOL_XDP)
#if defined __alpha__ || defined __hppa__ || defined __mips__ || defined __sparc__
 XLAT(SOL_SOCKET),
 #define XLAT_VAL_40 ((unsigned) (SOL_SOCKET))
 #define XLAT_STR_40 STRINGIFY(SOL_SOCKET)
#endif
};
const struct xlat socketlayers[1] = { {
 .data = socketlayers_xdata,
 .size = ARRAY_SIZE(socketlayers_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
