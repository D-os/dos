/* Generated by ./src/xlat/gen.sh from ./src/xlat/isdn_protocols.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ISDN_P_BASE) || (defined(HAVE_DECL_ISDN_P_BASE) && HAVE_DECL_ISDN_P_BASE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_BASE) == (0), "ISDN_P_BASE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_BASE 0
#endif
#if defined(ISDN_P_TE_S0) || (defined(HAVE_DECL_ISDN_P_TE_S0) && HAVE_DECL_ISDN_P_TE_S0)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_TE_S0) == (1), "ISDN_P_TE_S0 != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_TE_S0 1
#endif
#if defined(ISDN_P_NT_S0) || (defined(HAVE_DECL_ISDN_P_NT_S0) && HAVE_DECL_ISDN_P_NT_S0)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_NT_S0) == (2), "ISDN_P_NT_S0 != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_NT_S0 2
#endif
#if defined(ISDN_P_TE_E1) || (defined(HAVE_DECL_ISDN_P_TE_E1) && HAVE_DECL_ISDN_P_TE_E1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_TE_E1) == (3), "ISDN_P_TE_E1 != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_TE_E1 3
#endif
#if defined(ISDN_P_NT_E1) || (defined(HAVE_DECL_ISDN_P_NT_E1) && HAVE_DECL_ISDN_P_NT_E1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_NT_E1) == (4), "ISDN_P_NT_E1 != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_NT_E1 4
#endif
#if defined(ISDN_P_LAPD_TE) || (defined(HAVE_DECL_ISDN_P_LAPD_TE) && HAVE_DECL_ISDN_P_LAPD_TE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_LAPD_TE) == (0x10), "ISDN_P_LAPD_TE != 0x10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_LAPD_TE 0x10
#endif
#if defined(ISDN_P_LAPD_NT) || (defined(HAVE_DECL_ISDN_P_LAPD_NT) && HAVE_DECL_ISDN_P_LAPD_NT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_LAPD_NT) == (0x11), "ISDN_P_LAPD_NT != 0x11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_LAPD_NT 0x11
#endif
#if defined(ISDN_P_B_RAW) || (defined(HAVE_DECL_ISDN_P_B_RAW) && HAVE_DECL_ISDN_P_B_RAW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_B_RAW) == (0x21), "ISDN_P_B_RAW != 0x21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_B_RAW 0x21
#endif
#if defined(ISDN_P_B_HDLC) || (defined(HAVE_DECL_ISDN_P_B_HDLC) && HAVE_DECL_ISDN_P_B_HDLC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_B_HDLC) == (0x22), "ISDN_P_B_HDLC != 0x22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_B_HDLC 0x22
#endif
#if defined(ISDN_P_B_X75SLP) || (defined(HAVE_DECL_ISDN_P_B_X75SLP) && HAVE_DECL_ISDN_P_B_X75SLP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_B_X75SLP) == (0x23), "ISDN_P_B_X75SLP != 0x23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_B_X75SLP 0x23
#endif
#if defined(ISDN_P_B_L2DTMF) || (defined(HAVE_DECL_ISDN_P_B_L2DTMF) && HAVE_DECL_ISDN_P_B_L2DTMF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_B_L2DTMF) == (0x24), "ISDN_P_B_L2DTMF != 0x24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_B_L2DTMF 0x24
#endif
#if defined(ISDN_P_B_L2DSP) || (defined(HAVE_DECL_ISDN_P_B_L2DSP) && HAVE_DECL_ISDN_P_B_L2DSP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_B_L2DSP) == (0x25), "ISDN_P_B_L2DSP != 0x25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_B_L2DSP 0x25
#endif
#if defined(ISDN_P_B_L2DSPHDLC) || (defined(HAVE_DECL_ISDN_P_B_L2DSPHDLC) && HAVE_DECL_ISDN_P_B_L2DSPHDLC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISDN_P_B_L2DSPHDLC) == (0x26), "ISDN_P_B_L2DSPHDLC != 0x26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISDN_P_B_L2DSPHDLC 0x26
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat isdn_protocols in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data isdn_protocols_xdata[] = {
 XLAT(ISDN_P_BASE),
 #define XLAT_VAL_0 ((unsigned) (ISDN_P_BASE))
 #define XLAT_STR_0 STRINGIFY(ISDN_P_BASE)
 XLAT(ISDN_P_TE_S0),
 #define XLAT_VAL_1 ((unsigned) (ISDN_P_TE_S0))
 #define XLAT_STR_1 STRINGIFY(ISDN_P_TE_S0)
 XLAT(ISDN_P_NT_S0),
 #define XLAT_VAL_2 ((unsigned) (ISDN_P_NT_S0))
 #define XLAT_STR_2 STRINGIFY(ISDN_P_NT_S0)
 XLAT(ISDN_P_TE_E1),
 #define XLAT_VAL_3 ((unsigned) (ISDN_P_TE_E1))
 #define XLAT_STR_3 STRINGIFY(ISDN_P_TE_E1)
 XLAT(ISDN_P_NT_E1),
 #define XLAT_VAL_4 ((unsigned) (ISDN_P_NT_E1))
 #define XLAT_STR_4 STRINGIFY(ISDN_P_NT_E1)
 XLAT(ISDN_P_LAPD_TE),
 #define XLAT_VAL_5 ((unsigned) (ISDN_P_LAPD_TE))
 #define XLAT_STR_5 STRINGIFY(ISDN_P_LAPD_TE)
 XLAT(ISDN_P_LAPD_NT),
 #define XLAT_VAL_6 ((unsigned) (ISDN_P_LAPD_NT))
 #define XLAT_STR_6 STRINGIFY(ISDN_P_LAPD_NT)
 XLAT(ISDN_P_B_RAW),
 #define XLAT_VAL_7 ((unsigned) (ISDN_P_B_RAW))
 #define XLAT_STR_7 STRINGIFY(ISDN_P_B_RAW)
 XLAT(ISDN_P_B_HDLC),
 #define XLAT_VAL_8 ((unsigned) (ISDN_P_B_HDLC))
 #define XLAT_STR_8 STRINGIFY(ISDN_P_B_HDLC)
 XLAT(ISDN_P_B_X75SLP),
 #define XLAT_VAL_9 ((unsigned) (ISDN_P_B_X75SLP))
 #define XLAT_STR_9 STRINGIFY(ISDN_P_B_X75SLP)
 XLAT(ISDN_P_B_L2DTMF),
 #define XLAT_VAL_10 ((unsigned) (ISDN_P_B_L2DTMF))
 #define XLAT_STR_10 STRINGIFY(ISDN_P_B_L2DTMF)
 XLAT(ISDN_P_B_L2DSP),
 #define XLAT_VAL_11 ((unsigned) (ISDN_P_B_L2DSP))
 #define XLAT_STR_11 STRINGIFY(ISDN_P_B_L2DSP)
 XLAT(ISDN_P_B_L2DSPHDLC),
 #define XLAT_VAL_12 ((unsigned) (ISDN_P_B_L2DSPHDLC))
 #define XLAT_STR_12 STRINGIFY(ISDN_P_B_L2DSPHDLC)
/*
* those two are present in include/linux/mISDNif.h but are not handled during
* socket creation.
*/


};
static
const struct xlat isdn_protocols[1] = { {
 .data = isdn_protocols_xdata,
 .size = ARRAY_SIZE(isdn_protocols_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
