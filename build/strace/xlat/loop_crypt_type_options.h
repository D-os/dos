/* Generated by ./src/xlat/gen.sh from ./src/xlat/loop_crypt_type_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat loop_crypt_type_options[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data loop_crypt_type_options_xdata[] = {
 XLAT(LO_CRYPT_NONE),
 #define XLAT_VAL_0 ((unsigned) (LO_CRYPT_NONE))
 #define XLAT_STR_0 STRINGIFY(LO_CRYPT_NONE)
 XLAT(LO_CRYPT_XOR),
 #define XLAT_VAL_1 ((unsigned) (LO_CRYPT_XOR))
 #define XLAT_STR_1 STRINGIFY(LO_CRYPT_XOR)
 XLAT(LO_CRYPT_DES),
 #define XLAT_VAL_2 ((unsigned) (LO_CRYPT_DES))
 #define XLAT_STR_2 STRINGIFY(LO_CRYPT_DES)
 XLAT(LO_CRYPT_FISH2),
 #define XLAT_VAL_3 ((unsigned) (LO_CRYPT_FISH2))
 #define XLAT_STR_3 STRINGIFY(LO_CRYPT_FISH2)
 XLAT(LO_CRYPT_BLOW),
 #define XLAT_VAL_4 ((unsigned) (LO_CRYPT_BLOW))
 #define XLAT_STR_4 STRINGIFY(LO_CRYPT_BLOW)
 XLAT(LO_CRYPT_CAST128),
 #define XLAT_VAL_5 ((unsigned) (LO_CRYPT_CAST128))
 #define XLAT_STR_5 STRINGIFY(LO_CRYPT_CAST128)
 XLAT(LO_CRYPT_IDEA),
 #define XLAT_VAL_6 ((unsigned) (LO_CRYPT_IDEA))
 #define XLAT_STR_6 STRINGIFY(LO_CRYPT_IDEA)
 XLAT(LO_CRYPT_DUMMY),
 #define XLAT_VAL_7 ((unsigned) (LO_CRYPT_DUMMY))
 #define XLAT_STR_7 STRINGIFY(LO_CRYPT_DUMMY)
 XLAT(LO_CRYPT_SKIPJACK),
 #define XLAT_VAL_8 ((unsigned) (LO_CRYPT_SKIPJACK))
 #define XLAT_STR_8 STRINGIFY(LO_CRYPT_SKIPJACK)
 XLAT(LO_CRYPT_CRYPTOAPI),
 #define XLAT_VAL_9 ((unsigned) (LO_CRYPT_CRYPTOAPI))
 #define XLAT_STR_9 STRINGIFY(LO_CRYPT_CRYPTOAPI)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat loop_crypt_type_options[1] = { {
 .data = loop_crypt_type_options_xdata,
 .size = ARRAY_SIZE(loop_crypt_type_options_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
