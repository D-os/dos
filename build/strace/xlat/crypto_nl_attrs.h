/* Generated by ./src/xlat/gen.sh from ./src/xlat/crypto_nl_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat crypto_nl_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data crypto_nl_attrs_xdata[] = {
 [CRYPTOCFGA_UNSPEC] = XLAT(CRYPTOCFGA_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (CRYPTOCFGA_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(CRYPTOCFGA_UNSPEC)
 [CRYPTOCFGA_PRIORITY_VAL] = XLAT(CRYPTOCFGA_PRIORITY_VAL),
 #define XLAT_VAL_1 ((unsigned) (CRYPTOCFGA_PRIORITY_VAL))
 #define XLAT_STR_1 STRINGIFY(CRYPTOCFGA_PRIORITY_VAL)
 [CRYPTOCFGA_REPORT_LARVAL] = XLAT(CRYPTOCFGA_REPORT_LARVAL),
 #define XLAT_VAL_2 ((unsigned) (CRYPTOCFGA_REPORT_LARVAL))
 #define XLAT_STR_2 STRINGIFY(CRYPTOCFGA_REPORT_LARVAL)
 [CRYPTOCFGA_REPORT_HASH] = XLAT(CRYPTOCFGA_REPORT_HASH),
 #define XLAT_VAL_3 ((unsigned) (CRYPTOCFGA_REPORT_HASH))
 #define XLAT_STR_3 STRINGIFY(CRYPTOCFGA_REPORT_HASH)
 [CRYPTOCFGA_REPORT_BLKCIPHER] = XLAT(CRYPTOCFGA_REPORT_BLKCIPHER),
 #define XLAT_VAL_4 ((unsigned) (CRYPTOCFGA_REPORT_BLKCIPHER))
 #define XLAT_STR_4 STRINGIFY(CRYPTOCFGA_REPORT_BLKCIPHER)
 [CRYPTOCFGA_REPORT_AEAD] = XLAT(CRYPTOCFGA_REPORT_AEAD),
 #define XLAT_VAL_5 ((unsigned) (CRYPTOCFGA_REPORT_AEAD))
 #define XLAT_STR_5 STRINGIFY(CRYPTOCFGA_REPORT_AEAD)
 [CRYPTOCFGA_REPORT_COMPRESS] = XLAT(CRYPTOCFGA_REPORT_COMPRESS),
 #define XLAT_VAL_6 ((unsigned) (CRYPTOCFGA_REPORT_COMPRESS))
 #define XLAT_STR_6 STRINGIFY(CRYPTOCFGA_REPORT_COMPRESS)
 [CRYPTOCFGA_REPORT_RNG] = XLAT(CRYPTOCFGA_REPORT_RNG),
 #define XLAT_VAL_7 ((unsigned) (CRYPTOCFGA_REPORT_RNG))
 #define XLAT_STR_7 STRINGIFY(CRYPTOCFGA_REPORT_RNG)
 [CRYPTOCFGA_REPORT_CIPHER] = XLAT(CRYPTOCFGA_REPORT_CIPHER),
 #define XLAT_VAL_8 ((unsigned) (CRYPTOCFGA_REPORT_CIPHER))
 #define XLAT_STR_8 STRINGIFY(CRYPTOCFGA_REPORT_CIPHER)
 [CRYPTOCFGA_REPORT_AKCIPHER] = XLAT(CRYPTOCFGA_REPORT_AKCIPHER),
 #define XLAT_VAL_9 ((unsigned) (CRYPTOCFGA_REPORT_AKCIPHER))
 #define XLAT_STR_9 STRINGIFY(CRYPTOCFGA_REPORT_AKCIPHER)
 [CRYPTOCFGA_REPORT_KPP] = XLAT(CRYPTOCFGA_REPORT_KPP),
 #define XLAT_VAL_10 ((unsigned) (CRYPTOCFGA_REPORT_KPP))
 #define XLAT_STR_10 STRINGIFY(CRYPTOCFGA_REPORT_KPP)
 [CRYPTOCFGA_REPORT_ACOMP] = XLAT(CRYPTOCFGA_REPORT_ACOMP),
 #define XLAT_VAL_11 ((unsigned) (CRYPTOCFGA_REPORT_ACOMP))
 #define XLAT_STR_11 STRINGIFY(CRYPTOCFGA_REPORT_ACOMP)
};
static
const struct xlat crypto_nl_attrs[1] = { {
 .data = crypto_nl_attrs_xdata,
 .size = ARRAY_SIZE(crypto_nl_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
