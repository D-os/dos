/* Generated by ./src/xlat/gen.sh from ./src/xlat/nfc_saps.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(LLCP_SAP_SDP) || (defined(HAVE_DECL_LLCP_SAP_SDP) && HAVE_DECL_LLCP_SAP_SDP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LLCP_SAP_SDP) == (0x1), "LLCP_SAP_SDP != 0x1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LLCP_SAP_SDP 0x1
#endif
#if defined(LLCP_SAP_IP) || (defined(HAVE_DECL_LLCP_SAP_IP) && HAVE_DECL_LLCP_SAP_IP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LLCP_SAP_IP) == (0x2), "LLCP_SAP_IP != 0x2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LLCP_SAP_IP 0x2
#endif
#if defined(LLCP_SAP_OBEX) || (defined(HAVE_DECL_LLCP_SAP_OBEX) && HAVE_DECL_LLCP_SAP_OBEX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LLCP_SAP_OBEX) == (0x3), "LLCP_SAP_OBEX != 0x3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LLCP_SAP_OBEX 0x3
#endif
#if defined(LLCP_SAP_SNEP) || (defined(HAVE_DECL_LLCP_SAP_SNEP) && HAVE_DECL_LLCP_SAP_SNEP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LLCP_SAP_SNEP) == (0x4), "LLCP_SAP_SNEP != 0x4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LLCP_SAP_SNEP 0x4
#endif
#if defined(LLCP_SAP_MAX) || (defined(HAVE_DECL_LLCP_SAP_MAX) && HAVE_DECL_LLCP_SAP_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LLCP_SAP_MAX) == (0xff), "LLCP_SAP_MAX != 0xff");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LLCP_SAP_MAX 0xff
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat nfc_saps in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data nfc_saps_xdata[] = {
 XLAT(LLCP_SAP_SDP),
 #define XLAT_VAL_0 ((unsigned) (LLCP_SAP_SDP))
 #define XLAT_STR_0 STRINGIFY(LLCP_SAP_SDP)
 XLAT(LLCP_SAP_IP),
 #define XLAT_VAL_1 ((unsigned) (LLCP_SAP_IP))
 #define XLAT_STR_1 STRINGIFY(LLCP_SAP_IP)
 XLAT(LLCP_SAP_OBEX),
 #define XLAT_VAL_2 ((unsigned) (LLCP_SAP_OBEX))
 #define XLAT_STR_2 STRINGIFY(LLCP_SAP_OBEX)
 XLAT(LLCP_SAP_SNEP),
 #define XLAT_VAL_3 ((unsigned) (LLCP_SAP_SNEP))
 #define XLAT_STR_3 STRINGIFY(LLCP_SAP_SNEP)
 XLAT(LLCP_SAP_MAX),
 #define XLAT_VAL_4 ((unsigned) (LLCP_SAP_MAX))
 #define XLAT_STR_4 STRINGIFY(LLCP_SAP_MAX)
};
static
const struct xlat nfc_saps[1] = { {
 .data = nfc_saps_xdata,
 .size = ARRAY_SIZE(nfc_saps_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
