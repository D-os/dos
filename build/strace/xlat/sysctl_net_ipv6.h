/* Generated by ./src/xlat/gen.sh from ./src/xlat/sysctl_net_ipv6.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NET_IPV6_CONF) || (defined(HAVE_DECL_NET_IPV6_CONF) && HAVE_DECL_NET_IPV6_CONF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_CONF) == (16), "NET_IPV6_CONF != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_CONF 16
#endif
#if defined(NET_IPV6_CONF) || (defined(HAVE_DECL_NET_IPV6_CONF) && HAVE_DECL_NET_IPV6_CONF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_CONF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_CONF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_CONF)
#endif
#if defined(NET_IPV6_NEIGH) || (defined(HAVE_DECL_NET_IPV6_NEIGH) && HAVE_DECL_NET_IPV6_NEIGH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_NEIGH) == (17), "NET_IPV6_NEIGH != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_NEIGH 17
#endif
#if defined(NET_IPV6_NEIGH) || (defined(HAVE_DECL_NET_IPV6_NEIGH) && HAVE_DECL_NET_IPV6_NEIGH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_NEIGH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_NEIGH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_NEIGH)
#endif
#if defined(NET_IPV6_ROUTE) || (defined(HAVE_DECL_NET_IPV6_ROUTE) && HAVE_DECL_NET_IPV6_ROUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE) == (18), "NET_IPV6_ROUTE != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE 18
#endif
#if defined(NET_IPV6_ROUTE) || (defined(HAVE_DECL_NET_IPV6_ROUTE) && HAVE_DECL_NET_IPV6_ROUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_ROUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_ROUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_ROUTE)
#endif
#if defined(NET_IPV6_ICMP) || (defined(HAVE_DECL_NET_IPV6_ICMP) && HAVE_DECL_NET_IPV6_ICMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ICMP) == (19), "NET_IPV6_ICMP != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ICMP 19
#endif
#if defined(NET_IPV6_ICMP) || (defined(HAVE_DECL_NET_IPV6_ICMP) && HAVE_DECL_NET_IPV6_ICMP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_ICMP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_ICMP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_ICMP)
#endif
#if defined(NET_IPV6_BINDV6ONLY) || (defined(HAVE_DECL_NET_IPV6_BINDV6ONLY) && HAVE_DECL_NET_IPV6_BINDV6ONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_BINDV6ONLY) == (20), "NET_IPV6_BINDV6ONLY != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_BINDV6ONLY 20
#endif
#if defined(NET_IPV6_BINDV6ONLY) || (defined(HAVE_DECL_NET_IPV6_BINDV6ONLY) && HAVE_DECL_NET_IPV6_BINDV6ONLY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_BINDV6ONLY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_BINDV6ONLY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_BINDV6ONLY)
#endif
#if defined(NET_IPV6_IP6FRAG_HIGH_THRESH) || (defined(HAVE_DECL_NET_IPV6_IP6FRAG_HIGH_THRESH) && HAVE_DECL_NET_IPV6_IP6FRAG_HIGH_THRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_IP6FRAG_HIGH_THRESH) == (21), "NET_IPV6_IP6FRAG_HIGH_THRESH != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_IP6FRAG_HIGH_THRESH 21
#endif
#if defined(NET_IPV6_IP6FRAG_HIGH_THRESH) || (defined(HAVE_DECL_NET_IPV6_IP6FRAG_HIGH_THRESH) && HAVE_DECL_NET_IPV6_IP6FRAG_HIGH_THRESH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_IP6FRAG_HIGH_THRESH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_IP6FRAG_HIGH_THRESH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_IP6FRAG_HIGH_THRESH)
#endif
#if defined(NET_IPV6_IP6FRAG_LOW_THRESH) || (defined(HAVE_DECL_NET_IPV6_IP6FRAG_LOW_THRESH) && HAVE_DECL_NET_IPV6_IP6FRAG_LOW_THRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_IP6FRAG_LOW_THRESH) == (22), "NET_IPV6_IP6FRAG_LOW_THRESH != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_IP6FRAG_LOW_THRESH 22
#endif
#if defined(NET_IPV6_IP6FRAG_LOW_THRESH) || (defined(HAVE_DECL_NET_IPV6_IP6FRAG_LOW_THRESH) && HAVE_DECL_NET_IPV6_IP6FRAG_LOW_THRESH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_IP6FRAG_LOW_THRESH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_IP6FRAG_LOW_THRESH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_IP6FRAG_LOW_THRESH)
#endif
#if defined(NET_IPV6_IP6FRAG_TIME) || (defined(HAVE_DECL_NET_IPV6_IP6FRAG_TIME) && HAVE_DECL_NET_IPV6_IP6FRAG_TIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_IP6FRAG_TIME) == (23), "NET_IPV6_IP6FRAG_TIME != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_IP6FRAG_TIME 23
#endif
#if defined(NET_IPV6_IP6FRAG_TIME) || (defined(HAVE_DECL_NET_IPV6_IP6FRAG_TIME) && HAVE_DECL_NET_IPV6_IP6FRAG_TIME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_IP6FRAG_TIME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_IP6FRAG_TIME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_IP6FRAG_TIME)
#endif
#if defined(NET_IPV6_IP6FRAG_SECRET_INTERVAL) || (defined(HAVE_DECL_NET_IPV6_IP6FRAG_SECRET_INTERVAL) && HAVE_DECL_NET_IPV6_IP6FRAG_SECRET_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_IP6FRAG_SECRET_INTERVAL) == (24), "NET_IPV6_IP6FRAG_SECRET_INTERVAL != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_IP6FRAG_SECRET_INTERVAL 24
#endif
#if defined(NET_IPV6_IP6FRAG_SECRET_INTERVAL) || (defined(HAVE_DECL_NET_IPV6_IP6FRAG_SECRET_INTERVAL) && HAVE_DECL_NET_IPV6_IP6FRAG_SECRET_INTERVAL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_IP6FRAG_SECRET_INTERVAL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_IP6FRAG_SECRET_INTERVAL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_IP6FRAG_SECRET_INTERVAL)
#endif
#if defined(NET_IPV6_MLD_MAX_MSF) || (defined(HAVE_DECL_NET_IPV6_MLD_MAX_MSF) && HAVE_DECL_NET_IPV6_MLD_MAX_MSF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_MLD_MAX_MSF) == (25), "NET_IPV6_MLD_MAX_MSF != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_MLD_MAX_MSF 25
#endif
#if defined(NET_IPV6_MLD_MAX_MSF) || (defined(HAVE_DECL_NET_IPV6_MLD_MAX_MSF) && HAVE_DECL_NET_IPV6_MLD_MAX_MSF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6_MLD_MAX_MSF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6_MLD_MAX_MSF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6_MLD_MAX_MSF)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sysctl_net_ipv6 in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sysctl_net_ipv6_xdata[] = {

 XLAT(NET_IPV6_CONF),
 #define XLAT_VAL_0 ((unsigned) (NET_IPV6_CONF))
 #define XLAT_STR_0 STRINGIFY(NET_IPV6_CONF)
 XLAT(NET_IPV6_NEIGH),
 #define XLAT_VAL_1 ((unsigned) (NET_IPV6_NEIGH))
 #define XLAT_STR_1 STRINGIFY(NET_IPV6_NEIGH)

 XLAT(NET_IPV6_ROUTE),
 #define XLAT_VAL_2 ((unsigned) (NET_IPV6_ROUTE))
 #define XLAT_STR_2 STRINGIFY(NET_IPV6_ROUTE)

 XLAT(NET_IPV6_ICMP),
 #define XLAT_VAL_3 ((unsigned) (NET_IPV6_ICMP))
 #define XLAT_STR_3 STRINGIFY(NET_IPV6_ICMP)

 XLAT(NET_IPV6_BINDV6ONLY),
 #define XLAT_VAL_4 ((unsigned) (NET_IPV6_BINDV6ONLY))
 #define XLAT_STR_4 STRINGIFY(NET_IPV6_BINDV6ONLY)

 XLAT(NET_IPV6_IP6FRAG_HIGH_THRESH),
 #define XLAT_VAL_5 ((unsigned) (NET_IPV6_IP6FRAG_HIGH_THRESH))
 #define XLAT_STR_5 STRINGIFY(NET_IPV6_IP6FRAG_HIGH_THRESH)
 XLAT(NET_IPV6_IP6FRAG_LOW_THRESH),
 #define XLAT_VAL_6 ((unsigned) (NET_IPV6_IP6FRAG_LOW_THRESH))
 #define XLAT_STR_6 STRINGIFY(NET_IPV6_IP6FRAG_LOW_THRESH)
 XLAT(NET_IPV6_IP6FRAG_TIME),
 #define XLAT_VAL_7 ((unsigned) (NET_IPV6_IP6FRAG_TIME))
 #define XLAT_STR_7 STRINGIFY(NET_IPV6_IP6FRAG_TIME)
 XLAT(NET_IPV6_IP6FRAG_SECRET_INTERVAL),
 #define XLAT_VAL_8 ((unsigned) (NET_IPV6_IP6FRAG_SECRET_INTERVAL))
 #define XLAT_STR_8 STRINGIFY(NET_IPV6_IP6FRAG_SECRET_INTERVAL)

 XLAT(NET_IPV6_MLD_MAX_MSF),
 #define XLAT_VAL_9 ((unsigned) (NET_IPV6_MLD_MAX_MSF))
 #define XLAT_STR_9 STRINGIFY(NET_IPV6_MLD_MAX_MSF)
};
static
const struct xlat sysctl_net_ipv6[1] = { {
 .data = sysctl_net_ipv6_xdata,
 .size = ARRAY_SIZE(sysctl_net_ipv6_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
