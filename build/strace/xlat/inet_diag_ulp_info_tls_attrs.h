/* Generated by ./src/xlat/gen.sh from ./src/xlat/inet_diag_ulp_info_tls_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TLS_INFO_UNSPEC) == (0), "TLS_INFO_UNSPEC != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TLS_INFO_VERSION) == (1), "TLS_INFO_VERSION != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TLS_INFO_CIPHER) == (2), "TLS_INFO_CIPHER != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TLS_INFO_TXCONF) == (3), "TLS_INFO_TXCONF != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TLS_INFO_RXCONF) == (4), "TLS_INFO_RXCONF != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TLS_INFO_ZC_RO_TX) == (5), "TLS_INFO_ZC_RO_TX != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TLS_INFO_RX_NO_PAD) == (6), "TLS_INFO_RX_NO_PAD != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat inet_diag_ulp_info_tls_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data inet_diag_ulp_info_tls_attrs_xdata[] = {
 [TLS_INFO_UNSPEC] = XLAT(TLS_INFO_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (TLS_INFO_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(TLS_INFO_UNSPEC)
 [TLS_INFO_VERSION] = XLAT(TLS_INFO_VERSION),
 #define XLAT_VAL_1 ((unsigned) (TLS_INFO_VERSION))
 #define XLAT_STR_1 STRINGIFY(TLS_INFO_VERSION)
 [TLS_INFO_CIPHER] = XLAT(TLS_INFO_CIPHER),
 #define XLAT_VAL_2 ((unsigned) (TLS_INFO_CIPHER))
 #define XLAT_STR_2 STRINGIFY(TLS_INFO_CIPHER)
 [TLS_INFO_TXCONF] = XLAT(TLS_INFO_TXCONF),
 #define XLAT_VAL_3 ((unsigned) (TLS_INFO_TXCONF))
 #define XLAT_STR_3 STRINGIFY(TLS_INFO_TXCONF)
 [TLS_INFO_RXCONF] = XLAT(TLS_INFO_RXCONF),
 #define XLAT_VAL_4 ((unsigned) (TLS_INFO_RXCONF))
 #define XLAT_STR_4 STRINGIFY(TLS_INFO_RXCONF)
 [TLS_INFO_ZC_RO_TX] = XLAT(TLS_INFO_ZC_RO_TX),
 #define XLAT_VAL_5 ((unsigned) (TLS_INFO_ZC_RO_TX))
 #define XLAT_STR_5 STRINGIFY(TLS_INFO_ZC_RO_TX)
 [TLS_INFO_RX_NO_PAD] = XLAT(TLS_INFO_RX_NO_PAD),
 #define XLAT_VAL_6 ((unsigned) (TLS_INFO_RX_NO_PAD))
 #define XLAT_STR_6 STRINGIFY(TLS_INFO_RX_NO_PAD)
};
static
const struct xlat inet_diag_ulp_info_tls_attrs[1] = { {
 .data = inet_diag_ulp_info_tls_attrs_xdata,
 .size = ARRAY_SIZE(inet_diag_ulp_info_tls_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
