/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_ax25_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(AX25_WINDOW) || (defined(HAVE_DECL_AX25_WINDOW) && HAVE_DECL_AX25_WINDOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_WINDOW) == (1), "AX25_WINDOW != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_WINDOW 1
#endif
#if defined(AX25_WINDOW) || (defined(HAVE_DECL_AX25_WINDOW) && HAVE_DECL_AX25_WINDOW)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_WINDOW)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_WINDOW"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_WINDOW)
#endif
#if defined(AX25_T1) || (defined(HAVE_DECL_AX25_T1) && HAVE_DECL_AX25_T1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_T1) == (2), "AX25_T1 != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_T1 2
#endif
#if defined(AX25_T1) || (defined(HAVE_DECL_AX25_T1) && HAVE_DECL_AX25_T1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_T1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_T1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_T1)
#endif
#if defined(AX25_N2) || (defined(HAVE_DECL_AX25_N2) && HAVE_DECL_AX25_N2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_N2) == (3), "AX25_N2 != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_N2 3
#endif
#if defined(AX25_N2) || (defined(HAVE_DECL_AX25_N2) && HAVE_DECL_AX25_N2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_N2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_N2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_N2)
#endif
#if defined(AX25_T3) || (defined(HAVE_DECL_AX25_T3) && HAVE_DECL_AX25_T3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_T3) == (4), "AX25_T3 != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_T3 4
#endif
#if defined(AX25_T3) || (defined(HAVE_DECL_AX25_T3) && HAVE_DECL_AX25_T3)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_T3)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_T3"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_T3)
#endif
#if defined(AX25_T2) || (defined(HAVE_DECL_AX25_T2) && HAVE_DECL_AX25_T2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_T2) == (5), "AX25_T2 != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_T2 5
#endif
#if defined(AX25_T2) || (defined(HAVE_DECL_AX25_T2) && HAVE_DECL_AX25_T2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_T2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_T2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_T2)
#endif
#if defined(AX25_BACKOFF) || (defined(HAVE_DECL_AX25_BACKOFF) && HAVE_DECL_AX25_BACKOFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_BACKOFF) == (6), "AX25_BACKOFF != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_BACKOFF 6
#endif
#if defined(AX25_BACKOFF) || (defined(HAVE_DECL_AX25_BACKOFF) && HAVE_DECL_AX25_BACKOFF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_BACKOFF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_BACKOFF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_BACKOFF)
#endif
#if defined(AX25_EXTSEQ) || (defined(HAVE_DECL_AX25_EXTSEQ) && HAVE_DECL_AX25_EXTSEQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_EXTSEQ) == (7), "AX25_EXTSEQ != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_EXTSEQ 7
#endif
#if defined(AX25_EXTSEQ) || (defined(HAVE_DECL_AX25_EXTSEQ) && HAVE_DECL_AX25_EXTSEQ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_EXTSEQ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_EXTSEQ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_EXTSEQ)
#endif
#if defined(AX25_PIDINCL) || (defined(HAVE_DECL_AX25_PIDINCL) && HAVE_DECL_AX25_PIDINCL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_PIDINCL) == (8), "AX25_PIDINCL != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_PIDINCL 8
#endif
#if defined(AX25_PIDINCL) || (defined(HAVE_DECL_AX25_PIDINCL) && HAVE_DECL_AX25_PIDINCL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_PIDINCL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_PIDINCL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_PIDINCL)
#endif
#if defined(AX25_IDLE) || (defined(HAVE_DECL_AX25_IDLE) && HAVE_DECL_AX25_IDLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_IDLE) == (9), "AX25_IDLE != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_IDLE 9
#endif
#if defined(AX25_IDLE) || (defined(HAVE_DECL_AX25_IDLE) && HAVE_DECL_AX25_IDLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_IDLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_IDLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_IDLE)
#endif
#if defined(AX25_PACLEN) || (defined(HAVE_DECL_AX25_PACLEN) && HAVE_DECL_AX25_PACLEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_PACLEN) == (10), "AX25_PACLEN != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_PACLEN 10
#endif
#if defined(AX25_PACLEN) || (defined(HAVE_DECL_AX25_PACLEN) && HAVE_DECL_AX25_PACLEN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_PACLEN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_PACLEN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_PACLEN)
#endif
#if defined(AX25_IAMDIGI) || (defined(HAVE_DECL_AX25_IAMDIGI) && HAVE_DECL_AX25_IAMDIGI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AX25_IAMDIGI) == (12), "AX25_IAMDIGI != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AX25_IAMDIGI 12
#endif
#if defined(AX25_IAMDIGI) || (defined(HAVE_DECL_AX25_IAMDIGI) && HAVE_DECL_AX25_IAMDIGI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AX25_IAMDIGI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AX25_IAMDIGI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AX25_IAMDIGI)
#endif
#if defined(SO_BINDTODEVICE) || (defined(HAVE_DECL_SO_BINDTODEVICE) && HAVE_DECL_SO_BINDTODEVICE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SO_BINDTODEVICE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SO_BINDTODEVICE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SO_BINDTODEVICE)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_ax25_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_ax25_options_xdata[] = {
 XLAT(AX25_WINDOW),
 #define XLAT_VAL_0 ((unsigned) (AX25_WINDOW))
 #define XLAT_STR_0 STRINGIFY(AX25_WINDOW)
 XLAT(AX25_T1),
 #define XLAT_VAL_1 ((unsigned) (AX25_T1))
 #define XLAT_STR_1 STRINGIFY(AX25_T1)
 XLAT(AX25_N2),
 #define XLAT_VAL_2 ((unsigned) (AX25_N2))
 #define XLAT_STR_2 STRINGIFY(AX25_N2)
 XLAT(AX25_T3),
 #define XLAT_VAL_3 ((unsigned) (AX25_T3))
 #define XLAT_STR_3 STRINGIFY(AX25_T3)
 XLAT(AX25_T2),
 #define XLAT_VAL_4 ((unsigned) (AX25_T2))
 #define XLAT_STR_4 STRINGIFY(AX25_T2)
 XLAT(AX25_BACKOFF),
 #define XLAT_VAL_5 ((unsigned) (AX25_BACKOFF))
 #define XLAT_STR_5 STRINGIFY(AX25_BACKOFF)
 XLAT(AX25_EXTSEQ),
 #define XLAT_VAL_6 ((unsigned) (AX25_EXTSEQ))
 #define XLAT_STR_6 STRINGIFY(AX25_EXTSEQ)
 XLAT(AX25_PIDINCL),
 #define XLAT_VAL_7 ((unsigned) (AX25_PIDINCL))
 #define XLAT_STR_7 STRINGIFY(AX25_PIDINCL)
 XLAT(AX25_IDLE),
 #define XLAT_VAL_8 ((unsigned) (AX25_IDLE))
 #define XLAT_STR_8 STRINGIFY(AX25_IDLE)
 XLAT(AX25_PACLEN),
 #define XLAT_VAL_9 ((unsigned) (AX25_PACLEN))
 #define XLAT_STR_9 STRINGIFY(AX25_PACLEN)
 XLAT(AX25_IAMDIGI),
 #define XLAT_VAL_10 ((unsigned) (AX25_IAMDIGI))
 #define XLAT_STR_10 STRINGIFY(AX25_IAMDIGI)


#if defined(SO_BINDTODEVICE) || (defined(HAVE_DECL_SO_BINDTODEVICE) && HAVE_DECL_SO_BINDTODEVICE)
  XLAT(SO_BINDTODEVICE),
 #define XLAT_VAL_11 ((unsigned) (SO_BINDTODEVICE))
 #define XLAT_STR_11 STRINGIFY(SO_BINDTODEVICE)
#endif
};
static
const struct xlat sock_ax25_options[1] = { {
 .data = sock_ax25_options_xdata,
 .size = ARRAY_SIZE(sock_ax25_options_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
