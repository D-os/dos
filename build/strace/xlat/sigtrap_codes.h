/* Generated by ./src/xlat/gen.sh from ./src/xlat/sigtrap_codes.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(TRAP_BRKPT) || (defined(HAVE_DECL_TRAP_BRKPT) && HAVE_DECL_TRAP_BRKPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TRAP_BRKPT) == (1), "TRAP_BRKPT != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TRAP_BRKPT 1
#endif
#if defined(TRAP_TRACE) || (defined(HAVE_DECL_TRAP_TRACE) && HAVE_DECL_TRAP_TRACE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TRAP_TRACE) == (2), "TRAP_TRACE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TRAP_TRACE 2
#endif
#if defined(TRAP_BRANCH) || (defined(HAVE_DECL_TRAP_BRANCH) && HAVE_DECL_TRAP_BRANCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TRAP_BRANCH) == (3), "TRAP_BRANCH != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TRAP_BRANCH 3
#endif
#if defined(TRAP_HWBKPT) || (defined(HAVE_DECL_TRAP_HWBKPT) && HAVE_DECL_TRAP_HWBKPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TRAP_HWBKPT) == (4), "TRAP_HWBKPT != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TRAP_HWBKPT 4
#endif
#if defined(TRAP_UNK) || (defined(HAVE_DECL_TRAP_UNK) && HAVE_DECL_TRAP_UNK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TRAP_UNK) == (5), "TRAP_UNK != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TRAP_UNK 5
#endif
#if defined(TRAP_PERF) || (defined(HAVE_DECL_TRAP_PERF) && HAVE_DECL_TRAP_PERF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TRAP_PERF) == (6), "TRAP_PERF != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TRAP_PERF 6
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat sigtrap_codes[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sigtrap_codes_xdata[] = {
#if defined(TRAP_STEP) || (defined(HAVE_DECL_TRAP_STEP) && HAVE_DECL_TRAP_STEP)
  XLAT(TRAP_STEP),
 #define XLAT_VAL_0 ((unsigned) (TRAP_STEP))
 #define XLAT_STR_0 STRINGIFY(TRAP_STEP)
#endif
 XLAT(TRAP_BRKPT),
 #define XLAT_VAL_1 ((unsigned) (TRAP_BRKPT))
 #define XLAT_STR_1 STRINGIFY(TRAP_BRKPT)
#if defined(TRAP_TRACEFLOW) || (defined(HAVE_DECL_TRAP_TRACEFLOW) && HAVE_DECL_TRAP_TRACEFLOW)
  XLAT(TRAP_TRACEFLOW),
 #define XLAT_VAL_2 ((unsigned) (TRAP_TRACEFLOW))
 #define XLAT_STR_2 STRINGIFY(TRAP_TRACEFLOW)
#endif
 XLAT(TRAP_TRACE),
 #define XLAT_VAL_3 ((unsigned) (TRAP_TRACE))
 #define XLAT_STR_3 STRINGIFY(TRAP_TRACE)
#if defined(TRAP_WATCHPT) || (defined(HAVE_DECL_TRAP_WATCHPT) && HAVE_DECL_TRAP_WATCHPT)
  XLAT(TRAP_WATCHPT),
 #define XLAT_VAL_4 ((unsigned) (TRAP_WATCHPT))
 #define XLAT_STR_4 STRINGIFY(TRAP_WATCHPT)
#endif
 XLAT(TRAP_BRANCH),
 #define XLAT_VAL_5 ((unsigned) (TRAP_BRANCH))
 #define XLAT_STR_5 STRINGIFY(TRAP_BRANCH)
#if defined(TRAP_ILLTRAP) || (defined(HAVE_DECL_TRAP_ILLTRAP) && HAVE_DECL_TRAP_ILLTRAP)
  XLAT(TRAP_ILLTRAP),
 #define XLAT_VAL_6 ((unsigned) (TRAP_ILLTRAP))
 #define XLAT_STR_6 STRINGIFY(TRAP_ILLTRAP)
#endif
 XLAT(TRAP_HWBKPT),
 #define XLAT_VAL_7 ((unsigned) (TRAP_HWBKPT))
 #define XLAT_STR_7 STRINGIFY(TRAP_HWBKPT)
 XLAT(TRAP_UNK),
 #define XLAT_VAL_8 ((unsigned) (TRAP_UNK))
 #define XLAT_STR_8 STRINGIFY(TRAP_UNK)
 XLAT(TRAP_PERF),
 #define XLAT_VAL_9 ((unsigned) (TRAP_PERF))
 #define XLAT_STR_9 STRINGIFY(TRAP_PERF)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat sigtrap_codes[1] = { {
 .data = sigtrap_codes_xdata,
 .size = ARRAY_SIZE(sigtrap_codes_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
