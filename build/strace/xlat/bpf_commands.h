/* Generated by ./src/xlat/gen.sh from ./src/xlat/bpf_commands.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BPF_MAP_CREATE) || (defined(HAVE_DECL_BPF_MAP_CREATE) && HAVE_DECL_BPF_MAP_CREATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_CREATE) == (0), "BPF_MAP_CREATE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_CREATE 0
#endif
#if defined(BPF_MAP_LOOKUP_ELEM) || (defined(HAVE_DECL_BPF_MAP_LOOKUP_ELEM) && HAVE_DECL_BPF_MAP_LOOKUP_ELEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_LOOKUP_ELEM) == (1), "BPF_MAP_LOOKUP_ELEM != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_LOOKUP_ELEM 1
#endif
#if defined(BPF_MAP_UPDATE_ELEM) || (defined(HAVE_DECL_BPF_MAP_UPDATE_ELEM) && HAVE_DECL_BPF_MAP_UPDATE_ELEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_UPDATE_ELEM) == (2), "BPF_MAP_UPDATE_ELEM != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_UPDATE_ELEM 2
#endif
#if defined(BPF_MAP_DELETE_ELEM) || (defined(HAVE_DECL_BPF_MAP_DELETE_ELEM) && HAVE_DECL_BPF_MAP_DELETE_ELEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_DELETE_ELEM) == (3), "BPF_MAP_DELETE_ELEM != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_DELETE_ELEM 3
#endif
#if defined(BPF_MAP_GET_NEXT_KEY) || (defined(HAVE_DECL_BPF_MAP_GET_NEXT_KEY) && HAVE_DECL_BPF_MAP_GET_NEXT_KEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_GET_NEXT_KEY) == (4), "BPF_MAP_GET_NEXT_KEY != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_GET_NEXT_KEY 4
#endif
#if defined(BPF_PROG_LOAD) || (defined(HAVE_DECL_BPF_PROG_LOAD) && HAVE_DECL_BPF_PROG_LOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_LOAD) == (5), "BPF_PROG_LOAD != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_LOAD 5
#endif
#if defined(BPF_OBJ_PIN) || (defined(HAVE_DECL_BPF_OBJ_PIN) && HAVE_DECL_BPF_OBJ_PIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_OBJ_PIN) == (6), "BPF_OBJ_PIN != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_OBJ_PIN 6
#endif
#if defined(BPF_OBJ_GET) || (defined(HAVE_DECL_BPF_OBJ_GET) && HAVE_DECL_BPF_OBJ_GET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_OBJ_GET) == (7), "BPF_OBJ_GET != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_OBJ_GET 7
#endif
#if defined(BPF_PROG_ATTACH) || (defined(HAVE_DECL_BPF_PROG_ATTACH) && HAVE_DECL_BPF_PROG_ATTACH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_ATTACH) == (8), "BPF_PROG_ATTACH != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_ATTACH 8
#endif
#if defined(BPF_PROG_DETACH) || (defined(HAVE_DECL_BPF_PROG_DETACH) && HAVE_DECL_BPF_PROG_DETACH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_DETACH) == (9), "BPF_PROG_DETACH != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_DETACH 9
#endif
#if defined(BPF_PROG_TEST_RUN) || (defined(HAVE_DECL_BPF_PROG_TEST_RUN) && HAVE_DECL_BPF_PROG_TEST_RUN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_TEST_RUN) == (10), "BPF_PROG_TEST_RUN != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_TEST_RUN 10
#endif
#if defined(BPF_PROG_GET_NEXT_ID) || (defined(HAVE_DECL_BPF_PROG_GET_NEXT_ID) && HAVE_DECL_BPF_PROG_GET_NEXT_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_GET_NEXT_ID) == (11), "BPF_PROG_GET_NEXT_ID != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_GET_NEXT_ID 11
#endif
#if defined(BPF_MAP_GET_NEXT_ID) || (defined(HAVE_DECL_BPF_MAP_GET_NEXT_ID) && HAVE_DECL_BPF_MAP_GET_NEXT_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_GET_NEXT_ID) == (12), "BPF_MAP_GET_NEXT_ID != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_GET_NEXT_ID 12
#endif
#if defined(BPF_PROG_GET_FD_BY_ID) || (defined(HAVE_DECL_BPF_PROG_GET_FD_BY_ID) && HAVE_DECL_BPF_PROG_GET_FD_BY_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_GET_FD_BY_ID) == (13), "BPF_PROG_GET_FD_BY_ID != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_GET_FD_BY_ID 13
#endif
#if defined(BPF_MAP_GET_FD_BY_ID) || (defined(HAVE_DECL_BPF_MAP_GET_FD_BY_ID) && HAVE_DECL_BPF_MAP_GET_FD_BY_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_GET_FD_BY_ID) == (14), "BPF_MAP_GET_FD_BY_ID != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_GET_FD_BY_ID 14
#endif
#if defined(BPF_OBJ_GET_INFO_BY_FD) || (defined(HAVE_DECL_BPF_OBJ_GET_INFO_BY_FD) && HAVE_DECL_BPF_OBJ_GET_INFO_BY_FD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_OBJ_GET_INFO_BY_FD) == (15), "BPF_OBJ_GET_INFO_BY_FD != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_OBJ_GET_INFO_BY_FD 15
#endif
#if defined(BPF_PROG_QUERY) || (defined(HAVE_DECL_BPF_PROG_QUERY) && HAVE_DECL_BPF_PROG_QUERY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_QUERY) == (16), "BPF_PROG_QUERY != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_QUERY 16
#endif
#if defined(BPF_RAW_TRACEPOINT_OPEN) || (defined(HAVE_DECL_BPF_RAW_TRACEPOINT_OPEN) && HAVE_DECL_BPF_RAW_TRACEPOINT_OPEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_RAW_TRACEPOINT_OPEN) == (17), "BPF_RAW_TRACEPOINT_OPEN != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_RAW_TRACEPOINT_OPEN 17
#endif
#if defined(BPF_BTF_LOAD) || (defined(HAVE_DECL_BPF_BTF_LOAD) && HAVE_DECL_BPF_BTF_LOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_BTF_LOAD) == (18), "BPF_BTF_LOAD != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_BTF_LOAD 18
#endif
#if defined(BPF_BTF_GET_FD_BY_ID) || (defined(HAVE_DECL_BPF_BTF_GET_FD_BY_ID) && HAVE_DECL_BPF_BTF_GET_FD_BY_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_BTF_GET_FD_BY_ID) == (19), "BPF_BTF_GET_FD_BY_ID != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_BTF_GET_FD_BY_ID 19
#endif
#if defined(BPF_TASK_FD_QUERY) || (defined(HAVE_DECL_BPF_TASK_FD_QUERY) && HAVE_DECL_BPF_TASK_FD_QUERY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_TASK_FD_QUERY) == (20), "BPF_TASK_FD_QUERY != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_TASK_FD_QUERY 20
#endif
#if defined(BPF_MAP_LOOKUP_AND_DELETE_ELEM) || (defined(HAVE_DECL_BPF_MAP_LOOKUP_AND_DELETE_ELEM) && HAVE_DECL_BPF_MAP_LOOKUP_AND_DELETE_ELEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_LOOKUP_AND_DELETE_ELEM) == (21), "BPF_MAP_LOOKUP_AND_DELETE_ELEM != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_LOOKUP_AND_DELETE_ELEM 21
#endif
#if defined(BPF_MAP_FREEZE) || (defined(HAVE_DECL_BPF_MAP_FREEZE) && HAVE_DECL_BPF_MAP_FREEZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_FREEZE) == (22), "BPF_MAP_FREEZE != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_FREEZE 22
#endif
#if defined(BPF_BTF_GET_NEXT_ID) || (defined(HAVE_DECL_BPF_BTF_GET_NEXT_ID) && HAVE_DECL_BPF_BTF_GET_NEXT_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_BTF_GET_NEXT_ID) == (23), "BPF_BTF_GET_NEXT_ID != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_BTF_GET_NEXT_ID 23
#endif
#if defined(BPF_MAP_LOOKUP_BATCH) || (defined(HAVE_DECL_BPF_MAP_LOOKUP_BATCH) && HAVE_DECL_BPF_MAP_LOOKUP_BATCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_LOOKUP_BATCH) == (24), "BPF_MAP_LOOKUP_BATCH != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_LOOKUP_BATCH 24
#endif
#if defined(BPF_MAP_LOOKUP_AND_DELETE_BATCH) || (defined(HAVE_DECL_BPF_MAP_LOOKUP_AND_DELETE_BATCH) && HAVE_DECL_BPF_MAP_LOOKUP_AND_DELETE_BATCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_LOOKUP_AND_DELETE_BATCH) == (25), "BPF_MAP_LOOKUP_AND_DELETE_BATCH != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_LOOKUP_AND_DELETE_BATCH 25
#endif
#if defined(BPF_MAP_UPDATE_BATCH) || (defined(HAVE_DECL_BPF_MAP_UPDATE_BATCH) && HAVE_DECL_BPF_MAP_UPDATE_BATCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_UPDATE_BATCH) == (26), "BPF_MAP_UPDATE_BATCH != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_UPDATE_BATCH 26
#endif
#if defined(BPF_MAP_DELETE_BATCH) || (defined(HAVE_DECL_BPF_MAP_DELETE_BATCH) && HAVE_DECL_BPF_MAP_DELETE_BATCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_MAP_DELETE_BATCH) == (27), "BPF_MAP_DELETE_BATCH != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_MAP_DELETE_BATCH 27
#endif
#if defined(BPF_LINK_CREATE) || (defined(HAVE_DECL_BPF_LINK_CREATE) && HAVE_DECL_BPF_LINK_CREATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_LINK_CREATE) == (28), "BPF_LINK_CREATE != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_LINK_CREATE 28
#endif
#if defined(BPF_LINK_UPDATE) || (defined(HAVE_DECL_BPF_LINK_UPDATE) && HAVE_DECL_BPF_LINK_UPDATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_LINK_UPDATE) == (29), "BPF_LINK_UPDATE != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_LINK_UPDATE 29
#endif
#if defined(BPF_LINK_GET_FD_BY_ID) || (defined(HAVE_DECL_BPF_LINK_GET_FD_BY_ID) && HAVE_DECL_BPF_LINK_GET_FD_BY_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_LINK_GET_FD_BY_ID) == (30), "BPF_LINK_GET_FD_BY_ID != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_LINK_GET_FD_BY_ID 30
#endif
#if defined(BPF_LINK_GET_NEXT_ID) || (defined(HAVE_DECL_BPF_LINK_GET_NEXT_ID) && HAVE_DECL_BPF_LINK_GET_NEXT_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_LINK_GET_NEXT_ID) == (31), "BPF_LINK_GET_NEXT_ID != 31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_LINK_GET_NEXT_ID 31
#endif
#if defined(BPF_ENABLE_STATS) || (defined(HAVE_DECL_BPF_ENABLE_STATS) && HAVE_DECL_BPF_ENABLE_STATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_ENABLE_STATS) == (32), "BPF_ENABLE_STATS != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_ENABLE_STATS 32
#endif
#if defined(BPF_ITER_CREATE) || (defined(HAVE_DECL_BPF_ITER_CREATE) && HAVE_DECL_BPF_ITER_CREATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_ITER_CREATE) == (33), "BPF_ITER_CREATE != 33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_ITER_CREATE 33
#endif
#if defined(BPF_LINK_DETACH) || (defined(HAVE_DECL_BPF_LINK_DETACH) && HAVE_DECL_BPF_LINK_DETACH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_LINK_DETACH) == (34), "BPF_LINK_DETACH != 34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_LINK_DETACH 34
#endif
#if defined(BPF_PROG_BIND_MAP) || (defined(HAVE_DECL_BPF_PROG_BIND_MAP) && HAVE_DECL_BPF_PROG_BIND_MAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_PROG_BIND_MAP) == (35), "BPF_PROG_BIND_MAP != 35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_PROG_BIND_MAP 35
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat bpf_commands in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data bpf_commands_xdata[] = {
 [BPF_MAP_CREATE] = XLAT(BPF_MAP_CREATE),
 #define XLAT_VAL_0 ((unsigned) (BPF_MAP_CREATE))
 #define XLAT_STR_0 STRINGIFY(BPF_MAP_CREATE)
 [BPF_MAP_LOOKUP_ELEM] = XLAT(BPF_MAP_LOOKUP_ELEM),
 #define XLAT_VAL_1 ((unsigned) (BPF_MAP_LOOKUP_ELEM))
 #define XLAT_STR_1 STRINGIFY(BPF_MAP_LOOKUP_ELEM)
 [BPF_MAP_UPDATE_ELEM] = XLAT(BPF_MAP_UPDATE_ELEM),
 #define XLAT_VAL_2 ((unsigned) (BPF_MAP_UPDATE_ELEM))
 #define XLAT_STR_2 STRINGIFY(BPF_MAP_UPDATE_ELEM)
 [BPF_MAP_DELETE_ELEM] = XLAT(BPF_MAP_DELETE_ELEM),
 #define XLAT_VAL_3 ((unsigned) (BPF_MAP_DELETE_ELEM))
 #define XLAT_STR_3 STRINGIFY(BPF_MAP_DELETE_ELEM)
 [BPF_MAP_GET_NEXT_KEY] = XLAT(BPF_MAP_GET_NEXT_KEY),
 #define XLAT_VAL_4 ((unsigned) (BPF_MAP_GET_NEXT_KEY))
 #define XLAT_STR_4 STRINGIFY(BPF_MAP_GET_NEXT_KEY)
 [BPF_PROG_LOAD] = XLAT(BPF_PROG_LOAD),
 #define XLAT_VAL_5 ((unsigned) (BPF_PROG_LOAD))
 #define XLAT_STR_5 STRINGIFY(BPF_PROG_LOAD)
 [BPF_OBJ_PIN] = XLAT(BPF_OBJ_PIN),
 #define XLAT_VAL_6 ((unsigned) (BPF_OBJ_PIN))
 #define XLAT_STR_6 STRINGIFY(BPF_OBJ_PIN)
 [BPF_OBJ_GET] = XLAT(BPF_OBJ_GET),
 #define XLAT_VAL_7 ((unsigned) (BPF_OBJ_GET))
 #define XLAT_STR_7 STRINGIFY(BPF_OBJ_GET)
 [BPF_PROG_ATTACH] = XLAT(BPF_PROG_ATTACH),
 #define XLAT_VAL_8 ((unsigned) (BPF_PROG_ATTACH))
 #define XLAT_STR_8 STRINGIFY(BPF_PROG_ATTACH)
 [BPF_PROG_DETACH] = XLAT(BPF_PROG_DETACH),
 #define XLAT_VAL_9 ((unsigned) (BPF_PROG_DETACH))
 #define XLAT_STR_9 STRINGIFY(BPF_PROG_DETACH)
 [BPF_PROG_TEST_RUN] = XLAT(BPF_PROG_TEST_RUN),
 #define XLAT_VAL_10 ((unsigned) (BPF_PROG_TEST_RUN))
 #define XLAT_STR_10 STRINGIFY(BPF_PROG_TEST_RUN)
 [BPF_PROG_GET_NEXT_ID] = XLAT(BPF_PROG_GET_NEXT_ID),
 #define XLAT_VAL_11 ((unsigned) (BPF_PROG_GET_NEXT_ID))
 #define XLAT_STR_11 STRINGIFY(BPF_PROG_GET_NEXT_ID)
 [BPF_MAP_GET_NEXT_ID] = XLAT(BPF_MAP_GET_NEXT_ID),
 #define XLAT_VAL_12 ((unsigned) (BPF_MAP_GET_NEXT_ID))
 #define XLAT_STR_12 STRINGIFY(BPF_MAP_GET_NEXT_ID)
 [BPF_PROG_GET_FD_BY_ID] = XLAT(BPF_PROG_GET_FD_BY_ID),
 #define XLAT_VAL_13 ((unsigned) (BPF_PROG_GET_FD_BY_ID))
 #define XLAT_STR_13 STRINGIFY(BPF_PROG_GET_FD_BY_ID)
 [BPF_MAP_GET_FD_BY_ID] = XLAT(BPF_MAP_GET_FD_BY_ID),
 #define XLAT_VAL_14 ((unsigned) (BPF_MAP_GET_FD_BY_ID))
 #define XLAT_STR_14 STRINGIFY(BPF_MAP_GET_FD_BY_ID)
 [BPF_OBJ_GET_INFO_BY_FD] = XLAT(BPF_OBJ_GET_INFO_BY_FD),
 #define XLAT_VAL_15 ((unsigned) (BPF_OBJ_GET_INFO_BY_FD))
 #define XLAT_STR_15 STRINGIFY(BPF_OBJ_GET_INFO_BY_FD)
 [BPF_PROG_QUERY] = XLAT(BPF_PROG_QUERY),
 #define XLAT_VAL_16 ((unsigned) (BPF_PROG_QUERY))
 #define XLAT_STR_16 STRINGIFY(BPF_PROG_QUERY)
 [BPF_RAW_TRACEPOINT_OPEN] = XLAT(BPF_RAW_TRACEPOINT_OPEN),
 #define XLAT_VAL_17 ((unsigned) (BPF_RAW_TRACEPOINT_OPEN))
 #define XLAT_STR_17 STRINGIFY(BPF_RAW_TRACEPOINT_OPEN)
 [BPF_BTF_LOAD] = XLAT(BPF_BTF_LOAD),
 #define XLAT_VAL_18 ((unsigned) (BPF_BTF_LOAD))
 #define XLAT_STR_18 STRINGIFY(BPF_BTF_LOAD)
 [BPF_BTF_GET_FD_BY_ID] = XLAT(BPF_BTF_GET_FD_BY_ID),
 #define XLAT_VAL_19 ((unsigned) (BPF_BTF_GET_FD_BY_ID))
 #define XLAT_STR_19 STRINGIFY(BPF_BTF_GET_FD_BY_ID)
 [BPF_TASK_FD_QUERY] = XLAT(BPF_TASK_FD_QUERY),
 #define XLAT_VAL_20 ((unsigned) (BPF_TASK_FD_QUERY))
 #define XLAT_STR_20 STRINGIFY(BPF_TASK_FD_QUERY)
 [BPF_MAP_LOOKUP_AND_DELETE_ELEM] = XLAT(BPF_MAP_LOOKUP_AND_DELETE_ELEM),
 #define XLAT_VAL_21 ((unsigned) (BPF_MAP_LOOKUP_AND_DELETE_ELEM))
 #define XLAT_STR_21 STRINGIFY(BPF_MAP_LOOKUP_AND_DELETE_ELEM)
 [BPF_MAP_FREEZE] = XLAT(BPF_MAP_FREEZE),
 #define XLAT_VAL_22 ((unsigned) (BPF_MAP_FREEZE))
 #define XLAT_STR_22 STRINGIFY(BPF_MAP_FREEZE)
 [BPF_BTF_GET_NEXT_ID] = XLAT(BPF_BTF_GET_NEXT_ID),
 #define XLAT_VAL_23 ((unsigned) (BPF_BTF_GET_NEXT_ID))
 #define XLAT_STR_23 STRINGIFY(BPF_BTF_GET_NEXT_ID)
 [BPF_MAP_LOOKUP_BATCH] = XLAT(BPF_MAP_LOOKUP_BATCH),
 #define XLAT_VAL_24 ((unsigned) (BPF_MAP_LOOKUP_BATCH))
 #define XLAT_STR_24 STRINGIFY(BPF_MAP_LOOKUP_BATCH)
 [BPF_MAP_LOOKUP_AND_DELETE_BATCH] = XLAT(BPF_MAP_LOOKUP_AND_DELETE_BATCH),
 #define XLAT_VAL_25 ((unsigned) (BPF_MAP_LOOKUP_AND_DELETE_BATCH))
 #define XLAT_STR_25 STRINGIFY(BPF_MAP_LOOKUP_AND_DELETE_BATCH)
 [BPF_MAP_UPDATE_BATCH] = XLAT(BPF_MAP_UPDATE_BATCH),
 #define XLAT_VAL_26 ((unsigned) (BPF_MAP_UPDATE_BATCH))
 #define XLAT_STR_26 STRINGIFY(BPF_MAP_UPDATE_BATCH)
 [BPF_MAP_DELETE_BATCH] = XLAT(BPF_MAP_DELETE_BATCH),
 #define XLAT_VAL_27 ((unsigned) (BPF_MAP_DELETE_BATCH))
 #define XLAT_STR_27 STRINGIFY(BPF_MAP_DELETE_BATCH)
 [BPF_LINK_CREATE] = XLAT(BPF_LINK_CREATE),
 #define XLAT_VAL_28 ((unsigned) (BPF_LINK_CREATE))
 #define XLAT_STR_28 STRINGIFY(BPF_LINK_CREATE)
 [BPF_LINK_UPDATE] = XLAT(BPF_LINK_UPDATE),
 #define XLAT_VAL_29 ((unsigned) (BPF_LINK_UPDATE))
 #define XLAT_STR_29 STRINGIFY(BPF_LINK_UPDATE)
 [BPF_LINK_GET_FD_BY_ID] = XLAT(BPF_LINK_GET_FD_BY_ID),
 #define XLAT_VAL_30 ((unsigned) (BPF_LINK_GET_FD_BY_ID))
 #define XLAT_STR_30 STRINGIFY(BPF_LINK_GET_FD_BY_ID)
 [BPF_LINK_GET_NEXT_ID] = XLAT(BPF_LINK_GET_NEXT_ID),
 #define XLAT_VAL_31 ((unsigned) (BPF_LINK_GET_NEXT_ID))
 #define XLAT_STR_31 STRINGIFY(BPF_LINK_GET_NEXT_ID)
 [BPF_ENABLE_STATS] = XLAT(BPF_ENABLE_STATS),
 #define XLAT_VAL_32 ((unsigned) (BPF_ENABLE_STATS))
 #define XLAT_STR_32 STRINGIFY(BPF_ENABLE_STATS)
 [BPF_ITER_CREATE] = XLAT(BPF_ITER_CREATE),
 #define XLAT_VAL_33 ((unsigned) (BPF_ITER_CREATE))
 #define XLAT_STR_33 STRINGIFY(BPF_ITER_CREATE)
 [BPF_LINK_DETACH] = XLAT(BPF_LINK_DETACH),
 #define XLAT_VAL_34 ((unsigned) (BPF_LINK_DETACH))
 #define XLAT_STR_34 STRINGIFY(BPF_LINK_DETACH)
 [BPF_PROG_BIND_MAP] = XLAT(BPF_PROG_BIND_MAP),
 #define XLAT_VAL_35 ((unsigned) (BPF_PROG_BIND_MAP))
 #define XLAT_STR_35 STRINGIFY(BPF_PROG_BIND_MAP)
};
static
const struct xlat bpf_commands[1] = { {
 .data = bpf_commands_xdata,
 .size = ARRAY_SIZE(bpf_commands_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
