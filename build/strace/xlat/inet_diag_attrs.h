/* Generated by ./src/xlat/gen.sh from ./src/xlat/inet_diag_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat inet_diag_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data inet_diag_attrs_xdata[] = {
 [INET_DIAG_NONE] = XLAT(INET_DIAG_NONE),
 #define XLAT_VAL_0 ((unsigned) (INET_DIAG_NONE))
 #define XLAT_STR_0 STRINGIFY(INET_DIAG_NONE)
 [INET_DIAG_MEMINFO] = XLAT(INET_DIAG_MEMINFO),
 #define XLAT_VAL_1 ((unsigned) (INET_DIAG_MEMINFO))
 #define XLAT_STR_1 STRINGIFY(INET_DIAG_MEMINFO)
 [INET_DIAG_INFO] = XLAT(INET_DIAG_INFO),
 #define XLAT_VAL_2 ((unsigned) (INET_DIAG_INFO))
 #define XLAT_STR_2 STRINGIFY(INET_DIAG_INFO)
 [INET_DIAG_VEGASINFO] = XLAT(INET_DIAG_VEGASINFO),
 #define XLAT_VAL_3 ((unsigned) (INET_DIAG_VEGASINFO))
 #define XLAT_STR_3 STRINGIFY(INET_DIAG_VEGASINFO)
 [INET_DIAG_CONG] = XLAT(INET_DIAG_CONG),
 #define XLAT_VAL_4 ((unsigned) (INET_DIAG_CONG))
 #define XLAT_STR_4 STRINGIFY(INET_DIAG_CONG)
 [INET_DIAG_TOS] = XLAT(INET_DIAG_TOS),
 #define XLAT_VAL_5 ((unsigned) (INET_DIAG_TOS))
 #define XLAT_STR_5 STRINGIFY(INET_DIAG_TOS)
 [INET_DIAG_TCLASS] = XLAT(INET_DIAG_TCLASS),
 #define XLAT_VAL_6 ((unsigned) (INET_DIAG_TCLASS))
 #define XLAT_STR_6 STRINGIFY(INET_DIAG_TCLASS)
 [INET_DIAG_SKMEMINFO] = XLAT(INET_DIAG_SKMEMINFO),
 #define XLAT_VAL_7 ((unsigned) (INET_DIAG_SKMEMINFO))
 #define XLAT_STR_7 STRINGIFY(INET_DIAG_SKMEMINFO)
 [INET_DIAG_SHUTDOWN] = XLAT(INET_DIAG_SHUTDOWN),
 #define XLAT_VAL_8 ((unsigned) (INET_DIAG_SHUTDOWN))
 #define XLAT_STR_8 STRINGIFY(INET_DIAG_SHUTDOWN)
 [INET_DIAG_DCTCPINFO] = XLAT(INET_DIAG_DCTCPINFO),
 #define XLAT_VAL_9 ((unsigned) (INET_DIAG_DCTCPINFO))
 #define XLAT_STR_9 STRINGIFY(INET_DIAG_DCTCPINFO)
 [INET_DIAG_PROTOCOL] = XLAT(INET_DIAG_PROTOCOL),
 #define XLAT_VAL_10 ((unsigned) (INET_DIAG_PROTOCOL))
 #define XLAT_STR_10 STRINGIFY(INET_DIAG_PROTOCOL)
 [INET_DIAG_SKV6ONLY] = XLAT(INET_DIAG_SKV6ONLY),
 #define XLAT_VAL_11 ((unsigned) (INET_DIAG_SKV6ONLY))
 #define XLAT_STR_11 STRINGIFY(INET_DIAG_SKV6ONLY)
 [INET_DIAG_LOCALS] = XLAT(INET_DIAG_LOCALS),
 #define XLAT_VAL_12 ((unsigned) (INET_DIAG_LOCALS))
 #define XLAT_STR_12 STRINGIFY(INET_DIAG_LOCALS)
 [INET_DIAG_PEERS] = XLAT(INET_DIAG_PEERS),
 #define XLAT_VAL_13 ((unsigned) (INET_DIAG_PEERS))
 #define XLAT_STR_13 STRINGIFY(INET_DIAG_PEERS)
 [INET_DIAG_PAD] = XLAT(INET_DIAG_PAD),
 #define XLAT_VAL_14 ((unsigned) (INET_DIAG_PAD))
 #define XLAT_STR_14 STRINGIFY(INET_DIAG_PAD)
 [INET_DIAG_MARK] = XLAT(INET_DIAG_MARK),
 #define XLAT_VAL_15 ((unsigned) (INET_DIAG_MARK))
 #define XLAT_STR_15 STRINGIFY(INET_DIAG_MARK)
 [INET_DIAG_BBRINFO] = XLAT(INET_DIAG_BBRINFO),
 #define XLAT_VAL_16 ((unsigned) (INET_DIAG_BBRINFO))
 #define XLAT_STR_16 STRINGIFY(INET_DIAG_BBRINFO)
 [INET_DIAG_CLASS_ID] = XLAT(INET_DIAG_CLASS_ID),
 #define XLAT_VAL_17 ((unsigned) (INET_DIAG_CLASS_ID))
 #define XLAT_STR_17 STRINGIFY(INET_DIAG_CLASS_ID)
 [INET_DIAG_MD5SIG] = XLAT(INET_DIAG_MD5SIG),
 #define XLAT_VAL_18 ((unsigned) (INET_DIAG_MD5SIG))
 #define XLAT_STR_18 STRINGIFY(INET_DIAG_MD5SIG)
 [INET_DIAG_ULP_INFO] = XLAT(INET_DIAG_ULP_INFO),
 #define XLAT_VAL_19 ((unsigned) (INET_DIAG_ULP_INFO))
 #define XLAT_STR_19 STRINGIFY(INET_DIAG_ULP_INFO)
 [INET_DIAG_SK_BPF_STORAGES] = XLAT(INET_DIAG_SK_BPF_STORAGES),
 #define XLAT_VAL_20 ((unsigned) (INET_DIAG_SK_BPF_STORAGES))
 #define XLAT_STR_20 STRINGIFY(INET_DIAG_SK_BPF_STORAGES)
 [INET_DIAG_CGROUP_ID] = XLAT(INET_DIAG_CGROUP_ID),
 #define XLAT_VAL_21 ((unsigned) (INET_DIAG_CGROUP_ID))
 #define XLAT_STR_21 STRINGIFY(INET_DIAG_CGROUP_ID)
 [INET_DIAG_SOCKOPT] = XLAT(INET_DIAG_SOCKOPT),
 #define XLAT_VAL_22 ((unsigned) (INET_DIAG_SOCKOPT))
 #define XLAT_STR_22 STRINGIFY(INET_DIAG_SOCKOPT)
};
static
const struct xlat inet_diag_attrs[1] = { {
 .data = inet_diag_attrs_xdata,
 .size = ARRAY_SIZE(inet_diag_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
