/* Generated by ./src/xlat/gen.sh from ./src/xlat/kvm_cap.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(KVM_CAP_IRQCHIP) || (defined(HAVE_DECL_KVM_CAP_IRQCHIP) && HAVE_DECL_KVM_CAP_IRQCHIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IRQCHIP) == (0), "KVM_CAP_IRQCHIP != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IRQCHIP 0
#endif
#if defined(KVM_CAP_HLT) || (defined(HAVE_DECL_KVM_CAP_HLT) && HAVE_DECL_KVM_CAP_HLT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HLT) == (1), "KVM_CAP_HLT != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HLT 1
#endif
#if defined(KVM_CAP_MMU_SHADOW_CACHE_CONTROL) || (defined(HAVE_DECL_KVM_CAP_MMU_SHADOW_CACHE_CONTROL) && HAVE_DECL_KVM_CAP_MMU_SHADOW_CACHE_CONTROL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MMU_SHADOW_CACHE_CONTROL) == (2), "KVM_CAP_MMU_SHADOW_CACHE_CONTROL != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MMU_SHADOW_CACHE_CONTROL 2
#endif
#if defined(KVM_CAP_USER_MEMORY) || (defined(HAVE_DECL_KVM_CAP_USER_MEMORY) && HAVE_DECL_KVM_CAP_USER_MEMORY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_USER_MEMORY) == (3), "KVM_CAP_USER_MEMORY != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_USER_MEMORY 3
#endif
#if defined(KVM_CAP_SET_TSS_ADDR) || (defined(HAVE_DECL_KVM_CAP_SET_TSS_ADDR) && HAVE_DECL_KVM_CAP_SET_TSS_ADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SET_TSS_ADDR) == (4), "KVM_CAP_SET_TSS_ADDR != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SET_TSS_ADDR 4
#endif
#if defined(KVM_CAP_VAPIC) || (defined(HAVE_DECL_KVM_CAP_VAPIC) && HAVE_DECL_KVM_CAP_VAPIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_VAPIC) == (6), "KVM_CAP_VAPIC != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_VAPIC 6
#endif
#if defined(KVM_CAP_EXT_CPUID) || (defined(HAVE_DECL_KVM_CAP_EXT_CPUID) && HAVE_DECL_KVM_CAP_EXT_CPUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_EXT_CPUID) == (7), "KVM_CAP_EXT_CPUID != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_EXT_CPUID 7
#endif
#if defined(KVM_CAP_CLOCKSOURCE) || (defined(HAVE_DECL_KVM_CAP_CLOCKSOURCE) && HAVE_DECL_KVM_CAP_CLOCKSOURCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_CLOCKSOURCE) == (8), "KVM_CAP_CLOCKSOURCE != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_CLOCKSOURCE 8
#endif
#if defined(KVM_CAP_NR_VCPUS) || (defined(HAVE_DECL_KVM_CAP_NR_VCPUS) && HAVE_DECL_KVM_CAP_NR_VCPUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_NR_VCPUS) == (9), "KVM_CAP_NR_VCPUS != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_NR_VCPUS 9
#endif
#if defined(KVM_CAP_NR_MEMSLOTS) || (defined(HAVE_DECL_KVM_CAP_NR_MEMSLOTS) && HAVE_DECL_KVM_CAP_NR_MEMSLOTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_NR_MEMSLOTS) == (10), "KVM_CAP_NR_MEMSLOTS != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_NR_MEMSLOTS 10
#endif
#if defined(KVM_CAP_PIT) || (defined(HAVE_DECL_KVM_CAP_PIT) && HAVE_DECL_KVM_CAP_PIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PIT) == (11), "KVM_CAP_PIT != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PIT 11
#endif
#if defined(KVM_CAP_NOP_IO_DELAY) || (defined(HAVE_DECL_KVM_CAP_NOP_IO_DELAY) && HAVE_DECL_KVM_CAP_NOP_IO_DELAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_NOP_IO_DELAY) == (12), "KVM_CAP_NOP_IO_DELAY != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_NOP_IO_DELAY 12
#endif
#if defined(KVM_CAP_PV_MMU) || (defined(HAVE_DECL_KVM_CAP_PV_MMU) && HAVE_DECL_KVM_CAP_PV_MMU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PV_MMU) == (13), "KVM_CAP_PV_MMU != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PV_MMU 13
#endif
#if defined(KVM_CAP_MP_STATE) || (defined(HAVE_DECL_KVM_CAP_MP_STATE) && HAVE_DECL_KVM_CAP_MP_STATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MP_STATE) == (14), "KVM_CAP_MP_STATE != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MP_STATE 14
#endif
#if defined(KVM_CAP_COALESCED_MMIO) || (defined(HAVE_DECL_KVM_CAP_COALESCED_MMIO) && HAVE_DECL_KVM_CAP_COALESCED_MMIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_COALESCED_MMIO) == (15), "KVM_CAP_COALESCED_MMIO != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_COALESCED_MMIO 15
#endif
#if defined(KVM_CAP_SYNC_MMU) || (defined(HAVE_DECL_KVM_CAP_SYNC_MMU) && HAVE_DECL_KVM_CAP_SYNC_MMU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SYNC_MMU) == (16), "KVM_CAP_SYNC_MMU != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SYNC_MMU 16
#endif
#if defined(KVM_CAP_IOMMU) || (defined(HAVE_DECL_KVM_CAP_IOMMU) && HAVE_DECL_KVM_CAP_IOMMU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IOMMU) == (18), "KVM_CAP_IOMMU != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IOMMU 18
#endif
#if defined(KVM_CAP_DESTROY_MEMORY_REGION_WORKS) || (defined(HAVE_DECL_KVM_CAP_DESTROY_MEMORY_REGION_WORKS) && HAVE_DECL_KVM_CAP_DESTROY_MEMORY_REGION_WORKS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_DESTROY_MEMORY_REGION_WORKS) == (21), "KVM_CAP_DESTROY_MEMORY_REGION_WORKS != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_DESTROY_MEMORY_REGION_WORKS 21
#endif
#if defined(KVM_CAP_USER_NMI) || (defined(HAVE_DECL_KVM_CAP_USER_NMI) && HAVE_DECL_KVM_CAP_USER_NMI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_USER_NMI) == (22), "KVM_CAP_USER_NMI != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_USER_NMI 22
#endif
#if defined(KVM_CAP_SET_GUEST_DEBUG) || (defined(HAVE_DECL_KVM_CAP_SET_GUEST_DEBUG) && HAVE_DECL_KVM_CAP_SET_GUEST_DEBUG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SET_GUEST_DEBUG) == (23), "KVM_CAP_SET_GUEST_DEBUG != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SET_GUEST_DEBUG 23
#endif
#if defined(KVM_CAP_REINJECT_CONTROL) || (defined(HAVE_DECL_KVM_CAP_REINJECT_CONTROL) && HAVE_DECL_KVM_CAP_REINJECT_CONTROL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_REINJECT_CONTROL) == (24), "KVM_CAP_REINJECT_CONTROL != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_REINJECT_CONTROL 24
#endif
#if defined(KVM_CAP_IRQ_ROUTING) || (defined(HAVE_DECL_KVM_CAP_IRQ_ROUTING) && HAVE_DECL_KVM_CAP_IRQ_ROUTING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IRQ_ROUTING) == (25), "KVM_CAP_IRQ_ROUTING != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IRQ_ROUTING 25
#endif
#if defined(KVM_CAP_IRQ_INJECT_STATUS) || (defined(HAVE_DECL_KVM_CAP_IRQ_INJECT_STATUS) && HAVE_DECL_KVM_CAP_IRQ_INJECT_STATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IRQ_INJECT_STATUS) == (26), "KVM_CAP_IRQ_INJECT_STATUS != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IRQ_INJECT_STATUS 26
#endif
#if defined(KVM_CAP_ASSIGN_DEV_IRQ) || (defined(HAVE_DECL_KVM_CAP_ASSIGN_DEV_IRQ) && HAVE_DECL_KVM_CAP_ASSIGN_DEV_IRQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ASSIGN_DEV_IRQ) == (29), "KVM_CAP_ASSIGN_DEV_IRQ != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ASSIGN_DEV_IRQ 29
#endif
#if defined(KVM_CAP_JOIN_MEMORY_REGIONS_WORKS) || (defined(HAVE_DECL_KVM_CAP_JOIN_MEMORY_REGIONS_WORKS) && HAVE_DECL_KVM_CAP_JOIN_MEMORY_REGIONS_WORKS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_JOIN_MEMORY_REGIONS_WORKS) == (30), "KVM_CAP_JOIN_MEMORY_REGIONS_WORKS != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_JOIN_MEMORY_REGIONS_WORKS 30
#endif
#if defined(KVM_CAP_MCE) || (defined(HAVE_DECL_KVM_CAP_MCE) && HAVE_DECL_KVM_CAP_MCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MCE) == (31), "KVM_CAP_MCE != 31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MCE 31
#endif
#if defined(KVM_CAP_IRQFD) || (defined(HAVE_DECL_KVM_CAP_IRQFD) && HAVE_DECL_KVM_CAP_IRQFD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IRQFD) == (32), "KVM_CAP_IRQFD != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IRQFD 32
#endif
#if defined(KVM_CAP_PIT2) || (defined(HAVE_DECL_KVM_CAP_PIT2) && HAVE_DECL_KVM_CAP_PIT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PIT2) == (33), "KVM_CAP_PIT2 != 33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PIT2 33
#endif
#if defined(KVM_CAP_SET_BOOT_CPU_ID) || (defined(HAVE_DECL_KVM_CAP_SET_BOOT_CPU_ID) && HAVE_DECL_KVM_CAP_SET_BOOT_CPU_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SET_BOOT_CPU_ID) == (34), "KVM_CAP_SET_BOOT_CPU_ID != 34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SET_BOOT_CPU_ID 34
#endif
#if defined(KVM_CAP_PIT_STATE2) || (defined(HAVE_DECL_KVM_CAP_PIT_STATE2) && HAVE_DECL_KVM_CAP_PIT_STATE2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PIT_STATE2) == (35), "KVM_CAP_PIT_STATE2 != 35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PIT_STATE2 35
#endif
#if defined(KVM_CAP_IOEVENTFD) || (defined(HAVE_DECL_KVM_CAP_IOEVENTFD) && HAVE_DECL_KVM_CAP_IOEVENTFD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IOEVENTFD) == (36), "KVM_CAP_IOEVENTFD != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IOEVENTFD 36
#endif
#if defined(KVM_CAP_SET_IDENTITY_MAP_ADDR) || (defined(HAVE_DECL_KVM_CAP_SET_IDENTITY_MAP_ADDR) && HAVE_DECL_KVM_CAP_SET_IDENTITY_MAP_ADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SET_IDENTITY_MAP_ADDR) == (37), "KVM_CAP_SET_IDENTITY_MAP_ADDR != 37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SET_IDENTITY_MAP_ADDR 37
#endif
#if defined(KVM_CAP_XEN_HVM) || (defined(HAVE_DECL_KVM_CAP_XEN_HVM) && HAVE_DECL_KVM_CAP_XEN_HVM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_XEN_HVM) == (38), "KVM_CAP_XEN_HVM != 38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_XEN_HVM 38
#endif
#if defined(KVM_CAP_ADJUST_CLOCK) || (defined(HAVE_DECL_KVM_CAP_ADJUST_CLOCK) && HAVE_DECL_KVM_CAP_ADJUST_CLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ADJUST_CLOCK) == (39), "KVM_CAP_ADJUST_CLOCK != 39");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ADJUST_CLOCK 39
#endif
#if defined(KVM_CAP_INTERNAL_ERROR_DATA) || (defined(HAVE_DECL_KVM_CAP_INTERNAL_ERROR_DATA) && HAVE_DECL_KVM_CAP_INTERNAL_ERROR_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_INTERNAL_ERROR_DATA) == (40), "KVM_CAP_INTERNAL_ERROR_DATA != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_INTERNAL_ERROR_DATA 40
#endif
#if defined(KVM_CAP_VCPU_EVENTS) || (defined(HAVE_DECL_KVM_CAP_VCPU_EVENTS) && HAVE_DECL_KVM_CAP_VCPU_EVENTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_VCPU_EVENTS) == (41), "KVM_CAP_VCPU_EVENTS != 41");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_VCPU_EVENTS 41
#endif
#if defined(KVM_CAP_S390_PSW) || (defined(HAVE_DECL_KVM_CAP_S390_PSW) && HAVE_DECL_KVM_CAP_S390_PSW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_PSW) == (42), "KVM_CAP_S390_PSW != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_PSW 42
#endif
#if defined(KVM_CAP_PPC_SEGSTATE) || (defined(HAVE_DECL_KVM_CAP_PPC_SEGSTATE) && HAVE_DECL_KVM_CAP_PPC_SEGSTATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_SEGSTATE) == (43), "KVM_CAP_PPC_SEGSTATE != 43");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_SEGSTATE 43
#endif
#if defined(KVM_CAP_HYPERV) || (defined(HAVE_DECL_KVM_CAP_HYPERV) && HAVE_DECL_KVM_CAP_HYPERV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV) == (44), "KVM_CAP_HYPERV != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV 44
#endif
#if defined(KVM_CAP_HYPERV_VAPIC) || (defined(HAVE_DECL_KVM_CAP_HYPERV_VAPIC) && HAVE_DECL_KVM_CAP_HYPERV_VAPIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_VAPIC) == (45), "KVM_CAP_HYPERV_VAPIC != 45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_VAPIC 45
#endif
#if defined(KVM_CAP_HYPERV_SPIN) || (defined(HAVE_DECL_KVM_CAP_HYPERV_SPIN) && HAVE_DECL_KVM_CAP_HYPERV_SPIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_SPIN) == (46), "KVM_CAP_HYPERV_SPIN != 46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_SPIN 46
#endif
#if defined(KVM_CAP_PCI_SEGMENT) || (defined(HAVE_DECL_KVM_CAP_PCI_SEGMENT) && HAVE_DECL_KVM_CAP_PCI_SEGMENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PCI_SEGMENT) == (47), "KVM_CAP_PCI_SEGMENT != 47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PCI_SEGMENT 47
#endif
#if defined(KVM_CAP_PPC_PAIRED_SINGLES) || (defined(HAVE_DECL_KVM_CAP_PPC_PAIRED_SINGLES) && HAVE_DECL_KVM_CAP_PPC_PAIRED_SINGLES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_PAIRED_SINGLES) == (48), "KVM_CAP_PPC_PAIRED_SINGLES != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_PAIRED_SINGLES 48
#endif
#if defined(KVM_CAP_INTR_SHADOW) || (defined(HAVE_DECL_KVM_CAP_INTR_SHADOW) && HAVE_DECL_KVM_CAP_INTR_SHADOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_INTR_SHADOW) == (49), "KVM_CAP_INTR_SHADOW != 49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_INTR_SHADOW 49
#endif
#if defined(KVM_CAP_DEBUGREGS) || (defined(HAVE_DECL_KVM_CAP_DEBUGREGS) && HAVE_DECL_KVM_CAP_DEBUGREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_DEBUGREGS) == (50), "KVM_CAP_DEBUGREGS != 50");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_DEBUGREGS 50
#endif
#if defined(KVM_CAP_X86_ROBUST_SINGLESTEP) || (defined(HAVE_DECL_KVM_CAP_X86_ROBUST_SINGLESTEP) && HAVE_DECL_KVM_CAP_X86_ROBUST_SINGLESTEP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_X86_ROBUST_SINGLESTEP) == (51), "KVM_CAP_X86_ROBUST_SINGLESTEP != 51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_X86_ROBUST_SINGLESTEP 51
#endif
#if defined(KVM_CAP_PPC_OSI) || (defined(HAVE_DECL_KVM_CAP_PPC_OSI) && HAVE_DECL_KVM_CAP_PPC_OSI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_OSI) == (52), "KVM_CAP_PPC_OSI != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_OSI 52
#endif
#if defined(KVM_CAP_PPC_UNSET_IRQ) || (defined(HAVE_DECL_KVM_CAP_PPC_UNSET_IRQ) && HAVE_DECL_KVM_CAP_PPC_UNSET_IRQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_UNSET_IRQ) == (53), "KVM_CAP_PPC_UNSET_IRQ != 53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_UNSET_IRQ 53
#endif
#if defined(KVM_CAP_ENABLE_CAP) || (defined(HAVE_DECL_KVM_CAP_ENABLE_CAP) && HAVE_DECL_KVM_CAP_ENABLE_CAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ENABLE_CAP) == (54), "KVM_CAP_ENABLE_CAP != 54");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ENABLE_CAP 54
#endif
#if defined(KVM_CAP_XSAVE) || (defined(HAVE_DECL_KVM_CAP_XSAVE) && HAVE_DECL_KVM_CAP_XSAVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_XSAVE) == (55), "KVM_CAP_XSAVE != 55");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_XSAVE 55
#endif
#if defined(KVM_CAP_XCRS) || (defined(HAVE_DECL_KVM_CAP_XCRS) && HAVE_DECL_KVM_CAP_XCRS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_XCRS) == (56), "KVM_CAP_XCRS != 56");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_XCRS 56
#endif
#if defined(KVM_CAP_PPC_GET_PVINFO) || (defined(HAVE_DECL_KVM_CAP_PPC_GET_PVINFO) && HAVE_DECL_KVM_CAP_PPC_GET_PVINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_GET_PVINFO) == (57), "KVM_CAP_PPC_GET_PVINFO != 57");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_GET_PVINFO 57
#endif
#if defined(KVM_CAP_PPC_IRQ_LEVEL) || (defined(HAVE_DECL_KVM_CAP_PPC_IRQ_LEVEL) && HAVE_DECL_KVM_CAP_PPC_IRQ_LEVEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_IRQ_LEVEL) == (58), "KVM_CAP_PPC_IRQ_LEVEL != 58");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_IRQ_LEVEL 58
#endif
#if defined(KVM_CAP_ASYNC_PF) || (defined(HAVE_DECL_KVM_CAP_ASYNC_PF) && HAVE_DECL_KVM_CAP_ASYNC_PF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ASYNC_PF) == (59), "KVM_CAP_ASYNC_PF != 59");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ASYNC_PF 59
#endif
#if defined(KVM_CAP_TSC_CONTROL) || (defined(HAVE_DECL_KVM_CAP_TSC_CONTROL) && HAVE_DECL_KVM_CAP_TSC_CONTROL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_TSC_CONTROL) == (60), "KVM_CAP_TSC_CONTROL != 60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_TSC_CONTROL 60
#endif
#if defined(KVM_CAP_GET_TSC_KHZ) || (defined(HAVE_DECL_KVM_CAP_GET_TSC_KHZ) && HAVE_DECL_KVM_CAP_GET_TSC_KHZ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_GET_TSC_KHZ) == (61), "KVM_CAP_GET_TSC_KHZ != 61");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_GET_TSC_KHZ 61
#endif
#if defined(KVM_CAP_PPC_BOOKE_SREGS) || (defined(HAVE_DECL_KVM_CAP_PPC_BOOKE_SREGS) && HAVE_DECL_KVM_CAP_PPC_BOOKE_SREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_BOOKE_SREGS) == (62), "KVM_CAP_PPC_BOOKE_SREGS != 62");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_BOOKE_SREGS 62
#endif
#if defined(KVM_CAP_SPAPR_TCE) || (defined(HAVE_DECL_KVM_CAP_SPAPR_TCE) && HAVE_DECL_KVM_CAP_SPAPR_TCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SPAPR_TCE) == (63), "KVM_CAP_SPAPR_TCE != 63");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SPAPR_TCE 63
#endif
#if defined(KVM_CAP_PPC_SMT) || (defined(HAVE_DECL_KVM_CAP_PPC_SMT) && HAVE_DECL_KVM_CAP_PPC_SMT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_SMT) == (64), "KVM_CAP_PPC_SMT != 64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_SMT 64
#endif
#if defined(KVM_CAP_PPC_RMA) || (defined(HAVE_DECL_KVM_CAP_PPC_RMA) && HAVE_DECL_KVM_CAP_PPC_RMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_RMA) == (65), "KVM_CAP_PPC_RMA != 65");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_RMA 65
#endif
#if defined(KVM_CAP_MAX_VCPUS) || (defined(HAVE_DECL_KVM_CAP_MAX_VCPUS) && HAVE_DECL_KVM_CAP_MAX_VCPUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MAX_VCPUS) == (66), "KVM_CAP_MAX_VCPUS != 66");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MAX_VCPUS 66
#endif
#if defined(KVM_CAP_PPC_HIOR) || (defined(HAVE_DECL_KVM_CAP_PPC_HIOR) && HAVE_DECL_KVM_CAP_PPC_HIOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_HIOR) == (67), "KVM_CAP_PPC_HIOR != 67");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_HIOR 67
#endif
#if defined(KVM_CAP_PPC_PAPR) || (defined(HAVE_DECL_KVM_CAP_PPC_PAPR) && HAVE_DECL_KVM_CAP_PPC_PAPR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_PAPR) == (68), "KVM_CAP_PPC_PAPR != 68");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_PAPR 68
#endif
#if defined(KVM_CAP_SW_TLB) || (defined(HAVE_DECL_KVM_CAP_SW_TLB) && HAVE_DECL_KVM_CAP_SW_TLB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SW_TLB) == (69), "KVM_CAP_SW_TLB != 69");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SW_TLB 69
#endif
#if defined(KVM_CAP_ONE_REG) || (defined(HAVE_DECL_KVM_CAP_ONE_REG) && HAVE_DECL_KVM_CAP_ONE_REG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ONE_REG) == (70), "KVM_CAP_ONE_REG != 70");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ONE_REG 70
#endif
#if defined(KVM_CAP_S390_GMAP) || (defined(HAVE_DECL_KVM_CAP_S390_GMAP) && HAVE_DECL_KVM_CAP_S390_GMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_GMAP) == (71), "KVM_CAP_S390_GMAP != 71");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_GMAP 71
#endif
#if defined(KVM_CAP_TSC_DEADLINE_TIMER) || (defined(HAVE_DECL_KVM_CAP_TSC_DEADLINE_TIMER) && HAVE_DECL_KVM_CAP_TSC_DEADLINE_TIMER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_TSC_DEADLINE_TIMER) == (72), "KVM_CAP_TSC_DEADLINE_TIMER != 72");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_TSC_DEADLINE_TIMER 72
#endif
#if defined(KVM_CAP_S390_UCONTROL) || (defined(HAVE_DECL_KVM_CAP_S390_UCONTROL) && HAVE_DECL_KVM_CAP_S390_UCONTROL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_UCONTROL) == (73), "KVM_CAP_S390_UCONTROL != 73");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_UCONTROL 73
#endif
#if defined(KVM_CAP_SYNC_REGS) || (defined(HAVE_DECL_KVM_CAP_SYNC_REGS) && HAVE_DECL_KVM_CAP_SYNC_REGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SYNC_REGS) == (74), "KVM_CAP_SYNC_REGS != 74");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SYNC_REGS 74
#endif
#if defined(KVM_CAP_PCI_2_3) || (defined(HAVE_DECL_KVM_CAP_PCI_2_3) && HAVE_DECL_KVM_CAP_PCI_2_3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PCI_2_3) == (75), "KVM_CAP_PCI_2_3 != 75");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PCI_2_3 75
#endif
#if defined(KVM_CAP_KVMCLOCK_CTRL) || (defined(HAVE_DECL_KVM_CAP_KVMCLOCK_CTRL) && HAVE_DECL_KVM_CAP_KVMCLOCK_CTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_KVMCLOCK_CTRL) == (76), "KVM_CAP_KVMCLOCK_CTRL != 76");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_KVMCLOCK_CTRL 76
#endif
#if defined(KVM_CAP_SIGNAL_MSI) || (defined(HAVE_DECL_KVM_CAP_SIGNAL_MSI) && HAVE_DECL_KVM_CAP_SIGNAL_MSI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SIGNAL_MSI) == (77), "KVM_CAP_SIGNAL_MSI != 77");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SIGNAL_MSI 77
#endif
#if defined(KVM_CAP_PPC_GET_SMMU_INFO) || (defined(HAVE_DECL_KVM_CAP_PPC_GET_SMMU_INFO) && HAVE_DECL_KVM_CAP_PPC_GET_SMMU_INFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_GET_SMMU_INFO) == (78), "KVM_CAP_PPC_GET_SMMU_INFO != 78");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_GET_SMMU_INFO 78
#endif
#if defined(KVM_CAP_S390_COW) || (defined(HAVE_DECL_KVM_CAP_S390_COW) && HAVE_DECL_KVM_CAP_S390_COW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_COW) == (79), "KVM_CAP_S390_COW != 79");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_COW 79
#endif
#if defined(KVM_CAP_PPC_ALLOC_HTAB) || (defined(HAVE_DECL_KVM_CAP_PPC_ALLOC_HTAB) && HAVE_DECL_KVM_CAP_PPC_ALLOC_HTAB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_ALLOC_HTAB) == (80), "KVM_CAP_PPC_ALLOC_HTAB != 80");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_ALLOC_HTAB 80
#endif
#if defined(KVM_CAP_READONLY_MEM) || (defined(HAVE_DECL_KVM_CAP_READONLY_MEM) && HAVE_DECL_KVM_CAP_READONLY_MEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_READONLY_MEM) == (81), "KVM_CAP_READONLY_MEM != 81");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_READONLY_MEM 81
#endif
#if defined(KVM_CAP_IRQFD_RESAMPLE) || (defined(HAVE_DECL_KVM_CAP_IRQFD_RESAMPLE) && HAVE_DECL_KVM_CAP_IRQFD_RESAMPLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IRQFD_RESAMPLE) == (82), "KVM_CAP_IRQFD_RESAMPLE != 82");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IRQFD_RESAMPLE 82
#endif
#if defined(KVM_CAP_PPC_BOOKE_WATCHDOG) || (defined(HAVE_DECL_KVM_CAP_PPC_BOOKE_WATCHDOG) && HAVE_DECL_KVM_CAP_PPC_BOOKE_WATCHDOG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_BOOKE_WATCHDOG) == (83), "KVM_CAP_PPC_BOOKE_WATCHDOG != 83");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_BOOKE_WATCHDOG 83
#endif
#if defined(KVM_CAP_PPC_HTAB_FD) || (defined(HAVE_DECL_KVM_CAP_PPC_HTAB_FD) && HAVE_DECL_KVM_CAP_PPC_HTAB_FD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_HTAB_FD) == (84), "KVM_CAP_PPC_HTAB_FD != 84");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_HTAB_FD 84
#endif
#if defined(KVM_CAP_S390_CSS_SUPPORT) || (defined(HAVE_DECL_KVM_CAP_S390_CSS_SUPPORT) && HAVE_DECL_KVM_CAP_S390_CSS_SUPPORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_CSS_SUPPORT) == (85), "KVM_CAP_S390_CSS_SUPPORT != 85");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_CSS_SUPPORT 85
#endif
#if defined(KVM_CAP_PPC_EPR) || (defined(HAVE_DECL_KVM_CAP_PPC_EPR) && HAVE_DECL_KVM_CAP_PPC_EPR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_EPR) == (86), "KVM_CAP_PPC_EPR != 86");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_EPR 86
#endif
#if defined(KVM_CAP_ARM_PSCI) || (defined(HAVE_DECL_KVM_CAP_ARM_PSCI) && HAVE_DECL_KVM_CAP_ARM_PSCI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_PSCI) == (87), "KVM_CAP_ARM_PSCI != 87");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_PSCI 87
#endif
#if defined(KVM_CAP_ARM_SET_DEVICE_ADDR) || (defined(HAVE_DECL_KVM_CAP_ARM_SET_DEVICE_ADDR) && HAVE_DECL_KVM_CAP_ARM_SET_DEVICE_ADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_SET_DEVICE_ADDR) == (88), "KVM_CAP_ARM_SET_DEVICE_ADDR != 88");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_SET_DEVICE_ADDR 88
#endif
#if defined(KVM_CAP_DEVICE_CTRL) || (defined(HAVE_DECL_KVM_CAP_DEVICE_CTRL) && HAVE_DECL_KVM_CAP_DEVICE_CTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_DEVICE_CTRL) == (89), "KVM_CAP_DEVICE_CTRL != 89");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_DEVICE_CTRL 89
#endif
#if defined(KVM_CAP_IRQ_MPIC) || (defined(HAVE_DECL_KVM_CAP_IRQ_MPIC) && HAVE_DECL_KVM_CAP_IRQ_MPIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IRQ_MPIC) == (90), "KVM_CAP_IRQ_MPIC != 90");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IRQ_MPIC 90
#endif
#if defined(KVM_CAP_PPC_RTAS) || (defined(HAVE_DECL_KVM_CAP_PPC_RTAS) && HAVE_DECL_KVM_CAP_PPC_RTAS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_RTAS) == (91), "KVM_CAP_PPC_RTAS != 91");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_RTAS 91
#endif
#if defined(KVM_CAP_IRQ_XICS) || (defined(HAVE_DECL_KVM_CAP_IRQ_XICS) && HAVE_DECL_KVM_CAP_IRQ_XICS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IRQ_XICS) == (92), "KVM_CAP_IRQ_XICS != 92");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IRQ_XICS 92
#endif
#if defined(KVM_CAP_ARM_EL1_32BIT) || (defined(HAVE_DECL_KVM_CAP_ARM_EL1_32BIT) && HAVE_DECL_KVM_CAP_ARM_EL1_32BIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_EL1_32BIT) == (93), "KVM_CAP_ARM_EL1_32BIT != 93");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_EL1_32BIT 93
#endif
#if defined(KVM_CAP_SPAPR_MULTITCE) || (defined(HAVE_DECL_KVM_CAP_SPAPR_MULTITCE) && HAVE_DECL_KVM_CAP_SPAPR_MULTITCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SPAPR_MULTITCE) == (94), "KVM_CAP_SPAPR_MULTITCE != 94");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SPAPR_MULTITCE 94
#endif
#if defined(KVM_CAP_EXT_EMUL_CPUID) || (defined(HAVE_DECL_KVM_CAP_EXT_EMUL_CPUID) && HAVE_DECL_KVM_CAP_EXT_EMUL_CPUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_EXT_EMUL_CPUID) == (95), "KVM_CAP_EXT_EMUL_CPUID != 95");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_EXT_EMUL_CPUID 95
#endif
#if defined(KVM_CAP_HYPERV_TIME) || (defined(HAVE_DECL_KVM_CAP_HYPERV_TIME) && HAVE_DECL_KVM_CAP_HYPERV_TIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_TIME) == (96), "KVM_CAP_HYPERV_TIME != 96");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_TIME 96
#endif
#if defined(KVM_CAP_IOAPIC_POLARITY_IGNORED) || (defined(HAVE_DECL_KVM_CAP_IOAPIC_POLARITY_IGNORED) && HAVE_DECL_KVM_CAP_IOAPIC_POLARITY_IGNORED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IOAPIC_POLARITY_IGNORED) == (97), "KVM_CAP_IOAPIC_POLARITY_IGNORED != 97");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IOAPIC_POLARITY_IGNORED 97
#endif
#if defined(KVM_CAP_ENABLE_CAP_VM) || (defined(HAVE_DECL_KVM_CAP_ENABLE_CAP_VM) && HAVE_DECL_KVM_CAP_ENABLE_CAP_VM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ENABLE_CAP_VM) == (98), "KVM_CAP_ENABLE_CAP_VM != 98");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ENABLE_CAP_VM 98
#endif
#if defined(KVM_CAP_S390_IRQCHIP) || (defined(HAVE_DECL_KVM_CAP_S390_IRQCHIP) && HAVE_DECL_KVM_CAP_S390_IRQCHIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_IRQCHIP) == (99), "KVM_CAP_S390_IRQCHIP != 99");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_IRQCHIP 99
#endif
#if defined(KVM_CAP_IOEVENTFD_NO_LENGTH) || (defined(HAVE_DECL_KVM_CAP_IOEVENTFD_NO_LENGTH) && HAVE_DECL_KVM_CAP_IOEVENTFD_NO_LENGTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IOEVENTFD_NO_LENGTH) == (100), "KVM_CAP_IOEVENTFD_NO_LENGTH != 100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IOEVENTFD_NO_LENGTH 100
#endif
#if defined(KVM_CAP_VM_ATTRIBUTES) || (defined(HAVE_DECL_KVM_CAP_VM_ATTRIBUTES) && HAVE_DECL_KVM_CAP_VM_ATTRIBUTES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_VM_ATTRIBUTES) == (101), "KVM_CAP_VM_ATTRIBUTES != 101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_VM_ATTRIBUTES 101
#endif
#if defined(KVM_CAP_ARM_PSCI_0_2) || (defined(HAVE_DECL_KVM_CAP_ARM_PSCI_0_2) && HAVE_DECL_KVM_CAP_ARM_PSCI_0_2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_PSCI_0_2) == (102), "KVM_CAP_ARM_PSCI_0_2 != 102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_PSCI_0_2 102
#endif
#if defined(KVM_CAP_PPC_FIXUP_HCALL) || (defined(HAVE_DECL_KVM_CAP_PPC_FIXUP_HCALL) && HAVE_DECL_KVM_CAP_PPC_FIXUP_HCALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_FIXUP_HCALL) == (103), "KVM_CAP_PPC_FIXUP_HCALL != 103");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_FIXUP_HCALL 103
#endif
#if defined(KVM_CAP_PPC_ENABLE_HCALL) || (defined(HAVE_DECL_KVM_CAP_PPC_ENABLE_HCALL) && HAVE_DECL_KVM_CAP_PPC_ENABLE_HCALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_ENABLE_HCALL) == (104), "KVM_CAP_PPC_ENABLE_HCALL != 104");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_ENABLE_HCALL 104
#endif
#if defined(KVM_CAP_CHECK_EXTENSION_VM) || (defined(HAVE_DECL_KVM_CAP_CHECK_EXTENSION_VM) && HAVE_DECL_KVM_CAP_CHECK_EXTENSION_VM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_CHECK_EXTENSION_VM) == (105), "KVM_CAP_CHECK_EXTENSION_VM != 105");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_CHECK_EXTENSION_VM 105
#endif
#if defined(KVM_CAP_S390_USER_SIGP) || (defined(HAVE_DECL_KVM_CAP_S390_USER_SIGP) && HAVE_DECL_KVM_CAP_S390_USER_SIGP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_USER_SIGP) == (106), "KVM_CAP_S390_USER_SIGP != 106");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_USER_SIGP 106
#endif
#if defined(KVM_CAP_S390_VECTOR_REGISTERS) || (defined(HAVE_DECL_KVM_CAP_S390_VECTOR_REGISTERS) && HAVE_DECL_KVM_CAP_S390_VECTOR_REGISTERS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_VECTOR_REGISTERS) == (107), "KVM_CAP_S390_VECTOR_REGISTERS != 107");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_VECTOR_REGISTERS 107
#endif
#if defined(KVM_CAP_S390_MEM_OP) || (defined(HAVE_DECL_KVM_CAP_S390_MEM_OP) && HAVE_DECL_KVM_CAP_S390_MEM_OP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_MEM_OP) == (108), "KVM_CAP_S390_MEM_OP != 108");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_MEM_OP 108
#endif
#if defined(KVM_CAP_S390_USER_STSI) || (defined(HAVE_DECL_KVM_CAP_S390_USER_STSI) && HAVE_DECL_KVM_CAP_S390_USER_STSI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_USER_STSI) == (109), "KVM_CAP_S390_USER_STSI != 109");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_USER_STSI 109
#endif
#if defined(KVM_CAP_S390_SKEYS) || (defined(HAVE_DECL_KVM_CAP_S390_SKEYS) && HAVE_DECL_KVM_CAP_S390_SKEYS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_SKEYS) == (110), "KVM_CAP_S390_SKEYS != 110");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_SKEYS 110
#endif
#if defined(KVM_CAP_MIPS_FPU) || (defined(HAVE_DECL_KVM_CAP_MIPS_FPU) && HAVE_DECL_KVM_CAP_MIPS_FPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MIPS_FPU) == (111), "KVM_CAP_MIPS_FPU != 111");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MIPS_FPU 111
#endif
#if defined(KVM_CAP_MIPS_MSA) || (defined(HAVE_DECL_KVM_CAP_MIPS_MSA) && HAVE_DECL_KVM_CAP_MIPS_MSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MIPS_MSA) == (112), "KVM_CAP_MIPS_MSA != 112");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MIPS_MSA 112
#endif
#if defined(KVM_CAP_S390_INJECT_IRQ) || (defined(HAVE_DECL_KVM_CAP_S390_INJECT_IRQ) && HAVE_DECL_KVM_CAP_S390_INJECT_IRQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_INJECT_IRQ) == (113), "KVM_CAP_S390_INJECT_IRQ != 113");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_INJECT_IRQ 113
#endif
#if defined(KVM_CAP_S390_IRQ_STATE) || (defined(HAVE_DECL_KVM_CAP_S390_IRQ_STATE) && HAVE_DECL_KVM_CAP_S390_IRQ_STATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_IRQ_STATE) == (114), "KVM_CAP_S390_IRQ_STATE != 114");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_IRQ_STATE 114
#endif
#if defined(KVM_CAP_PPC_HWRNG) || (defined(HAVE_DECL_KVM_CAP_PPC_HWRNG) && HAVE_DECL_KVM_CAP_PPC_HWRNG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_HWRNG) == (115), "KVM_CAP_PPC_HWRNG != 115");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_HWRNG 115
#endif
#if defined(KVM_CAP_DISABLE_QUIRKS) || (defined(HAVE_DECL_KVM_CAP_DISABLE_QUIRKS) && HAVE_DECL_KVM_CAP_DISABLE_QUIRKS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_DISABLE_QUIRKS) == (116), "KVM_CAP_DISABLE_QUIRKS != 116");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_DISABLE_QUIRKS 116
#endif
#if defined(KVM_CAP_X86_SMM) || (defined(HAVE_DECL_KVM_CAP_X86_SMM) && HAVE_DECL_KVM_CAP_X86_SMM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_X86_SMM) == (117), "KVM_CAP_X86_SMM != 117");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_X86_SMM 117
#endif
#if defined(KVM_CAP_MULTI_ADDRESS_SPACE) || (defined(HAVE_DECL_KVM_CAP_MULTI_ADDRESS_SPACE) && HAVE_DECL_KVM_CAP_MULTI_ADDRESS_SPACE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MULTI_ADDRESS_SPACE) == (118), "KVM_CAP_MULTI_ADDRESS_SPACE != 118");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MULTI_ADDRESS_SPACE 118
#endif
#if defined(KVM_CAP_GUEST_DEBUG_HW_BPS) || (defined(HAVE_DECL_KVM_CAP_GUEST_DEBUG_HW_BPS) && HAVE_DECL_KVM_CAP_GUEST_DEBUG_HW_BPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_GUEST_DEBUG_HW_BPS) == (119), "KVM_CAP_GUEST_DEBUG_HW_BPS != 119");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_GUEST_DEBUG_HW_BPS 119
#endif
#if defined(KVM_CAP_GUEST_DEBUG_HW_WPS) || (defined(HAVE_DECL_KVM_CAP_GUEST_DEBUG_HW_WPS) && HAVE_DECL_KVM_CAP_GUEST_DEBUG_HW_WPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_GUEST_DEBUG_HW_WPS) == (120), "KVM_CAP_GUEST_DEBUG_HW_WPS != 120");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_GUEST_DEBUG_HW_WPS 120
#endif
#if defined(KVM_CAP_SPLIT_IRQCHIP) || (defined(HAVE_DECL_KVM_CAP_SPLIT_IRQCHIP) && HAVE_DECL_KVM_CAP_SPLIT_IRQCHIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SPLIT_IRQCHIP) == (121), "KVM_CAP_SPLIT_IRQCHIP != 121");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SPLIT_IRQCHIP 121
#endif
#if defined(KVM_CAP_IOEVENTFD_ANY_LENGTH) || (defined(HAVE_DECL_KVM_CAP_IOEVENTFD_ANY_LENGTH) && HAVE_DECL_KVM_CAP_IOEVENTFD_ANY_LENGTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IOEVENTFD_ANY_LENGTH) == (122), "KVM_CAP_IOEVENTFD_ANY_LENGTH != 122");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IOEVENTFD_ANY_LENGTH 122
#endif
#if defined(KVM_CAP_HYPERV_SYNIC) || (defined(HAVE_DECL_KVM_CAP_HYPERV_SYNIC) && HAVE_DECL_KVM_CAP_HYPERV_SYNIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_SYNIC) == (123), "KVM_CAP_HYPERV_SYNIC != 123");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_SYNIC 123
#endif
#if defined(KVM_CAP_S390_RI) || (defined(HAVE_DECL_KVM_CAP_S390_RI) && HAVE_DECL_KVM_CAP_S390_RI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_RI) == (124), "KVM_CAP_S390_RI != 124");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_RI 124
#endif
#if defined(KVM_CAP_SPAPR_TCE_64) || (defined(HAVE_DECL_KVM_CAP_SPAPR_TCE_64) && HAVE_DECL_KVM_CAP_SPAPR_TCE_64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SPAPR_TCE_64) == (125), "KVM_CAP_SPAPR_TCE_64 != 125");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SPAPR_TCE_64 125
#endif
#if defined(KVM_CAP_ARM_PMU_V3) || (defined(HAVE_DECL_KVM_CAP_ARM_PMU_V3) && HAVE_DECL_KVM_CAP_ARM_PMU_V3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_PMU_V3) == (126), "KVM_CAP_ARM_PMU_V3 != 126");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_PMU_V3 126
#endif
#if defined(KVM_CAP_VCPU_ATTRIBUTES) || (defined(HAVE_DECL_KVM_CAP_VCPU_ATTRIBUTES) && HAVE_DECL_KVM_CAP_VCPU_ATTRIBUTES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_VCPU_ATTRIBUTES) == (127), "KVM_CAP_VCPU_ATTRIBUTES != 127");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_VCPU_ATTRIBUTES 127
#endif
#if defined(KVM_CAP_MAX_VCPU_ID) || (defined(HAVE_DECL_KVM_CAP_MAX_VCPU_ID) && HAVE_DECL_KVM_CAP_MAX_VCPU_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MAX_VCPU_ID) == (128), "KVM_CAP_MAX_VCPU_ID != 128");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MAX_VCPU_ID 128
#endif
#if defined(KVM_CAP_X2APIC_API) || (defined(HAVE_DECL_KVM_CAP_X2APIC_API) && HAVE_DECL_KVM_CAP_X2APIC_API)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_X2APIC_API) == (129), "KVM_CAP_X2APIC_API != 129");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_X2APIC_API 129
#endif
#if defined(KVM_CAP_S390_USER_INSTR0) || (defined(HAVE_DECL_KVM_CAP_S390_USER_INSTR0) && HAVE_DECL_KVM_CAP_S390_USER_INSTR0)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_USER_INSTR0) == (130), "KVM_CAP_S390_USER_INSTR0 != 130");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_USER_INSTR0 130
#endif
#if defined(KVM_CAP_MSI_DEVID) || (defined(HAVE_DECL_KVM_CAP_MSI_DEVID) && HAVE_DECL_KVM_CAP_MSI_DEVID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MSI_DEVID) == (131), "KVM_CAP_MSI_DEVID != 131");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MSI_DEVID 131
#endif
#if defined(KVM_CAP_PPC_HTM) || (defined(HAVE_DECL_KVM_CAP_PPC_HTM) && HAVE_DECL_KVM_CAP_PPC_HTM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_HTM) == (132), "KVM_CAP_PPC_HTM != 132");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_HTM 132
#endif
#if defined(KVM_CAP_SPAPR_RESIZE_HPT) || (defined(HAVE_DECL_KVM_CAP_SPAPR_RESIZE_HPT) && HAVE_DECL_KVM_CAP_SPAPR_RESIZE_HPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SPAPR_RESIZE_HPT) == (133), "KVM_CAP_SPAPR_RESIZE_HPT != 133");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SPAPR_RESIZE_HPT 133
#endif
#if defined(KVM_CAP_PPC_MMU_RADIX) || (defined(HAVE_DECL_KVM_CAP_PPC_MMU_RADIX) && HAVE_DECL_KVM_CAP_PPC_MMU_RADIX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_MMU_RADIX) == (134), "KVM_CAP_PPC_MMU_RADIX != 134");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_MMU_RADIX 134
#endif
#if defined(KVM_CAP_PPC_MMU_HASH_V3) || (defined(HAVE_DECL_KVM_CAP_PPC_MMU_HASH_V3) && HAVE_DECL_KVM_CAP_PPC_MMU_HASH_V3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_MMU_HASH_V3) == (135), "KVM_CAP_PPC_MMU_HASH_V3 != 135");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_MMU_HASH_V3 135
#endif
#if defined(KVM_CAP_IMMEDIATE_EXIT) || (defined(HAVE_DECL_KVM_CAP_IMMEDIATE_EXIT) && HAVE_DECL_KVM_CAP_IMMEDIATE_EXIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_IMMEDIATE_EXIT) == (136), "KVM_CAP_IMMEDIATE_EXIT != 136");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_IMMEDIATE_EXIT 136
#endif
#if defined(KVM_CAP_MIPS_VZ) || (defined(HAVE_DECL_KVM_CAP_MIPS_VZ) && HAVE_DECL_KVM_CAP_MIPS_VZ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MIPS_VZ) == (137), "KVM_CAP_MIPS_VZ != 137");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MIPS_VZ 137
#endif
#if defined(KVM_CAP_MIPS_TE) || (defined(HAVE_DECL_KVM_CAP_MIPS_TE) && HAVE_DECL_KVM_CAP_MIPS_TE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MIPS_TE) == (138), "KVM_CAP_MIPS_TE != 138");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MIPS_TE 138
#endif
#if defined(KVM_CAP_MIPS_64BIT) || (defined(HAVE_DECL_KVM_CAP_MIPS_64BIT) && HAVE_DECL_KVM_CAP_MIPS_64BIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MIPS_64BIT) == (139), "KVM_CAP_MIPS_64BIT != 139");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MIPS_64BIT 139
#endif
#if defined(KVM_CAP_S390_GS) || (defined(HAVE_DECL_KVM_CAP_S390_GS) && HAVE_DECL_KVM_CAP_S390_GS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_GS) == (140), "KVM_CAP_S390_GS != 140");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_GS 140
#endif
#if defined(KVM_CAP_S390_AIS) || (defined(HAVE_DECL_KVM_CAP_S390_AIS) && HAVE_DECL_KVM_CAP_S390_AIS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_AIS) == (141), "KVM_CAP_S390_AIS != 141");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_AIS 141
#endif
#if defined(KVM_CAP_SPAPR_TCE_VFIO) || (defined(HAVE_DECL_KVM_CAP_SPAPR_TCE_VFIO) && HAVE_DECL_KVM_CAP_SPAPR_TCE_VFIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SPAPR_TCE_VFIO) == (142), "KVM_CAP_SPAPR_TCE_VFIO != 142");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SPAPR_TCE_VFIO 142
#endif
#if defined(KVM_CAP_X86_DISABLE_EXITS) || (defined(HAVE_DECL_KVM_CAP_X86_DISABLE_EXITS) && HAVE_DECL_KVM_CAP_X86_DISABLE_EXITS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_X86_DISABLE_EXITS) == (143), "KVM_CAP_X86_DISABLE_EXITS != 143");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_X86_DISABLE_EXITS 143
#endif
#if defined(KVM_CAP_ARM_USER_IRQ) || (defined(HAVE_DECL_KVM_CAP_ARM_USER_IRQ) && HAVE_DECL_KVM_CAP_ARM_USER_IRQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_USER_IRQ) == (144), "KVM_CAP_ARM_USER_IRQ != 144");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_USER_IRQ 144
#endif
#if defined(KVM_CAP_S390_CMMA_MIGRATION) || (defined(HAVE_DECL_KVM_CAP_S390_CMMA_MIGRATION) && HAVE_DECL_KVM_CAP_S390_CMMA_MIGRATION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_CMMA_MIGRATION) == (145), "KVM_CAP_S390_CMMA_MIGRATION != 145");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_CMMA_MIGRATION 145
#endif
#if defined(KVM_CAP_PPC_FWNMI) || (defined(HAVE_DECL_KVM_CAP_PPC_FWNMI) && HAVE_DECL_KVM_CAP_PPC_FWNMI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_FWNMI) == (146), "KVM_CAP_PPC_FWNMI != 146");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_FWNMI 146
#endif
#if defined(KVM_CAP_PPC_SMT_POSSIBLE) || (defined(HAVE_DECL_KVM_CAP_PPC_SMT_POSSIBLE) && HAVE_DECL_KVM_CAP_PPC_SMT_POSSIBLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_SMT_POSSIBLE) == (147), "KVM_CAP_PPC_SMT_POSSIBLE != 147");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_SMT_POSSIBLE 147
#endif
#if defined(KVM_CAP_HYPERV_SYNIC2) || (defined(HAVE_DECL_KVM_CAP_HYPERV_SYNIC2) && HAVE_DECL_KVM_CAP_HYPERV_SYNIC2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_SYNIC2) == (148), "KVM_CAP_HYPERV_SYNIC2 != 148");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_SYNIC2 148
#endif
#if defined(KVM_CAP_HYPERV_VP_INDEX) || (defined(HAVE_DECL_KVM_CAP_HYPERV_VP_INDEX) && HAVE_DECL_KVM_CAP_HYPERV_VP_INDEX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_VP_INDEX) == (149), "KVM_CAP_HYPERV_VP_INDEX != 149");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_VP_INDEX 149
#endif
#if defined(KVM_CAP_S390_AIS_MIGRATION) || (defined(HAVE_DECL_KVM_CAP_S390_AIS_MIGRATION) && HAVE_DECL_KVM_CAP_S390_AIS_MIGRATION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_AIS_MIGRATION) == (150), "KVM_CAP_S390_AIS_MIGRATION != 150");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_AIS_MIGRATION 150
#endif
#if defined(KVM_CAP_PPC_GET_CPU_CHAR) || (defined(HAVE_DECL_KVM_CAP_PPC_GET_CPU_CHAR) && HAVE_DECL_KVM_CAP_PPC_GET_CPU_CHAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_GET_CPU_CHAR) == (151), "KVM_CAP_PPC_GET_CPU_CHAR != 151");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_GET_CPU_CHAR 151
#endif
#if defined(KVM_CAP_S390_BPB) || (defined(HAVE_DECL_KVM_CAP_S390_BPB) && HAVE_DECL_KVM_CAP_S390_BPB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_BPB) == (152), "KVM_CAP_S390_BPB != 152");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_BPB 152
#endif
#if defined(KVM_CAP_GET_MSR_FEATURES) || (defined(HAVE_DECL_KVM_CAP_GET_MSR_FEATURES) && HAVE_DECL_KVM_CAP_GET_MSR_FEATURES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_GET_MSR_FEATURES) == (153), "KVM_CAP_GET_MSR_FEATURES != 153");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_GET_MSR_FEATURES 153
#endif
#if defined(KVM_CAP_HYPERV_EVENTFD) || (defined(HAVE_DECL_KVM_CAP_HYPERV_EVENTFD) && HAVE_DECL_KVM_CAP_HYPERV_EVENTFD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_EVENTFD) == (154), "KVM_CAP_HYPERV_EVENTFD != 154");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_EVENTFD 154
#endif
#if defined(KVM_CAP_HYPERV_TLBFLUSH) || (defined(HAVE_DECL_KVM_CAP_HYPERV_TLBFLUSH) && HAVE_DECL_KVM_CAP_HYPERV_TLBFLUSH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_TLBFLUSH) == (155), "KVM_CAP_HYPERV_TLBFLUSH != 155");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_TLBFLUSH 155
#endif
#if defined(KVM_CAP_S390_HPAGE_1M) || (defined(HAVE_DECL_KVM_CAP_S390_HPAGE_1M) && HAVE_DECL_KVM_CAP_S390_HPAGE_1M)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_HPAGE_1M) == (156), "KVM_CAP_S390_HPAGE_1M != 156");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_HPAGE_1M 156
#endif
#if defined(KVM_CAP_NESTED_STATE) || (defined(HAVE_DECL_KVM_CAP_NESTED_STATE) && HAVE_DECL_KVM_CAP_NESTED_STATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_NESTED_STATE) == (157), "KVM_CAP_NESTED_STATE != 157");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_NESTED_STATE 157
#endif
#if defined(KVM_CAP_ARM_INJECT_SERROR_ESR) || (defined(HAVE_DECL_KVM_CAP_ARM_INJECT_SERROR_ESR) && HAVE_DECL_KVM_CAP_ARM_INJECT_SERROR_ESR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_INJECT_SERROR_ESR) == (158), "KVM_CAP_ARM_INJECT_SERROR_ESR != 158");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_INJECT_SERROR_ESR 158
#endif
#if defined(KVM_CAP_MSR_PLATFORM_INFO) || (defined(HAVE_DECL_KVM_CAP_MSR_PLATFORM_INFO) && HAVE_DECL_KVM_CAP_MSR_PLATFORM_INFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MSR_PLATFORM_INFO) == (159), "KVM_CAP_MSR_PLATFORM_INFO != 159");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MSR_PLATFORM_INFO 159
#endif
#if defined(KVM_CAP_PPC_NESTED_HV) || (defined(HAVE_DECL_KVM_CAP_PPC_NESTED_HV) && HAVE_DECL_KVM_CAP_PPC_NESTED_HV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_NESTED_HV) == (160), "KVM_CAP_PPC_NESTED_HV != 160");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_NESTED_HV 160
#endif
#if defined(KVM_CAP_HYPERV_SEND_IPI) || (defined(HAVE_DECL_KVM_CAP_HYPERV_SEND_IPI) && HAVE_DECL_KVM_CAP_HYPERV_SEND_IPI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_SEND_IPI) == (161), "KVM_CAP_HYPERV_SEND_IPI != 161");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_SEND_IPI 161
#endif
#if defined(KVM_CAP_COALESCED_PIO) || (defined(HAVE_DECL_KVM_CAP_COALESCED_PIO) && HAVE_DECL_KVM_CAP_COALESCED_PIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_COALESCED_PIO) == (162), "KVM_CAP_COALESCED_PIO != 162");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_COALESCED_PIO 162
#endif
#if defined(KVM_CAP_HYPERV_ENLIGHTENED_VMCS) || (defined(HAVE_DECL_KVM_CAP_HYPERV_ENLIGHTENED_VMCS) && HAVE_DECL_KVM_CAP_HYPERV_ENLIGHTENED_VMCS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_ENLIGHTENED_VMCS) == (163), "KVM_CAP_HYPERV_ENLIGHTENED_VMCS != 163");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_ENLIGHTENED_VMCS 163
#endif
#if defined(KVM_CAP_EXCEPTION_PAYLOAD) || (defined(HAVE_DECL_KVM_CAP_EXCEPTION_PAYLOAD) && HAVE_DECL_KVM_CAP_EXCEPTION_PAYLOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_EXCEPTION_PAYLOAD) == (164), "KVM_CAP_EXCEPTION_PAYLOAD != 164");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_EXCEPTION_PAYLOAD 164
#endif
#if defined(KVM_CAP_ARM_VM_IPA_SIZE) || (defined(HAVE_DECL_KVM_CAP_ARM_VM_IPA_SIZE) && HAVE_DECL_KVM_CAP_ARM_VM_IPA_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_VM_IPA_SIZE) == (165), "KVM_CAP_ARM_VM_IPA_SIZE != 165");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_VM_IPA_SIZE 165
#endif
#if defined(KVM_CAP_MANUAL_DIRTY_LOG_PROTECT) || (defined(HAVE_DECL_KVM_CAP_MANUAL_DIRTY_LOG_PROTECT) && HAVE_DECL_KVM_CAP_MANUAL_DIRTY_LOG_PROTECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MANUAL_DIRTY_LOG_PROTECT) == (166), "KVM_CAP_MANUAL_DIRTY_LOG_PROTECT != 166");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MANUAL_DIRTY_LOG_PROTECT 166
#endif
#if defined(KVM_CAP_HYPERV_CPUID) || (defined(HAVE_DECL_KVM_CAP_HYPERV_CPUID) && HAVE_DECL_KVM_CAP_HYPERV_CPUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_CPUID) == (167), "KVM_CAP_HYPERV_CPUID != 167");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_CPUID 167
#endif
#if defined(KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2) || (defined(HAVE_DECL_KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2) && HAVE_DECL_KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2) == (168), "KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2 != 168");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2 168
#endif
#if defined(KVM_CAP_PPC_IRQ_XIVE) || (defined(HAVE_DECL_KVM_CAP_PPC_IRQ_XIVE) && HAVE_DECL_KVM_CAP_PPC_IRQ_XIVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_IRQ_XIVE) == (169), "KVM_CAP_PPC_IRQ_XIVE != 169");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_IRQ_XIVE 169
#endif
#if defined(KVM_CAP_ARM_SVE) || (defined(HAVE_DECL_KVM_CAP_ARM_SVE) && HAVE_DECL_KVM_CAP_ARM_SVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_SVE) == (170), "KVM_CAP_ARM_SVE != 170");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_SVE 170
#endif
#if defined(KVM_CAP_ARM_PTRAUTH_ADDRESS) || (defined(HAVE_DECL_KVM_CAP_ARM_PTRAUTH_ADDRESS) && HAVE_DECL_KVM_CAP_ARM_PTRAUTH_ADDRESS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_PTRAUTH_ADDRESS) == (171), "KVM_CAP_ARM_PTRAUTH_ADDRESS != 171");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_PTRAUTH_ADDRESS 171
#endif
#if defined(KVM_CAP_ARM_PTRAUTH_GENERIC) || (defined(HAVE_DECL_KVM_CAP_ARM_PTRAUTH_GENERIC) && HAVE_DECL_KVM_CAP_ARM_PTRAUTH_GENERIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_PTRAUTH_GENERIC) == (172), "KVM_CAP_ARM_PTRAUTH_GENERIC != 172");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_PTRAUTH_GENERIC 172
#endif
#if defined(KVM_CAP_PMU_EVENT_FILTER) || (defined(HAVE_DECL_KVM_CAP_PMU_EVENT_FILTER) && HAVE_DECL_KVM_CAP_PMU_EVENT_FILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PMU_EVENT_FILTER) == (173), "KVM_CAP_PMU_EVENT_FILTER != 173");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PMU_EVENT_FILTER 173
#endif
#if defined(KVM_CAP_ARM_IRQ_LINE_LAYOUT_2) || (defined(HAVE_DECL_KVM_CAP_ARM_IRQ_LINE_LAYOUT_2) && HAVE_DECL_KVM_CAP_ARM_IRQ_LINE_LAYOUT_2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_IRQ_LINE_LAYOUT_2) == (174), "KVM_CAP_ARM_IRQ_LINE_LAYOUT_2 != 174");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_IRQ_LINE_LAYOUT_2 174
#endif
#if defined(KVM_CAP_HYPERV_DIRECT_TLBFLUSH) || (defined(HAVE_DECL_KVM_CAP_HYPERV_DIRECT_TLBFLUSH) && HAVE_DECL_KVM_CAP_HYPERV_DIRECT_TLBFLUSH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_DIRECT_TLBFLUSH) == (175), "KVM_CAP_HYPERV_DIRECT_TLBFLUSH != 175");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_DIRECT_TLBFLUSH 175
#endif
#if defined(KVM_CAP_PPC_GUEST_DEBUG_SSTEP) || (defined(HAVE_DECL_KVM_CAP_PPC_GUEST_DEBUG_SSTEP) && HAVE_DECL_KVM_CAP_PPC_GUEST_DEBUG_SSTEP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_GUEST_DEBUG_SSTEP) == (176), "KVM_CAP_PPC_GUEST_DEBUG_SSTEP != 176");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_GUEST_DEBUG_SSTEP 176
#endif
#if defined(KVM_CAP_ARM_NISV_TO_USER) || (defined(HAVE_DECL_KVM_CAP_ARM_NISV_TO_USER) && HAVE_DECL_KVM_CAP_ARM_NISV_TO_USER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_NISV_TO_USER) == (177), "KVM_CAP_ARM_NISV_TO_USER != 177");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_NISV_TO_USER 177
#endif
#if defined(KVM_CAP_ARM_INJECT_EXT_DABT) || (defined(HAVE_DECL_KVM_CAP_ARM_INJECT_EXT_DABT) && HAVE_DECL_KVM_CAP_ARM_INJECT_EXT_DABT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_INJECT_EXT_DABT) == (178), "KVM_CAP_ARM_INJECT_EXT_DABT != 178");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_INJECT_EXT_DABT 178
#endif
#if defined(KVM_CAP_S390_VCPU_RESETS) || (defined(HAVE_DECL_KVM_CAP_S390_VCPU_RESETS) && HAVE_DECL_KVM_CAP_S390_VCPU_RESETS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_VCPU_RESETS) == (179), "KVM_CAP_S390_VCPU_RESETS != 179");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_VCPU_RESETS 179
#endif
#if defined(KVM_CAP_S390_PROTECTED) || (defined(HAVE_DECL_KVM_CAP_S390_PROTECTED) && HAVE_DECL_KVM_CAP_S390_PROTECTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_PROTECTED) == (180), "KVM_CAP_S390_PROTECTED != 180");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_PROTECTED 180
#endif
#if defined(KVM_CAP_PPC_SECURE_GUEST) || (defined(HAVE_DECL_KVM_CAP_PPC_SECURE_GUEST) && HAVE_DECL_KVM_CAP_PPC_SECURE_GUEST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_SECURE_GUEST) == (181), "KVM_CAP_PPC_SECURE_GUEST != 181");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_SECURE_GUEST 181
#endif
#if defined(KVM_CAP_HALT_POLL) || (defined(HAVE_DECL_KVM_CAP_HALT_POLL) && HAVE_DECL_KVM_CAP_HALT_POLL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HALT_POLL) == (182), "KVM_CAP_HALT_POLL != 182");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HALT_POLL 182
#endif
#if defined(KVM_CAP_ASYNC_PF_INT) || (defined(HAVE_DECL_KVM_CAP_ASYNC_PF_INT) && HAVE_DECL_KVM_CAP_ASYNC_PF_INT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ASYNC_PF_INT) == (183), "KVM_CAP_ASYNC_PF_INT != 183");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ASYNC_PF_INT 183
#endif
#if defined(KVM_CAP_LAST_CPU) || (defined(HAVE_DECL_KVM_CAP_LAST_CPU) && HAVE_DECL_KVM_CAP_LAST_CPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_LAST_CPU) == (184), "KVM_CAP_LAST_CPU != 184");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_LAST_CPU 184
#endif
#if defined(KVM_CAP_SMALLER_MAXPHYADDR) || (defined(HAVE_DECL_KVM_CAP_SMALLER_MAXPHYADDR) && HAVE_DECL_KVM_CAP_SMALLER_MAXPHYADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SMALLER_MAXPHYADDR) == (185), "KVM_CAP_SMALLER_MAXPHYADDR != 185");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SMALLER_MAXPHYADDR 185
#endif
#if defined(KVM_CAP_S390_DIAG318) || (defined(HAVE_DECL_KVM_CAP_S390_DIAG318) && HAVE_DECL_KVM_CAP_S390_DIAG318)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_DIAG318) == (186), "KVM_CAP_S390_DIAG318 != 186");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_DIAG318 186
#endif
#if defined(KVM_CAP_STEAL_TIME) || (defined(HAVE_DECL_KVM_CAP_STEAL_TIME) && HAVE_DECL_KVM_CAP_STEAL_TIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_STEAL_TIME) == (187), "KVM_CAP_STEAL_TIME != 187");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_STEAL_TIME 187
#endif
#if defined(KVM_CAP_X86_USER_SPACE_MSR) || (defined(HAVE_DECL_KVM_CAP_X86_USER_SPACE_MSR) && HAVE_DECL_KVM_CAP_X86_USER_SPACE_MSR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_X86_USER_SPACE_MSR) == (188), "KVM_CAP_X86_USER_SPACE_MSR != 188");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_X86_USER_SPACE_MSR 188
#endif
#if defined(KVM_CAP_X86_MSR_FILTER) || (defined(HAVE_DECL_KVM_CAP_X86_MSR_FILTER) && HAVE_DECL_KVM_CAP_X86_MSR_FILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_X86_MSR_FILTER) == (189), "KVM_CAP_X86_MSR_FILTER != 189");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_X86_MSR_FILTER 189
#endif
#if defined(KVM_CAP_ENFORCE_PV_FEATURE_CPUID) || (defined(HAVE_DECL_KVM_CAP_ENFORCE_PV_FEATURE_CPUID) && HAVE_DECL_KVM_CAP_ENFORCE_PV_FEATURE_CPUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ENFORCE_PV_FEATURE_CPUID) == (190), "KVM_CAP_ENFORCE_PV_FEATURE_CPUID != 190");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ENFORCE_PV_FEATURE_CPUID 190
#endif
#if defined(KVM_CAP_SYS_HYPERV_CPUID) || (defined(HAVE_DECL_KVM_CAP_SYS_HYPERV_CPUID) && HAVE_DECL_KVM_CAP_SYS_HYPERV_CPUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SYS_HYPERV_CPUID) == (191), "KVM_CAP_SYS_HYPERV_CPUID != 191");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SYS_HYPERV_CPUID 191
#endif
#if defined(KVM_CAP_DIRTY_LOG_RING) || (defined(HAVE_DECL_KVM_CAP_DIRTY_LOG_RING) && HAVE_DECL_KVM_CAP_DIRTY_LOG_RING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_DIRTY_LOG_RING) == (192), "KVM_CAP_DIRTY_LOG_RING != 192");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_DIRTY_LOG_RING 192
#endif
#if defined(KVM_CAP_X86_BUS_LOCK_EXIT) || (defined(HAVE_DECL_KVM_CAP_X86_BUS_LOCK_EXIT) && HAVE_DECL_KVM_CAP_X86_BUS_LOCK_EXIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_X86_BUS_LOCK_EXIT) == (193), "KVM_CAP_X86_BUS_LOCK_EXIT != 193");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_X86_BUS_LOCK_EXIT 193
#endif
#if defined(KVM_CAP_PPC_DAWR1) || (defined(HAVE_DECL_KVM_CAP_PPC_DAWR1) && HAVE_DECL_KVM_CAP_PPC_DAWR1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_DAWR1) == (194), "KVM_CAP_PPC_DAWR1 != 194");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_DAWR1 194
#endif
#if defined(KVM_CAP_SET_GUEST_DEBUG2) || (defined(HAVE_DECL_KVM_CAP_SET_GUEST_DEBUG2) && HAVE_DECL_KVM_CAP_SET_GUEST_DEBUG2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SET_GUEST_DEBUG2) == (195), "KVM_CAP_SET_GUEST_DEBUG2 != 195");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SET_GUEST_DEBUG2 195
#endif
#if defined(KVM_CAP_SGX_ATTRIBUTE) || (defined(HAVE_DECL_KVM_CAP_SGX_ATTRIBUTE) && HAVE_DECL_KVM_CAP_SGX_ATTRIBUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SGX_ATTRIBUTE) == (196), "KVM_CAP_SGX_ATTRIBUTE != 196");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SGX_ATTRIBUTE 196
#endif
#if defined(KVM_CAP_VM_COPY_ENC_CONTEXT_FROM) || (defined(HAVE_DECL_KVM_CAP_VM_COPY_ENC_CONTEXT_FROM) && HAVE_DECL_KVM_CAP_VM_COPY_ENC_CONTEXT_FROM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_VM_COPY_ENC_CONTEXT_FROM) == (197), "KVM_CAP_VM_COPY_ENC_CONTEXT_FROM != 197");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_VM_COPY_ENC_CONTEXT_FROM 197
#endif
#if defined(KVM_CAP_PTP_KVM) || (defined(HAVE_DECL_KVM_CAP_PTP_KVM) && HAVE_DECL_KVM_CAP_PTP_KVM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PTP_KVM) == (198), "KVM_CAP_PTP_KVM != 198");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PTP_KVM 198
#endif
#if defined(KVM_CAP_HYPERV_ENFORCE_CPUID) || (defined(HAVE_DECL_KVM_CAP_HYPERV_ENFORCE_CPUID) && HAVE_DECL_KVM_CAP_HYPERV_ENFORCE_CPUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_HYPERV_ENFORCE_CPUID) == (199), "KVM_CAP_HYPERV_ENFORCE_CPUID != 199");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_HYPERV_ENFORCE_CPUID 199
#endif
#if defined(KVM_CAP_SREGS2) || (defined(HAVE_DECL_KVM_CAP_SREGS2) && HAVE_DECL_KVM_CAP_SREGS2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SREGS2) == (200), "KVM_CAP_SREGS2 != 200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SREGS2 200
#endif
#if defined(KVM_CAP_EXIT_HYPERCALL) || (defined(HAVE_DECL_KVM_CAP_EXIT_HYPERCALL) && HAVE_DECL_KVM_CAP_EXIT_HYPERCALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_EXIT_HYPERCALL) == (201), "KVM_CAP_EXIT_HYPERCALL != 201");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_EXIT_HYPERCALL 201
#endif
#if defined(KVM_CAP_PPC_RPT_INVALIDATE) || (defined(HAVE_DECL_KVM_CAP_PPC_RPT_INVALIDATE) && HAVE_DECL_KVM_CAP_PPC_RPT_INVALIDATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_RPT_INVALIDATE) == (202), "KVM_CAP_PPC_RPT_INVALIDATE != 202");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_RPT_INVALIDATE 202
#endif
#if defined(KVM_CAP_BINARY_STATS_FD) || (defined(HAVE_DECL_KVM_CAP_BINARY_STATS_FD) && HAVE_DECL_KVM_CAP_BINARY_STATS_FD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_BINARY_STATS_FD) == (203), "KVM_CAP_BINARY_STATS_FD != 203");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_BINARY_STATS_FD 203
#endif
#if defined(KVM_CAP_EXIT_ON_EMULATION_FAILURE) || (defined(HAVE_DECL_KVM_CAP_EXIT_ON_EMULATION_FAILURE) && HAVE_DECL_KVM_CAP_EXIT_ON_EMULATION_FAILURE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_EXIT_ON_EMULATION_FAILURE) == (204), "KVM_CAP_EXIT_ON_EMULATION_FAILURE != 204");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_EXIT_ON_EMULATION_FAILURE 204
#endif
#if defined(KVM_CAP_ARM_MTE) || (defined(HAVE_DECL_KVM_CAP_ARM_MTE) && HAVE_DECL_KVM_CAP_ARM_MTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_MTE) == (205), "KVM_CAP_ARM_MTE != 205");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_MTE 205
#endif
#if defined(KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM) || (defined(HAVE_DECL_KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM) && HAVE_DECL_KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM) == (206), "KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM != 206");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM 206
#endif
#if defined(KVM_CAP_VM_GPA_BITS) || (defined(HAVE_DECL_KVM_CAP_VM_GPA_BITS) && HAVE_DECL_KVM_CAP_VM_GPA_BITS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_VM_GPA_BITS) == (207), "KVM_CAP_VM_GPA_BITS != 207");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_VM_GPA_BITS 207
#endif
#if defined(KVM_CAP_XSAVE2) || (defined(HAVE_DECL_KVM_CAP_XSAVE2) && HAVE_DECL_KVM_CAP_XSAVE2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_XSAVE2) == (208), "KVM_CAP_XSAVE2 != 208");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_XSAVE2 208
#endif
#if defined(KVM_CAP_SYS_ATTRIBUTES) || (defined(HAVE_DECL_KVM_CAP_SYS_ATTRIBUTES) && HAVE_DECL_KVM_CAP_SYS_ATTRIBUTES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SYS_ATTRIBUTES) == (209), "KVM_CAP_SYS_ATTRIBUTES != 209");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SYS_ATTRIBUTES 209
#endif
#if defined(KVM_CAP_PPC_AIL_MODE_3) || (defined(HAVE_DECL_KVM_CAP_PPC_AIL_MODE_3) && HAVE_DECL_KVM_CAP_PPC_AIL_MODE_3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PPC_AIL_MODE_3) == (210), "KVM_CAP_PPC_AIL_MODE_3 != 210");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PPC_AIL_MODE_3 210
#endif
#if defined(KVM_CAP_S390_MEM_OP_EXTENSION) || (defined(HAVE_DECL_KVM_CAP_S390_MEM_OP_EXTENSION) && HAVE_DECL_KVM_CAP_S390_MEM_OP_EXTENSION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_MEM_OP_EXTENSION) == (211), "KVM_CAP_S390_MEM_OP_EXTENSION != 211");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_MEM_OP_EXTENSION 211
#endif
#if defined(KVM_CAP_PMU_CAPABILITY) || (defined(HAVE_DECL_KVM_CAP_PMU_CAPABILITY) && HAVE_DECL_KVM_CAP_PMU_CAPABILITY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_PMU_CAPABILITY) == (212), "KVM_CAP_PMU_CAPABILITY != 212");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_PMU_CAPABILITY 212
#endif
#if defined(KVM_CAP_DISABLE_QUIRKS2) || (defined(HAVE_DECL_KVM_CAP_DISABLE_QUIRKS2) && HAVE_DECL_KVM_CAP_DISABLE_QUIRKS2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_DISABLE_QUIRKS2) == (213), "KVM_CAP_DISABLE_QUIRKS2 != 213");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_DISABLE_QUIRKS2 213
#endif
#if defined(KVM_CAP_VM_TSC_CONTROL) || (defined(HAVE_DECL_KVM_CAP_VM_TSC_CONTROL) && HAVE_DECL_KVM_CAP_VM_TSC_CONTROL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_VM_TSC_CONTROL) == (214), "KVM_CAP_VM_TSC_CONTROL != 214");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_VM_TSC_CONTROL 214
#endif
#if defined(KVM_CAP_SYSTEM_EVENT_DATA) || (defined(HAVE_DECL_KVM_CAP_SYSTEM_EVENT_DATA) && HAVE_DECL_KVM_CAP_SYSTEM_EVENT_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_SYSTEM_EVENT_DATA) == (215), "KVM_CAP_SYSTEM_EVENT_DATA != 215");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_SYSTEM_EVENT_DATA 215
#endif
#if defined(KVM_CAP_ARM_SYSTEM_SUSPEND) || (defined(HAVE_DECL_KVM_CAP_ARM_SYSTEM_SUSPEND) && HAVE_DECL_KVM_CAP_ARM_SYSTEM_SUSPEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_ARM_SYSTEM_SUSPEND) == (216), "KVM_CAP_ARM_SYSTEM_SUSPEND != 216");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_ARM_SYSTEM_SUSPEND 216
#endif
#if defined(KVM_CAP_S390_PROTECTED_DUMP) || (defined(HAVE_DECL_KVM_CAP_S390_PROTECTED_DUMP) && HAVE_DECL_KVM_CAP_S390_PROTECTED_DUMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_PROTECTED_DUMP) == (217), "KVM_CAP_S390_PROTECTED_DUMP != 217");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_PROTECTED_DUMP 217
#endif
#if defined(KVM_CAP_X86_TRIPLE_FAULT_EVENT) || (defined(HAVE_DECL_KVM_CAP_X86_TRIPLE_FAULT_EVENT) && HAVE_DECL_KVM_CAP_X86_TRIPLE_FAULT_EVENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_X86_TRIPLE_FAULT_EVENT) == (218), "KVM_CAP_X86_TRIPLE_FAULT_EVENT != 218");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_X86_TRIPLE_FAULT_EVENT 218
#endif
#if defined(KVM_CAP_X86_NOTIFY_VMEXIT) || (defined(HAVE_DECL_KVM_CAP_X86_NOTIFY_VMEXIT) && HAVE_DECL_KVM_CAP_X86_NOTIFY_VMEXIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_X86_NOTIFY_VMEXIT) == (219), "KVM_CAP_X86_NOTIFY_VMEXIT != 219");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_X86_NOTIFY_VMEXIT 219
#endif
#if defined(KVM_CAP_VM_DISABLE_NX_HUGE_PAGES) || (defined(HAVE_DECL_KVM_CAP_VM_DISABLE_NX_HUGE_PAGES) && HAVE_DECL_KVM_CAP_VM_DISABLE_NX_HUGE_PAGES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_VM_DISABLE_NX_HUGE_PAGES) == (220), "KVM_CAP_VM_DISABLE_NX_HUGE_PAGES != 220");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_VM_DISABLE_NX_HUGE_PAGES 220
#endif
#if defined(KVM_CAP_S390_ZPCI_OP) || (defined(HAVE_DECL_KVM_CAP_S390_ZPCI_OP) && HAVE_DECL_KVM_CAP_S390_ZPCI_OP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_ZPCI_OP) == (221), "KVM_CAP_S390_ZPCI_OP != 221");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_ZPCI_OP 221
#endif
#if defined(KVM_CAP_S390_CPU_TOPOLOGY) || (defined(HAVE_DECL_KVM_CAP_S390_CPU_TOPOLOGY) && HAVE_DECL_KVM_CAP_S390_CPU_TOPOLOGY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KVM_CAP_S390_CPU_TOPOLOGY) == (222), "KVM_CAP_S390_CPU_TOPOLOGY != 222");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KVM_CAP_S390_CPU_TOPOLOGY 222
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat kvm_cap in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kvm_cap_xdata[] = {
 [KVM_CAP_IRQCHIP] = XLAT(KVM_CAP_IRQCHIP),
 #define XLAT_VAL_0 ((unsigned) (KVM_CAP_IRQCHIP))
 #define XLAT_STR_0 STRINGIFY(KVM_CAP_IRQCHIP)
 [KVM_CAP_HLT] = XLAT(KVM_CAP_HLT),
 #define XLAT_VAL_1 ((unsigned) (KVM_CAP_HLT))
 #define XLAT_STR_1 STRINGIFY(KVM_CAP_HLT)
 [KVM_CAP_MMU_SHADOW_CACHE_CONTROL] = XLAT(KVM_CAP_MMU_SHADOW_CACHE_CONTROL),
 #define XLAT_VAL_2 ((unsigned) (KVM_CAP_MMU_SHADOW_CACHE_CONTROL))
 #define XLAT_STR_2 STRINGIFY(KVM_CAP_MMU_SHADOW_CACHE_CONTROL)
 [KVM_CAP_USER_MEMORY] = XLAT(KVM_CAP_USER_MEMORY),
 #define XLAT_VAL_3 ((unsigned) (KVM_CAP_USER_MEMORY))
 #define XLAT_STR_3 STRINGIFY(KVM_CAP_USER_MEMORY)
 [KVM_CAP_SET_TSS_ADDR] = XLAT(KVM_CAP_SET_TSS_ADDR),
 #define XLAT_VAL_4 ((unsigned) (KVM_CAP_SET_TSS_ADDR))
 #define XLAT_STR_4 STRINGIFY(KVM_CAP_SET_TSS_ADDR)
 [KVM_CAP_VAPIC] = XLAT(KVM_CAP_VAPIC),
 #define XLAT_VAL_5 ((unsigned) (KVM_CAP_VAPIC))
 #define XLAT_STR_5 STRINGIFY(KVM_CAP_VAPIC)
 [KVM_CAP_EXT_CPUID] = XLAT(KVM_CAP_EXT_CPUID),
 #define XLAT_VAL_6 ((unsigned) (KVM_CAP_EXT_CPUID))
 #define XLAT_STR_6 STRINGIFY(KVM_CAP_EXT_CPUID)
 [KVM_CAP_CLOCKSOURCE] = XLAT(KVM_CAP_CLOCKSOURCE),
 #define XLAT_VAL_7 ((unsigned) (KVM_CAP_CLOCKSOURCE))
 #define XLAT_STR_7 STRINGIFY(KVM_CAP_CLOCKSOURCE)
 [KVM_CAP_NR_VCPUS] = XLAT(KVM_CAP_NR_VCPUS),
 #define XLAT_VAL_8 ((unsigned) (KVM_CAP_NR_VCPUS))
 #define XLAT_STR_8 STRINGIFY(KVM_CAP_NR_VCPUS)
 [KVM_CAP_NR_MEMSLOTS] = XLAT(KVM_CAP_NR_MEMSLOTS),
 #define XLAT_VAL_9 ((unsigned) (KVM_CAP_NR_MEMSLOTS))
 #define XLAT_STR_9 STRINGIFY(KVM_CAP_NR_MEMSLOTS)
 [KVM_CAP_PIT] = XLAT(KVM_CAP_PIT),
 #define XLAT_VAL_10 ((unsigned) (KVM_CAP_PIT))
 #define XLAT_STR_10 STRINGIFY(KVM_CAP_PIT)
 [KVM_CAP_NOP_IO_DELAY] = XLAT(KVM_CAP_NOP_IO_DELAY),
 #define XLAT_VAL_11 ((unsigned) (KVM_CAP_NOP_IO_DELAY))
 #define XLAT_STR_11 STRINGIFY(KVM_CAP_NOP_IO_DELAY)
 [KVM_CAP_PV_MMU] = XLAT(KVM_CAP_PV_MMU),
 #define XLAT_VAL_12 ((unsigned) (KVM_CAP_PV_MMU))
 #define XLAT_STR_12 STRINGIFY(KVM_CAP_PV_MMU)
 [KVM_CAP_MP_STATE] = XLAT(KVM_CAP_MP_STATE),
 #define XLAT_VAL_13 ((unsigned) (KVM_CAP_MP_STATE))
 #define XLAT_STR_13 STRINGIFY(KVM_CAP_MP_STATE)
 [KVM_CAP_COALESCED_MMIO] = XLAT(KVM_CAP_COALESCED_MMIO),
 #define XLAT_VAL_14 ((unsigned) (KVM_CAP_COALESCED_MMIO))
 #define XLAT_STR_14 STRINGIFY(KVM_CAP_COALESCED_MMIO)
 [KVM_CAP_SYNC_MMU] = XLAT(KVM_CAP_SYNC_MMU),
 #define XLAT_VAL_15 ((unsigned) (KVM_CAP_SYNC_MMU))
 #define XLAT_STR_15 STRINGIFY(KVM_CAP_SYNC_MMU)
 [KVM_CAP_IOMMU] = XLAT(KVM_CAP_IOMMU),
 #define XLAT_VAL_16 ((unsigned) (KVM_CAP_IOMMU))
 #define XLAT_STR_16 STRINGIFY(KVM_CAP_IOMMU)
 [KVM_CAP_DESTROY_MEMORY_REGION_WORKS] = XLAT(KVM_CAP_DESTROY_MEMORY_REGION_WORKS),
 #define XLAT_VAL_17 ((unsigned) (KVM_CAP_DESTROY_MEMORY_REGION_WORKS))
 #define XLAT_STR_17 STRINGIFY(KVM_CAP_DESTROY_MEMORY_REGION_WORKS)
 [KVM_CAP_USER_NMI] = XLAT(KVM_CAP_USER_NMI),
 #define XLAT_VAL_18 ((unsigned) (KVM_CAP_USER_NMI))
 #define XLAT_STR_18 STRINGIFY(KVM_CAP_USER_NMI)
 [KVM_CAP_SET_GUEST_DEBUG] = XLAT(KVM_CAP_SET_GUEST_DEBUG),
 #define XLAT_VAL_19 ((unsigned) (KVM_CAP_SET_GUEST_DEBUG))
 #define XLAT_STR_19 STRINGIFY(KVM_CAP_SET_GUEST_DEBUG)
 [KVM_CAP_REINJECT_CONTROL] = XLAT(KVM_CAP_REINJECT_CONTROL),
 #define XLAT_VAL_20 ((unsigned) (KVM_CAP_REINJECT_CONTROL))
 #define XLAT_STR_20 STRINGIFY(KVM_CAP_REINJECT_CONTROL)
 [KVM_CAP_IRQ_ROUTING] = XLAT(KVM_CAP_IRQ_ROUTING),
 #define XLAT_VAL_21 ((unsigned) (KVM_CAP_IRQ_ROUTING))
 #define XLAT_STR_21 STRINGIFY(KVM_CAP_IRQ_ROUTING)
 [KVM_CAP_IRQ_INJECT_STATUS] = XLAT(KVM_CAP_IRQ_INJECT_STATUS),
 #define XLAT_VAL_22 ((unsigned) (KVM_CAP_IRQ_INJECT_STATUS))
 #define XLAT_STR_22 STRINGIFY(KVM_CAP_IRQ_INJECT_STATUS)
 [KVM_CAP_ASSIGN_DEV_IRQ] = XLAT(KVM_CAP_ASSIGN_DEV_IRQ),
 #define XLAT_VAL_23 ((unsigned) (KVM_CAP_ASSIGN_DEV_IRQ))
 #define XLAT_STR_23 STRINGIFY(KVM_CAP_ASSIGN_DEV_IRQ)
 [KVM_CAP_JOIN_MEMORY_REGIONS_WORKS] = XLAT(KVM_CAP_JOIN_MEMORY_REGIONS_WORKS),
 #define XLAT_VAL_24 ((unsigned) (KVM_CAP_JOIN_MEMORY_REGIONS_WORKS))
 #define XLAT_STR_24 STRINGIFY(KVM_CAP_JOIN_MEMORY_REGIONS_WORKS)
 [KVM_CAP_MCE] = XLAT(KVM_CAP_MCE),
 #define XLAT_VAL_25 ((unsigned) (KVM_CAP_MCE))
 #define XLAT_STR_25 STRINGIFY(KVM_CAP_MCE)
 [KVM_CAP_IRQFD] = XLAT(KVM_CAP_IRQFD),
 #define XLAT_VAL_26 ((unsigned) (KVM_CAP_IRQFD))
 #define XLAT_STR_26 STRINGIFY(KVM_CAP_IRQFD)
 [KVM_CAP_PIT2] = XLAT(KVM_CAP_PIT2),
 #define XLAT_VAL_27 ((unsigned) (KVM_CAP_PIT2))
 #define XLAT_STR_27 STRINGIFY(KVM_CAP_PIT2)
 [KVM_CAP_SET_BOOT_CPU_ID] = XLAT(KVM_CAP_SET_BOOT_CPU_ID),
 #define XLAT_VAL_28 ((unsigned) (KVM_CAP_SET_BOOT_CPU_ID))
 #define XLAT_STR_28 STRINGIFY(KVM_CAP_SET_BOOT_CPU_ID)
 [KVM_CAP_PIT_STATE2] = XLAT(KVM_CAP_PIT_STATE2),
 #define XLAT_VAL_29 ((unsigned) (KVM_CAP_PIT_STATE2))
 #define XLAT_STR_29 STRINGIFY(KVM_CAP_PIT_STATE2)
 [KVM_CAP_IOEVENTFD] = XLAT(KVM_CAP_IOEVENTFD),
 #define XLAT_VAL_30 ((unsigned) (KVM_CAP_IOEVENTFD))
 #define XLAT_STR_30 STRINGIFY(KVM_CAP_IOEVENTFD)
 [KVM_CAP_SET_IDENTITY_MAP_ADDR] = XLAT(KVM_CAP_SET_IDENTITY_MAP_ADDR),
 #define XLAT_VAL_31 ((unsigned) (KVM_CAP_SET_IDENTITY_MAP_ADDR))
 #define XLAT_STR_31 STRINGIFY(KVM_CAP_SET_IDENTITY_MAP_ADDR)
 [KVM_CAP_XEN_HVM] = XLAT(KVM_CAP_XEN_HVM),
 #define XLAT_VAL_32 ((unsigned) (KVM_CAP_XEN_HVM))
 #define XLAT_STR_32 STRINGIFY(KVM_CAP_XEN_HVM)
 [KVM_CAP_ADJUST_CLOCK] = XLAT(KVM_CAP_ADJUST_CLOCK),
 #define XLAT_VAL_33 ((unsigned) (KVM_CAP_ADJUST_CLOCK))
 #define XLAT_STR_33 STRINGIFY(KVM_CAP_ADJUST_CLOCK)
 [KVM_CAP_INTERNAL_ERROR_DATA] = XLAT(KVM_CAP_INTERNAL_ERROR_DATA),
 #define XLAT_VAL_34 ((unsigned) (KVM_CAP_INTERNAL_ERROR_DATA))
 #define XLAT_STR_34 STRINGIFY(KVM_CAP_INTERNAL_ERROR_DATA)
 [KVM_CAP_VCPU_EVENTS] = XLAT(KVM_CAP_VCPU_EVENTS),
 #define XLAT_VAL_35 ((unsigned) (KVM_CAP_VCPU_EVENTS))
 #define XLAT_STR_35 STRINGIFY(KVM_CAP_VCPU_EVENTS)
 [KVM_CAP_S390_PSW] = XLAT(KVM_CAP_S390_PSW),
 #define XLAT_VAL_36 ((unsigned) (KVM_CAP_S390_PSW))
 #define XLAT_STR_36 STRINGIFY(KVM_CAP_S390_PSW)
 [KVM_CAP_PPC_SEGSTATE] = XLAT(KVM_CAP_PPC_SEGSTATE),
 #define XLAT_VAL_37 ((unsigned) (KVM_CAP_PPC_SEGSTATE))
 #define XLAT_STR_37 STRINGIFY(KVM_CAP_PPC_SEGSTATE)
 [KVM_CAP_HYPERV] = XLAT(KVM_CAP_HYPERV),
 #define XLAT_VAL_38 ((unsigned) (KVM_CAP_HYPERV))
 #define XLAT_STR_38 STRINGIFY(KVM_CAP_HYPERV)
 [KVM_CAP_HYPERV_VAPIC] = XLAT(KVM_CAP_HYPERV_VAPIC),
 #define XLAT_VAL_39 ((unsigned) (KVM_CAP_HYPERV_VAPIC))
 #define XLAT_STR_39 STRINGIFY(KVM_CAP_HYPERV_VAPIC)
 [KVM_CAP_HYPERV_SPIN] = XLAT(KVM_CAP_HYPERV_SPIN),
 #define XLAT_VAL_40 ((unsigned) (KVM_CAP_HYPERV_SPIN))
 #define XLAT_STR_40 STRINGIFY(KVM_CAP_HYPERV_SPIN)
 [KVM_CAP_PCI_SEGMENT] = XLAT(KVM_CAP_PCI_SEGMENT),
 #define XLAT_VAL_41 ((unsigned) (KVM_CAP_PCI_SEGMENT))
 #define XLAT_STR_41 STRINGIFY(KVM_CAP_PCI_SEGMENT)
 [KVM_CAP_PPC_PAIRED_SINGLES] = XLAT(KVM_CAP_PPC_PAIRED_SINGLES),
 #define XLAT_VAL_42 ((unsigned) (KVM_CAP_PPC_PAIRED_SINGLES))
 #define XLAT_STR_42 STRINGIFY(KVM_CAP_PPC_PAIRED_SINGLES)
 [KVM_CAP_INTR_SHADOW] = XLAT(KVM_CAP_INTR_SHADOW),
 #define XLAT_VAL_43 ((unsigned) (KVM_CAP_INTR_SHADOW))
 #define XLAT_STR_43 STRINGIFY(KVM_CAP_INTR_SHADOW)
 [KVM_CAP_DEBUGREGS] = XLAT(KVM_CAP_DEBUGREGS),
 #define XLAT_VAL_44 ((unsigned) (KVM_CAP_DEBUGREGS))
 #define XLAT_STR_44 STRINGIFY(KVM_CAP_DEBUGREGS)
 [KVM_CAP_X86_ROBUST_SINGLESTEP] = XLAT(KVM_CAP_X86_ROBUST_SINGLESTEP),
 #define XLAT_VAL_45 ((unsigned) (KVM_CAP_X86_ROBUST_SINGLESTEP))
 #define XLAT_STR_45 STRINGIFY(KVM_CAP_X86_ROBUST_SINGLESTEP)
 [KVM_CAP_PPC_OSI] = XLAT(KVM_CAP_PPC_OSI),
 #define XLAT_VAL_46 ((unsigned) (KVM_CAP_PPC_OSI))
 #define XLAT_STR_46 STRINGIFY(KVM_CAP_PPC_OSI)
 [KVM_CAP_PPC_UNSET_IRQ] = XLAT(KVM_CAP_PPC_UNSET_IRQ),
 #define XLAT_VAL_47 ((unsigned) (KVM_CAP_PPC_UNSET_IRQ))
 #define XLAT_STR_47 STRINGIFY(KVM_CAP_PPC_UNSET_IRQ)
 [KVM_CAP_ENABLE_CAP] = XLAT(KVM_CAP_ENABLE_CAP),
 #define XLAT_VAL_48 ((unsigned) (KVM_CAP_ENABLE_CAP))
 #define XLAT_STR_48 STRINGIFY(KVM_CAP_ENABLE_CAP)
 [KVM_CAP_XSAVE] = XLAT(KVM_CAP_XSAVE),
 #define XLAT_VAL_49 ((unsigned) (KVM_CAP_XSAVE))
 #define XLAT_STR_49 STRINGIFY(KVM_CAP_XSAVE)
 [KVM_CAP_XCRS] = XLAT(KVM_CAP_XCRS),
 #define XLAT_VAL_50 ((unsigned) (KVM_CAP_XCRS))
 #define XLAT_STR_50 STRINGIFY(KVM_CAP_XCRS)
 [KVM_CAP_PPC_GET_PVINFO] = XLAT(KVM_CAP_PPC_GET_PVINFO),
 #define XLAT_VAL_51 ((unsigned) (KVM_CAP_PPC_GET_PVINFO))
 #define XLAT_STR_51 STRINGIFY(KVM_CAP_PPC_GET_PVINFO)
 [KVM_CAP_PPC_IRQ_LEVEL] = XLAT(KVM_CAP_PPC_IRQ_LEVEL),
 #define XLAT_VAL_52 ((unsigned) (KVM_CAP_PPC_IRQ_LEVEL))
 #define XLAT_STR_52 STRINGIFY(KVM_CAP_PPC_IRQ_LEVEL)
 [KVM_CAP_ASYNC_PF] = XLAT(KVM_CAP_ASYNC_PF),
 #define XLAT_VAL_53 ((unsigned) (KVM_CAP_ASYNC_PF))
 #define XLAT_STR_53 STRINGIFY(KVM_CAP_ASYNC_PF)
 [KVM_CAP_TSC_CONTROL] = XLAT(KVM_CAP_TSC_CONTROL),
 #define XLAT_VAL_54 ((unsigned) (KVM_CAP_TSC_CONTROL))
 #define XLAT_STR_54 STRINGIFY(KVM_CAP_TSC_CONTROL)
 [KVM_CAP_GET_TSC_KHZ] = XLAT(KVM_CAP_GET_TSC_KHZ),
 #define XLAT_VAL_55 ((unsigned) (KVM_CAP_GET_TSC_KHZ))
 #define XLAT_STR_55 STRINGIFY(KVM_CAP_GET_TSC_KHZ)
 [KVM_CAP_PPC_BOOKE_SREGS] = XLAT(KVM_CAP_PPC_BOOKE_SREGS),
 #define XLAT_VAL_56 ((unsigned) (KVM_CAP_PPC_BOOKE_SREGS))
 #define XLAT_STR_56 STRINGIFY(KVM_CAP_PPC_BOOKE_SREGS)
 [KVM_CAP_SPAPR_TCE] = XLAT(KVM_CAP_SPAPR_TCE),
 #define XLAT_VAL_57 ((unsigned) (KVM_CAP_SPAPR_TCE))
 #define XLAT_STR_57 STRINGIFY(KVM_CAP_SPAPR_TCE)
 [KVM_CAP_PPC_SMT] = XLAT(KVM_CAP_PPC_SMT),
 #define XLAT_VAL_58 ((unsigned) (KVM_CAP_PPC_SMT))
 #define XLAT_STR_58 STRINGIFY(KVM_CAP_PPC_SMT)
 [KVM_CAP_PPC_RMA] = XLAT(KVM_CAP_PPC_RMA),
 #define XLAT_VAL_59 ((unsigned) (KVM_CAP_PPC_RMA))
 #define XLAT_STR_59 STRINGIFY(KVM_CAP_PPC_RMA)
 [KVM_CAP_MAX_VCPUS] = XLAT(KVM_CAP_MAX_VCPUS),
 #define XLAT_VAL_60 ((unsigned) (KVM_CAP_MAX_VCPUS))
 #define XLAT_STR_60 STRINGIFY(KVM_CAP_MAX_VCPUS)
 [KVM_CAP_PPC_HIOR] = XLAT(KVM_CAP_PPC_HIOR),
 #define XLAT_VAL_61 ((unsigned) (KVM_CAP_PPC_HIOR))
 #define XLAT_STR_61 STRINGIFY(KVM_CAP_PPC_HIOR)
 [KVM_CAP_PPC_PAPR] = XLAT(KVM_CAP_PPC_PAPR),
 #define XLAT_VAL_62 ((unsigned) (KVM_CAP_PPC_PAPR))
 #define XLAT_STR_62 STRINGIFY(KVM_CAP_PPC_PAPR)
 [KVM_CAP_SW_TLB] = XLAT(KVM_CAP_SW_TLB),
 #define XLAT_VAL_63 ((unsigned) (KVM_CAP_SW_TLB))
 #define XLAT_STR_63 STRINGIFY(KVM_CAP_SW_TLB)
 [KVM_CAP_ONE_REG] = XLAT(KVM_CAP_ONE_REG),
 #define XLAT_VAL_64 ((unsigned) (KVM_CAP_ONE_REG))
 #define XLAT_STR_64 STRINGIFY(KVM_CAP_ONE_REG)
 [KVM_CAP_S390_GMAP] = XLAT(KVM_CAP_S390_GMAP),
 #define XLAT_VAL_65 ((unsigned) (KVM_CAP_S390_GMAP))
 #define XLAT_STR_65 STRINGIFY(KVM_CAP_S390_GMAP)
 [KVM_CAP_TSC_DEADLINE_TIMER] = XLAT(KVM_CAP_TSC_DEADLINE_TIMER),
 #define XLAT_VAL_66 ((unsigned) (KVM_CAP_TSC_DEADLINE_TIMER))
 #define XLAT_STR_66 STRINGIFY(KVM_CAP_TSC_DEADLINE_TIMER)
 [KVM_CAP_S390_UCONTROL] = XLAT(KVM_CAP_S390_UCONTROL),
 #define XLAT_VAL_67 ((unsigned) (KVM_CAP_S390_UCONTROL))
 #define XLAT_STR_67 STRINGIFY(KVM_CAP_S390_UCONTROL)
 [KVM_CAP_SYNC_REGS] = XLAT(KVM_CAP_SYNC_REGS),
 #define XLAT_VAL_68 ((unsigned) (KVM_CAP_SYNC_REGS))
 #define XLAT_STR_68 STRINGIFY(KVM_CAP_SYNC_REGS)
 [KVM_CAP_PCI_2_3] = XLAT(KVM_CAP_PCI_2_3),
 #define XLAT_VAL_69 ((unsigned) (KVM_CAP_PCI_2_3))
 #define XLAT_STR_69 STRINGIFY(KVM_CAP_PCI_2_3)
 [KVM_CAP_KVMCLOCK_CTRL] = XLAT(KVM_CAP_KVMCLOCK_CTRL),
 #define XLAT_VAL_70 ((unsigned) (KVM_CAP_KVMCLOCK_CTRL))
 #define XLAT_STR_70 STRINGIFY(KVM_CAP_KVMCLOCK_CTRL)
 [KVM_CAP_SIGNAL_MSI] = XLAT(KVM_CAP_SIGNAL_MSI),
 #define XLAT_VAL_71 ((unsigned) (KVM_CAP_SIGNAL_MSI))
 #define XLAT_STR_71 STRINGIFY(KVM_CAP_SIGNAL_MSI)
 [KVM_CAP_PPC_GET_SMMU_INFO] = XLAT(KVM_CAP_PPC_GET_SMMU_INFO),
 #define XLAT_VAL_72 ((unsigned) (KVM_CAP_PPC_GET_SMMU_INFO))
 #define XLAT_STR_72 STRINGIFY(KVM_CAP_PPC_GET_SMMU_INFO)
 [KVM_CAP_S390_COW] = XLAT(KVM_CAP_S390_COW),
 #define XLAT_VAL_73 ((unsigned) (KVM_CAP_S390_COW))
 #define XLAT_STR_73 STRINGIFY(KVM_CAP_S390_COW)
 [KVM_CAP_PPC_ALLOC_HTAB] = XLAT(KVM_CAP_PPC_ALLOC_HTAB),
 #define XLAT_VAL_74 ((unsigned) (KVM_CAP_PPC_ALLOC_HTAB))
 #define XLAT_STR_74 STRINGIFY(KVM_CAP_PPC_ALLOC_HTAB)
 [KVM_CAP_READONLY_MEM] = XLAT(KVM_CAP_READONLY_MEM),
 #define XLAT_VAL_75 ((unsigned) (KVM_CAP_READONLY_MEM))
 #define XLAT_STR_75 STRINGIFY(KVM_CAP_READONLY_MEM)
 [KVM_CAP_IRQFD_RESAMPLE] = XLAT(KVM_CAP_IRQFD_RESAMPLE),
 #define XLAT_VAL_76 ((unsigned) (KVM_CAP_IRQFD_RESAMPLE))
 #define XLAT_STR_76 STRINGIFY(KVM_CAP_IRQFD_RESAMPLE)
 [KVM_CAP_PPC_BOOKE_WATCHDOG] = XLAT(KVM_CAP_PPC_BOOKE_WATCHDOG),
 #define XLAT_VAL_77 ((unsigned) (KVM_CAP_PPC_BOOKE_WATCHDOG))
 #define XLAT_STR_77 STRINGIFY(KVM_CAP_PPC_BOOKE_WATCHDOG)
 [KVM_CAP_PPC_HTAB_FD] = XLAT(KVM_CAP_PPC_HTAB_FD),
 #define XLAT_VAL_78 ((unsigned) (KVM_CAP_PPC_HTAB_FD))
 #define XLAT_STR_78 STRINGIFY(KVM_CAP_PPC_HTAB_FD)
 [KVM_CAP_S390_CSS_SUPPORT] = XLAT(KVM_CAP_S390_CSS_SUPPORT),
 #define XLAT_VAL_79 ((unsigned) (KVM_CAP_S390_CSS_SUPPORT))
 #define XLAT_STR_79 STRINGIFY(KVM_CAP_S390_CSS_SUPPORT)
 [KVM_CAP_PPC_EPR] = XLAT(KVM_CAP_PPC_EPR),
 #define XLAT_VAL_80 ((unsigned) (KVM_CAP_PPC_EPR))
 #define XLAT_STR_80 STRINGIFY(KVM_CAP_PPC_EPR)
 [KVM_CAP_ARM_PSCI] = XLAT(KVM_CAP_ARM_PSCI),
 #define XLAT_VAL_81 ((unsigned) (KVM_CAP_ARM_PSCI))
 #define XLAT_STR_81 STRINGIFY(KVM_CAP_ARM_PSCI)
 [KVM_CAP_ARM_SET_DEVICE_ADDR] = XLAT(KVM_CAP_ARM_SET_DEVICE_ADDR),
 #define XLAT_VAL_82 ((unsigned) (KVM_CAP_ARM_SET_DEVICE_ADDR))
 #define XLAT_STR_82 STRINGIFY(KVM_CAP_ARM_SET_DEVICE_ADDR)
 [KVM_CAP_DEVICE_CTRL] = XLAT(KVM_CAP_DEVICE_CTRL),
 #define XLAT_VAL_83 ((unsigned) (KVM_CAP_DEVICE_CTRL))
 #define XLAT_STR_83 STRINGIFY(KVM_CAP_DEVICE_CTRL)
 [KVM_CAP_IRQ_MPIC] = XLAT(KVM_CAP_IRQ_MPIC),
 #define XLAT_VAL_84 ((unsigned) (KVM_CAP_IRQ_MPIC))
 #define XLAT_STR_84 STRINGIFY(KVM_CAP_IRQ_MPIC)
 [KVM_CAP_PPC_RTAS] = XLAT(KVM_CAP_PPC_RTAS),
 #define XLAT_VAL_85 ((unsigned) (KVM_CAP_PPC_RTAS))
 #define XLAT_STR_85 STRINGIFY(KVM_CAP_PPC_RTAS)
 [KVM_CAP_IRQ_XICS] = XLAT(KVM_CAP_IRQ_XICS),
 #define XLAT_VAL_86 ((unsigned) (KVM_CAP_IRQ_XICS))
 #define XLAT_STR_86 STRINGIFY(KVM_CAP_IRQ_XICS)
 [KVM_CAP_ARM_EL1_32BIT] = XLAT(KVM_CAP_ARM_EL1_32BIT),
 #define XLAT_VAL_87 ((unsigned) (KVM_CAP_ARM_EL1_32BIT))
 #define XLAT_STR_87 STRINGIFY(KVM_CAP_ARM_EL1_32BIT)
 [KVM_CAP_SPAPR_MULTITCE] = XLAT(KVM_CAP_SPAPR_MULTITCE),
 #define XLAT_VAL_88 ((unsigned) (KVM_CAP_SPAPR_MULTITCE))
 #define XLAT_STR_88 STRINGIFY(KVM_CAP_SPAPR_MULTITCE)
 [KVM_CAP_EXT_EMUL_CPUID] = XLAT(KVM_CAP_EXT_EMUL_CPUID),
 #define XLAT_VAL_89 ((unsigned) (KVM_CAP_EXT_EMUL_CPUID))
 #define XLAT_STR_89 STRINGIFY(KVM_CAP_EXT_EMUL_CPUID)
 [KVM_CAP_HYPERV_TIME] = XLAT(KVM_CAP_HYPERV_TIME),
 #define XLAT_VAL_90 ((unsigned) (KVM_CAP_HYPERV_TIME))
 #define XLAT_STR_90 STRINGIFY(KVM_CAP_HYPERV_TIME)
 [KVM_CAP_IOAPIC_POLARITY_IGNORED] = XLAT(KVM_CAP_IOAPIC_POLARITY_IGNORED),
 #define XLAT_VAL_91 ((unsigned) (KVM_CAP_IOAPIC_POLARITY_IGNORED))
 #define XLAT_STR_91 STRINGIFY(KVM_CAP_IOAPIC_POLARITY_IGNORED)
 [KVM_CAP_ENABLE_CAP_VM] = XLAT(KVM_CAP_ENABLE_CAP_VM),
 #define XLAT_VAL_92 ((unsigned) (KVM_CAP_ENABLE_CAP_VM))
 #define XLAT_STR_92 STRINGIFY(KVM_CAP_ENABLE_CAP_VM)
 [KVM_CAP_S390_IRQCHIP] = XLAT(KVM_CAP_S390_IRQCHIP),
 #define XLAT_VAL_93 ((unsigned) (KVM_CAP_S390_IRQCHIP))
 #define XLAT_STR_93 STRINGIFY(KVM_CAP_S390_IRQCHIP)
 [KVM_CAP_IOEVENTFD_NO_LENGTH] = XLAT(KVM_CAP_IOEVENTFD_NO_LENGTH),
 #define XLAT_VAL_94 ((unsigned) (KVM_CAP_IOEVENTFD_NO_LENGTH))
 #define XLAT_STR_94 STRINGIFY(KVM_CAP_IOEVENTFD_NO_LENGTH)
 [KVM_CAP_VM_ATTRIBUTES] = XLAT(KVM_CAP_VM_ATTRIBUTES),
 #define XLAT_VAL_95 ((unsigned) (KVM_CAP_VM_ATTRIBUTES))
 #define XLAT_STR_95 STRINGIFY(KVM_CAP_VM_ATTRIBUTES)
 [KVM_CAP_ARM_PSCI_0_2] = XLAT(KVM_CAP_ARM_PSCI_0_2),
 #define XLAT_VAL_96 ((unsigned) (KVM_CAP_ARM_PSCI_0_2))
 #define XLAT_STR_96 STRINGIFY(KVM_CAP_ARM_PSCI_0_2)
 [KVM_CAP_PPC_FIXUP_HCALL] = XLAT(KVM_CAP_PPC_FIXUP_HCALL),
 #define XLAT_VAL_97 ((unsigned) (KVM_CAP_PPC_FIXUP_HCALL))
 #define XLAT_STR_97 STRINGIFY(KVM_CAP_PPC_FIXUP_HCALL)
 [KVM_CAP_PPC_ENABLE_HCALL] = XLAT(KVM_CAP_PPC_ENABLE_HCALL),
 #define XLAT_VAL_98 ((unsigned) (KVM_CAP_PPC_ENABLE_HCALL))
 #define XLAT_STR_98 STRINGIFY(KVM_CAP_PPC_ENABLE_HCALL)
 [KVM_CAP_CHECK_EXTENSION_VM] = XLAT(KVM_CAP_CHECK_EXTENSION_VM),
 #define XLAT_VAL_99 ((unsigned) (KVM_CAP_CHECK_EXTENSION_VM))
 #define XLAT_STR_99 STRINGIFY(KVM_CAP_CHECK_EXTENSION_VM)
 [KVM_CAP_S390_USER_SIGP] = XLAT(KVM_CAP_S390_USER_SIGP),
 #define XLAT_VAL_100 ((unsigned) (KVM_CAP_S390_USER_SIGP))
 #define XLAT_STR_100 STRINGIFY(KVM_CAP_S390_USER_SIGP)
 [KVM_CAP_S390_VECTOR_REGISTERS] = XLAT(KVM_CAP_S390_VECTOR_REGISTERS),
 #define XLAT_VAL_101 ((unsigned) (KVM_CAP_S390_VECTOR_REGISTERS))
 #define XLAT_STR_101 STRINGIFY(KVM_CAP_S390_VECTOR_REGISTERS)
 [KVM_CAP_S390_MEM_OP] = XLAT(KVM_CAP_S390_MEM_OP),
 #define XLAT_VAL_102 ((unsigned) (KVM_CAP_S390_MEM_OP))
 #define XLAT_STR_102 STRINGIFY(KVM_CAP_S390_MEM_OP)
 [KVM_CAP_S390_USER_STSI] = XLAT(KVM_CAP_S390_USER_STSI),
 #define XLAT_VAL_103 ((unsigned) (KVM_CAP_S390_USER_STSI))
 #define XLAT_STR_103 STRINGIFY(KVM_CAP_S390_USER_STSI)
 [KVM_CAP_S390_SKEYS] = XLAT(KVM_CAP_S390_SKEYS),
 #define XLAT_VAL_104 ((unsigned) (KVM_CAP_S390_SKEYS))
 #define XLAT_STR_104 STRINGIFY(KVM_CAP_S390_SKEYS)
 [KVM_CAP_MIPS_FPU] = XLAT(KVM_CAP_MIPS_FPU),
 #define XLAT_VAL_105 ((unsigned) (KVM_CAP_MIPS_FPU))
 #define XLAT_STR_105 STRINGIFY(KVM_CAP_MIPS_FPU)
 [KVM_CAP_MIPS_MSA] = XLAT(KVM_CAP_MIPS_MSA),
 #define XLAT_VAL_106 ((unsigned) (KVM_CAP_MIPS_MSA))
 #define XLAT_STR_106 STRINGIFY(KVM_CAP_MIPS_MSA)
 [KVM_CAP_S390_INJECT_IRQ] = XLAT(KVM_CAP_S390_INJECT_IRQ),
 #define XLAT_VAL_107 ((unsigned) (KVM_CAP_S390_INJECT_IRQ))
 #define XLAT_STR_107 STRINGIFY(KVM_CAP_S390_INJECT_IRQ)
 [KVM_CAP_S390_IRQ_STATE] = XLAT(KVM_CAP_S390_IRQ_STATE),
 #define XLAT_VAL_108 ((unsigned) (KVM_CAP_S390_IRQ_STATE))
 #define XLAT_STR_108 STRINGIFY(KVM_CAP_S390_IRQ_STATE)
 [KVM_CAP_PPC_HWRNG] = XLAT(KVM_CAP_PPC_HWRNG),
 #define XLAT_VAL_109 ((unsigned) (KVM_CAP_PPC_HWRNG))
 #define XLAT_STR_109 STRINGIFY(KVM_CAP_PPC_HWRNG)
 [KVM_CAP_DISABLE_QUIRKS] = XLAT(KVM_CAP_DISABLE_QUIRKS),
 #define XLAT_VAL_110 ((unsigned) (KVM_CAP_DISABLE_QUIRKS))
 #define XLAT_STR_110 STRINGIFY(KVM_CAP_DISABLE_QUIRKS)
 [KVM_CAP_X86_SMM] = XLAT(KVM_CAP_X86_SMM),
 #define XLAT_VAL_111 ((unsigned) (KVM_CAP_X86_SMM))
 #define XLAT_STR_111 STRINGIFY(KVM_CAP_X86_SMM)
 [KVM_CAP_MULTI_ADDRESS_SPACE] = XLAT(KVM_CAP_MULTI_ADDRESS_SPACE),
 #define XLAT_VAL_112 ((unsigned) (KVM_CAP_MULTI_ADDRESS_SPACE))
 #define XLAT_STR_112 STRINGIFY(KVM_CAP_MULTI_ADDRESS_SPACE)
 [KVM_CAP_GUEST_DEBUG_HW_BPS] = XLAT(KVM_CAP_GUEST_DEBUG_HW_BPS),
 #define XLAT_VAL_113 ((unsigned) (KVM_CAP_GUEST_DEBUG_HW_BPS))
 #define XLAT_STR_113 STRINGIFY(KVM_CAP_GUEST_DEBUG_HW_BPS)
 [KVM_CAP_GUEST_DEBUG_HW_WPS] = XLAT(KVM_CAP_GUEST_DEBUG_HW_WPS),
 #define XLAT_VAL_114 ((unsigned) (KVM_CAP_GUEST_DEBUG_HW_WPS))
 #define XLAT_STR_114 STRINGIFY(KVM_CAP_GUEST_DEBUG_HW_WPS)
 [KVM_CAP_SPLIT_IRQCHIP] = XLAT(KVM_CAP_SPLIT_IRQCHIP),
 #define XLAT_VAL_115 ((unsigned) (KVM_CAP_SPLIT_IRQCHIP))
 #define XLAT_STR_115 STRINGIFY(KVM_CAP_SPLIT_IRQCHIP)
 [KVM_CAP_IOEVENTFD_ANY_LENGTH] = XLAT(KVM_CAP_IOEVENTFD_ANY_LENGTH),
 #define XLAT_VAL_116 ((unsigned) (KVM_CAP_IOEVENTFD_ANY_LENGTH))
 #define XLAT_STR_116 STRINGIFY(KVM_CAP_IOEVENTFD_ANY_LENGTH)
 [KVM_CAP_HYPERV_SYNIC] = XLAT(KVM_CAP_HYPERV_SYNIC),
 #define XLAT_VAL_117 ((unsigned) (KVM_CAP_HYPERV_SYNIC))
 #define XLAT_STR_117 STRINGIFY(KVM_CAP_HYPERV_SYNIC)
 [KVM_CAP_S390_RI] = XLAT(KVM_CAP_S390_RI),
 #define XLAT_VAL_118 ((unsigned) (KVM_CAP_S390_RI))
 #define XLAT_STR_118 STRINGIFY(KVM_CAP_S390_RI)
 [KVM_CAP_SPAPR_TCE_64] = XLAT(KVM_CAP_SPAPR_TCE_64),
 #define XLAT_VAL_119 ((unsigned) (KVM_CAP_SPAPR_TCE_64))
 #define XLAT_STR_119 STRINGIFY(KVM_CAP_SPAPR_TCE_64)
 [KVM_CAP_ARM_PMU_V3] = XLAT(KVM_CAP_ARM_PMU_V3),
 #define XLAT_VAL_120 ((unsigned) (KVM_CAP_ARM_PMU_V3))
 #define XLAT_STR_120 STRINGIFY(KVM_CAP_ARM_PMU_V3)
 [KVM_CAP_VCPU_ATTRIBUTES] = XLAT(KVM_CAP_VCPU_ATTRIBUTES),
 #define XLAT_VAL_121 ((unsigned) (KVM_CAP_VCPU_ATTRIBUTES))
 #define XLAT_STR_121 STRINGIFY(KVM_CAP_VCPU_ATTRIBUTES)
 [KVM_CAP_MAX_VCPU_ID] = XLAT(KVM_CAP_MAX_VCPU_ID),
 #define XLAT_VAL_122 ((unsigned) (KVM_CAP_MAX_VCPU_ID))
 #define XLAT_STR_122 STRINGIFY(KVM_CAP_MAX_VCPU_ID)
 [KVM_CAP_X2APIC_API] = XLAT(KVM_CAP_X2APIC_API),
 #define XLAT_VAL_123 ((unsigned) (KVM_CAP_X2APIC_API))
 #define XLAT_STR_123 STRINGIFY(KVM_CAP_X2APIC_API)
 [KVM_CAP_S390_USER_INSTR0] = XLAT(KVM_CAP_S390_USER_INSTR0),
 #define XLAT_VAL_124 ((unsigned) (KVM_CAP_S390_USER_INSTR0))
 #define XLAT_STR_124 STRINGIFY(KVM_CAP_S390_USER_INSTR0)
 [KVM_CAP_MSI_DEVID] = XLAT(KVM_CAP_MSI_DEVID),
 #define XLAT_VAL_125 ((unsigned) (KVM_CAP_MSI_DEVID))
 #define XLAT_STR_125 STRINGIFY(KVM_CAP_MSI_DEVID)
 [KVM_CAP_PPC_HTM] = XLAT(KVM_CAP_PPC_HTM),
 #define XLAT_VAL_126 ((unsigned) (KVM_CAP_PPC_HTM))
 #define XLAT_STR_126 STRINGIFY(KVM_CAP_PPC_HTM)
 [KVM_CAP_SPAPR_RESIZE_HPT] = XLAT(KVM_CAP_SPAPR_RESIZE_HPT),
 #define XLAT_VAL_127 ((unsigned) (KVM_CAP_SPAPR_RESIZE_HPT))
 #define XLAT_STR_127 STRINGIFY(KVM_CAP_SPAPR_RESIZE_HPT)
 [KVM_CAP_PPC_MMU_RADIX] = XLAT(KVM_CAP_PPC_MMU_RADIX),
 #define XLAT_VAL_128 ((unsigned) (KVM_CAP_PPC_MMU_RADIX))
 #define XLAT_STR_128 STRINGIFY(KVM_CAP_PPC_MMU_RADIX)
 [KVM_CAP_PPC_MMU_HASH_V3] = XLAT(KVM_CAP_PPC_MMU_HASH_V3),
 #define XLAT_VAL_129 ((unsigned) (KVM_CAP_PPC_MMU_HASH_V3))
 #define XLAT_STR_129 STRINGIFY(KVM_CAP_PPC_MMU_HASH_V3)
 [KVM_CAP_IMMEDIATE_EXIT] = XLAT(KVM_CAP_IMMEDIATE_EXIT),
 #define XLAT_VAL_130 ((unsigned) (KVM_CAP_IMMEDIATE_EXIT))
 #define XLAT_STR_130 STRINGIFY(KVM_CAP_IMMEDIATE_EXIT)
 [KVM_CAP_MIPS_VZ] = XLAT(KVM_CAP_MIPS_VZ),
 #define XLAT_VAL_131 ((unsigned) (KVM_CAP_MIPS_VZ))
 #define XLAT_STR_131 STRINGIFY(KVM_CAP_MIPS_VZ)
 [KVM_CAP_MIPS_TE] = XLAT(KVM_CAP_MIPS_TE),
 #define XLAT_VAL_132 ((unsigned) (KVM_CAP_MIPS_TE))
 #define XLAT_STR_132 STRINGIFY(KVM_CAP_MIPS_TE)
 [KVM_CAP_MIPS_64BIT] = XLAT(KVM_CAP_MIPS_64BIT),
 #define XLAT_VAL_133 ((unsigned) (KVM_CAP_MIPS_64BIT))
 #define XLAT_STR_133 STRINGIFY(KVM_CAP_MIPS_64BIT)
 [KVM_CAP_S390_GS] = XLAT(KVM_CAP_S390_GS),
 #define XLAT_VAL_134 ((unsigned) (KVM_CAP_S390_GS))
 #define XLAT_STR_134 STRINGIFY(KVM_CAP_S390_GS)
 [KVM_CAP_S390_AIS] = XLAT(KVM_CAP_S390_AIS),
 #define XLAT_VAL_135 ((unsigned) (KVM_CAP_S390_AIS))
 #define XLAT_STR_135 STRINGIFY(KVM_CAP_S390_AIS)
 [KVM_CAP_SPAPR_TCE_VFIO] = XLAT(KVM_CAP_SPAPR_TCE_VFIO),
 #define XLAT_VAL_136 ((unsigned) (KVM_CAP_SPAPR_TCE_VFIO))
 #define XLAT_STR_136 STRINGIFY(KVM_CAP_SPAPR_TCE_VFIO)
 [KVM_CAP_X86_DISABLE_EXITS] = XLAT(KVM_CAP_X86_DISABLE_EXITS),
 #define XLAT_VAL_137 ((unsigned) (KVM_CAP_X86_DISABLE_EXITS))
 #define XLAT_STR_137 STRINGIFY(KVM_CAP_X86_DISABLE_EXITS)
 [KVM_CAP_ARM_USER_IRQ] = XLAT(KVM_CAP_ARM_USER_IRQ),
 #define XLAT_VAL_138 ((unsigned) (KVM_CAP_ARM_USER_IRQ))
 #define XLAT_STR_138 STRINGIFY(KVM_CAP_ARM_USER_IRQ)
 [KVM_CAP_S390_CMMA_MIGRATION] = XLAT(KVM_CAP_S390_CMMA_MIGRATION),
 #define XLAT_VAL_139 ((unsigned) (KVM_CAP_S390_CMMA_MIGRATION))
 #define XLAT_STR_139 STRINGIFY(KVM_CAP_S390_CMMA_MIGRATION)
 [KVM_CAP_PPC_FWNMI] = XLAT(KVM_CAP_PPC_FWNMI),
 #define XLAT_VAL_140 ((unsigned) (KVM_CAP_PPC_FWNMI))
 #define XLAT_STR_140 STRINGIFY(KVM_CAP_PPC_FWNMI)
 [KVM_CAP_PPC_SMT_POSSIBLE] = XLAT(KVM_CAP_PPC_SMT_POSSIBLE),
 #define XLAT_VAL_141 ((unsigned) (KVM_CAP_PPC_SMT_POSSIBLE))
 #define XLAT_STR_141 STRINGIFY(KVM_CAP_PPC_SMT_POSSIBLE)
 [KVM_CAP_HYPERV_SYNIC2] = XLAT(KVM_CAP_HYPERV_SYNIC2),
 #define XLAT_VAL_142 ((unsigned) (KVM_CAP_HYPERV_SYNIC2))
 #define XLAT_STR_142 STRINGIFY(KVM_CAP_HYPERV_SYNIC2)
 [KVM_CAP_HYPERV_VP_INDEX] = XLAT(KVM_CAP_HYPERV_VP_INDEX),
 #define XLAT_VAL_143 ((unsigned) (KVM_CAP_HYPERV_VP_INDEX))
 #define XLAT_STR_143 STRINGIFY(KVM_CAP_HYPERV_VP_INDEX)
 [KVM_CAP_S390_AIS_MIGRATION] = XLAT(KVM_CAP_S390_AIS_MIGRATION),
 #define XLAT_VAL_144 ((unsigned) (KVM_CAP_S390_AIS_MIGRATION))
 #define XLAT_STR_144 STRINGIFY(KVM_CAP_S390_AIS_MIGRATION)
 [KVM_CAP_PPC_GET_CPU_CHAR] = XLAT(KVM_CAP_PPC_GET_CPU_CHAR),
 #define XLAT_VAL_145 ((unsigned) (KVM_CAP_PPC_GET_CPU_CHAR))
 #define XLAT_STR_145 STRINGIFY(KVM_CAP_PPC_GET_CPU_CHAR)
 [KVM_CAP_S390_BPB] = XLAT(KVM_CAP_S390_BPB),
 #define XLAT_VAL_146 ((unsigned) (KVM_CAP_S390_BPB))
 #define XLAT_STR_146 STRINGIFY(KVM_CAP_S390_BPB)
 [KVM_CAP_GET_MSR_FEATURES] = XLAT(KVM_CAP_GET_MSR_FEATURES),
 #define XLAT_VAL_147 ((unsigned) (KVM_CAP_GET_MSR_FEATURES))
 #define XLAT_STR_147 STRINGIFY(KVM_CAP_GET_MSR_FEATURES)
 [KVM_CAP_HYPERV_EVENTFD] = XLAT(KVM_CAP_HYPERV_EVENTFD),
 #define XLAT_VAL_148 ((unsigned) (KVM_CAP_HYPERV_EVENTFD))
 #define XLAT_STR_148 STRINGIFY(KVM_CAP_HYPERV_EVENTFD)
 [KVM_CAP_HYPERV_TLBFLUSH] = XLAT(KVM_CAP_HYPERV_TLBFLUSH),
 #define XLAT_VAL_149 ((unsigned) (KVM_CAP_HYPERV_TLBFLUSH))
 #define XLAT_STR_149 STRINGIFY(KVM_CAP_HYPERV_TLBFLUSH)
 [KVM_CAP_S390_HPAGE_1M] = XLAT(KVM_CAP_S390_HPAGE_1M),
 #define XLAT_VAL_150 ((unsigned) (KVM_CAP_S390_HPAGE_1M))
 #define XLAT_STR_150 STRINGIFY(KVM_CAP_S390_HPAGE_1M)
 [KVM_CAP_NESTED_STATE] = XLAT(KVM_CAP_NESTED_STATE),
 #define XLAT_VAL_151 ((unsigned) (KVM_CAP_NESTED_STATE))
 #define XLAT_STR_151 STRINGIFY(KVM_CAP_NESTED_STATE)
 [KVM_CAP_ARM_INJECT_SERROR_ESR] = XLAT(KVM_CAP_ARM_INJECT_SERROR_ESR),
 #define XLAT_VAL_152 ((unsigned) (KVM_CAP_ARM_INJECT_SERROR_ESR))
 #define XLAT_STR_152 STRINGIFY(KVM_CAP_ARM_INJECT_SERROR_ESR)
 [KVM_CAP_MSR_PLATFORM_INFO] = XLAT(KVM_CAP_MSR_PLATFORM_INFO),
 #define XLAT_VAL_153 ((unsigned) (KVM_CAP_MSR_PLATFORM_INFO))
 #define XLAT_STR_153 STRINGIFY(KVM_CAP_MSR_PLATFORM_INFO)
 [KVM_CAP_PPC_NESTED_HV] = XLAT(KVM_CAP_PPC_NESTED_HV),
 #define XLAT_VAL_154 ((unsigned) (KVM_CAP_PPC_NESTED_HV))
 #define XLAT_STR_154 STRINGIFY(KVM_CAP_PPC_NESTED_HV)
 [KVM_CAP_HYPERV_SEND_IPI] = XLAT(KVM_CAP_HYPERV_SEND_IPI),
 #define XLAT_VAL_155 ((unsigned) (KVM_CAP_HYPERV_SEND_IPI))
 #define XLAT_STR_155 STRINGIFY(KVM_CAP_HYPERV_SEND_IPI)
 [KVM_CAP_COALESCED_PIO] = XLAT(KVM_CAP_COALESCED_PIO),
 #define XLAT_VAL_156 ((unsigned) (KVM_CAP_COALESCED_PIO))
 #define XLAT_STR_156 STRINGIFY(KVM_CAP_COALESCED_PIO)
 [KVM_CAP_HYPERV_ENLIGHTENED_VMCS] = XLAT(KVM_CAP_HYPERV_ENLIGHTENED_VMCS),
 #define XLAT_VAL_157 ((unsigned) (KVM_CAP_HYPERV_ENLIGHTENED_VMCS))
 #define XLAT_STR_157 STRINGIFY(KVM_CAP_HYPERV_ENLIGHTENED_VMCS)
 [KVM_CAP_EXCEPTION_PAYLOAD] = XLAT(KVM_CAP_EXCEPTION_PAYLOAD),
 #define XLAT_VAL_158 ((unsigned) (KVM_CAP_EXCEPTION_PAYLOAD))
 #define XLAT_STR_158 STRINGIFY(KVM_CAP_EXCEPTION_PAYLOAD)
 [KVM_CAP_ARM_VM_IPA_SIZE] = XLAT(KVM_CAP_ARM_VM_IPA_SIZE),
 #define XLAT_VAL_159 ((unsigned) (KVM_CAP_ARM_VM_IPA_SIZE))
 #define XLAT_STR_159 STRINGIFY(KVM_CAP_ARM_VM_IPA_SIZE)
 [KVM_CAP_MANUAL_DIRTY_LOG_PROTECT] = XLAT(KVM_CAP_MANUAL_DIRTY_LOG_PROTECT),
 #define XLAT_VAL_160 ((unsigned) (KVM_CAP_MANUAL_DIRTY_LOG_PROTECT))
 #define XLAT_STR_160 STRINGIFY(KVM_CAP_MANUAL_DIRTY_LOG_PROTECT)
 [KVM_CAP_HYPERV_CPUID] = XLAT(KVM_CAP_HYPERV_CPUID),
 #define XLAT_VAL_161 ((unsigned) (KVM_CAP_HYPERV_CPUID))
 #define XLAT_STR_161 STRINGIFY(KVM_CAP_HYPERV_CPUID)
 [KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2] = XLAT(KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2),
 #define XLAT_VAL_162 ((unsigned) (KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2))
 #define XLAT_STR_162 STRINGIFY(KVM_CAP_MANUAL_DIRTY_LOG_PROTECT2)
 [KVM_CAP_PPC_IRQ_XIVE] = XLAT(KVM_CAP_PPC_IRQ_XIVE),
 #define XLAT_VAL_163 ((unsigned) (KVM_CAP_PPC_IRQ_XIVE))
 #define XLAT_STR_163 STRINGIFY(KVM_CAP_PPC_IRQ_XIVE)
 [KVM_CAP_ARM_SVE] = XLAT(KVM_CAP_ARM_SVE),
 #define XLAT_VAL_164 ((unsigned) (KVM_CAP_ARM_SVE))
 #define XLAT_STR_164 STRINGIFY(KVM_CAP_ARM_SVE)
 [KVM_CAP_ARM_PTRAUTH_ADDRESS] = XLAT(KVM_CAP_ARM_PTRAUTH_ADDRESS),
 #define XLAT_VAL_165 ((unsigned) (KVM_CAP_ARM_PTRAUTH_ADDRESS))
 #define XLAT_STR_165 STRINGIFY(KVM_CAP_ARM_PTRAUTH_ADDRESS)
 [KVM_CAP_ARM_PTRAUTH_GENERIC] = XLAT(KVM_CAP_ARM_PTRAUTH_GENERIC),
 #define XLAT_VAL_166 ((unsigned) (KVM_CAP_ARM_PTRAUTH_GENERIC))
 #define XLAT_STR_166 STRINGIFY(KVM_CAP_ARM_PTRAUTH_GENERIC)
 [KVM_CAP_PMU_EVENT_FILTER] = XLAT(KVM_CAP_PMU_EVENT_FILTER),
 #define XLAT_VAL_167 ((unsigned) (KVM_CAP_PMU_EVENT_FILTER))
 #define XLAT_STR_167 STRINGIFY(KVM_CAP_PMU_EVENT_FILTER)
 [KVM_CAP_ARM_IRQ_LINE_LAYOUT_2] = XLAT(KVM_CAP_ARM_IRQ_LINE_LAYOUT_2),
 #define XLAT_VAL_168 ((unsigned) (KVM_CAP_ARM_IRQ_LINE_LAYOUT_2))
 #define XLAT_STR_168 STRINGIFY(KVM_CAP_ARM_IRQ_LINE_LAYOUT_2)
 [KVM_CAP_HYPERV_DIRECT_TLBFLUSH] = XLAT(KVM_CAP_HYPERV_DIRECT_TLBFLUSH),
 #define XLAT_VAL_169 ((unsigned) (KVM_CAP_HYPERV_DIRECT_TLBFLUSH))
 #define XLAT_STR_169 STRINGIFY(KVM_CAP_HYPERV_DIRECT_TLBFLUSH)
 [KVM_CAP_PPC_GUEST_DEBUG_SSTEP] = XLAT(KVM_CAP_PPC_GUEST_DEBUG_SSTEP),
 #define XLAT_VAL_170 ((unsigned) (KVM_CAP_PPC_GUEST_DEBUG_SSTEP))
 #define XLAT_STR_170 STRINGIFY(KVM_CAP_PPC_GUEST_DEBUG_SSTEP)
 [KVM_CAP_ARM_NISV_TO_USER] = XLAT(KVM_CAP_ARM_NISV_TO_USER),
 #define XLAT_VAL_171 ((unsigned) (KVM_CAP_ARM_NISV_TO_USER))
 #define XLAT_STR_171 STRINGIFY(KVM_CAP_ARM_NISV_TO_USER)
 [KVM_CAP_ARM_INJECT_EXT_DABT] = XLAT(KVM_CAP_ARM_INJECT_EXT_DABT),
 #define XLAT_VAL_172 ((unsigned) (KVM_CAP_ARM_INJECT_EXT_DABT))
 #define XLAT_STR_172 STRINGIFY(KVM_CAP_ARM_INJECT_EXT_DABT)
 [KVM_CAP_S390_VCPU_RESETS] = XLAT(KVM_CAP_S390_VCPU_RESETS),
 #define XLAT_VAL_173 ((unsigned) (KVM_CAP_S390_VCPU_RESETS))
 #define XLAT_STR_173 STRINGIFY(KVM_CAP_S390_VCPU_RESETS)
 [KVM_CAP_S390_PROTECTED] = XLAT(KVM_CAP_S390_PROTECTED),
 #define XLAT_VAL_174 ((unsigned) (KVM_CAP_S390_PROTECTED))
 #define XLAT_STR_174 STRINGIFY(KVM_CAP_S390_PROTECTED)
 [KVM_CAP_PPC_SECURE_GUEST] = XLAT(KVM_CAP_PPC_SECURE_GUEST),
 #define XLAT_VAL_175 ((unsigned) (KVM_CAP_PPC_SECURE_GUEST))
 #define XLAT_STR_175 STRINGIFY(KVM_CAP_PPC_SECURE_GUEST)
 [KVM_CAP_HALT_POLL] = XLAT(KVM_CAP_HALT_POLL),
 #define XLAT_VAL_176 ((unsigned) (KVM_CAP_HALT_POLL))
 #define XLAT_STR_176 STRINGIFY(KVM_CAP_HALT_POLL)
 [KVM_CAP_ASYNC_PF_INT] = XLAT(KVM_CAP_ASYNC_PF_INT),
 #define XLAT_VAL_177 ((unsigned) (KVM_CAP_ASYNC_PF_INT))
 #define XLAT_STR_177 STRINGIFY(KVM_CAP_ASYNC_PF_INT)
 [KVM_CAP_LAST_CPU] = XLAT(KVM_CAP_LAST_CPU),
 #define XLAT_VAL_178 ((unsigned) (KVM_CAP_LAST_CPU))
 #define XLAT_STR_178 STRINGIFY(KVM_CAP_LAST_CPU)
 [KVM_CAP_SMALLER_MAXPHYADDR] = XLAT(KVM_CAP_SMALLER_MAXPHYADDR),
 #define XLAT_VAL_179 ((unsigned) (KVM_CAP_SMALLER_MAXPHYADDR))
 #define XLAT_STR_179 STRINGIFY(KVM_CAP_SMALLER_MAXPHYADDR)
 [KVM_CAP_S390_DIAG318] = XLAT(KVM_CAP_S390_DIAG318),
 #define XLAT_VAL_180 ((unsigned) (KVM_CAP_S390_DIAG318))
 #define XLAT_STR_180 STRINGIFY(KVM_CAP_S390_DIAG318)
 [KVM_CAP_STEAL_TIME] = XLAT(KVM_CAP_STEAL_TIME),
 #define XLAT_VAL_181 ((unsigned) (KVM_CAP_STEAL_TIME))
 #define XLAT_STR_181 STRINGIFY(KVM_CAP_STEAL_TIME)
 [KVM_CAP_X86_USER_SPACE_MSR] = XLAT(KVM_CAP_X86_USER_SPACE_MSR),
 #define XLAT_VAL_182 ((unsigned) (KVM_CAP_X86_USER_SPACE_MSR))
 #define XLAT_STR_182 STRINGIFY(KVM_CAP_X86_USER_SPACE_MSR)
 [KVM_CAP_X86_MSR_FILTER] = XLAT(KVM_CAP_X86_MSR_FILTER),
 #define XLAT_VAL_183 ((unsigned) (KVM_CAP_X86_MSR_FILTER))
 #define XLAT_STR_183 STRINGIFY(KVM_CAP_X86_MSR_FILTER)
 [KVM_CAP_ENFORCE_PV_FEATURE_CPUID] = XLAT(KVM_CAP_ENFORCE_PV_FEATURE_CPUID),
 #define XLAT_VAL_184 ((unsigned) (KVM_CAP_ENFORCE_PV_FEATURE_CPUID))
 #define XLAT_STR_184 STRINGIFY(KVM_CAP_ENFORCE_PV_FEATURE_CPUID)
 [KVM_CAP_SYS_HYPERV_CPUID] = XLAT(KVM_CAP_SYS_HYPERV_CPUID),
 #define XLAT_VAL_185 ((unsigned) (KVM_CAP_SYS_HYPERV_CPUID))
 #define XLAT_STR_185 STRINGIFY(KVM_CAP_SYS_HYPERV_CPUID)
 [KVM_CAP_DIRTY_LOG_RING] = XLAT(KVM_CAP_DIRTY_LOG_RING),
 #define XLAT_VAL_186 ((unsigned) (KVM_CAP_DIRTY_LOG_RING))
 #define XLAT_STR_186 STRINGIFY(KVM_CAP_DIRTY_LOG_RING)
 [KVM_CAP_X86_BUS_LOCK_EXIT] = XLAT(KVM_CAP_X86_BUS_LOCK_EXIT),
 #define XLAT_VAL_187 ((unsigned) (KVM_CAP_X86_BUS_LOCK_EXIT))
 #define XLAT_STR_187 STRINGIFY(KVM_CAP_X86_BUS_LOCK_EXIT)
 [KVM_CAP_PPC_DAWR1] = XLAT(KVM_CAP_PPC_DAWR1),
 #define XLAT_VAL_188 ((unsigned) (KVM_CAP_PPC_DAWR1))
 #define XLAT_STR_188 STRINGIFY(KVM_CAP_PPC_DAWR1)
 [KVM_CAP_SET_GUEST_DEBUG2] = XLAT(KVM_CAP_SET_GUEST_DEBUG2),
 #define XLAT_VAL_189 ((unsigned) (KVM_CAP_SET_GUEST_DEBUG2))
 #define XLAT_STR_189 STRINGIFY(KVM_CAP_SET_GUEST_DEBUG2)
 [KVM_CAP_SGX_ATTRIBUTE] = XLAT(KVM_CAP_SGX_ATTRIBUTE),
 #define XLAT_VAL_190 ((unsigned) (KVM_CAP_SGX_ATTRIBUTE))
 #define XLAT_STR_190 STRINGIFY(KVM_CAP_SGX_ATTRIBUTE)
 [KVM_CAP_VM_COPY_ENC_CONTEXT_FROM] = XLAT(KVM_CAP_VM_COPY_ENC_CONTEXT_FROM),
 #define XLAT_VAL_191 ((unsigned) (KVM_CAP_VM_COPY_ENC_CONTEXT_FROM))
 #define XLAT_STR_191 STRINGIFY(KVM_CAP_VM_COPY_ENC_CONTEXT_FROM)
 [KVM_CAP_PTP_KVM] = XLAT(KVM_CAP_PTP_KVM),
 #define XLAT_VAL_192 ((unsigned) (KVM_CAP_PTP_KVM))
 #define XLAT_STR_192 STRINGIFY(KVM_CAP_PTP_KVM)
 [KVM_CAP_HYPERV_ENFORCE_CPUID] = XLAT(KVM_CAP_HYPERV_ENFORCE_CPUID),
 #define XLAT_VAL_193 ((unsigned) (KVM_CAP_HYPERV_ENFORCE_CPUID))
 #define XLAT_STR_193 STRINGIFY(KVM_CAP_HYPERV_ENFORCE_CPUID)
 [KVM_CAP_SREGS2] = XLAT(KVM_CAP_SREGS2),
 #define XLAT_VAL_194 ((unsigned) (KVM_CAP_SREGS2))
 #define XLAT_STR_194 STRINGIFY(KVM_CAP_SREGS2)
 [KVM_CAP_EXIT_HYPERCALL] = XLAT(KVM_CAP_EXIT_HYPERCALL),
 #define XLAT_VAL_195 ((unsigned) (KVM_CAP_EXIT_HYPERCALL))
 #define XLAT_STR_195 STRINGIFY(KVM_CAP_EXIT_HYPERCALL)
 [KVM_CAP_PPC_RPT_INVALIDATE] = XLAT(KVM_CAP_PPC_RPT_INVALIDATE),
 #define XLAT_VAL_196 ((unsigned) (KVM_CAP_PPC_RPT_INVALIDATE))
 #define XLAT_STR_196 STRINGIFY(KVM_CAP_PPC_RPT_INVALIDATE)
 [KVM_CAP_BINARY_STATS_FD] = XLAT(KVM_CAP_BINARY_STATS_FD),
 #define XLAT_VAL_197 ((unsigned) (KVM_CAP_BINARY_STATS_FD))
 #define XLAT_STR_197 STRINGIFY(KVM_CAP_BINARY_STATS_FD)
 [KVM_CAP_EXIT_ON_EMULATION_FAILURE] = XLAT(KVM_CAP_EXIT_ON_EMULATION_FAILURE),
 #define XLAT_VAL_198 ((unsigned) (KVM_CAP_EXIT_ON_EMULATION_FAILURE))
 #define XLAT_STR_198 STRINGIFY(KVM_CAP_EXIT_ON_EMULATION_FAILURE)
 [KVM_CAP_ARM_MTE] = XLAT(KVM_CAP_ARM_MTE),
 #define XLAT_VAL_199 ((unsigned) (KVM_CAP_ARM_MTE))
 #define XLAT_STR_199 STRINGIFY(KVM_CAP_ARM_MTE)
 [KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM] = XLAT(KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM),
 #define XLAT_VAL_200 ((unsigned) (KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM))
 #define XLAT_STR_200 STRINGIFY(KVM_CAP_VM_MOVE_ENC_CONTEXT_FROM)
 [KVM_CAP_VM_GPA_BITS] = XLAT(KVM_CAP_VM_GPA_BITS),
 #define XLAT_VAL_201 ((unsigned) (KVM_CAP_VM_GPA_BITS))
 #define XLAT_STR_201 STRINGIFY(KVM_CAP_VM_GPA_BITS)
 [KVM_CAP_XSAVE2] = XLAT(KVM_CAP_XSAVE2),
 #define XLAT_VAL_202 ((unsigned) (KVM_CAP_XSAVE2))
 #define XLAT_STR_202 STRINGIFY(KVM_CAP_XSAVE2)
 [KVM_CAP_SYS_ATTRIBUTES] = XLAT(KVM_CAP_SYS_ATTRIBUTES),
 #define XLAT_VAL_203 ((unsigned) (KVM_CAP_SYS_ATTRIBUTES))
 #define XLAT_STR_203 STRINGIFY(KVM_CAP_SYS_ATTRIBUTES)
 [KVM_CAP_PPC_AIL_MODE_3] = XLAT(KVM_CAP_PPC_AIL_MODE_3),
 #define XLAT_VAL_204 ((unsigned) (KVM_CAP_PPC_AIL_MODE_3))
 #define XLAT_STR_204 STRINGIFY(KVM_CAP_PPC_AIL_MODE_3)
 [KVM_CAP_S390_MEM_OP_EXTENSION] = XLAT(KVM_CAP_S390_MEM_OP_EXTENSION),
 #define XLAT_VAL_205 ((unsigned) (KVM_CAP_S390_MEM_OP_EXTENSION))
 #define XLAT_STR_205 STRINGIFY(KVM_CAP_S390_MEM_OP_EXTENSION)
 [KVM_CAP_PMU_CAPABILITY] = XLAT(KVM_CAP_PMU_CAPABILITY),
 #define XLAT_VAL_206 ((unsigned) (KVM_CAP_PMU_CAPABILITY))
 #define XLAT_STR_206 STRINGIFY(KVM_CAP_PMU_CAPABILITY)
 [KVM_CAP_DISABLE_QUIRKS2] = XLAT(KVM_CAP_DISABLE_QUIRKS2),
 #define XLAT_VAL_207 ((unsigned) (KVM_CAP_DISABLE_QUIRKS2))
 #define XLAT_STR_207 STRINGIFY(KVM_CAP_DISABLE_QUIRKS2)
 [KVM_CAP_VM_TSC_CONTROL] = XLAT(KVM_CAP_VM_TSC_CONTROL),
 #define XLAT_VAL_208 ((unsigned) (KVM_CAP_VM_TSC_CONTROL))
 #define XLAT_STR_208 STRINGIFY(KVM_CAP_VM_TSC_CONTROL)
 [KVM_CAP_SYSTEM_EVENT_DATA] = XLAT(KVM_CAP_SYSTEM_EVENT_DATA),
 #define XLAT_VAL_209 ((unsigned) (KVM_CAP_SYSTEM_EVENT_DATA))
 #define XLAT_STR_209 STRINGIFY(KVM_CAP_SYSTEM_EVENT_DATA)
 [KVM_CAP_ARM_SYSTEM_SUSPEND] = XLAT(KVM_CAP_ARM_SYSTEM_SUSPEND),
 #define XLAT_VAL_210 ((unsigned) (KVM_CAP_ARM_SYSTEM_SUSPEND))
 #define XLAT_STR_210 STRINGIFY(KVM_CAP_ARM_SYSTEM_SUSPEND)
 [KVM_CAP_S390_PROTECTED_DUMP] = XLAT(KVM_CAP_S390_PROTECTED_DUMP),
 #define XLAT_VAL_211 ((unsigned) (KVM_CAP_S390_PROTECTED_DUMP))
 #define XLAT_STR_211 STRINGIFY(KVM_CAP_S390_PROTECTED_DUMP)
 [KVM_CAP_X86_TRIPLE_FAULT_EVENT] = XLAT(KVM_CAP_X86_TRIPLE_FAULT_EVENT),
 #define XLAT_VAL_212 ((unsigned) (KVM_CAP_X86_TRIPLE_FAULT_EVENT))
 #define XLAT_STR_212 STRINGIFY(KVM_CAP_X86_TRIPLE_FAULT_EVENT)
 [KVM_CAP_X86_NOTIFY_VMEXIT] = XLAT(KVM_CAP_X86_NOTIFY_VMEXIT),
 #define XLAT_VAL_213 ((unsigned) (KVM_CAP_X86_NOTIFY_VMEXIT))
 #define XLAT_STR_213 STRINGIFY(KVM_CAP_X86_NOTIFY_VMEXIT)
 [KVM_CAP_VM_DISABLE_NX_HUGE_PAGES] = XLAT(KVM_CAP_VM_DISABLE_NX_HUGE_PAGES),
 #define XLAT_VAL_214 ((unsigned) (KVM_CAP_VM_DISABLE_NX_HUGE_PAGES))
 #define XLAT_STR_214 STRINGIFY(KVM_CAP_VM_DISABLE_NX_HUGE_PAGES)
 [KVM_CAP_S390_ZPCI_OP] = XLAT(KVM_CAP_S390_ZPCI_OP),
 #define XLAT_VAL_215 ((unsigned) (KVM_CAP_S390_ZPCI_OP))
 #define XLAT_STR_215 STRINGIFY(KVM_CAP_S390_ZPCI_OP)
 [KVM_CAP_S390_CPU_TOPOLOGY] = XLAT(KVM_CAP_S390_CPU_TOPOLOGY),
 #define XLAT_VAL_216 ((unsigned) (KVM_CAP_S390_CPU_TOPOLOGY))
 #define XLAT_STR_216 STRINGIFY(KVM_CAP_S390_CPU_TOPOLOGY)
};
static
const struct xlat kvm_cap[1] = { {
 .data = kvm_cap_xdata,
 .size = ARRAY_SIZE(kvm_cap_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
#  ifdef XLAT_VAL_79
  | XLAT_VAL_79
#  endif
#  ifdef XLAT_VAL_80
  | XLAT_VAL_80
#  endif
#  ifdef XLAT_VAL_81
  | XLAT_VAL_81
#  endif
#  ifdef XLAT_VAL_82
  | XLAT_VAL_82
#  endif
#  ifdef XLAT_VAL_83
  | XLAT_VAL_83
#  endif
#  ifdef XLAT_VAL_84
  | XLAT_VAL_84
#  endif
#  ifdef XLAT_VAL_85
  | XLAT_VAL_85
#  endif
#  ifdef XLAT_VAL_86
  | XLAT_VAL_86
#  endif
#  ifdef XLAT_VAL_87
  | XLAT_VAL_87
#  endif
#  ifdef XLAT_VAL_88
  | XLAT_VAL_88
#  endif
#  ifdef XLAT_VAL_89
  | XLAT_VAL_89
#  endif
#  ifdef XLAT_VAL_90
  | XLAT_VAL_90
#  endif
#  ifdef XLAT_VAL_91
  | XLAT_VAL_91
#  endif
#  ifdef XLAT_VAL_92
  | XLAT_VAL_92
#  endif
#  ifdef XLAT_VAL_93
  | XLAT_VAL_93
#  endif
#  ifdef XLAT_VAL_94
  | XLAT_VAL_94
#  endif
#  ifdef XLAT_VAL_95
  | XLAT_VAL_95
#  endif
#  ifdef XLAT_VAL_96
  | XLAT_VAL_96
#  endif
#  ifdef XLAT_VAL_97
  | XLAT_VAL_97
#  endif
#  ifdef XLAT_VAL_98
  | XLAT_VAL_98
#  endif
#  ifdef XLAT_VAL_99
  | XLAT_VAL_99
#  endif
#  ifdef XLAT_VAL_100
  | XLAT_VAL_100
#  endif
#  ifdef XLAT_VAL_101
  | XLAT_VAL_101
#  endif
#  ifdef XLAT_VAL_102
  | XLAT_VAL_102
#  endif
#  ifdef XLAT_VAL_103
  | XLAT_VAL_103
#  endif
#  ifdef XLAT_VAL_104
  | XLAT_VAL_104
#  endif
#  ifdef XLAT_VAL_105
  | XLAT_VAL_105
#  endif
#  ifdef XLAT_VAL_106
  | XLAT_VAL_106
#  endif
#  ifdef XLAT_VAL_107
  | XLAT_VAL_107
#  endif
#  ifdef XLAT_VAL_108
  | XLAT_VAL_108
#  endif
#  ifdef XLAT_VAL_109
  | XLAT_VAL_109
#  endif
#  ifdef XLAT_VAL_110
  | XLAT_VAL_110
#  endif
#  ifdef XLAT_VAL_111
  | XLAT_VAL_111
#  endif
#  ifdef XLAT_VAL_112
  | XLAT_VAL_112
#  endif
#  ifdef XLAT_VAL_113
  | XLAT_VAL_113
#  endif
#  ifdef XLAT_VAL_114
  | XLAT_VAL_114
#  endif
#  ifdef XLAT_VAL_115
  | XLAT_VAL_115
#  endif
#  ifdef XLAT_VAL_116
  | XLAT_VAL_116
#  endif
#  ifdef XLAT_VAL_117
  | XLAT_VAL_117
#  endif
#  ifdef XLAT_VAL_118
  | XLAT_VAL_118
#  endif
#  ifdef XLAT_VAL_119
  | XLAT_VAL_119
#  endif
#  ifdef XLAT_VAL_120
  | XLAT_VAL_120
#  endif
#  ifdef XLAT_VAL_121
  | XLAT_VAL_121
#  endif
#  ifdef XLAT_VAL_122
  | XLAT_VAL_122
#  endif
#  ifdef XLAT_VAL_123
  | XLAT_VAL_123
#  endif
#  ifdef XLAT_VAL_124
  | XLAT_VAL_124
#  endif
#  ifdef XLAT_VAL_125
  | XLAT_VAL_125
#  endif
#  ifdef XLAT_VAL_126
  | XLAT_VAL_126
#  endif
#  ifdef XLAT_VAL_127
  | XLAT_VAL_127
#  endif
#  ifdef XLAT_VAL_128
  | XLAT_VAL_128
#  endif
#  ifdef XLAT_VAL_129
  | XLAT_VAL_129
#  endif
#  ifdef XLAT_VAL_130
  | XLAT_VAL_130
#  endif
#  ifdef XLAT_VAL_131
  | XLAT_VAL_131
#  endif
#  ifdef XLAT_VAL_132
  | XLAT_VAL_132
#  endif
#  ifdef XLAT_VAL_133
  | XLAT_VAL_133
#  endif
#  ifdef XLAT_VAL_134
  | XLAT_VAL_134
#  endif
#  ifdef XLAT_VAL_135
  | XLAT_VAL_135
#  endif
#  ifdef XLAT_VAL_136
  | XLAT_VAL_136
#  endif
#  ifdef XLAT_VAL_137
  | XLAT_VAL_137
#  endif
#  ifdef XLAT_VAL_138
  | XLAT_VAL_138
#  endif
#  ifdef XLAT_VAL_139
  | XLAT_VAL_139
#  endif
#  ifdef XLAT_VAL_140
  | XLAT_VAL_140
#  endif
#  ifdef XLAT_VAL_141
  | XLAT_VAL_141
#  endif
#  ifdef XLAT_VAL_142
  | XLAT_VAL_142
#  endif
#  ifdef XLAT_VAL_143
  | XLAT_VAL_143
#  endif
#  ifdef XLAT_VAL_144
  | XLAT_VAL_144
#  endif
#  ifdef XLAT_VAL_145
  | XLAT_VAL_145
#  endif
#  ifdef XLAT_VAL_146
  | XLAT_VAL_146
#  endif
#  ifdef XLAT_VAL_147
  | XLAT_VAL_147
#  endif
#  ifdef XLAT_VAL_148
  | XLAT_VAL_148
#  endif
#  ifdef XLAT_VAL_149
  | XLAT_VAL_149
#  endif
#  ifdef XLAT_VAL_150
  | XLAT_VAL_150
#  endif
#  ifdef XLAT_VAL_151
  | XLAT_VAL_151
#  endif
#  ifdef XLAT_VAL_152
  | XLAT_VAL_152
#  endif
#  ifdef XLAT_VAL_153
  | XLAT_VAL_153
#  endif
#  ifdef XLAT_VAL_154
  | XLAT_VAL_154
#  endif
#  ifdef XLAT_VAL_155
  | XLAT_VAL_155
#  endif
#  ifdef XLAT_VAL_156
  | XLAT_VAL_156
#  endif
#  ifdef XLAT_VAL_157
  | XLAT_VAL_157
#  endif
#  ifdef XLAT_VAL_158
  | XLAT_VAL_158
#  endif
#  ifdef XLAT_VAL_159
  | XLAT_VAL_159
#  endif
#  ifdef XLAT_VAL_160
  | XLAT_VAL_160
#  endif
#  ifdef XLAT_VAL_161
  | XLAT_VAL_161
#  endif
#  ifdef XLAT_VAL_162
  | XLAT_VAL_162
#  endif
#  ifdef XLAT_VAL_163
  | XLAT_VAL_163
#  endif
#  ifdef XLAT_VAL_164
  | XLAT_VAL_164
#  endif
#  ifdef XLAT_VAL_165
  | XLAT_VAL_165
#  endif
#  ifdef XLAT_VAL_166
  | XLAT_VAL_166
#  endif
#  ifdef XLAT_VAL_167
  | XLAT_VAL_167
#  endif
#  ifdef XLAT_VAL_168
  | XLAT_VAL_168
#  endif
#  ifdef XLAT_VAL_169
  | XLAT_VAL_169
#  endif
#  ifdef XLAT_VAL_170
  | XLAT_VAL_170
#  endif
#  ifdef XLAT_VAL_171
  | XLAT_VAL_171
#  endif
#  ifdef XLAT_VAL_172
  | XLAT_VAL_172
#  endif
#  ifdef XLAT_VAL_173
  | XLAT_VAL_173
#  endif
#  ifdef XLAT_VAL_174
  | XLAT_VAL_174
#  endif
#  ifdef XLAT_VAL_175
  | XLAT_VAL_175
#  endif
#  ifdef XLAT_VAL_176
  | XLAT_VAL_176
#  endif
#  ifdef XLAT_VAL_177
  | XLAT_VAL_177
#  endif
#  ifdef XLAT_VAL_178
  | XLAT_VAL_178
#  endif
#  ifdef XLAT_VAL_179
  | XLAT_VAL_179
#  endif
#  ifdef XLAT_VAL_180
  | XLAT_VAL_180
#  endif
#  ifdef XLAT_VAL_181
  | XLAT_VAL_181
#  endif
#  ifdef XLAT_VAL_182
  | XLAT_VAL_182
#  endif
#  ifdef XLAT_VAL_183
  | XLAT_VAL_183
#  endif
#  ifdef XLAT_VAL_184
  | XLAT_VAL_184
#  endif
#  ifdef XLAT_VAL_185
  | XLAT_VAL_185
#  endif
#  ifdef XLAT_VAL_186
  | XLAT_VAL_186
#  endif
#  ifdef XLAT_VAL_187
  | XLAT_VAL_187
#  endif
#  ifdef XLAT_VAL_188
  | XLAT_VAL_188
#  endif
#  ifdef XLAT_VAL_189
  | XLAT_VAL_189
#  endif
#  ifdef XLAT_VAL_190
  | XLAT_VAL_190
#  endif
#  ifdef XLAT_VAL_191
  | XLAT_VAL_191
#  endif
#  ifdef XLAT_VAL_192
  | XLAT_VAL_192
#  endif
#  ifdef XLAT_VAL_193
  | XLAT_VAL_193
#  endif
#  ifdef XLAT_VAL_194
  | XLAT_VAL_194
#  endif
#  ifdef XLAT_VAL_195
  | XLAT_VAL_195
#  endif
#  ifdef XLAT_VAL_196
  | XLAT_VAL_196
#  endif
#  ifdef XLAT_VAL_197
  | XLAT_VAL_197
#  endif
#  ifdef XLAT_VAL_198
  | XLAT_VAL_198
#  endif
#  ifdef XLAT_VAL_199
  | XLAT_VAL_199
#  endif
#  ifdef XLAT_VAL_200
  | XLAT_VAL_200
#  endif
#  ifdef XLAT_VAL_201
  | XLAT_VAL_201
#  endif
#  ifdef XLAT_VAL_202
  | XLAT_VAL_202
#  endif
#  ifdef XLAT_VAL_203
  | XLAT_VAL_203
#  endif
#  ifdef XLAT_VAL_204
  | XLAT_VAL_204
#  endif
#  ifdef XLAT_VAL_205
  | XLAT_VAL_205
#  endif
#  ifdef XLAT_VAL_206
  | XLAT_VAL_206
#  endif
#  ifdef XLAT_VAL_207
  | XLAT_VAL_207
#  endif
#  ifdef XLAT_VAL_208
  | XLAT_VAL_208
#  endif
#  ifdef XLAT_VAL_209
  | XLAT_VAL_209
#  endif
#  ifdef XLAT_VAL_210
  | XLAT_VAL_210
#  endif
#  ifdef XLAT_VAL_211
  | XLAT_VAL_211
#  endif
#  ifdef XLAT_VAL_212
  | XLAT_VAL_212
#  endif
#  ifdef XLAT_VAL_213
  | XLAT_VAL_213
#  endif
#  ifdef XLAT_VAL_214
  | XLAT_VAL_214
#  endif
#  ifdef XLAT_VAL_215
  | XLAT_VAL_215
#  endif
#  ifdef XLAT_VAL_216
  | XLAT_VAL_216
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
#  ifdef XLAT_STR_79
  + sizeof(XLAT_STR_79)
#  endif
#  ifdef XLAT_STR_80
  + sizeof(XLAT_STR_80)
#  endif
#  ifdef XLAT_STR_81
  + sizeof(XLAT_STR_81)
#  endif
#  ifdef XLAT_STR_82
  + sizeof(XLAT_STR_82)
#  endif
#  ifdef XLAT_STR_83
  + sizeof(XLAT_STR_83)
#  endif
#  ifdef XLAT_STR_84
  + sizeof(XLAT_STR_84)
#  endif
#  ifdef XLAT_STR_85
  + sizeof(XLAT_STR_85)
#  endif
#  ifdef XLAT_STR_86
  + sizeof(XLAT_STR_86)
#  endif
#  ifdef XLAT_STR_87
  + sizeof(XLAT_STR_87)
#  endif
#  ifdef XLAT_STR_88
  + sizeof(XLAT_STR_88)
#  endif
#  ifdef XLAT_STR_89
  + sizeof(XLAT_STR_89)
#  endif
#  ifdef XLAT_STR_90
  + sizeof(XLAT_STR_90)
#  endif
#  ifdef XLAT_STR_91
  + sizeof(XLAT_STR_91)
#  endif
#  ifdef XLAT_STR_92
  + sizeof(XLAT_STR_92)
#  endif
#  ifdef XLAT_STR_93
  + sizeof(XLAT_STR_93)
#  endif
#  ifdef XLAT_STR_94
  + sizeof(XLAT_STR_94)
#  endif
#  ifdef XLAT_STR_95
  + sizeof(XLAT_STR_95)
#  endif
#  ifdef XLAT_STR_96
  + sizeof(XLAT_STR_96)
#  endif
#  ifdef XLAT_STR_97
  + sizeof(XLAT_STR_97)
#  endif
#  ifdef XLAT_STR_98
  + sizeof(XLAT_STR_98)
#  endif
#  ifdef XLAT_STR_99
  + sizeof(XLAT_STR_99)
#  endif
#  ifdef XLAT_STR_100
  + sizeof(XLAT_STR_100)
#  endif
#  ifdef XLAT_STR_101
  + sizeof(XLAT_STR_101)
#  endif
#  ifdef XLAT_STR_102
  + sizeof(XLAT_STR_102)
#  endif
#  ifdef XLAT_STR_103
  + sizeof(XLAT_STR_103)
#  endif
#  ifdef XLAT_STR_104
  + sizeof(XLAT_STR_104)
#  endif
#  ifdef XLAT_STR_105
  + sizeof(XLAT_STR_105)
#  endif
#  ifdef XLAT_STR_106
  + sizeof(XLAT_STR_106)
#  endif
#  ifdef XLAT_STR_107
  + sizeof(XLAT_STR_107)
#  endif
#  ifdef XLAT_STR_108
  + sizeof(XLAT_STR_108)
#  endif
#  ifdef XLAT_STR_109
  + sizeof(XLAT_STR_109)
#  endif
#  ifdef XLAT_STR_110
  + sizeof(XLAT_STR_110)
#  endif
#  ifdef XLAT_STR_111
  + sizeof(XLAT_STR_111)
#  endif
#  ifdef XLAT_STR_112
  + sizeof(XLAT_STR_112)
#  endif
#  ifdef XLAT_STR_113
  + sizeof(XLAT_STR_113)
#  endif
#  ifdef XLAT_STR_114
  + sizeof(XLAT_STR_114)
#  endif
#  ifdef XLAT_STR_115
  + sizeof(XLAT_STR_115)
#  endif
#  ifdef XLAT_STR_116
  + sizeof(XLAT_STR_116)
#  endif
#  ifdef XLAT_STR_117
  + sizeof(XLAT_STR_117)
#  endif
#  ifdef XLAT_STR_118
  + sizeof(XLAT_STR_118)
#  endif
#  ifdef XLAT_STR_119
  + sizeof(XLAT_STR_119)
#  endif
#  ifdef XLAT_STR_120
  + sizeof(XLAT_STR_120)
#  endif
#  ifdef XLAT_STR_121
  + sizeof(XLAT_STR_121)
#  endif
#  ifdef XLAT_STR_122
  + sizeof(XLAT_STR_122)
#  endif
#  ifdef XLAT_STR_123
  + sizeof(XLAT_STR_123)
#  endif
#  ifdef XLAT_STR_124
  + sizeof(XLAT_STR_124)
#  endif
#  ifdef XLAT_STR_125
  + sizeof(XLAT_STR_125)
#  endif
#  ifdef XLAT_STR_126
  + sizeof(XLAT_STR_126)
#  endif
#  ifdef XLAT_STR_127
  + sizeof(XLAT_STR_127)
#  endif
#  ifdef XLAT_STR_128
  + sizeof(XLAT_STR_128)
#  endif
#  ifdef XLAT_STR_129
  + sizeof(XLAT_STR_129)
#  endif
#  ifdef XLAT_STR_130
  + sizeof(XLAT_STR_130)
#  endif
#  ifdef XLAT_STR_131
  + sizeof(XLAT_STR_131)
#  endif
#  ifdef XLAT_STR_132
  + sizeof(XLAT_STR_132)
#  endif
#  ifdef XLAT_STR_133
  + sizeof(XLAT_STR_133)
#  endif
#  ifdef XLAT_STR_134
  + sizeof(XLAT_STR_134)
#  endif
#  ifdef XLAT_STR_135
  + sizeof(XLAT_STR_135)
#  endif
#  ifdef XLAT_STR_136
  + sizeof(XLAT_STR_136)
#  endif
#  ifdef XLAT_STR_137
  + sizeof(XLAT_STR_137)
#  endif
#  ifdef XLAT_STR_138
  + sizeof(XLAT_STR_138)
#  endif
#  ifdef XLAT_STR_139
  + sizeof(XLAT_STR_139)
#  endif
#  ifdef XLAT_STR_140
  + sizeof(XLAT_STR_140)
#  endif
#  ifdef XLAT_STR_141
  + sizeof(XLAT_STR_141)
#  endif
#  ifdef XLAT_STR_142
  + sizeof(XLAT_STR_142)
#  endif
#  ifdef XLAT_STR_143
  + sizeof(XLAT_STR_143)
#  endif
#  ifdef XLAT_STR_144
  + sizeof(XLAT_STR_144)
#  endif
#  ifdef XLAT_STR_145
  + sizeof(XLAT_STR_145)
#  endif
#  ifdef XLAT_STR_146
  + sizeof(XLAT_STR_146)
#  endif
#  ifdef XLAT_STR_147
  + sizeof(XLAT_STR_147)
#  endif
#  ifdef XLAT_STR_148
  + sizeof(XLAT_STR_148)
#  endif
#  ifdef XLAT_STR_149
  + sizeof(XLAT_STR_149)
#  endif
#  ifdef XLAT_STR_150
  + sizeof(XLAT_STR_150)
#  endif
#  ifdef XLAT_STR_151
  + sizeof(XLAT_STR_151)
#  endif
#  ifdef XLAT_STR_152
  + sizeof(XLAT_STR_152)
#  endif
#  ifdef XLAT_STR_153
  + sizeof(XLAT_STR_153)
#  endif
#  ifdef XLAT_STR_154
  + sizeof(XLAT_STR_154)
#  endif
#  ifdef XLAT_STR_155
  + sizeof(XLAT_STR_155)
#  endif
#  ifdef XLAT_STR_156
  + sizeof(XLAT_STR_156)
#  endif
#  ifdef XLAT_STR_157
  + sizeof(XLAT_STR_157)
#  endif
#  ifdef XLAT_STR_158
  + sizeof(XLAT_STR_158)
#  endif
#  ifdef XLAT_STR_159
  + sizeof(XLAT_STR_159)
#  endif
#  ifdef XLAT_STR_160
  + sizeof(XLAT_STR_160)
#  endif
#  ifdef XLAT_STR_161
  + sizeof(XLAT_STR_161)
#  endif
#  ifdef XLAT_STR_162
  + sizeof(XLAT_STR_162)
#  endif
#  ifdef XLAT_STR_163
  + sizeof(XLAT_STR_163)
#  endif
#  ifdef XLAT_STR_164
  + sizeof(XLAT_STR_164)
#  endif
#  ifdef XLAT_STR_165
  + sizeof(XLAT_STR_165)
#  endif
#  ifdef XLAT_STR_166
  + sizeof(XLAT_STR_166)
#  endif
#  ifdef XLAT_STR_167
  + sizeof(XLAT_STR_167)
#  endif
#  ifdef XLAT_STR_168
  + sizeof(XLAT_STR_168)
#  endif
#  ifdef XLAT_STR_169
  + sizeof(XLAT_STR_169)
#  endif
#  ifdef XLAT_STR_170
  + sizeof(XLAT_STR_170)
#  endif
#  ifdef XLAT_STR_171
  + sizeof(XLAT_STR_171)
#  endif
#  ifdef XLAT_STR_172
  + sizeof(XLAT_STR_172)
#  endif
#  ifdef XLAT_STR_173
  + sizeof(XLAT_STR_173)
#  endif
#  ifdef XLAT_STR_174
  + sizeof(XLAT_STR_174)
#  endif
#  ifdef XLAT_STR_175
  + sizeof(XLAT_STR_175)
#  endif
#  ifdef XLAT_STR_176
  + sizeof(XLAT_STR_176)
#  endif
#  ifdef XLAT_STR_177
  + sizeof(XLAT_STR_177)
#  endif
#  ifdef XLAT_STR_178
  + sizeof(XLAT_STR_178)
#  endif
#  ifdef XLAT_STR_179
  + sizeof(XLAT_STR_179)
#  endif
#  ifdef XLAT_STR_180
  + sizeof(XLAT_STR_180)
#  endif
#  ifdef XLAT_STR_181
  + sizeof(XLAT_STR_181)
#  endif
#  ifdef XLAT_STR_182
  + sizeof(XLAT_STR_182)
#  endif
#  ifdef XLAT_STR_183
  + sizeof(XLAT_STR_183)
#  endif
#  ifdef XLAT_STR_184
  + sizeof(XLAT_STR_184)
#  endif
#  ifdef XLAT_STR_185
  + sizeof(XLAT_STR_185)
#  endif
#  ifdef XLAT_STR_186
  + sizeof(XLAT_STR_186)
#  endif
#  ifdef XLAT_STR_187
  + sizeof(XLAT_STR_187)
#  endif
#  ifdef XLAT_STR_188
  + sizeof(XLAT_STR_188)
#  endif
#  ifdef XLAT_STR_189
  + sizeof(XLAT_STR_189)
#  endif
#  ifdef XLAT_STR_190
  + sizeof(XLAT_STR_190)
#  endif
#  ifdef XLAT_STR_191
  + sizeof(XLAT_STR_191)
#  endif
#  ifdef XLAT_STR_192
  + sizeof(XLAT_STR_192)
#  endif
#  ifdef XLAT_STR_193
  + sizeof(XLAT_STR_193)
#  endif
#  ifdef XLAT_STR_194
  + sizeof(XLAT_STR_194)
#  endif
#  ifdef XLAT_STR_195
  + sizeof(XLAT_STR_195)
#  endif
#  ifdef XLAT_STR_196
  + sizeof(XLAT_STR_196)
#  endif
#  ifdef XLAT_STR_197
  + sizeof(XLAT_STR_197)
#  endif
#  ifdef XLAT_STR_198
  + sizeof(XLAT_STR_198)
#  endif
#  ifdef XLAT_STR_199
  + sizeof(XLAT_STR_199)
#  endif
#  ifdef XLAT_STR_200
  + sizeof(XLAT_STR_200)
#  endif
#  ifdef XLAT_STR_201
  + sizeof(XLAT_STR_201)
#  endif
#  ifdef XLAT_STR_202
  + sizeof(XLAT_STR_202)
#  endif
#  ifdef XLAT_STR_203
  + sizeof(XLAT_STR_203)
#  endif
#  ifdef XLAT_STR_204
  + sizeof(XLAT_STR_204)
#  endif
#  ifdef XLAT_STR_205
  + sizeof(XLAT_STR_205)
#  endif
#  ifdef XLAT_STR_206
  + sizeof(XLAT_STR_206)
#  endif
#  ifdef XLAT_STR_207
  + sizeof(XLAT_STR_207)
#  endif
#  ifdef XLAT_STR_208
  + sizeof(XLAT_STR_208)
#  endif
#  ifdef XLAT_STR_209
  + sizeof(XLAT_STR_209)
#  endif
#  ifdef XLAT_STR_210
  + sizeof(XLAT_STR_210)
#  endif
#  ifdef XLAT_STR_211
  + sizeof(XLAT_STR_211)
#  endif
#  ifdef XLAT_STR_212
  + sizeof(XLAT_STR_212)
#  endif
#  ifdef XLAT_STR_213
  + sizeof(XLAT_STR_213)
#  endif
#  ifdef XLAT_STR_214
  + sizeof(XLAT_STR_214)
#  endif
#  ifdef XLAT_STR_215
  + sizeof(XLAT_STR_215)
#  endif
#  ifdef XLAT_STR_216
  + sizeof(XLAT_STR_216)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
#  undef XLAT_STR_79
#  undef XLAT_VAL_79
#  undef XLAT_STR_80
#  undef XLAT_VAL_80
#  undef XLAT_STR_81
#  undef XLAT_VAL_81
#  undef XLAT_STR_82
#  undef XLAT_VAL_82
#  undef XLAT_STR_83
#  undef XLAT_VAL_83
#  undef XLAT_STR_84
#  undef XLAT_VAL_84
#  undef XLAT_STR_85
#  undef XLAT_VAL_85
#  undef XLAT_STR_86
#  undef XLAT_VAL_86
#  undef XLAT_STR_87
#  undef XLAT_VAL_87
#  undef XLAT_STR_88
#  undef XLAT_VAL_88
#  undef XLAT_STR_89
#  undef XLAT_VAL_89
#  undef XLAT_STR_90
#  undef XLAT_VAL_90
#  undef XLAT_STR_91
#  undef XLAT_VAL_91
#  undef XLAT_STR_92
#  undef XLAT_VAL_92
#  undef XLAT_STR_93
#  undef XLAT_VAL_93
#  undef XLAT_STR_94
#  undef XLAT_VAL_94
#  undef XLAT_STR_95
#  undef XLAT_VAL_95
#  undef XLAT_STR_96
#  undef XLAT_VAL_96
#  undef XLAT_STR_97
#  undef XLAT_VAL_97
#  undef XLAT_STR_98
#  undef XLAT_VAL_98
#  undef XLAT_STR_99
#  undef XLAT_VAL_99
#  undef XLAT_STR_100
#  undef XLAT_VAL_100
#  undef XLAT_STR_101
#  undef XLAT_VAL_101
#  undef XLAT_STR_102
#  undef XLAT_VAL_102
#  undef XLAT_STR_103
#  undef XLAT_VAL_103
#  undef XLAT_STR_104
#  undef XLAT_VAL_104
#  undef XLAT_STR_105
#  undef XLAT_VAL_105
#  undef XLAT_STR_106
#  undef XLAT_VAL_106
#  undef XLAT_STR_107
#  undef XLAT_VAL_107
#  undef XLAT_STR_108
#  undef XLAT_VAL_108
#  undef XLAT_STR_109
#  undef XLAT_VAL_109
#  undef XLAT_STR_110
#  undef XLAT_VAL_110
#  undef XLAT_STR_111
#  undef XLAT_VAL_111
#  undef XLAT_STR_112
#  undef XLAT_VAL_112
#  undef XLAT_STR_113
#  undef XLAT_VAL_113
#  undef XLAT_STR_114
#  undef XLAT_VAL_114
#  undef XLAT_STR_115
#  undef XLAT_VAL_115
#  undef XLAT_STR_116
#  undef XLAT_VAL_116
#  undef XLAT_STR_117
#  undef XLAT_VAL_117
#  undef XLAT_STR_118
#  undef XLAT_VAL_118
#  undef XLAT_STR_119
#  undef XLAT_VAL_119
#  undef XLAT_STR_120
#  undef XLAT_VAL_120
#  undef XLAT_STR_121
#  undef XLAT_VAL_121
#  undef XLAT_STR_122
#  undef XLAT_VAL_122
#  undef XLAT_STR_123
#  undef XLAT_VAL_123
#  undef XLAT_STR_124
#  undef XLAT_VAL_124
#  undef XLAT_STR_125
#  undef XLAT_VAL_125
#  undef XLAT_STR_126
#  undef XLAT_VAL_126
#  undef XLAT_STR_127
#  undef XLAT_VAL_127
#  undef XLAT_STR_128
#  undef XLAT_VAL_128
#  undef XLAT_STR_129
#  undef XLAT_VAL_129
#  undef XLAT_STR_130
#  undef XLAT_VAL_130
#  undef XLAT_STR_131
#  undef XLAT_VAL_131
#  undef XLAT_STR_132
#  undef XLAT_VAL_132
#  undef XLAT_STR_133
#  undef XLAT_VAL_133
#  undef XLAT_STR_134
#  undef XLAT_VAL_134
#  undef XLAT_STR_135
#  undef XLAT_VAL_135
#  undef XLAT_STR_136
#  undef XLAT_VAL_136
#  undef XLAT_STR_137
#  undef XLAT_VAL_137
#  undef XLAT_STR_138
#  undef XLAT_VAL_138
#  undef XLAT_STR_139
#  undef XLAT_VAL_139
#  undef XLAT_STR_140
#  undef XLAT_VAL_140
#  undef XLAT_STR_141
#  undef XLAT_VAL_141
#  undef XLAT_STR_142
#  undef XLAT_VAL_142
#  undef XLAT_STR_143
#  undef XLAT_VAL_143
#  undef XLAT_STR_144
#  undef XLAT_VAL_144
#  undef XLAT_STR_145
#  undef XLAT_VAL_145
#  undef XLAT_STR_146
#  undef XLAT_VAL_146
#  undef XLAT_STR_147
#  undef XLAT_VAL_147
#  undef XLAT_STR_148
#  undef XLAT_VAL_148
#  undef XLAT_STR_149
#  undef XLAT_VAL_149
#  undef XLAT_STR_150
#  undef XLAT_VAL_150
#  undef XLAT_STR_151
#  undef XLAT_VAL_151
#  undef XLAT_STR_152
#  undef XLAT_VAL_152
#  undef XLAT_STR_153
#  undef XLAT_VAL_153
#  undef XLAT_STR_154
#  undef XLAT_VAL_154
#  undef XLAT_STR_155
#  undef XLAT_VAL_155
#  undef XLAT_STR_156
#  undef XLAT_VAL_156
#  undef XLAT_STR_157
#  undef XLAT_VAL_157
#  undef XLAT_STR_158
#  undef XLAT_VAL_158
#  undef XLAT_STR_159
#  undef XLAT_VAL_159
#  undef XLAT_STR_160
#  undef XLAT_VAL_160
#  undef XLAT_STR_161
#  undef XLAT_VAL_161
#  undef XLAT_STR_162
#  undef XLAT_VAL_162
#  undef XLAT_STR_163
#  undef XLAT_VAL_163
#  undef XLAT_STR_164
#  undef XLAT_VAL_164
#  undef XLAT_STR_165
#  undef XLAT_VAL_165
#  undef XLAT_STR_166
#  undef XLAT_VAL_166
#  undef XLAT_STR_167
#  undef XLAT_VAL_167
#  undef XLAT_STR_168
#  undef XLAT_VAL_168
#  undef XLAT_STR_169
#  undef XLAT_VAL_169
#  undef XLAT_STR_170
#  undef XLAT_VAL_170
#  undef XLAT_STR_171
#  undef XLAT_VAL_171
#  undef XLAT_STR_172
#  undef XLAT_VAL_172
#  undef XLAT_STR_173
#  undef XLAT_VAL_173
#  undef XLAT_STR_174
#  undef XLAT_VAL_174
#  undef XLAT_STR_175
#  undef XLAT_VAL_175
#  undef XLAT_STR_176
#  undef XLAT_VAL_176
#  undef XLAT_STR_177
#  undef XLAT_VAL_177
#  undef XLAT_STR_178
#  undef XLAT_VAL_178
#  undef XLAT_STR_179
#  undef XLAT_VAL_179
#  undef XLAT_STR_180
#  undef XLAT_VAL_180
#  undef XLAT_STR_181
#  undef XLAT_VAL_181
#  undef XLAT_STR_182
#  undef XLAT_VAL_182
#  undef XLAT_STR_183
#  undef XLAT_VAL_183
#  undef XLAT_STR_184
#  undef XLAT_VAL_184
#  undef XLAT_STR_185
#  undef XLAT_VAL_185
#  undef XLAT_STR_186
#  undef XLAT_VAL_186
#  undef XLAT_STR_187
#  undef XLAT_VAL_187
#  undef XLAT_STR_188
#  undef XLAT_VAL_188
#  undef XLAT_STR_189
#  undef XLAT_VAL_189
#  undef XLAT_STR_190
#  undef XLAT_VAL_190
#  undef XLAT_STR_191
#  undef XLAT_VAL_191
#  undef XLAT_STR_192
#  undef XLAT_VAL_192
#  undef XLAT_STR_193
#  undef XLAT_VAL_193
#  undef XLAT_STR_194
#  undef XLAT_VAL_194
#  undef XLAT_STR_195
#  undef XLAT_VAL_195
#  undef XLAT_STR_196
#  undef XLAT_VAL_196
#  undef XLAT_STR_197
#  undef XLAT_VAL_197
#  undef XLAT_STR_198
#  undef XLAT_VAL_198
#  undef XLAT_STR_199
#  undef XLAT_VAL_199
#  undef XLAT_STR_200
#  undef XLAT_VAL_200
#  undef XLAT_STR_201
#  undef XLAT_VAL_201
#  undef XLAT_STR_202
#  undef XLAT_VAL_202
#  undef XLAT_STR_203
#  undef XLAT_VAL_203
#  undef XLAT_STR_204
#  undef XLAT_VAL_204
#  undef XLAT_STR_205
#  undef XLAT_VAL_205
#  undef XLAT_STR_206
#  undef XLAT_VAL_206
#  undef XLAT_STR_207
#  undef XLAT_VAL_207
#  undef XLAT_STR_208
#  undef XLAT_VAL_208
#  undef XLAT_STR_209
#  undef XLAT_VAL_209
#  undef XLAT_STR_210
#  undef XLAT_VAL_210
#  undef XLAT_STR_211
#  undef XLAT_VAL_211
#  undef XLAT_STR_212
#  undef XLAT_VAL_212
#  undef XLAT_STR_213
#  undef XLAT_VAL_213
#  undef XLAT_STR_214
#  undef XLAT_VAL_214
#  undef XLAT_STR_215
#  undef XLAT_VAL_215
#  undef XLAT_STR_216
#  undef XLAT_VAL_216
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
