/* Generated by ./src/xlat/gen.sh from ./src/xlat/pr_sched_core_pidtypes.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PIDTYPE_PID) || (defined(HAVE_DECL_PIDTYPE_PID) && HAVE_DECL_PIDTYPE_PID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIDTYPE_PID) == (0), "PIDTYPE_PID != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIDTYPE_PID 0
#endif
#if defined(PIDTYPE_TGID) || (defined(HAVE_DECL_PIDTYPE_TGID) && HAVE_DECL_PIDTYPE_TGID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIDTYPE_TGID) == (1), "PIDTYPE_TGID != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIDTYPE_TGID 1
#endif
#if defined(PIDTYPE_PGID) || (defined(HAVE_DECL_PIDTYPE_PGID) && HAVE_DECL_PIDTYPE_PGID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIDTYPE_PGID) == (2), "PIDTYPE_PGID != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIDTYPE_PGID 2
#endif
#if defined(PIDTYPE_SID) || (defined(HAVE_DECL_PIDTYPE_SID) && HAVE_DECL_PIDTYPE_SID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIDTYPE_SID) == (3), "PIDTYPE_SID != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIDTYPE_SID 3
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat pr_sched_core_pidtypes in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data pr_sched_core_pidtypes_xdata[] = {
 [PIDTYPE_PID] = XLAT(PIDTYPE_PID),
 #define XLAT_VAL_0 ((unsigned) (PIDTYPE_PID))
 #define XLAT_STR_0 STRINGIFY(PIDTYPE_PID)
 [PIDTYPE_TGID] = XLAT(PIDTYPE_TGID),
 #define XLAT_VAL_1 ((unsigned) (PIDTYPE_TGID))
 #define XLAT_STR_1 STRINGIFY(PIDTYPE_TGID)
 [PIDTYPE_PGID] = XLAT(PIDTYPE_PGID),
 #define XLAT_VAL_2 ((unsigned) (PIDTYPE_PGID))
 #define XLAT_STR_2 STRINGIFY(PIDTYPE_PGID)
 [PIDTYPE_SID] = XLAT(PIDTYPE_SID),
 #define XLAT_VAL_3 ((unsigned) (PIDTYPE_SID))
 #define XLAT_STR_3 STRINGIFY(PIDTYPE_SID)
};
static
const struct xlat pr_sched_core_pidtypes[1] = { {
 .data = pr_sched_core_pidtypes_xdata,
 .size = ARRAY_SIZE(pr_sched_core_pidtypes_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
