/* Generated by ./src/xlat/gen.sh from ./src/xlat/fsmagic.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(QNX4_SUPER_MAGIC) || (defined(HAVE_DECL_QNX4_SUPER_MAGIC) && HAVE_DECL_QNX4_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((QNX4_SUPER_MAGIC) == (0x0000002f), "QNX4_SUPER_MAGIC != 0x0000002f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define QNX4_SUPER_MAGIC 0x0000002f
#endif
#if defined(QNX4_SUPER_MAGIC) || (defined(HAVE_DECL_QNX4_SUPER_MAGIC) && HAVE_DECL_QNX4_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (QNX4_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: QNX4_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (QNX4_SUPER_MAGIC)
#endif
#if defined(Z3FOLD_MAGIC) || (defined(HAVE_DECL_Z3FOLD_MAGIC) && HAVE_DECL_Z3FOLD_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((Z3FOLD_MAGIC) == (0x00000033), "Z3FOLD_MAGIC != 0x00000033");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define Z3FOLD_MAGIC 0x00000033
#endif
#if defined(Z3FOLD_MAGIC) || (defined(HAVE_DECL_Z3FOLD_MAGIC) && HAVE_DECL_Z3FOLD_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (Z3FOLD_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: Z3FOLD_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (Z3FOLD_MAGIC)
#endif
#if defined(AUTOFS_SUPER_MAGIC) || (defined(HAVE_DECL_AUTOFS_SUPER_MAGIC) && HAVE_DECL_AUTOFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUTOFS_SUPER_MAGIC) == (0x00000187), "AUTOFS_SUPER_MAGIC != 0x00000187");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUTOFS_SUPER_MAGIC 0x00000187
#endif
#if defined(AUTOFS_SUPER_MAGIC) || (defined(HAVE_DECL_AUTOFS_SUPER_MAGIC) && HAVE_DECL_AUTOFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUTOFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUTOFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUTOFS_SUPER_MAGIC)
#endif
#if defined(DEVFS_SUPER_MAGIC) || (defined(HAVE_DECL_DEVFS_SUPER_MAGIC) && HAVE_DECL_DEVFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVFS_SUPER_MAGIC) == (0x00001373), "DEVFS_SUPER_MAGIC != 0x00001373");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVFS_SUPER_MAGIC 0x00001373
#endif
#if defined(DEVFS_SUPER_MAGIC) || (defined(HAVE_DECL_DEVFS_SUPER_MAGIC) && HAVE_DECL_DEVFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (DEVFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: DEVFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (DEVFS_SUPER_MAGIC)
#endif
#if defined(EXT_SUPER_MAGIC) || (defined(HAVE_DECL_EXT_SUPER_MAGIC) && HAVE_DECL_EXT_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EXT_SUPER_MAGIC) == (0x0000137d), "EXT_SUPER_MAGIC != 0x0000137d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EXT_SUPER_MAGIC 0x0000137d
#endif
#if defined(EXT_SUPER_MAGIC) || (defined(HAVE_DECL_EXT_SUPER_MAGIC) && HAVE_DECL_EXT_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EXT_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EXT_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EXT_SUPER_MAGIC)
#endif
#if defined(MINIX_SUPER_MAGIC) || (defined(HAVE_DECL_MINIX_SUPER_MAGIC) && HAVE_DECL_MINIX_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MINIX_SUPER_MAGIC) == (0x0000137f), "MINIX_SUPER_MAGIC != 0x0000137f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MINIX_SUPER_MAGIC 0x0000137f
#endif
#if defined(MINIX_SUPER_MAGIC) || (defined(HAVE_DECL_MINIX_SUPER_MAGIC) && HAVE_DECL_MINIX_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MINIX_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MINIX_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MINIX_SUPER_MAGIC)
#endif
#if defined(MINIX_SUPER_MAGIC2) || (defined(HAVE_DECL_MINIX_SUPER_MAGIC2) && HAVE_DECL_MINIX_SUPER_MAGIC2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MINIX_SUPER_MAGIC2) == (0x0000138f), "MINIX_SUPER_MAGIC2 != 0x0000138f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MINIX_SUPER_MAGIC2 0x0000138f
#endif
#if defined(MINIX_SUPER_MAGIC2) || (defined(HAVE_DECL_MINIX_SUPER_MAGIC2) && HAVE_DECL_MINIX_SUPER_MAGIC2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MINIX_SUPER_MAGIC2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MINIX_SUPER_MAGIC2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MINIX_SUPER_MAGIC2)
#endif
#if defined(DEVPTS_SUPER_MAGIC) || (defined(HAVE_DECL_DEVPTS_SUPER_MAGIC) && HAVE_DECL_DEVPTS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVPTS_SUPER_MAGIC) == (0x00001cd1), "DEVPTS_SUPER_MAGIC != 0x00001cd1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVPTS_SUPER_MAGIC 0x00001cd1
#endif
#if defined(DEVPTS_SUPER_MAGIC) || (defined(HAVE_DECL_DEVPTS_SUPER_MAGIC) && HAVE_DECL_DEVPTS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (DEVPTS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: DEVPTS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (DEVPTS_SUPER_MAGIC)
#endif
#if defined(MINIX2_SUPER_MAGIC) || (defined(HAVE_DECL_MINIX2_SUPER_MAGIC) && HAVE_DECL_MINIX2_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MINIX2_SUPER_MAGIC) == (0x00002468), "MINIX2_SUPER_MAGIC != 0x00002468");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MINIX2_SUPER_MAGIC 0x00002468
#endif
#if defined(MINIX2_SUPER_MAGIC) || (defined(HAVE_DECL_MINIX2_SUPER_MAGIC) && HAVE_DECL_MINIX2_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MINIX2_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MINIX2_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MINIX2_SUPER_MAGIC)
#endif
#if defined(MINIX2_SUPER_MAGIC2) || (defined(HAVE_DECL_MINIX2_SUPER_MAGIC2) && HAVE_DECL_MINIX2_SUPER_MAGIC2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MINIX2_SUPER_MAGIC2) == (0x00002478), "MINIX2_SUPER_MAGIC2 != 0x00002478");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MINIX2_SUPER_MAGIC2 0x00002478
#endif
#if defined(MINIX2_SUPER_MAGIC2) || (defined(HAVE_DECL_MINIX2_SUPER_MAGIC2) && HAVE_DECL_MINIX2_SUPER_MAGIC2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MINIX2_SUPER_MAGIC2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MINIX2_SUPER_MAGIC2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MINIX2_SUPER_MAGIC2)
#endif
#if defined(NILFS_SUPER_MAGIC) || (defined(HAVE_DECL_NILFS_SUPER_MAGIC) && HAVE_DECL_NILFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NILFS_SUPER_MAGIC) == (0x00003434), "NILFS_SUPER_MAGIC != 0x00003434");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NILFS_SUPER_MAGIC 0x00003434
#endif
#if defined(NILFS_SUPER_MAGIC) || (defined(HAVE_DECL_NILFS_SUPER_MAGIC) && HAVE_DECL_NILFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NILFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NILFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NILFS_SUPER_MAGIC)
#endif
#if defined(HFS_SUPER_MAGIC) || (defined(HAVE_DECL_HFS_SUPER_MAGIC) && HAVE_DECL_HFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((HFS_SUPER_MAGIC) == (0x00004244), "HFS_SUPER_MAGIC != 0x00004244");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define HFS_SUPER_MAGIC 0x00004244
#endif
#if defined(HFS_SUPER_MAGIC) || (defined(HAVE_DECL_HFS_SUPER_MAGIC) && HAVE_DECL_HFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (HFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: HFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (HFS_SUPER_MAGIC)
#endif
#if defined(HFSPLUS_SUPER_MAGIC) || (defined(HAVE_DECL_HFSPLUS_SUPER_MAGIC) && HAVE_DECL_HFSPLUS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((HFSPLUS_SUPER_MAGIC) == (0x0000482b), "HFSPLUS_SUPER_MAGIC != 0x0000482b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define HFSPLUS_SUPER_MAGIC 0x0000482b
#endif
#if defined(HFSPLUS_SUPER_MAGIC) || (defined(HAVE_DECL_HFSPLUS_SUPER_MAGIC) && HAVE_DECL_HFSPLUS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (HFSPLUS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: HFSPLUS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (HFSPLUS_SUPER_MAGIC)
#endif
#if defined(MSDOS_SUPER_MAGIC) || (defined(HAVE_DECL_MSDOS_SUPER_MAGIC) && HAVE_DECL_MSDOS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSDOS_SUPER_MAGIC) == (0x00004d44), "MSDOS_SUPER_MAGIC != 0x00004d44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSDOS_SUPER_MAGIC 0x00004d44
#endif
#if defined(MSDOS_SUPER_MAGIC) || (defined(HAVE_DECL_MSDOS_SUPER_MAGIC) && HAVE_DECL_MSDOS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MSDOS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MSDOS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MSDOS_SUPER_MAGIC)
#endif
#if defined(MINIX3_SUPER_MAGIC) || (defined(HAVE_DECL_MINIX3_SUPER_MAGIC) && HAVE_DECL_MINIX3_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MINIX3_SUPER_MAGIC) == (0x00004d5a), "MINIX3_SUPER_MAGIC != 0x00004d5a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MINIX3_SUPER_MAGIC 0x00004d5a
#endif
#if defined(MINIX3_SUPER_MAGIC) || (defined(HAVE_DECL_MINIX3_SUPER_MAGIC) && HAVE_DECL_MINIX3_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MINIX3_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MINIX3_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MINIX3_SUPER_MAGIC)
#endif
#if defined(SMB_SUPER_MAGIC) || (defined(HAVE_DECL_SMB_SUPER_MAGIC) && HAVE_DECL_SMB_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMB_SUPER_MAGIC) == (0x0000517b), "SMB_SUPER_MAGIC != 0x0000517b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMB_SUPER_MAGIC 0x0000517b
#endif
#if defined(SMB_SUPER_MAGIC) || (defined(HAVE_DECL_SMB_SUPER_MAGIC) && HAVE_DECL_SMB_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SMB_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SMB_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SMB_SUPER_MAGIC)
#endif
#if defined(NCP_SUPER_MAGIC) || (defined(HAVE_DECL_NCP_SUPER_MAGIC) && HAVE_DECL_NCP_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NCP_SUPER_MAGIC) == (0x0000564c), "NCP_SUPER_MAGIC != 0x0000564c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NCP_SUPER_MAGIC 0x0000564c
#endif
#if defined(NCP_SUPER_MAGIC) || (defined(HAVE_DECL_NCP_SUPER_MAGIC) && HAVE_DECL_NCP_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NCP_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NCP_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NCP_SUPER_MAGIC)
#endif
#if defined(EXOFS_SUPER_MAGIC) || (defined(HAVE_DECL_EXOFS_SUPER_MAGIC) && HAVE_DECL_EXOFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EXOFS_SUPER_MAGIC) == (0x00005df5), "EXOFS_SUPER_MAGIC != 0x00005df5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EXOFS_SUPER_MAGIC 0x00005df5
#endif
#if defined(EXOFS_SUPER_MAGIC) || (defined(HAVE_DECL_EXOFS_SUPER_MAGIC) && HAVE_DECL_EXOFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EXOFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EXOFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EXOFS_SUPER_MAGIC)
#endif
#if defined(NFS_SUPER_MAGIC) || (defined(HAVE_DECL_NFS_SUPER_MAGIC) && HAVE_DECL_NFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NFS_SUPER_MAGIC) == (0x00006969), "NFS_SUPER_MAGIC != 0x00006969");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NFS_SUPER_MAGIC 0x00006969
#endif
#if defined(NFS_SUPER_MAGIC) || (defined(HAVE_DECL_NFS_SUPER_MAGIC) && HAVE_DECL_NFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NFS_SUPER_MAGIC)
#endif
#if defined(ROMFS_MAGIC) || (defined(HAVE_DECL_ROMFS_MAGIC) && HAVE_DECL_ROMFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ROMFS_MAGIC) == (0x00007275), "ROMFS_MAGIC != 0x00007275");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ROMFS_MAGIC 0x00007275
#endif
#if defined(ROMFS_MAGIC) || (defined(HAVE_DECL_ROMFS_MAGIC) && HAVE_DECL_ROMFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ROMFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ROMFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ROMFS_MAGIC)
#endif
#if defined(JFFS2_SUPER_MAGIC) || (defined(HAVE_DECL_JFFS2_SUPER_MAGIC) && HAVE_DECL_JFFS2_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((JFFS2_SUPER_MAGIC) == (0x000072b6), "JFFS2_SUPER_MAGIC != 0x000072b6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define JFFS2_SUPER_MAGIC 0x000072b6
#endif
#if defined(JFFS2_SUPER_MAGIC) || (defined(HAVE_DECL_JFFS2_SUPER_MAGIC) && HAVE_DECL_JFFS2_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (JFFS2_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: JFFS2_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (JFFS2_SUPER_MAGIC)
#endif
#if defined(ISOFS_SUPER_MAGIC) || (defined(HAVE_DECL_ISOFS_SUPER_MAGIC) && HAVE_DECL_ISOFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ISOFS_SUPER_MAGIC) == (0x00009660), "ISOFS_SUPER_MAGIC != 0x00009660");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ISOFS_SUPER_MAGIC 0x00009660
#endif
#if defined(ISOFS_SUPER_MAGIC) || (defined(HAVE_DECL_ISOFS_SUPER_MAGIC) && HAVE_DECL_ISOFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ISOFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ISOFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ISOFS_SUPER_MAGIC)
#endif
#if defined(PROC_SUPER_MAGIC) || (defined(HAVE_DECL_PROC_SUPER_MAGIC) && HAVE_DECL_PROC_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PROC_SUPER_MAGIC) == (0x00009fa0), "PROC_SUPER_MAGIC != 0x00009fa0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PROC_SUPER_MAGIC 0x00009fa0
#endif
#if defined(PROC_SUPER_MAGIC) || (defined(HAVE_DECL_PROC_SUPER_MAGIC) && HAVE_DECL_PROC_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PROC_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PROC_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PROC_SUPER_MAGIC)
#endif
#if defined(OPENPROM_SUPER_MAGIC) || (defined(HAVE_DECL_OPENPROM_SUPER_MAGIC) && HAVE_DECL_OPENPROM_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((OPENPROM_SUPER_MAGIC) == (0x00009fa1), "OPENPROM_SUPER_MAGIC != 0x00009fa1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define OPENPROM_SUPER_MAGIC 0x00009fa1
#endif
#if defined(OPENPROM_SUPER_MAGIC) || (defined(HAVE_DECL_OPENPROM_SUPER_MAGIC) && HAVE_DECL_OPENPROM_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (OPENPROM_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: OPENPROM_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (OPENPROM_SUPER_MAGIC)
#endif
#if defined(USBDEVICE_SUPER_MAGIC) || (defined(HAVE_DECL_USBDEVICE_SUPER_MAGIC) && HAVE_DECL_USBDEVICE_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((USBDEVICE_SUPER_MAGIC) == (0x00009fa2), "USBDEVICE_SUPER_MAGIC != 0x00009fa2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define USBDEVICE_SUPER_MAGIC 0x00009fa2
#endif
#if defined(USBDEVICE_SUPER_MAGIC) || (defined(HAVE_DECL_USBDEVICE_SUPER_MAGIC) && HAVE_DECL_USBDEVICE_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (USBDEVICE_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: USBDEVICE_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (USBDEVICE_SUPER_MAGIC)
#endif
#if defined(ADFS_SUPER_MAGIC) || (defined(HAVE_DECL_ADFS_SUPER_MAGIC) && HAVE_DECL_ADFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADFS_SUPER_MAGIC) == (0x0000adf5), "ADFS_SUPER_MAGIC != 0x0000adf5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADFS_SUPER_MAGIC 0x0000adf5
#endif
#if defined(ADFS_SUPER_MAGIC) || (defined(HAVE_DECL_ADFS_SUPER_MAGIC) && HAVE_DECL_ADFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ADFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ADFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ADFS_SUPER_MAGIC)
#endif
#if defined(AFFS_SUPER_MAGIC) || (defined(HAVE_DECL_AFFS_SUPER_MAGIC) && HAVE_DECL_AFFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AFFS_SUPER_MAGIC) == (0x0000adff), "AFFS_SUPER_MAGIC != 0x0000adff");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AFFS_SUPER_MAGIC 0x0000adff
#endif
#if defined(AFFS_SUPER_MAGIC) || (defined(HAVE_DECL_AFFS_SUPER_MAGIC) && HAVE_DECL_AFFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AFFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AFFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AFFS_SUPER_MAGIC)
#endif
#if defined(EXT2_OLD_SUPER_MAGIC) || (defined(HAVE_DECL_EXT2_OLD_SUPER_MAGIC) && HAVE_DECL_EXT2_OLD_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EXT2_OLD_SUPER_MAGIC) == (0x0000ef51), "EXT2_OLD_SUPER_MAGIC != 0x0000ef51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EXT2_OLD_SUPER_MAGIC 0x0000ef51
#endif
#if defined(EXT2_OLD_SUPER_MAGIC) || (defined(HAVE_DECL_EXT2_OLD_SUPER_MAGIC) && HAVE_DECL_EXT2_OLD_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EXT2_OLD_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EXT2_OLD_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EXT2_OLD_SUPER_MAGIC)
#endif
#if defined(EXT2_SUPER_MAGIC) || (defined(HAVE_DECL_EXT2_SUPER_MAGIC) && HAVE_DECL_EXT2_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EXT2_SUPER_MAGIC) == (0x0000ef53), "EXT2_SUPER_MAGIC != 0x0000ef53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EXT2_SUPER_MAGIC 0x0000ef53
#endif
#if defined(EXT2_SUPER_MAGIC) || (defined(HAVE_DECL_EXT2_SUPER_MAGIC) && HAVE_DECL_EXT2_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EXT2_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EXT2_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EXT2_SUPER_MAGIC)
#endif
#if defined(ECRYPTFS_SUPER_MAGIC) || (defined(HAVE_DECL_ECRYPTFS_SUPER_MAGIC) && HAVE_DECL_ECRYPTFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ECRYPTFS_SUPER_MAGIC) == (0x0000f15f), "ECRYPTFS_SUPER_MAGIC != 0x0000f15f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ECRYPTFS_SUPER_MAGIC 0x0000f15f
#endif
#if defined(ECRYPTFS_SUPER_MAGIC) || (defined(HAVE_DECL_ECRYPTFS_SUPER_MAGIC) && HAVE_DECL_ECRYPTFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ECRYPTFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ECRYPTFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ECRYPTFS_SUPER_MAGIC)
#endif
#if defined(UFS_MAGIC) || (defined(HAVE_DECL_UFS_MAGIC) && HAVE_DECL_UFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((UFS_MAGIC) == (0x00011954), "UFS_MAGIC != 0x00011954");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define UFS_MAGIC 0x00011954
#endif
#if defined(UFS_MAGIC) || (defined(HAVE_DECL_UFS_MAGIC) && HAVE_DECL_UFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (UFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: UFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (UFS_MAGIC)
#endif
#if defined(CGROUP_SUPER_MAGIC) || (defined(HAVE_DECL_CGROUP_SUPER_MAGIC) && HAVE_DECL_CGROUP_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CGROUP_SUPER_MAGIC) == (0x0027e0eb), "CGROUP_SUPER_MAGIC != 0x0027e0eb");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CGROUP_SUPER_MAGIC 0x0027e0eb
#endif
#if defined(CGROUP_SUPER_MAGIC) || (defined(HAVE_DECL_CGROUP_SUPER_MAGIC) && HAVE_DECL_CGROUP_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (CGROUP_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: CGROUP_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (CGROUP_SUPER_MAGIC)
#endif
#if defined(EFS_SUPER_MAGIC) || (defined(HAVE_DECL_EFS_SUPER_MAGIC) && HAVE_DECL_EFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EFS_SUPER_MAGIC) == (0x00414a53), "EFS_SUPER_MAGIC != 0x00414a53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EFS_SUPER_MAGIC 0x00414a53
#endif
#if defined(EFS_SUPER_MAGIC) || (defined(HAVE_DECL_EFS_SUPER_MAGIC) && HAVE_DECL_EFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EFS_SUPER_MAGIC)
#endif
#if defined(HOSTFS_SUPER_MAGIC) || (defined(HAVE_DECL_HOSTFS_SUPER_MAGIC) && HAVE_DECL_HOSTFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((HOSTFS_SUPER_MAGIC) == (0x00c0ffee), "HOSTFS_SUPER_MAGIC != 0x00c0ffee");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define HOSTFS_SUPER_MAGIC 0x00c0ffee
#endif
#if defined(HOSTFS_SUPER_MAGIC) || (defined(HAVE_DECL_HOSTFS_SUPER_MAGIC) && HAVE_DECL_HOSTFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (HOSTFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: HOSTFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (HOSTFS_SUPER_MAGIC)
#endif
#if defined(CEPH_SUPER_MAGIC) || (defined(HAVE_DECL_CEPH_SUPER_MAGIC) && HAVE_DECL_CEPH_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CEPH_SUPER_MAGIC) == (0x00c36400), "CEPH_SUPER_MAGIC != 0x00c36400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CEPH_SUPER_MAGIC 0x00c36400
#endif
#if defined(CEPH_SUPER_MAGIC) || (defined(HAVE_DECL_CEPH_SUPER_MAGIC) && HAVE_DECL_CEPH_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (CEPH_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: CEPH_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (CEPH_SUPER_MAGIC)
#endif
#if defined(TMPFS_MAGIC) || (defined(HAVE_DECL_TMPFS_MAGIC) && HAVE_DECL_TMPFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TMPFS_MAGIC) == (0x01021994), "TMPFS_MAGIC != 0x01021994");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TMPFS_MAGIC 0x01021994
#endif
#if defined(TMPFS_MAGIC) || (defined(HAVE_DECL_TMPFS_MAGIC) && HAVE_DECL_TMPFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TMPFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TMPFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TMPFS_MAGIC)
#endif
#if defined(V9FS_MAGIC) || (defined(HAVE_DECL_V9FS_MAGIC) && HAVE_DECL_V9FS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((V9FS_MAGIC) == (0x01021997), "V9FS_MAGIC != 0x01021997");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define V9FS_MAGIC 0x01021997
#endif
#if defined(V9FS_MAGIC) || (defined(HAVE_DECL_V9FS_MAGIC) && HAVE_DECL_V9FS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V9FS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V9FS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V9FS_MAGIC)
#endif
#if defined(GFS2_MAGIC) || (defined(HAVE_DECL_GFS2_MAGIC) && HAVE_DECL_GFS2_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GFS2_MAGIC) == (0x01161970), "GFS2_MAGIC != 0x01161970");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GFS2_MAGIC 0x01161970
#endif
#if defined(GFS2_MAGIC) || (defined(HAVE_DECL_GFS2_MAGIC) && HAVE_DECL_GFS2_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (GFS2_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: GFS2_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (GFS2_MAGIC)
#endif
#if defined(XIAFS_SUPER_MAGIC) || (defined(HAVE_DECL_XIAFS_SUPER_MAGIC) && HAVE_DECL_XIAFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XIAFS_SUPER_MAGIC) == (0x012fd16d), "XIAFS_SUPER_MAGIC != 0x012fd16d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XIAFS_SUPER_MAGIC 0x012fd16d
#endif
#if defined(XIAFS_SUPER_MAGIC) || (defined(HAVE_DECL_XIAFS_SUPER_MAGIC) && HAVE_DECL_XIAFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (XIAFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: XIAFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (XIAFS_SUPER_MAGIC)
#endif
#if defined(XENIX_SUPER_MAGIC) || (defined(HAVE_DECL_XENIX_SUPER_MAGIC) && HAVE_DECL_XENIX_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XENIX_SUPER_MAGIC) == (0x012ff7b4), "XENIX_SUPER_MAGIC != 0x012ff7b4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XENIX_SUPER_MAGIC 0x012ff7b4
#endif
#if defined(XENIX_SUPER_MAGIC) || (defined(HAVE_DECL_XENIX_SUPER_MAGIC) && HAVE_DECL_XENIX_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (XENIX_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: XENIX_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (XENIX_SUPER_MAGIC)
#endif
#if defined(SYSV4_SUPER_MAGIC) || (defined(HAVE_DECL_SYSV4_SUPER_MAGIC) && HAVE_DECL_SYSV4_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SYSV4_SUPER_MAGIC) == (0x012ff7b5), "SYSV4_SUPER_MAGIC != 0x012ff7b5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SYSV4_SUPER_MAGIC 0x012ff7b5
#endif
#if defined(SYSV4_SUPER_MAGIC) || (defined(HAVE_DECL_SYSV4_SUPER_MAGIC) && HAVE_DECL_SYSV4_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SYSV4_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SYSV4_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SYSV4_SUPER_MAGIC)
#endif
#if defined(SYSV2_SUPER_MAGIC) || (defined(HAVE_DECL_SYSV2_SUPER_MAGIC) && HAVE_DECL_SYSV2_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SYSV2_SUPER_MAGIC) == (0x012ff7b6), "SYSV2_SUPER_MAGIC != 0x012ff7b6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SYSV2_SUPER_MAGIC 0x012ff7b6
#endif
#if defined(SYSV2_SUPER_MAGIC) || (defined(HAVE_DECL_SYSV2_SUPER_MAGIC) && HAVE_DECL_SYSV2_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SYSV2_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SYSV2_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SYSV2_SUPER_MAGIC)
#endif
#if defined(COH_SUPER_MAGIC) || (defined(HAVE_DECL_COH_SUPER_MAGIC) && HAVE_DECL_COH_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COH_SUPER_MAGIC) == (0x012ff7b7), "COH_SUPER_MAGIC != 0x012ff7b7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COH_SUPER_MAGIC 0x012ff7b7
#endif
#if defined(COH_SUPER_MAGIC) || (defined(HAVE_DECL_COH_SUPER_MAGIC) && HAVE_DECL_COH_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COH_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COH_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COH_SUPER_MAGIC)
#endif
#if defined(SHMFS_SUPER_MAGIC) || (defined(HAVE_DECL_SHMFS_SUPER_MAGIC) && HAVE_DECL_SHMFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SHMFS_SUPER_MAGIC) == (0x02011994), "SHMFS_SUPER_MAGIC != 0x02011994");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SHMFS_SUPER_MAGIC 0x02011994
#endif
#if defined(SHMFS_SUPER_MAGIC) || (defined(HAVE_DECL_SHMFS_SUPER_MAGIC) && HAVE_DECL_SHMFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SHMFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SHMFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SHMFS_SUPER_MAGIC)
#endif
#if defined(ANON_INODE_FS_MAGIC) || (defined(HAVE_DECL_ANON_INODE_FS_MAGIC) && HAVE_DECL_ANON_INODE_FS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ANON_INODE_FS_MAGIC) == (0x09041934), "ANON_INODE_FS_MAGIC != 0x09041934");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ANON_INODE_FS_MAGIC 0x09041934
#endif
#if defined(ANON_INODE_FS_MAGIC) || (defined(HAVE_DECL_ANON_INODE_FS_MAGIC) && HAVE_DECL_ANON_INODE_FS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ANON_INODE_FS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ANON_INODE_FS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ANON_INODE_FS_MAGIC)
#endif
#if defined(FUTEXFS_SUPER_MAGIC) || (defined(HAVE_DECL_FUTEXFS_SUPER_MAGIC) && HAVE_DECL_FUTEXFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FUTEXFS_SUPER_MAGIC) == (0x0bad1dea), "FUTEXFS_SUPER_MAGIC != 0x0bad1dea");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FUTEXFS_SUPER_MAGIC 0x0bad1dea
#endif
#if defined(FUTEXFS_SUPER_MAGIC) || (defined(HAVE_DECL_FUTEXFS_SUPER_MAGIC) && HAVE_DECL_FUTEXFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (FUTEXFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: FUTEXFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (FUTEXFS_SUPER_MAGIC)
#endif
#if defined(MTD_INODE_FS_MAGIC) || (defined(HAVE_DECL_MTD_INODE_FS_MAGIC) && HAVE_DECL_MTD_INODE_FS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MTD_INODE_FS_MAGIC) == (0x11307854), "MTD_INODE_FS_MAGIC != 0x11307854");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MTD_INODE_FS_MAGIC 0x11307854
#endif
#if defined(MTD_INODE_FS_MAGIC) || (defined(HAVE_DECL_MTD_INODE_FS_MAGIC) && HAVE_DECL_MTD_INODE_FS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (MTD_INODE_FS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: MTD_INODE_FS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (MTD_INODE_FS_MAGIC)
#endif
#if defined(BALLOON_KVM_MAGIC) || (defined(HAVE_DECL_BALLOON_KVM_MAGIC) && HAVE_DECL_BALLOON_KVM_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BALLOON_KVM_MAGIC) == (0x13661366), "BALLOON_KVM_MAGIC != 0x13661366");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BALLOON_KVM_MAGIC 0x13661366
#endif
#if defined(BALLOON_KVM_MAGIC) || (defined(HAVE_DECL_BALLOON_KVM_MAGIC) && HAVE_DECL_BALLOON_KVM_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BALLOON_KVM_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BALLOON_KVM_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BALLOON_KVM_MAGIC)
#endif
#if defined(UDF_SUPER_MAGIC) || (defined(HAVE_DECL_UDF_SUPER_MAGIC) && HAVE_DECL_UDF_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((UDF_SUPER_MAGIC) == (0x15013346), "UDF_SUPER_MAGIC != 0x15013346");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define UDF_SUPER_MAGIC 0x15013346
#endif
#if defined(UDF_SUPER_MAGIC) || (defined(HAVE_DECL_UDF_SUPER_MAGIC) && HAVE_DECL_UDF_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (UDF_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: UDF_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (UDF_SUPER_MAGIC)
#endif
#if defined(BFS_MAGIC) || (defined(HAVE_DECL_BFS_MAGIC) && HAVE_DECL_BFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BFS_MAGIC) == (0x1badface), "BFS_MAGIC != 0x1badface");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BFS_MAGIC 0x1badface
#endif
#if defined(BFS_MAGIC) || (defined(HAVE_DECL_BFS_MAGIC) && HAVE_DECL_BFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BFS_MAGIC)
#endif
#if defined(EXFAT_SUPER_MAGIC) || (defined(HAVE_DECL_EXFAT_SUPER_MAGIC) && HAVE_DECL_EXFAT_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EXFAT_SUPER_MAGIC) == (0x2011bab0), "EXFAT_SUPER_MAGIC != 0x2011bab0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EXFAT_SUPER_MAGIC 0x2011bab0
#endif
#if defined(EXFAT_SUPER_MAGIC) || (defined(HAVE_DECL_EXFAT_SUPER_MAGIC) && HAVE_DECL_EXFAT_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EXFAT_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EXFAT_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EXFAT_SUPER_MAGIC)
#endif
#if defined(UBIFS_SUPER_MAGIC) || (defined(HAVE_DECL_UBIFS_SUPER_MAGIC) && HAVE_DECL_UBIFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((UBIFS_SUPER_MAGIC) == (0x24051905), "UBIFS_SUPER_MAGIC != 0x24051905");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define UBIFS_SUPER_MAGIC 0x24051905
#endif
#if defined(UBIFS_SUPER_MAGIC) || (defined(HAVE_DECL_UBIFS_SUPER_MAGIC) && HAVE_DECL_UBIFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (UBIFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: UBIFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (UBIFS_SUPER_MAGIC)
#endif
#if defined(CRAMFS_MAGIC) || (defined(HAVE_DECL_CRAMFS_MAGIC) && HAVE_DECL_CRAMFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CRAMFS_MAGIC) == (0x28cd3d45), "CRAMFS_MAGIC != 0x28cd3d45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CRAMFS_MAGIC 0x28cd3d45
#endif
#if defined(CRAMFS_MAGIC) || (defined(HAVE_DECL_CRAMFS_MAGIC) && HAVE_DECL_CRAMFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (CRAMFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: CRAMFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (CRAMFS_MAGIC)
#endif
#if defined(ZFS_SUPER_MAGIC) || (defined(HAVE_DECL_ZFS_SUPER_MAGIC) && HAVE_DECL_ZFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ZFS_SUPER_MAGIC) == (0x2fc12fc1), "ZFS_SUPER_MAGIC != 0x2fc12fc1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ZFS_SUPER_MAGIC 0x2fc12fc1
#endif
#if defined(ZFS_SUPER_MAGIC) || (defined(HAVE_DECL_ZFS_SUPER_MAGIC) && HAVE_DECL_ZFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ZFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ZFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ZFS_SUPER_MAGIC)
#endif
#if defined(JFS_SUPER_MAGIC) || (defined(HAVE_DECL_JFS_SUPER_MAGIC) && HAVE_DECL_JFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((JFS_SUPER_MAGIC) == (0x3153464a), "JFS_SUPER_MAGIC != 0x3153464a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define JFS_SUPER_MAGIC 0x3153464a
#endif
#if defined(JFS_SUPER_MAGIC) || (defined(HAVE_DECL_JFS_SUPER_MAGIC) && HAVE_DECL_JFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (JFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: JFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (JFS_SUPER_MAGIC)
#endif
#if defined(BEFS_SUPER_MAGIC) || (defined(HAVE_DECL_BEFS_SUPER_MAGIC) && HAVE_DECL_BEFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BEFS_SUPER_MAGIC) == (0x42465331), "BEFS_SUPER_MAGIC != 0x42465331");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BEFS_SUPER_MAGIC 0x42465331
#endif
#if defined(BEFS_SUPER_MAGIC) || (defined(HAVE_DECL_BEFS_SUPER_MAGIC) && HAVE_DECL_BEFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BEFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BEFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BEFS_SUPER_MAGIC)
#endif
#if defined(BINFMTFS_MAGIC) || (defined(HAVE_DECL_BINFMTFS_MAGIC) && HAVE_DECL_BINFMTFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BINFMTFS_MAGIC) == (0x42494e4d), "BINFMTFS_MAGIC != 0x42494e4d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BINFMTFS_MAGIC 0x42494e4d
#endif
#if defined(BINFMTFS_MAGIC) || (defined(HAVE_DECL_BINFMTFS_MAGIC) && HAVE_DECL_BINFMTFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BINFMTFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BINFMTFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BINFMTFS_MAGIC)
#endif
#if defined(SMACK_MAGIC) || (defined(HAVE_DECL_SMACK_MAGIC) && HAVE_DECL_SMACK_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMACK_MAGIC) == (0x43415d53), "SMACK_MAGIC != 0x43415d53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMACK_MAGIC 0x43415d53
#endif
#if defined(SMACK_MAGIC) || (defined(HAVE_DECL_SMACK_MAGIC) && HAVE_DECL_SMACK_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SMACK_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SMACK_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SMACK_MAGIC)
#endif
#if defined(DMA_BUF_MAGIC) || (defined(HAVE_DECL_DMA_BUF_MAGIC) && HAVE_DECL_DMA_BUF_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DMA_BUF_MAGIC) == (0x444d4142), "DMA_BUF_MAGIC != 0x444d4142");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DMA_BUF_MAGIC 0x444d4142
#endif
#if defined(DMA_BUF_MAGIC) || (defined(HAVE_DECL_DMA_BUF_MAGIC) && HAVE_DECL_DMA_BUF_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (DMA_BUF_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: DMA_BUF_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (DMA_BUF_MAGIC)
#endif
#if defined(CRAMFS_MAGIC_WEND) || (defined(HAVE_DECL_CRAMFS_MAGIC_WEND) && HAVE_DECL_CRAMFS_MAGIC_WEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CRAMFS_MAGIC_WEND) == (0x453dcd28), "CRAMFS_MAGIC_WEND != 0x453dcd28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CRAMFS_MAGIC_WEND 0x453dcd28
#endif
#if defined(CRAMFS_MAGIC_WEND) || (defined(HAVE_DECL_CRAMFS_MAGIC_WEND) && HAVE_DECL_CRAMFS_MAGIC_WEND)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (CRAMFS_MAGIC_WEND)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: CRAMFS_MAGIC_WEND"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (CRAMFS_MAGIC_WEND)
#endif
#if defined(DEVMEM_MAGIC) || (defined(HAVE_DECL_DEVMEM_MAGIC) && HAVE_DECL_DEVMEM_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVMEM_MAGIC) == (0x454d444d), "DEVMEM_MAGIC != 0x454d444d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVMEM_MAGIC 0x454d444d
#endif
#if defined(DEVMEM_MAGIC) || (defined(HAVE_DECL_DEVMEM_MAGIC) && HAVE_DECL_DEVMEM_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (DEVMEM_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: DEVMEM_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (DEVMEM_MAGIC)
#endif
#if defined(GPFS_SUPER_MAGIC) || (defined(HAVE_DECL_GPFS_SUPER_MAGIC) && HAVE_DECL_GPFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GPFS_SUPER_MAGIC) == (0x47504653), "GPFS_SUPER_MAGIC != 0x47504653");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GPFS_SUPER_MAGIC 0x47504653
#endif
#if defined(GPFS_SUPER_MAGIC) || (defined(HAVE_DECL_GPFS_SUPER_MAGIC) && HAVE_DECL_GPFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (GPFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: GPFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (GPFS_SUPER_MAGIC)
#endif
#if defined(PIPEFS_MAGIC) || (defined(HAVE_DECL_PIPEFS_MAGIC) && HAVE_DECL_PIPEFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIPEFS_MAGIC) == (0x50495045), "PIPEFS_MAGIC != 0x50495045");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIPEFS_MAGIC 0x50495045
#endif
#if defined(PIPEFS_MAGIC) || (defined(HAVE_DECL_PIPEFS_MAGIC) && HAVE_DECL_PIPEFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PIPEFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PIPEFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PIPEFS_MAGIC)
#endif
#if defined(REISERFS_SUPER_MAGIC) || (defined(HAVE_DECL_REISERFS_SUPER_MAGIC) && HAVE_DECL_REISERFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((REISERFS_SUPER_MAGIC) == (0x52654973), "REISERFS_SUPER_MAGIC != 0x52654973");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define REISERFS_SUPER_MAGIC 0x52654973
#endif
#if defined(REISERFS_SUPER_MAGIC) || (defined(HAVE_DECL_REISERFS_SUPER_MAGIC) && HAVE_DECL_REISERFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (REISERFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: REISERFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (REISERFS_SUPER_MAGIC)
#endif
#if defined(SECRETMEM_MAGIC) || (defined(HAVE_DECL_SECRETMEM_MAGIC) && HAVE_DECL_SECRETMEM_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECRETMEM_MAGIC) == (0x5345434d), "SECRETMEM_MAGIC != 0x5345434d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECRETMEM_MAGIC 0x5345434d
#endif
#if defined(SECRETMEM_MAGIC) || (defined(HAVE_DECL_SECRETMEM_MAGIC) && HAVE_DECL_SECRETMEM_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SECRETMEM_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SECRETMEM_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SECRETMEM_MAGIC)
#endif
#if defined(AFS_SUPER_MAGIC) || (defined(HAVE_DECL_AFS_SUPER_MAGIC) && HAVE_DECL_AFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AFS_SUPER_MAGIC) == (0x5346414f), "AFS_SUPER_MAGIC != 0x5346414f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AFS_SUPER_MAGIC 0x5346414f
#endif
#if defined(AFS_SUPER_MAGIC) || (defined(HAVE_DECL_AFS_SUPER_MAGIC) && HAVE_DECL_AFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AFS_SUPER_MAGIC)
#endif
#if defined(NTFS_SB_MAGIC) || (defined(HAVE_DECL_NTFS_SB_MAGIC) && HAVE_DECL_NTFS_SB_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NTFS_SB_MAGIC) == (0x5346544e), "NTFS_SB_MAGIC != 0x5346544e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NTFS_SB_MAGIC 0x5346544e
#endif
#if defined(NTFS_SB_MAGIC) || (defined(HAVE_DECL_NTFS_SB_MAGIC) && HAVE_DECL_NTFS_SB_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NTFS_SB_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NTFS_SB_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NTFS_SB_MAGIC)
#endif
#if defined(SOCKFS_MAGIC) || (defined(HAVE_DECL_SOCKFS_MAGIC) && HAVE_DECL_SOCKFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SOCKFS_MAGIC) == (0x534f434b), "SOCKFS_MAGIC != 0x534f434b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SOCKFS_MAGIC 0x534f434b
#endif
#if defined(SOCKFS_MAGIC) || (defined(HAVE_DECL_SOCKFS_MAGIC) && HAVE_DECL_SOCKFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SOCKFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SOCKFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SOCKFS_MAGIC)
#endif
#if defined(UFS_CIGAM) || (defined(HAVE_DECL_UFS_CIGAM) && HAVE_DECL_UFS_CIGAM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((UFS_CIGAM) == (0x54190100), "UFS_CIGAM != 0x54190100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define UFS_CIGAM 0x54190100
#endif
#if defined(UFS_CIGAM) || (defined(HAVE_DECL_UFS_CIGAM) && HAVE_DECL_UFS_CIGAM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (UFS_CIGAM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: UFS_CIGAM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (UFS_CIGAM)
#endif
#if defined(VZFS_SUPER_MAGIC) || (defined(HAVE_DECL_VZFS_SUPER_MAGIC) && HAVE_DECL_VZFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VZFS_SUPER_MAGIC) == (0x565a4653), "VZFS_SUPER_MAGIC != 0x565a4653");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VZFS_SUPER_MAGIC 0x565a4653
#endif
#if defined(VZFS_SUPER_MAGIC) || (defined(HAVE_DECL_VZFS_SUPER_MAGIC) && HAVE_DECL_VZFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (VZFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: VZFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (VZFS_SUPER_MAGIC)
#endif
#if defined(STACK_END_MAGIC) || (defined(HAVE_DECL_STACK_END_MAGIC) && HAVE_DECL_STACK_END_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STACK_END_MAGIC) == (0x57ac6e9d), "STACK_END_MAGIC != 0x57ac6e9d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STACK_END_MAGIC 0x57ac6e9d
#endif
#if defined(STACK_END_MAGIC) || (defined(HAVE_DECL_STACK_END_MAGIC) && HAVE_DECL_STACK_END_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (STACK_END_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: STACK_END_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (STACK_END_MAGIC)
#endif
#if defined(ZSMALLOC_MAGIC) || (defined(HAVE_DECL_ZSMALLOC_MAGIC) && HAVE_DECL_ZSMALLOC_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ZSMALLOC_MAGIC) == (0x58295829), "ZSMALLOC_MAGIC != 0x58295829");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ZSMALLOC_MAGIC 0x58295829
#endif
#if defined(ZSMALLOC_MAGIC) || (defined(HAVE_DECL_ZSMALLOC_MAGIC) && HAVE_DECL_ZSMALLOC_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ZSMALLOC_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ZSMALLOC_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ZSMALLOC_MAGIC)
#endif
#if defined(XFS_SUPER_MAGIC) || (defined(HAVE_DECL_XFS_SUPER_MAGIC) && HAVE_DECL_XFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XFS_SUPER_MAGIC) == (0x58465342), "XFS_SUPER_MAGIC != 0x58465342");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XFS_SUPER_MAGIC 0x58465342
#endif
#if defined(XFS_SUPER_MAGIC) || (defined(HAVE_DECL_XFS_SUPER_MAGIC) && HAVE_DECL_XFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (XFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: XFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (XFS_SUPER_MAGIC)
#endif
#if defined(AAFS_MAGIC) || (defined(HAVE_DECL_AAFS_MAGIC) && HAVE_DECL_AAFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AAFS_MAGIC) == (0x5a3c69f0), "AAFS_MAGIC != 0x5a3c69f0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AAFS_MAGIC 0x5a3c69f0
#endif
#if defined(AAFS_MAGIC) || (defined(HAVE_DECL_AAFS_MAGIC) && HAVE_DECL_AAFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AAFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AAFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AAFS_MAGIC)
#endif
#if defined(ZONEFS_MAGIC) || (defined(HAVE_DECL_ZONEFS_MAGIC) && HAVE_DECL_ZONEFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ZONEFS_MAGIC) == (0x5a4f4653), "ZONEFS_MAGIC != 0x5a4f4653");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ZONEFS_MAGIC 0x5a4f4653
#endif
#if defined(ZONEFS_MAGIC) || (defined(HAVE_DECL_ZONEFS_MAGIC) && HAVE_DECL_ZONEFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ZONEFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ZONEFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ZONEFS_MAGIC)
#endif
#if defined(PSTOREFS_MAGIC) || (defined(HAVE_DECL_PSTOREFS_MAGIC) && HAVE_DECL_PSTOREFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PSTOREFS_MAGIC) == (0x6165676c), "PSTOREFS_MAGIC != 0x6165676c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PSTOREFS_MAGIC 0x6165676c
#endif
#if defined(PSTOREFS_MAGIC) || (defined(HAVE_DECL_PSTOREFS_MAGIC) && HAVE_DECL_PSTOREFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PSTOREFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PSTOREFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PSTOREFS_MAGIC)
#endif
#if defined(AUFS_SUPER_MAGIC) || (defined(HAVE_DECL_AUFS_SUPER_MAGIC) && HAVE_DECL_AUFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUFS_SUPER_MAGIC) == (0x61756673), "AUFS_SUPER_MAGIC != 0x61756673");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUFS_SUPER_MAGIC 0x61756673
#endif
#if defined(AUFS_SUPER_MAGIC) || (defined(HAVE_DECL_AUFS_SUPER_MAGIC) && HAVE_DECL_AUFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUFS_SUPER_MAGIC)
#endif
#if defined(BDEVFS_MAGIC) || (defined(HAVE_DECL_BDEVFS_MAGIC) && HAVE_DECL_BDEVFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BDEVFS_MAGIC) == (0x62646576), "BDEVFS_MAGIC != 0x62646576");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BDEVFS_MAGIC 0x62646576
#endif
#if defined(BDEVFS_MAGIC) || (defined(HAVE_DECL_BDEVFS_MAGIC) && HAVE_DECL_BDEVFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BDEVFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BDEVFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BDEVFS_MAGIC)
#endif
#if defined(CONFIGFS_MAGIC) || (defined(HAVE_DECL_CONFIGFS_MAGIC) && HAVE_DECL_CONFIGFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CONFIGFS_MAGIC) == (0x62656570), "CONFIGFS_MAGIC != 0x62656570");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CONFIGFS_MAGIC 0x62656570
#endif
#if defined(CONFIGFS_MAGIC) || (defined(HAVE_DECL_CONFIGFS_MAGIC) && HAVE_DECL_CONFIGFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (CONFIGFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: CONFIGFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (CONFIGFS_MAGIC)
#endif
#if defined(SYSFS_MAGIC) || (defined(HAVE_DECL_SYSFS_MAGIC) && HAVE_DECL_SYSFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SYSFS_MAGIC) == (0x62656572), "SYSFS_MAGIC != 0x62656572");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SYSFS_MAGIC 0x62656572
#endif
#if defined(SYSFS_MAGIC) || (defined(HAVE_DECL_SYSFS_MAGIC) && HAVE_DECL_SYSFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SYSFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SYSFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SYSFS_MAGIC)
#endif
#if defined(CGROUP2_SUPER_MAGIC) || (defined(HAVE_DECL_CGROUP2_SUPER_MAGIC) && HAVE_DECL_CGROUP2_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CGROUP2_SUPER_MAGIC) == (0x63677270), "CGROUP2_SUPER_MAGIC != 0x63677270");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CGROUP2_SUPER_MAGIC 0x63677270
#endif
#if defined(CGROUP2_SUPER_MAGIC) || (defined(HAVE_DECL_CGROUP2_SUPER_MAGIC) && HAVE_DECL_CGROUP2_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (CGROUP2_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: CGROUP2_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (CGROUP2_SUPER_MAGIC)
#endif
#if defined(DEBUGFS_MAGIC) || (defined(HAVE_DECL_DEBUGFS_MAGIC) && HAVE_DECL_DEBUGFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEBUGFS_MAGIC) == (0x64626720), "DEBUGFS_MAGIC != 0x64626720");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEBUGFS_MAGIC 0x64626720
#endif
#if defined(DEBUGFS_MAGIC) || (defined(HAVE_DECL_DEBUGFS_MAGIC) && HAVE_DECL_DEBUGFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (DEBUGFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: DEBUGFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (DEBUGFS_MAGIC)
#endif
#if defined(DAXFS_MAGIC) || (defined(HAVE_DECL_DAXFS_MAGIC) && HAVE_DECL_DAXFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DAXFS_MAGIC) == (0x64646178), "DAXFS_MAGIC != 0x64646178");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DAXFS_MAGIC 0x64646178
#endif
#if defined(DAXFS_MAGIC) || (defined(HAVE_DECL_DAXFS_MAGIC) && HAVE_DECL_DAXFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (DAXFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: DAXFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (DAXFS_MAGIC)
#endif
#if defined(FUSE_CTL_SUPER_MAGIC) || (defined(HAVE_DECL_FUSE_CTL_SUPER_MAGIC) && HAVE_DECL_FUSE_CTL_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FUSE_CTL_SUPER_MAGIC) == (0x65735543), "FUSE_CTL_SUPER_MAGIC != 0x65735543");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FUSE_CTL_SUPER_MAGIC 0x65735543
#endif
#if defined(FUSE_CTL_SUPER_MAGIC) || (defined(HAVE_DECL_FUSE_CTL_SUPER_MAGIC) && HAVE_DECL_FUSE_CTL_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (FUSE_CTL_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: FUSE_CTL_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (FUSE_CTL_SUPER_MAGIC)
#endif
#if defined(FUSE_SUPER_MAGIC) || (defined(HAVE_DECL_FUSE_SUPER_MAGIC) && HAVE_DECL_FUSE_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FUSE_SUPER_MAGIC) == (0x65735546), "FUSE_SUPER_MAGIC != 0x65735546");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FUSE_SUPER_MAGIC 0x65735546
#endif
#if defined(FUSE_SUPER_MAGIC) || (defined(HAVE_DECL_FUSE_SUPER_MAGIC) && HAVE_DECL_FUSE_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (FUSE_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: FUSE_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (FUSE_SUPER_MAGIC)
#endif
#if defined(QNX6_SUPER_MAGIC) || (defined(HAVE_DECL_QNX6_SUPER_MAGIC) && HAVE_DECL_QNX6_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((QNX6_SUPER_MAGIC) == (0x68191122), "QNX6_SUPER_MAGIC != 0x68191122");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define QNX6_SUPER_MAGIC 0x68191122
#endif
#if defined(QNX6_SUPER_MAGIC) || (defined(HAVE_DECL_QNX6_SUPER_MAGIC) && HAVE_DECL_QNX6_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (QNX6_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: QNX6_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (QNX6_SUPER_MAGIC)
#endif
#if defined(AFS_FS_MAGIC) || (defined(HAVE_DECL_AFS_FS_MAGIC) && HAVE_DECL_AFS_FS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AFS_FS_MAGIC) == (0x6b414653), "AFS_FS_MAGIC != 0x6b414653");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AFS_FS_MAGIC 0x6b414653
#endif
#if defined(AFS_FS_MAGIC) || (defined(HAVE_DECL_AFS_FS_MAGIC) && HAVE_DECL_AFS_FS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AFS_FS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AFS_FS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AFS_FS_MAGIC)
#endif
#if defined(BINDERFS_SUPER_MAGIC) || (defined(HAVE_DECL_BINDERFS_SUPER_MAGIC) && HAVE_DECL_BINDERFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BINDERFS_SUPER_MAGIC) == (0x6c6f6f70), "BINDERFS_SUPER_MAGIC != 0x6c6f6f70");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BINDERFS_SUPER_MAGIC 0x6c6f6f70
#endif
#if defined(BINDERFS_SUPER_MAGIC) || (defined(HAVE_DECL_BINDERFS_SUPER_MAGIC) && HAVE_DECL_BINDERFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BINDERFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BINDERFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BINDERFS_SUPER_MAGIC)
#endif
#if defined(NSFS_MAGIC) || (defined(HAVE_DECL_NSFS_MAGIC) && HAVE_DECL_NSFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NSFS_MAGIC) == (0x6e736673), "NSFS_MAGIC != 0x6e736673");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NSFS_MAGIC 0x6e736673
#endif
#if defined(NSFS_MAGIC) || (defined(HAVE_DECL_NSFS_MAGIC) && HAVE_DECL_NSFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NSFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NSFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NSFS_MAGIC)
#endif
#if defined(SECURITYFS_MAGIC) || (defined(HAVE_DECL_SECURITYFS_MAGIC) && HAVE_DECL_SECURITYFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SECURITYFS_MAGIC) == (0x73636673), "SECURITYFS_MAGIC != 0x73636673");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SECURITYFS_MAGIC 0x73636673
#endif
#if defined(SECURITYFS_MAGIC) || (defined(HAVE_DECL_SECURITYFS_MAGIC) && HAVE_DECL_SECURITYFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SECURITYFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SECURITYFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SECURITYFS_MAGIC)
#endif
#if defined(SQUASHFS_MAGIC) || (defined(HAVE_DECL_SQUASHFS_MAGIC) && HAVE_DECL_SQUASHFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SQUASHFS_MAGIC) == (0x73717368), "SQUASHFS_MAGIC != 0x73717368");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SQUASHFS_MAGIC 0x73717368
#endif
#if defined(SQUASHFS_MAGIC) || (defined(HAVE_DECL_SQUASHFS_MAGIC) && HAVE_DECL_SQUASHFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SQUASHFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SQUASHFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SQUASHFS_MAGIC)
#endif
#if defined(BTRFS_TEST_MAGIC) || (defined(HAVE_DECL_BTRFS_TEST_MAGIC) && HAVE_DECL_BTRFS_TEST_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_TEST_MAGIC) == (0x73727279), "BTRFS_TEST_MAGIC != 0x73727279");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_TEST_MAGIC 0x73727279
#endif
#if defined(BTRFS_TEST_MAGIC) || (defined(HAVE_DECL_BTRFS_TEST_MAGIC) && HAVE_DECL_BTRFS_TEST_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_TEST_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_TEST_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_TEST_MAGIC)
#endif
#if defined(CODA_SUPER_MAGIC) || (defined(HAVE_DECL_CODA_SUPER_MAGIC) && HAVE_DECL_CODA_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CODA_SUPER_MAGIC) == (0x73757245), "CODA_SUPER_MAGIC != 0x73757245");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CODA_SUPER_MAGIC 0x73757245
#endif
#if defined(CODA_SUPER_MAGIC) || (defined(HAVE_DECL_CODA_SUPER_MAGIC) && HAVE_DECL_CODA_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (CODA_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: CODA_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (CODA_SUPER_MAGIC)
#endif
#if defined(OCFS2_SUPER_MAGIC) || (defined(HAVE_DECL_OCFS2_SUPER_MAGIC) && HAVE_DECL_OCFS2_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((OCFS2_SUPER_MAGIC) == (0x7461636f), "OCFS2_SUPER_MAGIC != 0x7461636f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define OCFS2_SUPER_MAGIC 0x7461636f
#endif
#if defined(OCFS2_SUPER_MAGIC) || (defined(HAVE_DECL_OCFS2_SUPER_MAGIC) && HAVE_DECL_OCFS2_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (OCFS2_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: OCFS2_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (OCFS2_SUPER_MAGIC)
#endif
#if defined(TRACEFS_MAGIC) || (defined(HAVE_DECL_TRACEFS_MAGIC) && HAVE_DECL_TRACEFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TRACEFS_MAGIC) == (0x74726163), "TRACEFS_MAGIC != 0x74726163");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TRACEFS_MAGIC 0x74726163
#endif
#if defined(TRACEFS_MAGIC) || (defined(HAVE_DECL_TRACEFS_MAGIC) && HAVE_DECL_TRACEFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TRACEFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TRACEFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TRACEFS_MAGIC)
#endif
#if defined(OVERLAYFS_SUPER_MAGIC) || (defined(HAVE_DECL_OVERLAYFS_SUPER_MAGIC) && HAVE_DECL_OVERLAYFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((OVERLAYFS_SUPER_MAGIC) == (0x794c7630), "OVERLAYFS_SUPER_MAGIC != 0x794c7630");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define OVERLAYFS_SUPER_MAGIC 0x794c7630
#endif
#if defined(OVERLAYFS_SUPER_MAGIC) || (defined(HAVE_DECL_OVERLAYFS_SUPER_MAGIC) && HAVE_DECL_OVERLAYFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (OVERLAYFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: OVERLAYFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (OVERLAYFS_SUPER_MAGIC)
#endif
#if defined(RAMFS_MAGIC) || (defined(HAVE_DECL_RAMFS_MAGIC) && HAVE_DECL_RAMFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RAMFS_MAGIC) == (0x858458f6), "RAMFS_MAGIC != 0x858458f6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RAMFS_MAGIC 0x858458f6
#endif
#if defined(RAMFS_MAGIC) || (defined(HAVE_DECL_RAMFS_MAGIC) && HAVE_DECL_RAMFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RAMFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RAMFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RAMFS_MAGIC)
#endif
#if defined(BTRFS_SUPER_MAGIC) || (defined(HAVE_DECL_BTRFS_SUPER_MAGIC) && HAVE_DECL_BTRFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_SUPER_MAGIC) == (0x9123683e), "BTRFS_SUPER_MAGIC != 0x9123683e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_SUPER_MAGIC 0x9123683e
#endif
#if defined(BTRFS_SUPER_MAGIC) || (defined(HAVE_DECL_BTRFS_SUPER_MAGIC) && HAVE_DECL_BTRFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BTRFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BTRFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BTRFS_SUPER_MAGIC)
#endif
#if defined(HUGETLBFS_MAGIC) || (defined(HAVE_DECL_HUGETLBFS_MAGIC) && HAVE_DECL_HUGETLBFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((HUGETLBFS_MAGIC) == (0x958458f6), "HUGETLBFS_MAGIC != 0x958458f6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define HUGETLBFS_MAGIC 0x958458f6
#endif
#if defined(HUGETLBFS_MAGIC) || (defined(HAVE_DECL_HUGETLBFS_MAGIC) && HAVE_DECL_HUGETLBFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (HUGETLBFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: HUGETLBFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (HUGETLBFS_MAGIC)
#endif
#if defined(VXFS_SUPER_MAGIC) || (defined(HAVE_DECL_VXFS_SUPER_MAGIC) && HAVE_DECL_VXFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((VXFS_SUPER_MAGIC) == (0xa501fcf5), "VXFS_SUPER_MAGIC != 0xa501fcf5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define VXFS_SUPER_MAGIC 0xa501fcf5
#endif
#if defined(VXFS_SUPER_MAGIC) || (defined(HAVE_DECL_VXFS_SUPER_MAGIC) && HAVE_DECL_VXFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (VXFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: VXFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (VXFS_SUPER_MAGIC)
#endif
#if defined(XENFS_SUPER_MAGIC) || (defined(HAVE_DECL_XENFS_SUPER_MAGIC) && HAVE_DECL_XENFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XENFS_SUPER_MAGIC) == (0xabba1974), "XENFS_SUPER_MAGIC != 0xabba1974");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XENFS_SUPER_MAGIC 0xabba1974
#endif
#if defined(XENFS_SUPER_MAGIC) || (defined(HAVE_DECL_XENFS_SUPER_MAGIC) && HAVE_DECL_XENFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (XENFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: XENFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (XENFS_SUPER_MAGIC)
#endif
#if defined(PPC_CMM_MAGIC) || (defined(HAVE_DECL_PPC_CMM_MAGIC) && HAVE_DECL_PPC_CMM_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PPC_CMM_MAGIC) == (0xc7571590), "PPC_CMM_MAGIC != 0xc7571590");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PPC_CMM_MAGIC 0xc7571590
#endif
#if defined(PPC_CMM_MAGIC) || (defined(HAVE_DECL_PPC_CMM_MAGIC) && HAVE_DECL_PPC_CMM_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PPC_CMM_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PPC_CMM_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PPC_CMM_MAGIC)
#endif
#if defined(LOGFS_MAGIC) || (defined(HAVE_DECL_LOGFS_MAGIC) && HAVE_DECL_LOGFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGFS_MAGIC) == (0xc97e8168), "LOGFS_MAGIC != 0xc97e8168");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGFS_MAGIC 0xc97e8168
#endif
#if defined(LOGFS_MAGIC) || (defined(HAVE_DECL_LOGFS_MAGIC) && HAVE_DECL_LOGFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (LOGFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: LOGFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (LOGFS_MAGIC)
#endif
#if defined(BPF_FS_MAGIC) || (defined(HAVE_DECL_BPF_FS_MAGIC) && HAVE_DECL_BPF_FS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_FS_MAGIC) == (0xcafe4a11), "BPF_FS_MAGIC != 0xcafe4a11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_FS_MAGIC 0xcafe4a11
#endif
#if defined(BPF_FS_MAGIC) || (defined(HAVE_DECL_BPF_FS_MAGIC) && HAVE_DECL_BPF_FS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BPF_FS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BPF_FS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BPF_FS_MAGIC)
#endif
#if defined(EFIVARFS_MAGIC) || (defined(HAVE_DECL_EFIVARFS_MAGIC) && HAVE_DECL_EFIVARFS_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EFIVARFS_MAGIC) == (0xde5e81e4), "EFIVARFS_MAGIC != 0xde5e81e4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EFIVARFS_MAGIC 0xde5e81e4
#endif
#if defined(EFIVARFS_MAGIC) || (defined(HAVE_DECL_EFIVARFS_MAGIC) && HAVE_DECL_EFIVARFS_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EFIVARFS_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EFIVARFS_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EFIVARFS_MAGIC)
#endif
#if defined(EROFS_SUPER_MAGIC_V1) || (defined(HAVE_DECL_EROFS_SUPER_MAGIC_V1) && HAVE_DECL_EROFS_SUPER_MAGIC_V1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EROFS_SUPER_MAGIC_V1) == (0xe0f5e1e2), "EROFS_SUPER_MAGIC_V1 != 0xe0f5e1e2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EROFS_SUPER_MAGIC_V1 0xe0f5e1e2
#endif
#if defined(EROFS_SUPER_MAGIC_V1) || (defined(HAVE_DECL_EROFS_SUPER_MAGIC_V1) && HAVE_DECL_EROFS_SUPER_MAGIC_V1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EROFS_SUPER_MAGIC_V1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EROFS_SUPER_MAGIC_V1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EROFS_SUPER_MAGIC_V1)
#endif
#if defined(F2FS_SUPER_MAGIC) || (defined(HAVE_DECL_F2FS_SUPER_MAGIC) && HAVE_DECL_F2FS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((F2FS_SUPER_MAGIC) == (0xf2f52010), "F2FS_SUPER_MAGIC != 0xf2f52010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define F2FS_SUPER_MAGIC 0xf2f52010
#endif
#if defined(F2FS_SUPER_MAGIC) || (defined(HAVE_DECL_F2FS_SUPER_MAGIC) && HAVE_DECL_F2FS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (F2FS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: F2FS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (F2FS_SUPER_MAGIC)
#endif
#if defined(SELINUX_MAGIC) || (defined(HAVE_DECL_SELINUX_MAGIC) && HAVE_DECL_SELINUX_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SELINUX_MAGIC) == (0xf97cff8c), "SELINUX_MAGIC != 0xf97cff8c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SELINUX_MAGIC 0xf97cff8c
#endif
#if defined(SELINUX_MAGIC) || (defined(HAVE_DECL_SELINUX_MAGIC) && HAVE_DECL_SELINUX_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SELINUX_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SELINUX_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SELINUX_MAGIC)
#endif
#if defined(HPFS_SUPER_MAGIC) || (defined(HAVE_DECL_HPFS_SUPER_MAGIC) && HAVE_DECL_HPFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((HPFS_SUPER_MAGIC) == (0xf995e849), "HPFS_SUPER_MAGIC != 0xf995e849");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define HPFS_SUPER_MAGIC 0xf995e849
#endif
#if defined(HPFS_SUPER_MAGIC) || (defined(HAVE_DECL_HPFS_SUPER_MAGIC) && HAVE_DECL_HPFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (HPFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: HPFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (HPFS_SUPER_MAGIC)
#endif
#if defined(SMB2_SUPER_MAGIC) || (defined(HAVE_DECL_SMB2_SUPER_MAGIC) && HAVE_DECL_SMB2_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMB2_SUPER_MAGIC) == (0xfe534d42), "SMB2_SUPER_MAGIC != 0xfe534d42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMB2_SUPER_MAGIC 0xfe534d42
#endif
#if defined(SMB2_SUPER_MAGIC) || (defined(HAVE_DECL_SMB2_SUPER_MAGIC) && HAVE_DECL_SMB2_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SMB2_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SMB2_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SMB2_SUPER_MAGIC)
#endif
#if defined(CIFS_SUPER_MAGIC) || (defined(HAVE_DECL_CIFS_SUPER_MAGIC) && HAVE_DECL_CIFS_SUPER_MAGIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CIFS_SUPER_MAGIC) == (0xff534d42), "CIFS_SUPER_MAGIC != 0xff534d42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CIFS_SUPER_MAGIC 0xff534d42
#endif
#if defined(CIFS_SUPER_MAGIC) || (defined(HAVE_DECL_CIFS_SUPER_MAGIC) && HAVE_DECL_CIFS_SUPER_MAGIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (CIFS_SUPER_MAGIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: CIFS_SUPER_MAGIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (CIFS_SUPER_MAGIC)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat fsmagic in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data fsmagic_xdata[] = {
 XLAT(QNX4_SUPER_MAGIC),
 #define XLAT_VAL_0 ((unsigned) (QNX4_SUPER_MAGIC))
 #define XLAT_STR_0 STRINGIFY(QNX4_SUPER_MAGIC)
 XLAT(Z3FOLD_MAGIC),
 #define XLAT_VAL_1 ((unsigned) (Z3FOLD_MAGIC))
 #define XLAT_STR_1 STRINGIFY(Z3FOLD_MAGIC)
 XLAT(AUTOFS_SUPER_MAGIC),
 #define XLAT_VAL_2 ((unsigned) (AUTOFS_SUPER_MAGIC))
 #define XLAT_STR_2 STRINGIFY(AUTOFS_SUPER_MAGIC)
 XLAT(DEVFS_SUPER_MAGIC),
 #define XLAT_VAL_3 ((unsigned) (DEVFS_SUPER_MAGIC))
 #define XLAT_STR_3 STRINGIFY(DEVFS_SUPER_MAGIC)
 XLAT(EXT_SUPER_MAGIC),
 #define XLAT_VAL_4 ((unsigned) (EXT_SUPER_MAGIC))
 #define XLAT_STR_4 STRINGIFY(EXT_SUPER_MAGIC)
 XLAT(MINIX_SUPER_MAGIC),
 #define XLAT_VAL_5 ((unsigned) (MINIX_SUPER_MAGIC))
 #define XLAT_STR_5 STRINGIFY(MINIX_SUPER_MAGIC)
 XLAT(MINIX_SUPER_MAGIC2),
 #define XLAT_VAL_6 ((unsigned) (MINIX_SUPER_MAGIC2))
 #define XLAT_STR_6 STRINGIFY(MINIX_SUPER_MAGIC2)
 XLAT(DEVPTS_SUPER_MAGIC),
 #define XLAT_VAL_7 ((unsigned) (DEVPTS_SUPER_MAGIC))
 #define XLAT_STR_7 STRINGIFY(DEVPTS_SUPER_MAGIC)
 XLAT(MINIX2_SUPER_MAGIC),
 #define XLAT_VAL_8 ((unsigned) (MINIX2_SUPER_MAGIC))
 #define XLAT_STR_8 STRINGIFY(MINIX2_SUPER_MAGIC)
 XLAT(MINIX2_SUPER_MAGIC2),
 #define XLAT_VAL_9 ((unsigned) (MINIX2_SUPER_MAGIC2))
 #define XLAT_STR_9 STRINGIFY(MINIX2_SUPER_MAGIC2)
 XLAT(NILFS_SUPER_MAGIC),
 #define XLAT_VAL_10 ((unsigned) (NILFS_SUPER_MAGIC))
 #define XLAT_STR_10 STRINGIFY(NILFS_SUPER_MAGIC)
 XLAT(HFS_SUPER_MAGIC),
 #define XLAT_VAL_11 ((unsigned) (HFS_SUPER_MAGIC))
 #define XLAT_STR_11 STRINGIFY(HFS_SUPER_MAGIC)
 XLAT(HFSPLUS_SUPER_MAGIC),
 #define XLAT_VAL_12 ((unsigned) (HFSPLUS_SUPER_MAGIC))
 #define XLAT_STR_12 STRINGIFY(HFSPLUS_SUPER_MAGIC)
 XLAT(MSDOS_SUPER_MAGIC),
 #define XLAT_VAL_13 ((unsigned) (MSDOS_SUPER_MAGIC))
 #define XLAT_STR_13 STRINGIFY(MSDOS_SUPER_MAGIC)
 XLAT(MINIX3_SUPER_MAGIC),
 #define XLAT_VAL_14 ((unsigned) (MINIX3_SUPER_MAGIC))
 #define XLAT_STR_14 STRINGIFY(MINIX3_SUPER_MAGIC)
 XLAT(SMB_SUPER_MAGIC),
 #define XLAT_VAL_15 ((unsigned) (SMB_SUPER_MAGIC))
 #define XLAT_STR_15 STRINGIFY(SMB_SUPER_MAGIC)
 XLAT(NCP_SUPER_MAGIC),
 #define XLAT_VAL_16 ((unsigned) (NCP_SUPER_MAGIC))
 #define XLAT_STR_16 STRINGIFY(NCP_SUPER_MAGIC)
 XLAT(EXOFS_SUPER_MAGIC),
 #define XLAT_VAL_17 ((unsigned) (EXOFS_SUPER_MAGIC))
 #define XLAT_STR_17 STRINGIFY(EXOFS_SUPER_MAGIC)
 XLAT(NFS_SUPER_MAGIC),
 #define XLAT_VAL_18 ((unsigned) (NFS_SUPER_MAGIC))
 #define XLAT_STR_18 STRINGIFY(NFS_SUPER_MAGIC)
 XLAT(ROMFS_MAGIC),
 #define XLAT_VAL_19 ((unsigned) (ROMFS_MAGIC))
 #define XLAT_STR_19 STRINGIFY(ROMFS_MAGIC)
 XLAT(JFFS2_SUPER_MAGIC),
 #define XLAT_VAL_20 ((unsigned) (JFFS2_SUPER_MAGIC))
 #define XLAT_STR_20 STRINGIFY(JFFS2_SUPER_MAGIC)
 XLAT(ISOFS_SUPER_MAGIC),
 #define XLAT_VAL_21 ((unsigned) (ISOFS_SUPER_MAGIC))
 #define XLAT_STR_21 STRINGIFY(ISOFS_SUPER_MAGIC)
 XLAT(PROC_SUPER_MAGIC),
 #define XLAT_VAL_22 ((unsigned) (PROC_SUPER_MAGIC))
 #define XLAT_STR_22 STRINGIFY(PROC_SUPER_MAGIC)
 XLAT(OPENPROM_SUPER_MAGIC),
 #define XLAT_VAL_23 ((unsigned) (OPENPROM_SUPER_MAGIC))
 #define XLAT_STR_23 STRINGIFY(OPENPROM_SUPER_MAGIC)
 XLAT(USBDEVICE_SUPER_MAGIC),
 #define XLAT_VAL_24 ((unsigned) (USBDEVICE_SUPER_MAGIC))
 #define XLAT_STR_24 STRINGIFY(USBDEVICE_SUPER_MAGIC)
 XLAT(ADFS_SUPER_MAGIC),
 #define XLAT_VAL_25 ((unsigned) (ADFS_SUPER_MAGIC))
 #define XLAT_STR_25 STRINGIFY(ADFS_SUPER_MAGIC)
 XLAT(AFFS_SUPER_MAGIC),
 #define XLAT_VAL_26 ((unsigned) (AFFS_SUPER_MAGIC))
 #define XLAT_STR_26 STRINGIFY(AFFS_SUPER_MAGIC)
 XLAT(EXT2_OLD_SUPER_MAGIC),
 #define XLAT_VAL_27 ((unsigned) (EXT2_OLD_SUPER_MAGIC))
 #define XLAT_STR_27 STRINGIFY(EXT2_OLD_SUPER_MAGIC)
 XLAT(EXT2_SUPER_MAGIC),
 #define XLAT_VAL_28 ((unsigned) (EXT2_SUPER_MAGIC))
 #define XLAT_STR_28 STRINGIFY(EXT2_SUPER_MAGIC)
 XLAT(ECRYPTFS_SUPER_MAGIC),
 #define XLAT_VAL_29 ((unsigned) (ECRYPTFS_SUPER_MAGIC))
 #define XLAT_STR_29 STRINGIFY(ECRYPTFS_SUPER_MAGIC)
 XLAT(UFS_MAGIC),
 #define XLAT_VAL_30 ((unsigned) (UFS_MAGIC))
 #define XLAT_STR_30 STRINGIFY(UFS_MAGIC)
 XLAT(CGROUP_SUPER_MAGIC),
 #define XLAT_VAL_31 ((unsigned) (CGROUP_SUPER_MAGIC))
 #define XLAT_STR_31 STRINGIFY(CGROUP_SUPER_MAGIC)
 XLAT(EFS_SUPER_MAGIC),
 #define XLAT_VAL_32 ((unsigned) (EFS_SUPER_MAGIC))
 #define XLAT_STR_32 STRINGIFY(EFS_SUPER_MAGIC)
 XLAT(HOSTFS_SUPER_MAGIC),
 #define XLAT_VAL_33 ((unsigned) (HOSTFS_SUPER_MAGIC))
 #define XLAT_STR_33 STRINGIFY(HOSTFS_SUPER_MAGIC)
 XLAT(CEPH_SUPER_MAGIC),
 #define XLAT_VAL_34 ((unsigned) (CEPH_SUPER_MAGIC))
 #define XLAT_STR_34 STRINGIFY(CEPH_SUPER_MAGIC)
 XLAT(TMPFS_MAGIC),
 #define XLAT_VAL_35 ((unsigned) (TMPFS_MAGIC))
 #define XLAT_STR_35 STRINGIFY(TMPFS_MAGIC)
 XLAT(V9FS_MAGIC),
 #define XLAT_VAL_36 ((unsigned) (V9FS_MAGIC))
 #define XLAT_STR_36 STRINGIFY(V9FS_MAGIC)
 XLAT(GFS2_MAGIC),
 #define XLAT_VAL_37 ((unsigned) (GFS2_MAGIC))
 #define XLAT_STR_37 STRINGIFY(GFS2_MAGIC)
 XLAT(XIAFS_SUPER_MAGIC),
 #define XLAT_VAL_38 ((unsigned) (XIAFS_SUPER_MAGIC))
 #define XLAT_STR_38 STRINGIFY(XIAFS_SUPER_MAGIC)
 XLAT(XENIX_SUPER_MAGIC),
 #define XLAT_VAL_39 ((unsigned) (XENIX_SUPER_MAGIC))
 #define XLAT_STR_39 STRINGIFY(XENIX_SUPER_MAGIC)
 XLAT(SYSV4_SUPER_MAGIC),
 #define XLAT_VAL_40 ((unsigned) (SYSV4_SUPER_MAGIC))
 #define XLAT_STR_40 STRINGIFY(SYSV4_SUPER_MAGIC)
 XLAT(SYSV2_SUPER_MAGIC),
 #define XLAT_VAL_41 ((unsigned) (SYSV2_SUPER_MAGIC))
 #define XLAT_STR_41 STRINGIFY(SYSV2_SUPER_MAGIC)
 XLAT(COH_SUPER_MAGIC),
 #define XLAT_VAL_42 ((unsigned) (COH_SUPER_MAGIC))
 #define XLAT_STR_42 STRINGIFY(COH_SUPER_MAGIC)
 XLAT(SHMFS_SUPER_MAGIC),
 #define XLAT_VAL_43 ((unsigned) (SHMFS_SUPER_MAGIC))
 #define XLAT_STR_43 STRINGIFY(SHMFS_SUPER_MAGIC)
 XLAT(ANON_INODE_FS_MAGIC),
 #define XLAT_VAL_44 ((unsigned) (ANON_INODE_FS_MAGIC))
 #define XLAT_STR_44 STRINGIFY(ANON_INODE_FS_MAGIC)
 XLAT(FUTEXFS_SUPER_MAGIC),
 #define XLAT_VAL_45 ((unsigned) (FUTEXFS_SUPER_MAGIC))
 #define XLAT_STR_45 STRINGIFY(FUTEXFS_SUPER_MAGIC)
 XLAT(MTD_INODE_FS_MAGIC),
 #define XLAT_VAL_46 ((unsigned) (MTD_INODE_FS_MAGIC))
 #define XLAT_STR_46 STRINGIFY(MTD_INODE_FS_MAGIC)
 XLAT(BALLOON_KVM_MAGIC),
 #define XLAT_VAL_47 ((unsigned) (BALLOON_KVM_MAGIC))
 #define XLAT_STR_47 STRINGIFY(BALLOON_KVM_MAGIC)
 XLAT(UDF_SUPER_MAGIC),
 #define XLAT_VAL_48 ((unsigned) (UDF_SUPER_MAGIC))
 #define XLAT_STR_48 STRINGIFY(UDF_SUPER_MAGIC)
 XLAT(BFS_MAGIC),
 #define XLAT_VAL_49 ((unsigned) (BFS_MAGIC))
 #define XLAT_STR_49 STRINGIFY(BFS_MAGIC)
 XLAT(EXFAT_SUPER_MAGIC),
 #define XLAT_VAL_50 ((unsigned) (EXFAT_SUPER_MAGIC))
 #define XLAT_STR_50 STRINGIFY(EXFAT_SUPER_MAGIC)
 XLAT(UBIFS_SUPER_MAGIC),
 #define XLAT_VAL_51 ((unsigned) (UBIFS_SUPER_MAGIC))
 #define XLAT_STR_51 STRINGIFY(UBIFS_SUPER_MAGIC)
 XLAT(CRAMFS_MAGIC),
 #define XLAT_VAL_52 ((unsigned) (CRAMFS_MAGIC))
 #define XLAT_STR_52 STRINGIFY(CRAMFS_MAGIC)
 XLAT(ZFS_SUPER_MAGIC),
 #define XLAT_VAL_53 ((unsigned) (ZFS_SUPER_MAGIC))
 #define XLAT_STR_53 STRINGIFY(ZFS_SUPER_MAGIC)
 XLAT(JFS_SUPER_MAGIC),
 #define XLAT_VAL_54 ((unsigned) (JFS_SUPER_MAGIC))
 #define XLAT_STR_54 STRINGIFY(JFS_SUPER_MAGIC)
 XLAT(BEFS_SUPER_MAGIC),
 #define XLAT_VAL_55 ((unsigned) (BEFS_SUPER_MAGIC))
 #define XLAT_STR_55 STRINGIFY(BEFS_SUPER_MAGIC)
 XLAT(BINFMTFS_MAGIC),
 #define XLAT_VAL_56 ((unsigned) (BINFMTFS_MAGIC))
 #define XLAT_STR_56 STRINGIFY(BINFMTFS_MAGIC)
 XLAT(SMACK_MAGIC),
 #define XLAT_VAL_57 ((unsigned) (SMACK_MAGIC))
 #define XLAT_STR_57 STRINGIFY(SMACK_MAGIC)
 XLAT(DMA_BUF_MAGIC),
 #define XLAT_VAL_58 ((unsigned) (DMA_BUF_MAGIC))
 #define XLAT_STR_58 STRINGIFY(DMA_BUF_MAGIC)
 XLAT(CRAMFS_MAGIC_WEND),
 #define XLAT_VAL_59 ((unsigned) (CRAMFS_MAGIC_WEND))
 #define XLAT_STR_59 STRINGIFY(CRAMFS_MAGIC_WEND)
 XLAT(DEVMEM_MAGIC),
 #define XLAT_VAL_60 ((unsigned) (DEVMEM_MAGIC))
 #define XLAT_STR_60 STRINGIFY(DEVMEM_MAGIC)
 XLAT(GPFS_SUPER_MAGIC),
 #define XLAT_VAL_61 ((unsigned) (GPFS_SUPER_MAGIC))
 #define XLAT_STR_61 STRINGIFY(GPFS_SUPER_MAGIC)
 XLAT(PIPEFS_MAGIC),
 #define XLAT_VAL_62 ((unsigned) (PIPEFS_MAGIC))
 #define XLAT_STR_62 STRINGIFY(PIPEFS_MAGIC)
 XLAT(REISERFS_SUPER_MAGIC),
 #define XLAT_VAL_63 ((unsigned) (REISERFS_SUPER_MAGIC))
 #define XLAT_STR_63 STRINGIFY(REISERFS_SUPER_MAGIC)
 XLAT(SECRETMEM_MAGIC),
 #define XLAT_VAL_64 ((unsigned) (SECRETMEM_MAGIC))
 #define XLAT_STR_64 STRINGIFY(SECRETMEM_MAGIC)
 XLAT(AFS_SUPER_MAGIC),
 #define XLAT_VAL_65 ((unsigned) (AFS_SUPER_MAGIC))
 #define XLAT_STR_65 STRINGIFY(AFS_SUPER_MAGIC)
 XLAT(NTFS_SB_MAGIC),
 #define XLAT_VAL_66 ((unsigned) (NTFS_SB_MAGIC))
 #define XLAT_STR_66 STRINGIFY(NTFS_SB_MAGIC)
 XLAT(SOCKFS_MAGIC),
 #define XLAT_VAL_67 ((unsigned) (SOCKFS_MAGIC))
 #define XLAT_STR_67 STRINGIFY(SOCKFS_MAGIC)
 XLAT(UFS_CIGAM),
 #define XLAT_VAL_68 ((unsigned) (UFS_CIGAM))
 #define XLAT_STR_68 STRINGIFY(UFS_CIGAM)
 XLAT(VZFS_SUPER_MAGIC),
 #define XLAT_VAL_69 ((unsigned) (VZFS_SUPER_MAGIC))
 #define XLAT_STR_69 STRINGIFY(VZFS_SUPER_MAGIC)
 XLAT(STACK_END_MAGIC),
 #define XLAT_VAL_70 ((unsigned) (STACK_END_MAGIC))
 #define XLAT_STR_70 STRINGIFY(STACK_END_MAGIC)
 XLAT(ZSMALLOC_MAGIC),
 #define XLAT_VAL_71 ((unsigned) (ZSMALLOC_MAGIC))
 #define XLAT_STR_71 STRINGIFY(ZSMALLOC_MAGIC)
 XLAT(XFS_SUPER_MAGIC),
 #define XLAT_VAL_72 ((unsigned) (XFS_SUPER_MAGIC))
 #define XLAT_STR_72 STRINGIFY(XFS_SUPER_MAGIC)
 XLAT(AAFS_MAGIC),
 #define XLAT_VAL_73 ((unsigned) (AAFS_MAGIC))
 #define XLAT_STR_73 STRINGIFY(AAFS_MAGIC)
 XLAT(ZONEFS_MAGIC),
 #define XLAT_VAL_74 ((unsigned) (ZONEFS_MAGIC))
 #define XLAT_STR_74 STRINGIFY(ZONEFS_MAGIC)
 XLAT(PSTOREFS_MAGIC),
 #define XLAT_VAL_75 ((unsigned) (PSTOREFS_MAGIC))
 #define XLAT_STR_75 STRINGIFY(PSTOREFS_MAGIC)
 XLAT(AUFS_SUPER_MAGIC),
 #define XLAT_VAL_76 ((unsigned) (AUFS_SUPER_MAGIC))
 #define XLAT_STR_76 STRINGIFY(AUFS_SUPER_MAGIC)
 XLAT(BDEVFS_MAGIC),
 #define XLAT_VAL_77 ((unsigned) (BDEVFS_MAGIC))
 #define XLAT_STR_77 STRINGIFY(BDEVFS_MAGIC)
 XLAT(CONFIGFS_MAGIC),
 #define XLAT_VAL_78 ((unsigned) (CONFIGFS_MAGIC))
 #define XLAT_STR_78 STRINGIFY(CONFIGFS_MAGIC)
 XLAT(SYSFS_MAGIC),
 #define XLAT_VAL_79 ((unsigned) (SYSFS_MAGIC))
 #define XLAT_STR_79 STRINGIFY(SYSFS_MAGIC)
 XLAT(CGROUP2_SUPER_MAGIC),
 #define XLAT_VAL_80 ((unsigned) (CGROUP2_SUPER_MAGIC))
 #define XLAT_STR_80 STRINGIFY(CGROUP2_SUPER_MAGIC)
 XLAT(DEBUGFS_MAGIC),
 #define XLAT_VAL_81 ((unsigned) (DEBUGFS_MAGIC))
 #define XLAT_STR_81 STRINGIFY(DEBUGFS_MAGIC)
 XLAT(DAXFS_MAGIC),
 #define XLAT_VAL_82 ((unsigned) (DAXFS_MAGIC))
 #define XLAT_STR_82 STRINGIFY(DAXFS_MAGIC)
 XLAT(FUSE_CTL_SUPER_MAGIC),
 #define XLAT_VAL_83 ((unsigned) (FUSE_CTL_SUPER_MAGIC))
 #define XLAT_STR_83 STRINGIFY(FUSE_CTL_SUPER_MAGIC)
 XLAT(FUSE_SUPER_MAGIC),
 #define XLAT_VAL_84 ((unsigned) (FUSE_SUPER_MAGIC))
 #define XLAT_STR_84 STRINGIFY(FUSE_SUPER_MAGIC)
 XLAT(QNX6_SUPER_MAGIC),
 #define XLAT_VAL_85 ((unsigned) (QNX6_SUPER_MAGIC))
 #define XLAT_STR_85 STRINGIFY(QNX6_SUPER_MAGIC)
 XLAT(AFS_FS_MAGIC),
 #define XLAT_VAL_86 ((unsigned) (AFS_FS_MAGIC))
 #define XLAT_STR_86 STRINGIFY(AFS_FS_MAGIC)
 XLAT(BINDERFS_SUPER_MAGIC),
 #define XLAT_VAL_87 ((unsigned) (BINDERFS_SUPER_MAGIC))
 #define XLAT_STR_87 STRINGIFY(BINDERFS_SUPER_MAGIC)
 XLAT(NSFS_MAGIC),
 #define XLAT_VAL_88 ((unsigned) (NSFS_MAGIC))
 #define XLAT_STR_88 STRINGIFY(NSFS_MAGIC)
 XLAT(SECURITYFS_MAGIC),
 #define XLAT_VAL_89 ((unsigned) (SECURITYFS_MAGIC))
 #define XLAT_STR_89 STRINGIFY(SECURITYFS_MAGIC)
 XLAT(SQUASHFS_MAGIC),
 #define XLAT_VAL_90 ((unsigned) (SQUASHFS_MAGIC))
 #define XLAT_STR_90 STRINGIFY(SQUASHFS_MAGIC)
 XLAT(BTRFS_TEST_MAGIC),
 #define XLAT_VAL_91 ((unsigned) (BTRFS_TEST_MAGIC))
 #define XLAT_STR_91 STRINGIFY(BTRFS_TEST_MAGIC)
 XLAT(CODA_SUPER_MAGIC),
 #define XLAT_VAL_92 ((unsigned) (CODA_SUPER_MAGIC))
 #define XLAT_STR_92 STRINGIFY(CODA_SUPER_MAGIC)
 XLAT(OCFS2_SUPER_MAGIC),
 #define XLAT_VAL_93 ((unsigned) (OCFS2_SUPER_MAGIC))
 #define XLAT_STR_93 STRINGIFY(OCFS2_SUPER_MAGIC)
 XLAT(TRACEFS_MAGIC),
 #define XLAT_VAL_94 ((unsigned) (TRACEFS_MAGIC))
 #define XLAT_STR_94 STRINGIFY(TRACEFS_MAGIC)
 XLAT(OVERLAYFS_SUPER_MAGIC),
 #define XLAT_VAL_95 ((unsigned) (OVERLAYFS_SUPER_MAGIC))
 #define XLAT_STR_95 STRINGIFY(OVERLAYFS_SUPER_MAGIC)
 XLAT(RAMFS_MAGIC),
 #define XLAT_VAL_96 ((unsigned) (RAMFS_MAGIC))
 #define XLAT_STR_96 STRINGIFY(RAMFS_MAGIC)
 XLAT(BTRFS_SUPER_MAGIC),
 #define XLAT_VAL_97 ((unsigned) (BTRFS_SUPER_MAGIC))
 #define XLAT_STR_97 STRINGIFY(BTRFS_SUPER_MAGIC)
 XLAT(HUGETLBFS_MAGIC),
 #define XLAT_VAL_98 ((unsigned) (HUGETLBFS_MAGIC))
 #define XLAT_STR_98 STRINGIFY(HUGETLBFS_MAGIC)
 XLAT(VXFS_SUPER_MAGIC),
 #define XLAT_VAL_99 ((unsigned) (VXFS_SUPER_MAGIC))
 #define XLAT_STR_99 STRINGIFY(VXFS_SUPER_MAGIC)
 XLAT(XENFS_SUPER_MAGIC),
 #define XLAT_VAL_100 ((unsigned) (XENFS_SUPER_MAGIC))
 #define XLAT_STR_100 STRINGIFY(XENFS_SUPER_MAGIC)
 XLAT(PPC_CMM_MAGIC),
 #define XLAT_VAL_101 ((unsigned) (PPC_CMM_MAGIC))
 #define XLAT_STR_101 STRINGIFY(PPC_CMM_MAGIC)
 XLAT(LOGFS_MAGIC),
 #define XLAT_VAL_102 ((unsigned) (LOGFS_MAGIC))
 #define XLAT_STR_102 STRINGIFY(LOGFS_MAGIC)
 XLAT(BPF_FS_MAGIC),
 #define XLAT_VAL_103 ((unsigned) (BPF_FS_MAGIC))
 #define XLAT_STR_103 STRINGIFY(BPF_FS_MAGIC)
 XLAT(EFIVARFS_MAGIC),
 #define XLAT_VAL_104 ((unsigned) (EFIVARFS_MAGIC))
 #define XLAT_STR_104 STRINGIFY(EFIVARFS_MAGIC)
 XLAT(EROFS_SUPER_MAGIC_V1),
 #define XLAT_VAL_105 ((unsigned) (EROFS_SUPER_MAGIC_V1))
 #define XLAT_STR_105 STRINGIFY(EROFS_SUPER_MAGIC_V1)
 XLAT(F2FS_SUPER_MAGIC),
 #define XLAT_VAL_106 ((unsigned) (F2FS_SUPER_MAGIC))
 #define XLAT_STR_106 STRINGIFY(F2FS_SUPER_MAGIC)
 XLAT(SELINUX_MAGIC),
 #define XLAT_VAL_107 ((unsigned) (SELINUX_MAGIC))
 #define XLAT_STR_107 STRINGIFY(SELINUX_MAGIC)
 XLAT(HPFS_SUPER_MAGIC),
 #define XLAT_VAL_108 ((unsigned) (HPFS_SUPER_MAGIC))
 #define XLAT_STR_108 STRINGIFY(HPFS_SUPER_MAGIC)
 XLAT(SMB2_SUPER_MAGIC),
 #define XLAT_VAL_109 ((unsigned) (SMB2_SUPER_MAGIC))
 #define XLAT_STR_109 STRINGIFY(SMB2_SUPER_MAGIC)
 XLAT(CIFS_SUPER_MAGIC),
 #define XLAT_VAL_110 ((unsigned) (CIFS_SUPER_MAGIC))
 #define XLAT_STR_110 STRINGIFY(CIFS_SUPER_MAGIC)
};
static
const struct xlat fsmagic[1] = { {
 .data = fsmagic_xdata,
 .size = ARRAY_SIZE(fsmagic_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
#  ifdef XLAT_VAL_79
  | XLAT_VAL_79
#  endif
#  ifdef XLAT_VAL_80
  | XLAT_VAL_80
#  endif
#  ifdef XLAT_VAL_81
  | XLAT_VAL_81
#  endif
#  ifdef XLAT_VAL_82
  | XLAT_VAL_82
#  endif
#  ifdef XLAT_VAL_83
  | XLAT_VAL_83
#  endif
#  ifdef XLAT_VAL_84
  | XLAT_VAL_84
#  endif
#  ifdef XLAT_VAL_85
  | XLAT_VAL_85
#  endif
#  ifdef XLAT_VAL_86
  | XLAT_VAL_86
#  endif
#  ifdef XLAT_VAL_87
  | XLAT_VAL_87
#  endif
#  ifdef XLAT_VAL_88
  | XLAT_VAL_88
#  endif
#  ifdef XLAT_VAL_89
  | XLAT_VAL_89
#  endif
#  ifdef XLAT_VAL_90
  | XLAT_VAL_90
#  endif
#  ifdef XLAT_VAL_91
  | XLAT_VAL_91
#  endif
#  ifdef XLAT_VAL_92
  | XLAT_VAL_92
#  endif
#  ifdef XLAT_VAL_93
  | XLAT_VAL_93
#  endif
#  ifdef XLAT_VAL_94
  | XLAT_VAL_94
#  endif
#  ifdef XLAT_VAL_95
  | XLAT_VAL_95
#  endif
#  ifdef XLAT_VAL_96
  | XLAT_VAL_96
#  endif
#  ifdef XLAT_VAL_97
  | XLAT_VAL_97
#  endif
#  ifdef XLAT_VAL_98
  | XLAT_VAL_98
#  endif
#  ifdef XLAT_VAL_99
  | XLAT_VAL_99
#  endif
#  ifdef XLAT_VAL_100
  | XLAT_VAL_100
#  endif
#  ifdef XLAT_VAL_101
  | XLAT_VAL_101
#  endif
#  ifdef XLAT_VAL_102
  | XLAT_VAL_102
#  endif
#  ifdef XLAT_VAL_103
  | XLAT_VAL_103
#  endif
#  ifdef XLAT_VAL_104
  | XLAT_VAL_104
#  endif
#  ifdef XLAT_VAL_105
  | XLAT_VAL_105
#  endif
#  ifdef XLAT_VAL_106
  | XLAT_VAL_106
#  endif
#  ifdef XLAT_VAL_107
  | XLAT_VAL_107
#  endif
#  ifdef XLAT_VAL_108
  | XLAT_VAL_108
#  endif
#  ifdef XLAT_VAL_109
  | XLAT_VAL_109
#  endif
#  ifdef XLAT_VAL_110
  | XLAT_VAL_110
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
#  ifdef XLAT_STR_79
  + sizeof(XLAT_STR_79)
#  endif
#  ifdef XLAT_STR_80
  + sizeof(XLAT_STR_80)
#  endif
#  ifdef XLAT_STR_81
  + sizeof(XLAT_STR_81)
#  endif
#  ifdef XLAT_STR_82
  + sizeof(XLAT_STR_82)
#  endif
#  ifdef XLAT_STR_83
  + sizeof(XLAT_STR_83)
#  endif
#  ifdef XLAT_STR_84
  + sizeof(XLAT_STR_84)
#  endif
#  ifdef XLAT_STR_85
  + sizeof(XLAT_STR_85)
#  endif
#  ifdef XLAT_STR_86
  + sizeof(XLAT_STR_86)
#  endif
#  ifdef XLAT_STR_87
  + sizeof(XLAT_STR_87)
#  endif
#  ifdef XLAT_STR_88
  + sizeof(XLAT_STR_88)
#  endif
#  ifdef XLAT_STR_89
  + sizeof(XLAT_STR_89)
#  endif
#  ifdef XLAT_STR_90
  + sizeof(XLAT_STR_90)
#  endif
#  ifdef XLAT_STR_91
  + sizeof(XLAT_STR_91)
#  endif
#  ifdef XLAT_STR_92
  + sizeof(XLAT_STR_92)
#  endif
#  ifdef XLAT_STR_93
  + sizeof(XLAT_STR_93)
#  endif
#  ifdef XLAT_STR_94
  + sizeof(XLAT_STR_94)
#  endif
#  ifdef XLAT_STR_95
  + sizeof(XLAT_STR_95)
#  endif
#  ifdef XLAT_STR_96
  + sizeof(XLAT_STR_96)
#  endif
#  ifdef XLAT_STR_97
  + sizeof(XLAT_STR_97)
#  endif
#  ifdef XLAT_STR_98
  + sizeof(XLAT_STR_98)
#  endif
#  ifdef XLAT_STR_99
  + sizeof(XLAT_STR_99)
#  endif
#  ifdef XLAT_STR_100
  + sizeof(XLAT_STR_100)
#  endif
#  ifdef XLAT_STR_101
  + sizeof(XLAT_STR_101)
#  endif
#  ifdef XLAT_STR_102
  + sizeof(XLAT_STR_102)
#  endif
#  ifdef XLAT_STR_103
  + sizeof(XLAT_STR_103)
#  endif
#  ifdef XLAT_STR_104
  + sizeof(XLAT_STR_104)
#  endif
#  ifdef XLAT_STR_105
  + sizeof(XLAT_STR_105)
#  endif
#  ifdef XLAT_STR_106
  + sizeof(XLAT_STR_106)
#  endif
#  ifdef XLAT_STR_107
  + sizeof(XLAT_STR_107)
#  endif
#  ifdef XLAT_STR_108
  + sizeof(XLAT_STR_108)
#  endif
#  ifdef XLAT_STR_109
  + sizeof(XLAT_STR_109)
#  endif
#  ifdef XLAT_STR_110
  + sizeof(XLAT_STR_110)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
#  undef XLAT_STR_79
#  undef XLAT_VAL_79
#  undef XLAT_STR_80
#  undef XLAT_VAL_80
#  undef XLAT_STR_81
#  undef XLAT_VAL_81
#  undef XLAT_STR_82
#  undef XLAT_VAL_82
#  undef XLAT_STR_83
#  undef XLAT_VAL_83
#  undef XLAT_STR_84
#  undef XLAT_VAL_84
#  undef XLAT_STR_85
#  undef XLAT_VAL_85
#  undef XLAT_STR_86
#  undef XLAT_VAL_86
#  undef XLAT_STR_87
#  undef XLAT_VAL_87
#  undef XLAT_STR_88
#  undef XLAT_VAL_88
#  undef XLAT_STR_89
#  undef XLAT_VAL_89
#  undef XLAT_STR_90
#  undef XLAT_VAL_90
#  undef XLAT_STR_91
#  undef XLAT_VAL_91
#  undef XLAT_STR_92
#  undef XLAT_VAL_92
#  undef XLAT_STR_93
#  undef XLAT_VAL_93
#  undef XLAT_STR_94
#  undef XLAT_VAL_94
#  undef XLAT_STR_95
#  undef XLAT_VAL_95
#  undef XLAT_STR_96
#  undef XLAT_VAL_96
#  undef XLAT_STR_97
#  undef XLAT_VAL_97
#  undef XLAT_STR_98
#  undef XLAT_VAL_98
#  undef XLAT_STR_99
#  undef XLAT_VAL_99
#  undef XLAT_STR_100
#  undef XLAT_VAL_100
#  undef XLAT_STR_101
#  undef XLAT_VAL_101
#  undef XLAT_STR_102
#  undef XLAT_VAL_102
#  undef XLAT_STR_103
#  undef XLAT_VAL_103
#  undef XLAT_STR_104
#  undef XLAT_VAL_104
#  undef XLAT_STR_105
#  undef XLAT_VAL_105
#  undef XLAT_STR_106
#  undef XLAT_VAL_106
#  undef XLAT_STR_107
#  undef XLAT_VAL_107
#  undef XLAT_STR_108
#  undef XLAT_VAL_108
#  undef XLAT_STR_109
#  undef XLAT_VAL_109
#  undef XLAT_STR_110
#  undef XLAT_VAL_110
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
