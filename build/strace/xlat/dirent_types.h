/* Generated by ./src/xlat/gen.sh from ./src/xlat/dirent_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data dirent_types_xdata[] = {
#if defined(DT_UNKNOWN) || (defined(HAVE_DECL_DT_UNKNOWN) && HAVE_DECL_DT_UNKNOWN)
  XLAT(DT_UNKNOWN),
 #define XLAT_VAL_0 ((unsigned) (DT_UNKNOWN))
 #define XLAT_STR_0 STRINGIFY(DT_UNKNOWN)
#endif
#if defined(DT_FIFO) || (defined(HAVE_DECL_DT_FIFO) && HAVE_DECL_DT_FIFO)
  XLAT(DT_FIFO),
 #define XLAT_VAL_1 ((unsigned) (DT_FIFO))
 #define XLAT_STR_1 STRINGIFY(DT_FIFO)
#endif
#if defined(DT_CHR) || (defined(HAVE_DECL_DT_CHR) && HAVE_DECL_DT_CHR)
  XLAT(DT_CHR),
 #define XLAT_VAL_2 ((unsigned) (DT_CHR))
 #define XLAT_STR_2 STRINGIFY(DT_CHR)
#endif
#if defined(DT_DIR) || (defined(HAVE_DECL_DT_DIR) && HAVE_DECL_DT_DIR)
  XLAT(DT_DIR),
 #define XLAT_VAL_3 ((unsigned) (DT_DIR))
 #define XLAT_STR_3 STRINGIFY(DT_DIR)
#endif
#if defined(DT_BLK) || (defined(HAVE_DECL_DT_BLK) && HAVE_DECL_DT_BLK)
  XLAT(DT_BLK),
 #define XLAT_VAL_4 ((unsigned) (DT_BLK))
 #define XLAT_STR_4 STRINGIFY(DT_BLK)
#endif
#if defined(DT_REG) || (defined(HAVE_DECL_DT_REG) && HAVE_DECL_DT_REG)
  XLAT(DT_REG),
 #define XLAT_VAL_5 ((unsigned) (DT_REG))
 #define XLAT_STR_5 STRINGIFY(DT_REG)
#endif
#if defined(DT_LNK) || (defined(HAVE_DECL_DT_LNK) && HAVE_DECL_DT_LNK)
  XLAT(DT_LNK),
 #define XLAT_VAL_6 ((unsigned) (DT_LNK))
 #define XLAT_STR_6 STRINGIFY(DT_LNK)
#endif
#if defined(DT_SOCK) || (defined(HAVE_DECL_DT_SOCK) && HAVE_DECL_DT_SOCK)
  XLAT(DT_SOCK),
 #define XLAT_VAL_7 ((unsigned) (DT_SOCK))
 #define XLAT_STR_7 STRINGIFY(DT_SOCK)
#endif
#if defined(DT_WHT) || (defined(HAVE_DECL_DT_WHT) && HAVE_DECL_DT_WHT)
  XLAT(DT_WHT),
 #define XLAT_VAL_8 ((unsigned) (DT_WHT))
 #define XLAT_STR_8 STRINGIFY(DT_WHT)
#endif
};
const struct xlat dirent_types[1] = { {
 .data = dirent_types_xdata,
 .size = ARRAY_SIZE(dirent_types_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
