/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtnl_addr_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_addr_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtnl_addr_attrs_xdata[] = {
 [IFA_UNSPEC] = XLAT(IFA_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (IFA_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(IFA_UNSPEC)
 [IFA_ADDRESS] = XLAT(IFA_ADDRESS),
 #define XLAT_VAL_1 ((unsigned) (IFA_ADDRESS))
 #define XLAT_STR_1 STRINGIFY(IFA_ADDRESS)
 [IFA_LOCAL] = XLAT(IFA_LOCAL),
 #define XLAT_VAL_2 ((unsigned) (IFA_LOCAL))
 #define XLAT_STR_2 STRINGIFY(IFA_LOCAL)
 [IFA_LABEL] = XLAT(IFA_LABEL),
 #define XLAT_VAL_3 ((unsigned) (IFA_LABEL))
 #define XLAT_STR_3 STRINGIFY(IFA_LABEL)
 [IFA_BROADCAST] = XLAT(IFA_BROADCAST),
 #define XLAT_VAL_4 ((unsigned) (IFA_BROADCAST))
 #define XLAT_STR_4 STRINGIFY(IFA_BROADCAST)
 [IFA_ANYCAST] = XLAT(IFA_ANYCAST),
 #define XLAT_VAL_5 ((unsigned) (IFA_ANYCAST))
 #define XLAT_STR_5 STRINGIFY(IFA_ANYCAST)
 [IFA_CACHEINFO] = XLAT(IFA_CACHEINFO),
 #define XLAT_VAL_6 ((unsigned) (IFA_CACHEINFO))
 #define XLAT_STR_6 STRINGIFY(IFA_CACHEINFO)
 [IFA_MULTICAST] = XLAT(IFA_MULTICAST),
 #define XLAT_VAL_7 ((unsigned) (IFA_MULTICAST))
 #define XLAT_STR_7 STRINGIFY(IFA_MULTICAST)
 [IFA_FLAGS] = XLAT(IFA_FLAGS),
 #define XLAT_VAL_8 ((unsigned) (IFA_FLAGS))
 #define XLAT_STR_8 STRINGIFY(IFA_FLAGS)
 [IFA_RT_PRIORITY] = XLAT(IFA_RT_PRIORITY),
 #define XLAT_VAL_9 ((unsigned) (IFA_RT_PRIORITY))
 #define XLAT_STR_9 STRINGIFY(IFA_RT_PRIORITY)
 [IFA_TARGET_NETNSID] = XLAT(IFA_TARGET_NETNSID),
 #define XLAT_VAL_10 ((unsigned) (IFA_TARGET_NETNSID))
 #define XLAT_STR_10 STRINGIFY(IFA_TARGET_NETNSID)
 [IFA_PROTO] = XLAT(IFA_PROTO),
 #define XLAT_VAL_11 ((unsigned) (IFA_PROTO))
 #define XLAT_STR_11 STRINGIFY(IFA_PROTO)
};
static
const struct xlat rtnl_addr_attrs[1] = { {
 .data = rtnl_addr_attrs_xdata,
 .size = ARRAY_SIZE(rtnl_addr_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
