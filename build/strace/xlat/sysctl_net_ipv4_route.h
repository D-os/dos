/* Generated by ./src/xlat/gen.sh from ./src/xlat/sysctl_net_ipv4_route.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NET_IPV4_ROUTE_FLUSH) || (defined(HAVE_DECL_NET_IPV4_ROUTE_FLUSH) && HAVE_DECL_NET_IPV4_ROUTE_FLUSH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_FLUSH) == (1), "NET_IPV4_ROUTE_FLUSH != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_FLUSH 1
#endif
#if defined(NET_IPV4_ROUTE_MIN_DELAY) || (defined(HAVE_DECL_NET_IPV4_ROUTE_MIN_DELAY) && HAVE_DECL_NET_IPV4_ROUTE_MIN_DELAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_MIN_DELAY) == (2), "NET_IPV4_ROUTE_MIN_DELAY != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_MIN_DELAY 2
#endif
#if defined(NET_IPV4_ROUTE_MAX_DELAY) || (defined(HAVE_DECL_NET_IPV4_ROUTE_MAX_DELAY) && HAVE_DECL_NET_IPV4_ROUTE_MAX_DELAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_MAX_DELAY) == (3), "NET_IPV4_ROUTE_MAX_DELAY != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_MAX_DELAY 3
#endif
#if defined(NET_IPV4_ROUTE_GC_THRESH) || (defined(HAVE_DECL_NET_IPV4_ROUTE_GC_THRESH) && HAVE_DECL_NET_IPV4_ROUTE_GC_THRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_GC_THRESH) == (4), "NET_IPV4_ROUTE_GC_THRESH != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_GC_THRESH 4
#endif
#if defined(NET_IPV4_ROUTE_MAX_SIZE) || (defined(HAVE_DECL_NET_IPV4_ROUTE_MAX_SIZE) && HAVE_DECL_NET_IPV4_ROUTE_MAX_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_MAX_SIZE) == (5), "NET_IPV4_ROUTE_MAX_SIZE != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_MAX_SIZE 5
#endif
#if defined(NET_IPV4_ROUTE_GC_MIN_INTERVAL) || (defined(HAVE_DECL_NET_IPV4_ROUTE_GC_MIN_INTERVAL) && HAVE_DECL_NET_IPV4_ROUTE_GC_MIN_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_GC_MIN_INTERVAL) == (6), "NET_IPV4_ROUTE_GC_MIN_INTERVAL != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_GC_MIN_INTERVAL 6
#endif
#if defined(NET_IPV4_ROUTE_GC_TIMEOUT) || (defined(HAVE_DECL_NET_IPV4_ROUTE_GC_TIMEOUT) && HAVE_DECL_NET_IPV4_ROUTE_GC_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_GC_TIMEOUT) == (7), "NET_IPV4_ROUTE_GC_TIMEOUT != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_GC_TIMEOUT 7
#endif
#if defined(NET_IPV4_ROUTE_GC_INTERVAL) || (defined(HAVE_DECL_NET_IPV4_ROUTE_GC_INTERVAL) && HAVE_DECL_NET_IPV4_ROUTE_GC_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_GC_INTERVAL) == (8), "NET_IPV4_ROUTE_GC_INTERVAL != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_GC_INTERVAL 8
#endif
#if defined(NET_IPV4_ROUTE_REDIRECT_LOAD) || (defined(HAVE_DECL_NET_IPV4_ROUTE_REDIRECT_LOAD) && HAVE_DECL_NET_IPV4_ROUTE_REDIRECT_LOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_REDIRECT_LOAD) == (9), "NET_IPV4_ROUTE_REDIRECT_LOAD != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_REDIRECT_LOAD 9
#endif
#if defined(NET_IPV4_ROUTE_REDIRECT_NUMBER) || (defined(HAVE_DECL_NET_IPV4_ROUTE_REDIRECT_NUMBER) && HAVE_DECL_NET_IPV4_ROUTE_REDIRECT_NUMBER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_REDIRECT_NUMBER) == (10), "NET_IPV4_ROUTE_REDIRECT_NUMBER != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_REDIRECT_NUMBER 10
#endif
#if defined(NET_IPV4_ROUTE_REDIRECT_SILENCE) || (defined(HAVE_DECL_NET_IPV4_ROUTE_REDIRECT_SILENCE) && HAVE_DECL_NET_IPV4_ROUTE_REDIRECT_SILENCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_REDIRECT_SILENCE) == (11), "NET_IPV4_ROUTE_REDIRECT_SILENCE != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_REDIRECT_SILENCE 11
#endif
#if defined(NET_IPV4_ROUTE_ERROR_COST) || (defined(HAVE_DECL_NET_IPV4_ROUTE_ERROR_COST) && HAVE_DECL_NET_IPV4_ROUTE_ERROR_COST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_ERROR_COST) == (12), "NET_IPV4_ROUTE_ERROR_COST != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_ERROR_COST 12
#endif
#if defined(NET_IPV4_ROUTE_ERROR_BURST) || (defined(HAVE_DECL_NET_IPV4_ROUTE_ERROR_BURST) && HAVE_DECL_NET_IPV4_ROUTE_ERROR_BURST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_ERROR_BURST) == (13), "NET_IPV4_ROUTE_ERROR_BURST != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_ERROR_BURST 13
#endif
#if defined(NET_IPV4_ROUTE_GC_ELASTICITY) || (defined(HAVE_DECL_NET_IPV4_ROUTE_GC_ELASTICITY) && HAVE_DECL_NET_IPV4_ROUTE_GC_ELASTICITY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_GC_ELASTICITY) == (14), "NET_IPV4_ROUTE_GC_ELASTICITY != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_GC_ELASTICITY 14
#endif
#if defined(NET_IPV4_ROUTE_MTU_EXPIRES) || (defined(HAVE_DECL_NET_IPV4_ROUTE_MTU_EXPIRES) && HAVE_DECL_NET_IPV4_ROUTE_MTU_EXPIRES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_MTU_EXPIRES) == (15), "NET_IPV4_ROUTE_MTU_EXPIRES != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_MTU_EXPIRES 15
#endif
#if defined(NET_IPV4_ROUTE_MIN_PMTU) || (defined(HAVE_DECL_NET_IPV4_ROUTE_MIN_PMTU) && HAVE_DECL_NET_IPV4_ROUTE_MIN_PMTU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_MIN_PMTU) == (16), "NET_IPV4_ROUTE_MIN_PMTU != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_MIN_PMTU 16
#endif
#if defined(NET_IPV4_ROUTE_MIN_ADVMSS) || (defined(HAVE_DECL_NET_IPV4_ROUTE_MIN_ADVMSS) && HAVE_DECL_NET_IPV4_ROUTE_MIN_ADVMSS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_MIN_ADVMSS) == (17), "NET_IPV4_ROUTE_MIN_ADVMSS != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_MIN_ADVMSS 17
#endif
#if defined(NET_IPV4_ROUTE_SECRET_INTERVAL) || (defined(HAVE_DECL_NET_IPV4_ROUTE_SECRET_INTERVAL) && HAVE_DECL_NET_IPV4_ROUTE_SECRET_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_SECRET_INTERVAL) == (18), "NET_IPV4_ROUTE_SECRET_INTERVAL != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_SECRET_INTERVAL 18
#endif
#if defined(NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS) || (defined(HAVE_DECL_NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS) && HAVE_DECL_NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS) == (19), "NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS 19
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sysctl_net_ipv4_route in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sysctl_net_ipv4_route_xdata[] = {

 [NET_IPV4_ROUTE_FLUSH] = XLAT(NET_IPV4_ROUTE_FLUSH),
 #define XLAT_VAL_0 ((unsigned) (NET_IPV4_ROUTE_FLUSH))
 #define XLAT_STR_0 STRINGIFY(NET_IPV4_ROUTE_FLUSH)
 [NET_IPV4_ROUTE_MIN_DELAY] = XLAT(NET_IPV4_ROUTE_MIN_DELAY),
 #define XLAT_VAL_1 ((unsigned) (NET_IPV4_ROUTE_MIN_DELAY))
 #define XLAT_STR_1 STRINGIFY(NET_IPV4_ROUTE_MIN_DELAY)
 [NET_IPV4_ROUTE_MAX_DELAY] = XLAT(NET_IPV4_ROUTE_MAX_DELAY),
 #define XLAT_VAL_2 ((unsigned) (NET_IPV4_ROUTE_MAX_DELAY))
 #define XLAT_STR_2 STRINGIFY(NET_IPV4_ROUTE_MAX_DELAY)
 [NET_IPV4_ROUTE_GC_THRESH] = XLAT(NET_IPV4_ROUTE_GC_THRESH),
 #define XLAT_VAL_3 ((unsigned) (NET_IPV4_ROUTE_GC_THRESH))
 #define XLAT_STR_3 STRINGIFY(NET_IPV4_ROUTE_GC_THRESH)
 [NET_IPV4_ROUTE_MAX_SIZE] = XLAT(NET_IPV4_ROUTE_MAX_SIZE),
 #define XLAT_VAL_4 ((unsigned) (NET_IPV4_ROUTE_MAX_SIZE))
 #define XLAT_STR_4 STRINGIFY(NET_IPV4_ROUTE_MAX_SIZE)
 [NET_IPV4_ROUTE_GC_MIN_INTERVAL] = XLAT(NET_IPV4_ROUTE_GC_MIN_INTERVAL),
 #define XLAT_VAL_5 ((unsigned) (NET_IPV4_ROUTE_GC_MIN_INTERVAL))
 #define XLAT_STR_5 STRINGIFY(NET_IPV4_ROUTE_GC_MIN_INTERVAL)
 [NET_IPV4_ROUTE_GC_TIMEOUT] = XLAT(NET_IPV4_ROUTE_GC_TIMEOUT),
 #define XLAT_VAL_6 ((unsigned) (NET_IPV4_ROUTE_GC_TIMEOUT))
 #define XLAT_STR_6 STRINGIFY(NET_IPV4_ROUTE_GC_TIMEOUT)
 [NET_IPV4_ROUTE_GC_INTERVAL] = XLAT(NET_IPV4_ROUTE_GC_INTERVAL),
 #define XLAT_VAL_7 ((unsigned) (NET_IPV4_ROUTE_GC_INTERVAL))
 #define XLAT_STR_7 STRINGIFY(NET_IPV4_ROUTE_GC_INTERVAL)
 [NET_IPV4_ROUTE_REDIRECT_LOAD] = XLAT(NET_IPV4_ROUTE_REDIRECT_LOAD),
 #define XLAT_VAL_8 ((unsigned) (NET_IPV4_ROUTE_REDIRECT_LOAD))
 #define XLAT_STR_8 STRINGIFY(NET_IPV4_ROUTE_REDIRECT_LOAD)
 [NET_IPV4_ROUTE_REDIRECT_NUMBER] = XLAT(NET_IPV4_ROUTE_REDIRECT_NUMBER),
 #define XLAT_VAL_9 ((unsigned) (NET_IPV4_ROUTE_REDIRECT_NUMBER))
 #define XLAT_STR_9 STRINGIFY(NET_IPV4_ROUTE_REDIRECT_NUMBER)
 [NET_IPV4_ROUTE_REDIRECT_SILENCE] = XLAT(NET_IPV4_ROUTE_REDIRECT_SILENCE),
 #define XLAT_VAL_10 ((unsigned) (NET_IPV4_ROUTE_REDIRECT_SILENCE))
 #define XLAT_STR_10 STRINGIFY(NET_IPV4_ROUTE_REDIRECT_SILENCE)
 [NET_IPV4_ROUTE_ERROR_COST] = XLAT(NET_IPV4_ROUTE_ERROR_COST),
 #define XLAT_VAL_11 ((unsigned) (NET_IPV4_ROUTE_ERROR_COST))
 #define XLAT_STR_11 STRINGIFY(NET_IPV4_ROUTE_ERROR_COST)
 [NET_IPV4_ROUTE_ERROR_BURST] = XLAT(NET_IPV4_ROUTE_ERROR_BURST),
 #define XLAT_VAL_12 ((unsigned) (NET_IPV4_ROUTE_ERROR_BURST))
 #define XLAT_STR_12 STRINGIFY(NET_IPV4_ROUTE_ERROR_BURST)

 [NET_IPV4_ROUTE_GC_ELASTICITY] = XLAT(NET_IPV4_ROUTE_GC_ELASTICITY),
 #define XLAT_VAL_13 ((unsigned) (NET_IPV4_ROUTE_GC_ELASTICITY))
 #define XLAT_STR_13 STRINGIFY(NET_IPV4_ROUTE_GC_ELASTICITY)

 [NET_IPV4_ROUTE_MTU_EXPIRES] = XLAT(NET_IPV4_ROUTE_MTU_EXPIRES),
 #define XLAT_VAL_14 ((unsigned) (NET_IPV4_ROUTE_MTU_EXPIRES))
 #define XLAT_STR_14 STRINGIFY(NET_IPV4_ROUTE_MTU_EXPIRES)

 [NET_IPV4_ROUTE_MIN_PMTU] = XLAT(NET_IPV4_ROUTE_MIN_PMTU),
 #define XLAT_VAL_15 ((unsigned) (NET_IPV4_ROUTE_MIN_PMTU))
 #define XLAT_STR_15 STRINGIFY(NET_IPV4_ROUTE_MIN_PMTU)
 [NET_IPV4_ROUTE_MIN_ADVMSS] = XLAT(NET_IPV4_ROUTE_MIN_ADVMSS),
 #define XLAT_VAL_16 ((unsigned) (NET_IPV4_ROUTE_MIN_ADVMSS))
 #define XLAT_STR_16 STRINGIFY(NET_IPV4_ROUTE_MIN_ADVMSS)

 [NET_IPV4_ROUTE_SECRET_INTERVAL] = XLAT(NET_IPV4_ROUTE_SECRET_INTERVAL),
 #define XLAT_VAL_17 ((unsigned) (NET_IPV4_ROUTE_SECRET_INTERVAL))
 #define XLAT_STR_17 STRINGIFY(NET_IPV4_ROUTE_SECRET_INTERVAL)

 [NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS] = XLAT(NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS),
 #define XLAT_VAL_18 ((unsigned) (NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS))
 #define XLAT_STR_18 STRINGIFY(NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS)
};
static
const struct xlat sysctl_net_ipv4_route[1] = { {
 .data = sysctl_net_ipv4_route_xdata,
 .size = ARRAY_SIZE(sysctl_net_ipv4_route_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
