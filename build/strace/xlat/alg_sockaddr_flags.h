/* Generated by ./src/xlat/gen.sh from ./src/xlat/alg_sockaddr_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(CRYPTO_ALG_KERN_DRIVER_ONLY) || (defined(HAVE_DECL_CRYPTO_ALG_KERN_DRIVER_ONLY) && HAVE_DECL_CRYPTO_ALG_KERN_DRIVER_ONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CRYPTO_ALG_KERN_DRIVER_ONLY) == (0x1000), "CRYPTO_ALG_KERN_DRIVER_ONLY != 0x1000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CRYPTO_ALG_KERN_DRIVER_ONLY 0x1000
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat alg_sockaddr_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data alg_sockaddr_flags_xdata[] = {

 XLAT(CRYPTO_ALG_KERN_DRIVER_ONLY),
 #define XLAT_VAL_0 ((unsigned) (CRYPTO_ALG_KERN_DRIVER_ONLY))
 #define XLAT_STR_0 STRINGIFY(CRYPTO_ALG_KERN_DRIVER_ONLY)
};
static
const struct xlat alg_sockaddr_flags[1] = { {
 .data = alg_sockaddr_flags_xdata,
 .size = ARRAY_SIZE(alg_sockaddr_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
