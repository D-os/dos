/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_key_tables.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(K_NORMTAB) || (defined(HAVE_DECL_K_NORMTAB) && HAVE_DECL_K_NORMTAB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_NORMTAB) == (0), "K_NORMTAB != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_NORMTAB 0
#endif
#if defined(K_SHIFTTAB) || (defined(HAVE_DECL_K_SHIFTTAB) && HAVE_DECL_K_SHIFTTAB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_SHIFTTAB) == (1), "K_SHIFTTAB != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_SHIFTTAB 1
#endif
#if defined(K_ALTTAB) || (defined(HAVE_DECL_K_ALTTAB) && HAVE_DECL_K_ALTTAB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_ALTTAB) == (2), "K_ALTTAB != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_ALTTAB 2
#endif
#if defined(K_ALTSHIFTTAB) || (defined(HAVE_DECL_K_ALTSHIFTTAB) && HAVE_DECL_K_ALTSHIFTTAB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_ALTSHIFTTAB) == (3), "K_ALTSHIFTTAB != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_ALTSHIFTTAB 3
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat kd_key_tables in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_key_tables_xdata[] = {
 [K_NORMTAB] = XLAT(K_NORMTAB),
 #define XLAT_VAL_0 ((unsigned) (K_NORMTAB))
 #define XLAT_STR_0 STRINGIFY(K_NORMTAB)
 [K_SHIFTTAB] = XLAT(K_SHIFTTAB),
 #define XLAT_VAL_1 ((unsigned) (K_SHIFTTAB))
 #define XLAT_STR_1 STRINGIFY(K_SHIFTTAB)
 [K_ALTTAB] = XLAT(K_ALTTAB),
 #define XLAT_VAL_2 ((unsigned) (K_ALTTAB))
 #define XLAT_STR_2 STRINGIFY(K_ALTTAB)
 [K_ALTSHIFTTAB] = XLAT(K_ALTSHIFTTAB),
 #define XLAT_VAL_3 ((unsigned) (K_ALTSHIFTTAB))
 #define XLAT_STR_3 STRINGIFY(K_ALTSHIFTTAB)
};
static
const struct xlat kd_key_tables[1] = { {
 .data = kd_key_tables_xdata,
 .size = ARRAY_SIZE(kd_key_tables_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
