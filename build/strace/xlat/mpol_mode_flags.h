/* Generated by ./src/xlat/gen.sh from ./src/xlat/mpol_mode_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(MPOL_F_STATIC_NODES) || (defined(HAVE_DECL_MPOL_F_STATIC_NODES) && HAVE_DECL_MPOL_F_STATIC_NODES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MPOL_F_STATIC_NODES) == ((1U << 15)), "MPOL_F_STATIC_NODES != (1U << 15)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MPOL_F_STATIC_NODES (1U << 15)
#endif
#if defined(MPOL_F_RELATIVE_NODES) || (defined(HAVE_DECL_MPOL_F_RELATIVE_NODES) && HAVE_DECL_MPOL_F_RELATIVE_NODES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MPOL_F_RELATIVE_NODES) == ((1U << 14)), "MPOL_F_RELATIVE_NODES != (1U << 14)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MPOL_F_RELATIVE_NODES (1U << 14)
#endif
#if defined(MPOL_F_NUMA_BALANCING) || (defined(HAVE_DECL_MPOL_F_NUMA_BALANCING) && HAVE_DECL_MPOL_F_NUMA_BALANCING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MPOL_F_NUMA_BALANCING) == ((1U << 13)), "MPOL_F_NUMA_BALANCING != (1U << 13)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MPOL_F_NUMA_BALANCING (1U << 13)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat mpol_mode_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data mpol_mode_flags_xdata[] = {
 XLAT(MPOL_F_STATIC_NODES),
 #define XLAT_VAL_0 ((unsigned) (MPOL_F_STATIC_NODES))
 #define XLAT_STR_0 STRINGIFY(MPOL_F_STATIC_NODES)
 XLAT(MPOL_F_RELATIVE_NODES),
 #define XLAT_VAL_1 ((unsigned) (MPOL_F_RELATIVE_NODES))
 #define XLAT_STR_1 STRINGIFY(MPOL_F_RELATIVE_NODES)
 XLAT(MPOL_F_NUMA_BALANCING),
 #define XLAT_VAL_2 ((unsigned) (MPOL_F_NUMA_BALANCING))
 #define XLAT_STR_2 STRINGIFY(MPOL_F_NUMA_BALANCING)
};
static
const struct xlat mpol_mode_flags[1] = { {
 .data = mpol_mode_flags_xdata,
 .size = ARRAY_SIZE(mpol_mode_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
