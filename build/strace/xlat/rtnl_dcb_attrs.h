/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtnl_dcb_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_dcb_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtnl_dcb_attrs_xdata[] = {
 [DCB_ATTR_UNDEFINED] = XLAT(DCB_ATTR_UNDEFINED),
 #define XLAT_VAL_0 ((unsigned) (DCB_ATTR_UNDEFINED))
 #define XLAT_STR_0 STRINGIFY(DCB_ATTR_UNDEFINED)
 [DCB_ATTR_IFNAME] = XLAT(DCB_ATTR_IFNAME),
 #define XLAT_VAL_1 ((unsigned) (DCB_ATTR_IFNAME))
 #define XLAT_STR_1 STRINGIFY(DCB_ATTR_IFNAME)
 [DCB_ATTR_STATE] = XLAT(DCB_ATTR_STATE),
 #define XLAT_VAL_2 ((unsigned) (DCB_ATTR_STATE))
 #define XLAT_STR_2 STRINGIFY(DCB_ATTR_STATE)
 [DCB_ATTR_PFC_STATE] = XLAT(DCB_ATTR_PFC_STATE),
 #define XLAT_VAL_3 ((unsigned) (DCB_ATTR_PFC_STATE))
 #define XLAT_STR_3 STRINGIFY(DCB_ATTR_PFC_STATE)
 [DCB_ATTR_PFC_CFG] = XLAT(DCB_ATTR_PFC_CFG),
 #define XLAT_VAL_4 ((unsigned) (DCB_ATTR_PFC_CFG))
 #define XLAT_STR_4 STRINGIFY(DCB_ATTR_PFC_CFG)
 [DCB_ATTR_NUM_TC] = XLAT(DCB_ATTR_NUM_TC),
 #define XLAT_VAL_5 ((unsigned) (DCB_ATTR_NUM_TC))
 #define XLAT_STR_5 STRINGIFY(DCB_ATTR_NUM_TC)
 [DCB_ATTR_PG_CFG] = XLAT(DCB_ATTR_PG_CFG),
 #define XLAT_VAL_6 ((unsigned) (DCB_ATTR_PG_CFG))
 #define XLAT_STR_6 STRINGIFY(DCB_ATTR_PG_CFG)
 [DCB_ATTR_SET_ALL] = XLAT(DCB_ATTR_SET_ALL),
 #define XLAT_VAL_7 ((unsigned) (DCB_ATTR_SET_ALL))
 #define XLAT_STR_7 STRINGIFY(DCB_ATTR_SET_ALL)
 [DCB_ATTR_PERM_HWADDR] = XLAT(DCB_ATTR_PERM_HWADDR),
 #define XLAT_VAL_8 ((unsigned) (DCB_ATTR_PERM_HWADDR))
 #define XLAT_STR_8 STRINGIFY(DCB_ATTR_PERM_HWADDR)
 [DCB_ATTR_CAP] = XLAT(DCB_ATTR_CAP),
 #define XLAT_VAL_9 ((unsigned) (DCB_ATTR_CAP))
 #define XLAT_STR_9 STRINGIFY(DCB_ATTR_CAP)
 [DCB_ATTR_NUMTCS] = XLAT(DCB_ATTR_NUMTCS),
 #define XLAT_VAL_10 ((unsigned) (DCB_ATTR_NUMTCS))
 #define XLAT_STR_10 STRINGIFY(DCB_ATTR_NUMTCS)
 [DCB_ATTR_BCN] = XLAT(DCB_ATTR_BCN),
 #define XLAT_VAL_11 ((unsigned) (DCB_ATTR_BCN))
 #define XLAT_STR_11 STRINGIFY(DCB_ATTR_BCN)
 [DCB_ATTR_APP] = XLAT(DCB_ATTR_APP),
 #define XLAT_VAL_12 ((unsigned) (DCB_ATTR_APP))
 #define XLAT_STR_12 STRINGIFY(DCB_ATTR_APP)
 [DCB_ATTR_IEEE] = XLAT(DCB_ATTR_IEEE),
 #define XLAT_VAL_13 ((unsigned) (DCB_ATTR_IEEE))
 #define XLAT_STR_13 STRINGIFY(DCB_ATTR_IEEE)
 [DCB_ATTR_DCBX] = XLAT(DCB_ATTR_DCBX),
 #define XLAT_VAL_14 ((unsigned) (DCB_ATTR_DCBX))
 #define XLAT_STR_14 STRINGIFY(DCB_ATTR_DCBX)
 [DCB_ATTR_FEATCFG] = XLAT(DCB_ATTR_FEATCFG),
 #define XLAT_VAL_15 ((unsigned) (DCB_ATTR_FEATCFG))
 #define XLAT_STR_15 STRINGIFY(DCB_ATTR_FEATCFG)
 [DCB_ATTR_CEE] = XLAT(DCB_ATTR_CEE),
 #define XLAT_VAL_16 ((unsigned) (DCB_ATTR_CEE))
 #define XLAT_STR_16 STRINGIFY(DCB_ATTR_CEE)
};
static
const struct xlat rtnl_dcb_attrs[1] = { {
 .data = rtnl_dcb_attrs_xdata,
 .size = ARRAY_SIZE(rtnl_dcb_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
