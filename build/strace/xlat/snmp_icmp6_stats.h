/* Generated by ./src/xlat/gen.sh from ./src/xlat/snmp_icmp6_stats.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ICMP6_MIB_NUM) || (defined(HAVE_DECL_ICMP6_MIB_NUM) && HAVE_DECL_ICMP6_MIB_NUM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP6_MIB_NUM) == (0), "ICMP6_MIB_NUM != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP6_MIB_NUM 0
#endif
#if defined(ICMP6_MIB_INMSGS) || (defined(HAVE_DECL_ICMP6_MIB_INMSGS) && HAVE_DECL_ICMP6_MIB_INMSGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP6_MIB_INMSGS) == (1), "ICMP6_MIB_INMSGS != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP6_MIB_INMSGS 1
#endif
#if defined(ICMP6_MIB_INERRORS) || (defined(HAVE_DECL_ICMP6_MIB_INERRORS) && HAVE_DECL_ICMP6_MIB_INERRORS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP6_MIB_INERRORS) == (2), "ICMP6_MIB_INERRORS != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP6_MIB_INERRORS 2
#endif
#if defined(ICMP6_MIB_OUTMSGS) || (defined(HAVE_DECL_ICMP6_MIB_OUTMSGS) && HAVE_DECL_ICMP6_MIB_OUTMSGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP6_MIB_OUTMSGS) == (3), "ICMP6_MIB_OUTMSGS != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP6_MIB_OUTMSGS 3
#endif
#if defined(ICMP6_MIB_OUTERRORS) || (defined(HAVE_DECL_ICMP6_MIB_OUTERRORS) && HAVE_DECL_ICMP6_MIB_OUTERRORS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP6_MIB_OUTERRORS) == (4), "ICMP6_MIB_OUTERRORS != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP6_MIB_OUTERRORS 4
#endif
#if defined(ICMP6_MIB_CSUMERRORS) || (defined(HAVE_DECL_ICMP6_MIB_CSUMERRORS) && HAVE_DECL_ICMP6_MIB_CSUMERRORS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ICMP6_MIB_CSUMERRORS) == (5), "ICMP6_MIB_CSUMERRORS != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ICMP6_MIB_CSUMERRORS 5
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat snmp_icmp6_stats in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data snmp_icmp6_stats_xdata[] = {
 [ICMP6_MIB_NUM] = XLAT(ICMP6_MIB_NUM),
 #define XLAT_VAL_0 ((unsigned) (ICMP6_MIB_NUM))
 #define XLAT_STR_0 STRINGIFY(ICMP6_MIB_NUM)
 [ICMP6_MIB_INMSGS] = XLAT(ICMP6_MIB_INMSGS),
 #define XLAT_VAL_1 ((unsigned) (ICMP6_MIB_INMSGS))
 #define XLAT_STR_1 STRINGIFY(ICMP6_MIB_INMSGS)
 [ICMP6_MIB_INERRORS] = XLAT(ICMP6_MIB_INERRORS),
 #define XLAT_VAL_2 ((unsigned) (ICMP6_MIB_INERRORS))
 #define XLAT_STR_2 STRINGIFY(ICMP6_MIB_INERRORS)
 [ICMP6_MIB_OUTMSGS] = XLAT(ICMP6_MIB_OUTMSGS),
 #define XLAT_VAL_3 ((unsigned) (ICMP6_MIB_OUTMSGS))
 #define XLAT_STR_3 STRINGIFY(ICMP6_MIB_OUTMSGS)
 [ICMP6_MIB_OUTERRORS] = XLAT(ICMP6_MIB_OUTERRORS),
 #define XLAT_VAL_4 ((unsigned) (ICMP6_MIB_OUTERRORS))
 #define XLAT_STR_4 STRINGIFY(ICMP6_MIB_OUTERRORS)
 [ICMP6_MIB_CSUMERRORS] = XLAT(ICMP6_MIB_CSUMERRORS),
 #define XLAT_VAL_5 ((unsigned) (ICMP6_MIB_CSUMERRORS))
 #define XLAT_STR_5 STRINGIFY(ICMP6_MIB_CSUMERRORS)
};
static
const struct xlat snmp_icmp6_stats[1] = { {
 .data = snmp_icmp6_stats_xdata,
 .size = ARRAY_SIZE(snmp_icmp6_stats_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
