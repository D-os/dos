/* Generated by ./src/xlat/gen.sh from ./src/xlat/rxrpc_services.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(CM_SERVICE) || (defined(HAVE_DECL_CM_SERVICE) && HAVE_DECL_CM_SERVICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((CM_SERVICE) == (1), "CM_SERVICE != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define CM_SERVICE 1
#endif
#if defined(CM_SERVICE) || (defined(HAVE_DECL_CM_SERVICE) && HAVE_DECL_CM_SERVICE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (CM_SERVICE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: CM_SERVICE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (CM_SERVICE)
#endif
#if defined(YFS_FS_SERVICE) || (defined(HAVE_DECL_YFS_FS_SERVICE) && HAVE_DECL_YFS_FS_SERVICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((YFS_FS_SERVICE) == (2500), "YFS_FS_SERVICE != 2500");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define YFS_FS_SERVICE 2500
#endif
#if defined(YFS_FS_SERVICE) || (defined(HAVE_DECL_YFS_FS_SERVICE) && HAVE_DECL_YFS_FS_SERVICE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (YFS_FS_SERVICE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: YFS_FS_SERVICE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (YFS_FS_SERVICE)
#endif
#if defined(YFS_CM_SERVICE) || (defined(HAVE_DECL_YFS_CM_SERVICE) && HAVE_DECL_YFS_CM_SERVICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((YFS_CM_SERVICE) == (2501), "YFS_CM_SERVICE != 2501");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define YFS_CM_SERVICE 2501
#endif
#if defined(YFS_CM_SERVICE) || (defined(HAVE_DECL_YFS_CM_SERVICE) && HAVE_DECL_YFS_CM_SERVICE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (YFS_CM_SERVICE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: YFS_CM_SERVICE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (YFS_CM_SERVICE)
#endif
#if defined(YFS_VL_SERVICE) || (defined(HAVE_DECL_YFS_VL_SERVICE) && HAVE_DECL_YFS_VL_SERVICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((YFS_VL_SERVICE) == (2503), "YFS_VL_SERVICE != 2503");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define YFS_VL_SERVICE 2503
#endif
#if defined(YFS_VL_SERVICE) || (defined(HAVE_DECL_YFS_VL_SERVICE) && HAVE_DECL_YFS_VL_SERVICE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (YFS_VL_SERVICE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: YFS_VL_SERVICE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (YFS_VL_SERVICE)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rxrpc_services in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rxrpc_services_xdata[] = {
 XLAT(CM_SERVICE),
 #define XLAT_VAL_0 ((unsigned) (CM_SERVICE))
 #define XLAT_STR_0 STRINGIFY(CM_SERVICE)
 XLAT(YFS_FS_SERVICE),
 #define XLAT_VAL_1 ((unsigned) (YFS_FS_SERVICE))
 #define XLAT_STR_1 STRINGIFY(YFS_FS_SERVICE)
 XLAT(YFS_CM_SERVICE),
 #define XLAT_VAL_2 ((unsigned) (YFS_CM_SERVICE))
 #define XLAT_STR_2 STRINGIFY(YFS_CM_SERVICE)
 XLAT(YFS_VL_SERVICE),
 #define XLAT_VAL_3 ((unsigned) (YFS_VL_SERVICE))
 #define XLAT_STR_3 STRINGIFY(YFS_VL_SERVICE)
};
static
const struct xlat rxrpc_services[1] = { {
 .data = rxrpc_services_xdata,
 .size = ARRAY_SIZE(rxrpc_services_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
