/* Generated by ./src/xlat/gen.sh from ./src/xlat/numa_node.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NUMA_NO_NODE) || (defined(HAVE_DECL_NUMA_NO_NODE) && HAVE_DECL_NUMA_NO_NODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NUMA_NO_NODE) == (-1U), "NUMA_NO_NODE != -1U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NUMA_NO_NODE -1U
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat numa_node in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data numa_node_xdata[] = {
 XLAT(NUMA_NO_NODE),
 #define XLAT_VAL_0 ((unsigned) (NUMA_NO_NODE))
 #define XLAT_STR_0 STRINGIFY(NUMA_NO_NODE)
};
static
const struct xlat numa_node[1] = { {
 .data = numa_node_xdata,
 .size = ARRAY_SIZE(numa_node_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
