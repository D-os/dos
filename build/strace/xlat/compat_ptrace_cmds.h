/* Generated by ./src/xlat/gen.sh from ./src/xlat/compat_ptrace_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined __arm64__ || defined __aarch64__
#if defined(COMPAT_PTRACE_GETREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_GETREGS) && HAVE_DECL_COMPAT_PTRACE_GETREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_GETREGS) == (12), "COMPAT_PTRACE_GETREGS != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_GETREGS 12
#endif
#if defined(COMPAT_PTRACE_GETREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_GETREGS) && HAVE_DECL_COMPAT_PTRACE_GETREGS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_GETREGS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_GETREGS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_GETREGS)
#endif
#if defined(COMPAT_PTRACE_SETREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_SETREGS) && HAVE_DECL_COMPAT_PTRACE_SETREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_SETREGS) == (13), "COMPAT_PTRACE_SETREGS != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_SETREGS 13
#endif
#if defined(COMPAT_PTRACE_SETREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_SETREGS) && HAVE_DECL_COMPAT_PTRACE_SETREGS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_SETREGS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_SETREGS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_SETREGS)
#endif
#if defined(COMPAT_PTRACE_GETFPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_GETFPREGS) && HAVE_DECL_COMPAT_PTRACE_GETFPREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_GETFPREGS) == (14), "COMPAT_PTRACE_GETFPREGS != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_GETFPREGS 14
#endif
#if defined(COMPAT_PTRACE_GETFPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_GETFPREGS) && HAVE_DECL_COMPAT_PTRACE_GETFPREGS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_GETFPREGS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_GETFPREGS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_GETFPREGS)
#endif
#if defined(COMPAT_PTRACE_SETFPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_SETFPREGS) && HAVE_DECL_COMPAT_PTRACE_SETFPREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_SETFPREGS) == (15), "COMPAT_PTRACE_SETFPREGS != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_SETFPREGS 15
#endif
#if defined(COMPAT_PTRACE_SETFPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_SETFPREGS) && HAVE_DECL_COMPAT_PTRACE_SETFPREGS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_SETFPREGS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_SETFPREGS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_SETFPREGS)
#endif
#if defined(COMPAT_PTRACE_GET_THREAD_AREA) || (defined(HAVE_DECL_COMPAT_PTRACE_GET_THREAD_AREA) && HAVE_DECL_COMPAT_PTRACE_GET_THREAD_AREA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_GET_THREAD_AREA) == (22), "COMPAT_PTRACE_GET_THREAD_AREA != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_GET_THREAD_AREA 22
#endif
#if defined(COMPAT_PTRACE_GET_THREAD_AREA) || (defined(HAVE_DECL_COMPAT_PTRACE_GET_THREAD_AREA) && HAVE_DECL_COMPAT_PTRACE_GET_THREAD_AREA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_GET_THREAD_AREA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_GET_THREAD_AREA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_GET_THREAD_AREA)
#endif
#if defined(COMPAT_PTRACE_SET_SYSCALL) || (defined(HAVE_DECL_COMPAT_PTRACE_SET_SYSCALL) && HAVE_DECL_COMPAT_PTRACE_SET_SYSCALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_SET_SYSCALL) == (23), "COMPAT_PTRACE_SET_SYSCALL != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_SET_SYSCALL 23
#endif
#if defined(COMPAT_PTRACE_SET_SYSCALL) || (defined(HAVE_DECL_COMPAT_PTRACE_SET_SYSCALL) && HAVE_DECL_COMPAT_PTRACE_SET_SYSCALL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_SET_SYSCALL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_SET_SYSCALL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_SET_SYSCALL)
#endif
#if defined(COMPAT_PTRACE_GETVFPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_GETVFPREGS) && HAVE_DECL_COMPAT_PTRACE_GETVFPREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_GETVFPREGS) == (27), "COMPAT_PTRACE_GETVFPREGS != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_GETVFPREGS 27
#endif
#if defined(COMPAT_PTRACE_GETVFPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_GETVFPREGS) && HAVE_DECL_COMPAT_PTRACE_GETVFPREGS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_GETVFPREGS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_GETVFPREGS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_GETVFPREGS)
#endif
#if defined(COMPAT_PTRACE_SETVFPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_SETVFPREGS) && HAVE_DECL_COMPAT_PTRACE_SETVFPREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_SETVFPREGS) == (28), "COMPAT_PTRACE_SETVFPREGS != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_SETVFPREGS 28
#endif
#if defined(COMPAT_PTRACE_SETVFPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_SETVFPREGS) && HAVE_DECL_COMPAT_PTRACE_SETVFPREGS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_SETVFPREGS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_SETVFPREGS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_SETVFPREGS)
#endif
#if defined(COMPAT_PTRACE_GETHBPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_GETHBPREGS) && HAVE_DECL_COMPAT_PTRACE_GETHBPREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_GETHBPREGS) == (29), "COMPAT_PTRACE_GETHBPREGS != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_GETHBPREGS 29
#endif
#if defined(COMPAT_PTRACE_GETHBPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_GETHBPREGS) && HAVE_DECL_COMPAT_PTRACE_GETHBPREGS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_GETHBPREGS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_GETHBPREGS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_GETHBPREGS)
#endif
#if defined(COMPAT_PTRACE_SETHBPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_SETHBPREGS) && HAVE_DECL_COMPAT_PTRACE_SETHBPREGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((COMPAT_PTRACE_SETHBPREGS) == (30), "COMPAT_PTRACE_SETHBPREGS != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define COMPAT_PTRACE_SETHBPREGS 30
#endif
#if defined(COMPAT_PTRACE_SETHBPREGS) || (defined(HAVE_DECL_COMPAT_PTRACE_SETHBPREGS) && HAVE_DECL_COMPAT_PTRACE_SETHBPREGS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (COMPAT_PTRACE_SETHBPREGS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: COMPAT_PTRACE_SETHBPREGS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (COMPAT_PTRACE_SETHBPREGS)
#endif
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat compat_ptrace_cmds in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data compat_ptrace_cmds_xdata[] = {
#if defined __arm64__ || defined __aarch64__
 XLAT(COMPAT_PTRACE_GETREGS),
 #define XLAT_VAL_0 ((unsigned) (COMPAT_PTRACE_GETREGS))
 #define XLAT_STR_0 STRINGIFY(COMPAT_PTRACE_GETREGS)
 XLAT(COMPAT_PTRACE_SETREGS),
 #define XLAT_VAL_1 ((unsigned) (COMPAT_PTRACE_SETREGS))
 #define XLAT_STR_1 STRINGIFY(COMPAT_PTRACE_SETREGS)

/*
* These two are not defined in arch/arm64/include/asm/ptrace.h,
* but we still support decoding of PTRACE_[GS]ETFPREGS for m32 tracees.
*/
 XLAT(COMPAT_PTRACE_GETFPREGS),
 #define XLAT_VAL_2 ((unsigned) (COMPAT_PTRACE_GETFPREGS))
 #define XLAT_STR_2 STRINGIFY(COMPAT_PTRACE_GETFPREGS)
 XLAT(COMPAT_PTRACE_SETFPREGS),
 #define XLAT_VAL_3 ((unsigned) (COMPAT_PTRACE_SETFPREGS))
 #define XLAT_STR_3 STRINGIFY(COMPAT_PTRACE_SETFPREGS)

 XLAT(COMPAT_PTRACE_GET_THREAD_AREA),
 #define XLAT_VAL_4 ((unsigned) (COMPAT_PTRACE_GET_THREAD_AREA))
 #define XLAT_STR_4 STRINGIFY(COMPAT_PTRACE_GET_THREAD_AREA)
 XLAT(COMPAT_PTRACE_SET_SYSCALL),
 #define XLAT_VAL_5 ((unsigned) (COMPAT_PTRACE_SET_SYSCALL))
 #define XLAT_STR_5 STRINGIFY(COMPAT_PTRACE_SET_SYSCALL)
 XLAT(COMPAT_PTRACE_GETVFPREGS),
 #define XLAT_VAL_6 ((unsigned) (COMPAT_PTRACE_GETVFPREGS))
 #define XLAT_STR_6 STRINGIFY(COMPAT_PTRACE_GETVFPREGS)
 XLAT(COMPAT_PTRACE_SETVFPREGS),
 #define XLAT_VAL_7 ((unsigned) (COMPAT_PTRACE_SETVFPREGS))
 #define XLAT_STR_7 STRINGIFY(COMPAT_PTRACE_SETVFPREGS)
 XLAT(COMPAT_PTRACE_GETHBPREGS),
 #define XLAT_VAL_8 ((unsigned) (COMPAT_PTRACE_GETHBPREGS))
 #define XLAT_STR_8 STRINGIFY(COMPAT_PTRACE_GETHBPREGS)
 XLAT(COMPAT_PTRACE_SETHBPREGS),
 #define XLAT_VAL_9 ((unsigned) (COMPAT_PTRACE_SETHBPREGS))
 #define XLAT_STR_9 STRINGIFY(COMPAT_PTRACE_SETHBPREGS)
#endif
};
static
const struct xlat compat_ptrace_cmds[1] = { {
 .data = compat_ptrace_cmds_xdata,
 .size = ARRAY_SIZE(compat_ptrace_cmds_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
