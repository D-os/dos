/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_pppol2tp_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PPPOL2TP_SO_DEBUG) || (defined(HAVE_DECL_PPPOL2TP_SO_DEBUG) && HAVE_DECL_PPPOL2TP_SO_DEBUG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PPPOL2TP_SO_DEBUG) == (1), "PPPOL2TP_SO_DEBUG != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PPPOL2TP_SO_DEBUG 1
#endif
#if defined(PPPOL2TP_SO_RECVSEQ) || (defined(HAVE_DECL_PPPOL2TP_SO_RECVSEQ) && HAVE_DECL_PPPOL2TP_SO_RECVSEQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PPPOL2TP_SO_RECVSEQ) == (2), "PPPOL2TP_SO_RECVSEQ != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PPPOL2TP_SO_RECVSEQ 2
#endif
#if defined(PPPOL2TP_SO_SENDSEQ) || (defined(HAVE_DECL_PPPOL2TP_SO_SENDSEQ) && HAVE_DECL_PPPOL2TP_SO_SENDSEQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PPPOL2TP_SO_SENDSEQ) == (3), "PPPOL2TP_SO_SENDSEQ != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PPPOL2TP_SO_SENDSEQ 3
#endif
#if defined(PPPOL2TP_SO_LNSMODE) || (defined(HAVE_DECL_PPPOL2TP_SO_LNSMODE) && HAVE_DECL_PPPOL2TP_SO_LNSMODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PPPOL2TP_SO_LNSMODE) == (4), "PPPOL2TP_SO_LNSMODE != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PPPOL2TP_SO_LNSMODE 4
#endif
#if defined(PPPOL2TP_SO_REORDERTO) || (defined(HAVE_DECL_PPPOL2TP_SO_REORDERTO) && HAVE_DECL_PPPOL2TP_SO_REORDERTO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PPPOL2TP_SO_REORDERTO) == (5), "PPPOL2TP_SO_REORDERTO != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PPPOL2TP_SO_REORDERTO 5
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_pppol2tp_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_pppol2tp_options_xdata[] = {
 [PPPOL2TP_SO_DEBUG] = XLAT(PPPOL2TP_SO_DEBUG),
 #define XLAT_VAL_0 ((unsigned) (PPPOL2TP_SO_DEBUG))
 #define XLAT_STR_0 STRINGIFY(PPPOL2TP_SO_DEBUG)
 [PPPOL2TP_SO_RECVSEQ] = XLAT(PPPOL2TP_SO_RECVSEQ),
 #define XLAT_VAL_1 ((unsigned) (PPPOL2TP_SO_RECVSEQ))
 #define XLAT_STR_1 STRINGIFY(PPPOL2TP_SO_RECVSEQ)
 [PPPOL2TP_SO_SENDSEQ] = XLAT(PPPOL2TP_SO_SENDSEQ),
 #define XLAT_VAL_2 ((unsigned) (PPPOL2TP_SO_SENDSEQ))
 #define XLAT_STR_2 STRINGIFY(PPPOL2TP_SO_SENDSEQ)
 [PPPOL2TP_SO_LNSMODE] = XLAT(PPPOL2TP_SO_LNSMODE),
 #define XLAT_VAL_3 ((unsigned) (PPPOL2TP_SO_LNSMODE))
 #define XLAT_STR_3 STRINGIFY(PPPOL2TP_SO_LNSMODE)
 [PPPOL2TP_SO_REORDERTO] = XLAT(PPPOL2TP_SO_REORDERTO),
 #define XLAT_VAL_4 ((unsigned) (PPPOL2TP_SO_REORDERTO))
 #define XLAT_STR_4 STRINGIFY(PPPOL2TP_SO_REORDERTO)
};
static
const struct xlat sock_pppol2tp_options[1] = { {
 .data = sock_pppol2tp_options_xdata,
 .size = ARRAY_SIZE(sock_pppol2tp_options_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
