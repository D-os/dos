/* Generated by ./src/xlat/gen.sh from ./src/xlat/evdev_switch.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat evdev_switch in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data evdev_switch_xdata[] = {
 [SW_LID] = XLAT(SW_LID),
 #define XLAT_VAL_0 ((unsigned) (SW_LID))
 #define XLAT_STR_0 STRINGIFY(SW_LID)
 [SW_TABLET_MODE] = XLAT(SW_TABLET_MODE),
 #define XLAT_VAL_1 ((unsigned) (SW_TABLET_MODE))
 #define XLAT_STR_1 STRINGIFY(SW_TABLET_MODE)
 [SW_HEADPHONE_INSERT] = XLAT(SW_HEADPHONE_INSERT),
 #define XLAT_VAL_2 ((unsigned) (SW_HEADPHONE_INSERT))
 #define XLAT_STR_2 STRINGIFY(SW_HEADPHONE_INSERT)
 [SW_RFKILL_ALL] = XLAT(SW_RFKILL_ALL),
 #define XLAT_VAL_3 ((unsigned) (SW_RFKILL_ALL))
 #define XLAT_STR_3 STRINGIFY(SW_RFKILL_ALL)
 [SW_MICROPHONE_INSERT] = XLAT(SW_MICROPHONE_INSERT),
 #define XLAT_VAL_4 ((unsigned) (SW_MICROPHONE_INSERT))
 #define XLAT_STR_4 STRINGIFY(SW_MICROPHONE_INSERT)
 [SW_DOCK] = XLAT(SW_DOCK),
 #define XLAT_VAL_5 ((unsigned) (SW_DOCK))
 #define XLAT_STR_5 STRINGIFY(SW_DOCK)
 [SW_LINEOUT_INSERT] = XLAT(SW_LINEOUT_INSERT),
 #define XLAT_VAL_6 ((unsigned) (SW_LINEOUT_INSERT))
 #define XLAT_STR_6 STRINGIFY(SW_LINEOUT_INSERT)
 [SW_JACK_PHYSICAL_INSERT] = XLAT(SW_JACK_PHYSICAL_INSERT),
 #define XLAT_VAL_7 ((unsigned) (SW_JACK_PHYSICAL_INSERT))
 #define XLAT_STR_7 STRINGIFY(SW_JACK_PHYSICAL_INSERT)
 [SW_VIDEOOUT_INSERT] = XLAT(SW_VIDEOOUT_INSERT),
 #define XLAT_VAL_8 ((unsigned) (SW_VIDEOOUT_INSERT))
 #define XLAT_STR_8 STRINGIFY(SW_VIDEOOUT_INSERT)
 [SW_CAMERA_LENS_COVER] = XLAT(SW_CAMERA_LENS_COVER),
 #define XLAT_VAL_9 ((unsigned) (SW_CAMERA_LENS_COVER))
 #define XLAT_STR_9 STRINGIFY(SW_CAMERA_LENS_COVER)
 [SW_KEYPAD_SLIDE] = XLAT(SW_KEYPAD_SLIDE),
 #define XLAT_VAL_10 ((unsigned) (SW_KEYPAD_SLIDE))
 #define XLAT_STR_10 STRINGIFY(SW_KEYPAD_SLIDE)
 [SW_FRONT_PROXIMITY] = XLAT(SW_FRONT_PROXIMITY),
 #define XLAT_VAL_11 ((unsigned) (SW_FRONT_PROXIMITY))
 #define XLAT_STR_11 STRINGIFY(SW_FRONT_PROXIMITY)
 [SW_ROTATE_LOCK] = XLAT(SW_ROTATE_LOCK),
 #define XLAT_VAL_12 ((unsigned) (SW_ROTATE_LOCK))
 #define XLAT_STR_12 STRINGIFY(SW_ROTATE_LOCK)
 [SW_LINEIN_INSERT] = XLAT(SW_LINEIN_INSERT),
 #define XLAT_VAL_13 ((unsigned) (SW_LINEIN_INSERT))
 #define XLAT_STR_13 STRINGIFY(SW_LINEIN_INSERT)
 [SW_MUTE_DEVICE] = XLAT(SW_MUTE_DEVICE),
 #define XLAT_VAL_14 ((unsigned) (SW_MUTE_DEVICE))
 #define XLAT_STR_14 STRINGIFY(SW_MUTE_DEVICE)
 [SW_PEN_INSERTED] = XLAT(SW_PEN_INSERTED),
 #define XLAT_VAL_15 ((unsigned) (SW_PEN_INSERTED))
 #define XLAT_STR_15 STRINGIFY(SW_PEN_INSERTED)
};
static
const struct xlat evdev_switch[1] = { {
 .data = evdev_switch_xdata,
 .size = ARRAY_SIZE(evdev_switch_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
