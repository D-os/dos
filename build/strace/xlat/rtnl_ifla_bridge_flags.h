/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtnl_ifla_bridge_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_FLAGS_MASTER) == (1), "BRIDGE_FLAGS_MASTER != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_FLAGS_SELF) == (2), "BRIDGE_FLAGS_SELF != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_ifla_bridge_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtnl_ifla_bridge_flags_xdata[] = {
 XLAT(BRIDGE_FLAGS_MASTER),
 #define XLAT_VAL_0 ((unsigned) (BRIDGE_FLAGS_MASTER))
 #define XLAT_STR_0 STRINGIFY(BRIDGE_FLAGS_MASTER)
 XLAT(BRIDGE_FLAGS_SELF),
 #define XLAT_VAL_1 ((unsigned) (BRIDGE_FLAGS_SELF))
 #define XLAT_STR_1 STRINGIFY(BRIDGE_FLAGS_SELF)
};
static
const struct xlat rtnl_ifla_bridge_flags[1] = { {
 .data = rtnl_ifla_bridge_flags_xdata,
 .size = ARRAY_SIZE(rtnl_ifla_bridge_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
