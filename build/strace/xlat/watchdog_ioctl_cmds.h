/* Generated by ./src/xlat/gen.sh from ./src/xlat/watchdog_ioctl_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(WDIOC_GETSTATUS) || (defined(HAVE_DECL_WDIOC_GETSTATUS) && HAVE_DECL_WDIOC_GETSTATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETSTATUS) == (_IOR('W', 1, int)), "WDIOC_GETSTATUS != _IOR('W', 1, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETSTATUS _IOR('W', 1, int)
#endif
#if defined(WDIOC_GETBOOTSTATUS) || (defined(HAVE_DECL_WDIOC_GETBOOTSTATUS) && HAVE_DECL_WDIOC_GETBOOTSTATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETBOOTSTATUS) == (_IOR('W', 2, int)), "WDIOC_GETBOOTSTATUS != _IOR('W', 2, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETBOOTSTATUS _IOR('W', 2, int)
#endif
#if defined(WDIOC_GETTEMP) || (defined(HAVE_DECL_WDIOC_GETTEMP) && HAVE_DECL_WDIOC_GETTEMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETTEMP) == (_IOR('W', 3, int)), "WDIOC_GETTEMP != _IOR('W', 3, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETTEMP _IOR('W', 3, int)
#endif
#if defined(WDIOC_GETTIMEOUT) || (defined(HAVE_DECL_WDIOC_GETTIMEOUT) && HAVE_DECL_WDIOC_GETTIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETTIMEOUT) == (_IOR('W', 7, int)), "WDIOC_GETTIMEOUT != _IOR('W', 7, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETTIMEOUT _IOR('W', 7, int)
#endif
#if defined(WDIOC_GETPRETIMEOUT) || (defined(HAVE_DECL_WDIOC_GETPRETIMEOUT) && HAVE_DECL_WDIOC_GETPRETIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETPRETIMEOUT) == (_IOR('W', 9, int)), "WDIOC_GETPRETIMEOUT != _IOR('W', 9, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETPRETIMEOUT _IOR('W', 9, int)
#endif
#if defined(WDIOC_GETTIMELEFT) || (defined(HAVE_DECL_WDIOC_GETTIMELEFT) && HAVE_DECL_WDIOC_GETTIMELEFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_GETTIMELEFT) == (_IOR('W', 10, int)), "WDIOC_GETTIMELEFT != _IOR('W', 10, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_GETTIMELEFT _IOR('W', 10, int)
#endif
#if defined(WDIOC_SETOPTIONS) || (defined(HAVE_DECL_WDIOC_SETOPTIONS) && HAVE_DECL_WDIOC_SETOPTIONS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_SETOPTIONS) == (_IOR('W', 4, int)), "WDIOC_SETOPTIONS != _IOR('W', 4, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_SETOPTIONS _IOR('W', 4, int)
#endif
#if defined(WDIOC_KEEPALIVE) || (defined(HAVE_DECL_WDIOC_KEEPALIVE) && HAVE_DECL_WDIOC_KEEPALIVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_KEEPALIVE) == (_IOR('W', 5, int)), "WDIOC_KEEPALIVE != _IOR('W', 5, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_KEEPALIVE _IOR('W', 5, int)
#endif
#if defined(WDIOC_SETTIMEOUT) || (defined(HAVE_DECL_WDIOC_SETTIMEOUT) && HAVE_DECL_WDIOC_SETTIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_SETTIMEOUT) == (_IOWR('W', 6, int)), "WDIOC_SETTIMEOUT != _IOWR('W', 6, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_SETTIMEOUT _IOWR('W', 6, int)
#endif
#if defined(WDIOC_SETPRETIMEOUT) || (defined(HAVE_DECL_WDIOC_SETPRETIMEOUT) && HAVE_DECL_WDIOC_SETPRETIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((WDIOC_SETPRETIMEOUT) == (_IOWR('W', 8, int)), "WDIOC_SETPRETIMEOUT != _IOWR('W', 8, int)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define WDIOC_SETPRETIMEOUT _IOWR('W', 8, int)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat watchdog_ioctl_cmds in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data watchdog_ioctl_cmds_xdata[] = {
 XLAT(WDIOC_GETSTATUS),
 #define XLAT_VAL_0 ((unsigned) (WDIOC_GETSTATUS))
 #define XLAT_STR_0 STRINGIFY(WDIOC_GETSTATUS)
 XLAT(WDIOC_GETBOOTSTATUS),
 #define XLAT_VAL_1 ((unsigned) (WDIOC_GETBOOTSTATUS))
 #define XLAT_STR_1 STRINGIFY(WDIOC_GETBOOTSTATUS)
 XLAT(WDIOC_GETTEMP),
 #define XLAT_VAL_2 ((unsigned) (WDIOC_GETTEMP))
 #define XLAT_STR_2 STRINGIFY(WDIOC_GETTEMP)
 XLAT(WDIOC_GETTIMEOUT),
 #define XLAT_VAL_3 ((unsigned) (WDIOC_GETTIMEOUT))
 #define XLAT_STR_3 STRINGIFY(WDIOC_GETTIMEOUT)
 XLAT(WDIOC_GETPRETIMEOUT),
 #define XLAT_VAL_4 ((unsigned) (WDIOC_GETPRETIMEOUT))
 #define XLAT_STR_4 STRINGIFY(WDIOC_GETPRETIMEOUT)
 XLAT(WDIOC_GETTIMELEFT),
 #define XLAT_VAL_5 ((unsigned) (WDIOC_GETTIMELEFT))
 #define XLAT_STR_5 STRINGIFY(WDIOC_GETTIMELEFT)
 XLAT(WDIOC_SETOPTIONS),
 #define XLAT_VAL_6 ((unsigned) (WDIOC_SETOPTIONS))
 #define XLAT_STR_6 STRINGIFY(WDIOC_SETOPTIONS)
 XLAT(WDIOC_KEEPALIVE),
 #define XLAT_VAL_7 ((unsigned) (WDIOC_KEEPALIVE))
 #define XLAT_STR_7 STRINGIFY(WDIOC_KEEPALIVE)
 XLAT(WDIOC_SETTIMEOUT),
 #define XLAT_VAL_8 ((unsigned) (WDIOC_SETTIMEOUT))
 #define XLAT_STR_8 STRINGIFY(WDIOC_SETTIMEOUT)
 XLAT(WDIOC_SETPRETIMEOUT),
 #define XLAT_VAL_9 ((unsigned) (WDIOC_SETPRETIMEOUT))
 #define XLAT_STR_9 STRINGIFY(WDIOC_SETPRETIMEOUT)
};
static
const struct xlat watchdog_ioctl_cmds[1] = { {
 .data = watchdog_ioctl_cmds_xdata,
 .size = ARRAY_SIZE(watchdog_ioctl_cmds_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
