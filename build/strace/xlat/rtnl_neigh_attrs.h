/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtnl_neigh_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_neigh_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtnl_neigh_attrs_xdata[] = {
 [NDA_UNSPEC] = XLAT(NDA_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (NDA_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(NDA_UNSPEC)
 [NDA_DST] = XLAT(NDA_DST),
 #define XLAT_VAL_1 ((unsigned) (NDA_DST))
 #define XLAT_STR_1 STRINGIFY(NDA_DST)
 [NDA_LLADDR] = XLAT(NDA_LLADDR),
 #define XLAT_VAL_2 ((unsigned) (NDA_LLADDR))
 #define XLAT_STR_2 STRINGIFY(NDA_LLADDR)
 [NDA_CACHEINFO] = XLAT(NDA_CACHEINFO),
 #define XLAT_VAL_3 ((unsigned) (NDA_CACHEINFO))
 #define XLAT_STR_3 STRINGIFY(NDA_CACHEINFO)
 [NDA_PROBES] = XLAT(NDA_PROBES),
 #define XLAT_VAL_4 ((unsigned) (NDA_PROBES))
 #define XLAT_STR_4 STRINGIFY(NDA_PROBES)
 [NDA_VLAN] = XLAT(NDA_VLAN),
 #define XLAT_VAL_5 ((unsigned) (NDA_VLAN))
 #define XLAT_STR_5 STRINGIFY(NDA_VLAN)
 [NDA_PORT] = XLAT(NDA_PORT),
 #define XLAT_VAL_6 ((unsigned) (NDA_PORT))
 #define XLAT_STR_6 STRINGIFY(NDA_PORT)
 [NDA_VNI] = XLAT(NDA_VNI),
 #define XLAT_VAL_7 ((unsigned) (NDA_VNI))
 #define XLAT_STR_7 STRINGIFY(NDA_VNI)
 [NDA_IFINDEX] = XLAT(NDA_IFINDEX),
 #define XLAT_VAL_8 ((unsigned) (NDA_IFINDEX))
 #define XLAT_STR_8 STRINGIFY(NDA_IFINDEX)
 [NDA_MASTER] = XLAT(NDA_MASTER),
 #define XLAT_VAL_9 ((unsigned) (NDA_MASTER))
 #define XLAT_STR_9 STRINGIFY(NDA_MASTER)
 [NDA_LINK_NETNSID] = XLAT(NDA_LINK_NETNSID),
 #define XLAT_VAL_10 ((unsigned) (NDA_LINK_NETNSID))
 #define XLAT_STR_10 STRINGIFY(NDA_LINK_NETNSID)
 [NDA_SRC_VNI] = XLAT(NDA_SRC_VNI),
 #define XLAT_VAL_11 ((unsigned) (NDA_SRC_VNI))
 #define XLAT_STR_11 STRINGIFY(NDA_SRC_VNI)
 [NDA_PROTOCOL] = XLAT(NDA_PROTOCOL),
 #define XLAT_VAL_12 ((unsigned) (NDA_PROTOCOL))
 #define XLAT_STR_12 STRINGIFY(NDA_PROTOCOL)
 [NDA_NH_ID] = XLAT(NDA_NH_ID),
 #define XLAT_VAL_13 ((unsigned) (NDA_NH_ID))
 #define XLAT_STR_13 STRINGIFY(NDA_NH_ID)
 [NDA_FDB_EXT_ATTRS] = XLAT(NDA_FDB_EXT_ATTRS),
 #define XLAT_VAL_14 ((unsigned) (NDA_FDB_EXT_ATTRS))
 #define XLAT_STR_14 STRINGIFY(NDA_FDB_EXT_ATTRS)
 [NDA_FLAGS_EXT] = XLAT(NDA_FLAGS_EXT),
 #define XLAT_VAL_15 ((unsigned) (NDA_FLAGS_EXT))
 #define XLAT_STR_15 STRINGIFY(NDA_FLAGS_EXT)
 [NDA_NDM_STATE_MASK] = XLAT(NDA_NDM_STATE_MASK),
 #define XLAT_VAL_16 ((unsigned) (NDA_NDM_STATE_MASK))
 #define XLAT_STR_16 STRINGIFY(NDA_NDM_STATE_MASK)
 [NDA_NDM_FLAGS_MASK] = XLAT(NDA_NDM_FLAGS_MASK),
 #define XLAT_VAL_17 ((unsigned) (NDA_NDM_FLAGS_MASK))
 #define XLAT_STR_17 STRINGIFY(NDA_NDM_FLAGS_MASK)
};
static
const struct xlat rtnl_neigh_attrs[1] = { {
 .data = rtnl_neigh_attrs_xdata,
 .size = ARRAY_SIZE(rtnl_neigh_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
