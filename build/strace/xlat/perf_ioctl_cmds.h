/* Generated by ./src/xlat/gen.sh from ./src/xlat/perf_ioctl_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PERF_EVENT_IOC_ENABLE) || (defined(HAVE_DECL_PERF_EVENT_IOC_ENABLE) && HAVE_DECL_PERF_EVENT_IOC_ENABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_ENABLE) == (_IO ('$', 0)), "PERF_EVENT_IOC_ENABLE != _IO ('$', 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_ENABLE _IO ('$', 0)
#endif
#if defined(PERF_EVENT_IOC_DISABLE) || (defined(HAVE_DECL_PERF_EVENT_IOC_DISABLE) && HAVE_DECL_PERF_EVENT_IOC_DISABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_DISABLE) == (_IO ('$', 1)), "PERF_EVENT_IOC_DISABLE != _IO ('$', 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_DISABLE _IO ('$', 1)
#endif
#if defined(PERF_EVENT_IOC_REFRESH) || (defined(HAVE_DECL_PERF_EVENT_IOC_REFRESH) && HAVE_DECL_PERF_EVENT_IOC_REFRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_REFRESH) == (_IO ('$', 2)), "PERF_EVENT_IOC_REFRESH != _IO ('$', 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_REFRESH _IO ('$', 2)
#endif
#if defined(PERF_EVENT_IOC_RESET) || (defined(HAVE_DECL_PERF_EVENT_IOC_RESET) && HAVE_DECL_PERF_EVENT_IOC_RESET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_RESET) == (_IO ('$', 3)), "PERF_EVENT_IOC_RESET != _IO ('$', 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_RESET _IO ('$', 3)
#endif
#if defined(PERF_EVENT_IOC_PERIOD) || (defined(HAVE_DECL_PERF_EVENT_IOC_PERIOD) && HAVE_DECL_PERF_EVENT_IOC_PERIOD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_PERIOD) == (_IOW('$', 4, uint64_t)), "PERF_EVENT_IOC_PERIOD != _IOW('$', 4, uint64_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_PERIOD _IOW('$', 4, uint64_t)
#endif
#if defined(PERF_EVENT_IOC_SET_OUTPUT) || (defined(HAVE_DECL_PERF_EVENT_IOC_SET_OUTPUT) && HAVE_DECL_PERF_EVENT_IOC_SET_OUTPUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_SET_OUTPUT) == (_IO ('$', 5)), "PERF_EVENT_IOC_SET_OUTPUT != _IO ('$', 5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_SET_OUTPUT _IO ('$', 5)
#endif
#if defined(PERF_EVENT_IOC_SET_FILTER) || (defined(HAVE_DECL_PERF_EVENT_IOC_SET_FILTER) && HAVE_DECL_PERF_EVENT_IOC_SET_FILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_SET_FILTER) == (_IOW('$', 6, char *)), "PERF_EVENT_IOC_SET_FILTER != _IOW('$', 6, char *)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_SET_FILTER _IOW('$', 6, char *)
#endif
#if defined(PERF_EVENT_IOC_ID) || (defined(HAVE_DECL_PERF_EVENT_IOC_ID) && HAVE_DECL_PERF_EVENT_IOC_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_ID) == (_IOR('$', 7, uint64_t *)), "PERF_EVENT_IOC_ID != _IOR('$', 7, uint64_t *)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_ID _IOR('$', 7, uint64_t *)
#endif
#if defined(PERF_EVENT_IOC_SET_BPF) || (defined(HAVE_DECL_PERF_EVENT_IOC_SET_BPF) && HAVE_DECL_PERF_EVENT_IOC_SET_BPF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_SET_BPF) == (_IOW('$', 8, uint32_t)), "PERF_EVENT_IOC_SET_BPF != _IOW('$', 8, uint32_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_SET_BPF _IOW('$', 8, uint32_t)
#endif
#if defined(PERF_EVENT_IOC_PAUSE_OUTPUT) || (defined(HAVE_DECL_PERF_EVENT_IOC_PAUSE_OUTPUT) && HAVE_DECL_PERF_EVENT_IOC_PAUSE_OUTPUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_PAUSE_OUTPUT) == (_IOW('$', 9, uint32_t)), "PERF_EVENT_IOC_PAUSE_OUTPUT != _IOW('$', 9, uint32_t)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_PAUSE_OUTPUT _IOW('$', 9, uint32_t)
#endif
#if defined(PERF_EVENT_IOC_QUERY_BPF) || (defined(HAVE_DECL_PERF_EVENT_IOC_QUERY_BPF) && HAVE_DECL_PERF_EVENT_IOC_QUERY_BPF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_QUERY_BPF) == (_IOWR('$', 10, struct perf_event_query_bpf *)), "PERF_EVENT_IOC_QUERY_BPF != _IOWR('$', 10, struct perf_event_query_bpf *)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_QUERY_BPF _IOWR('$', 10, struct perf_event_query_bpf *)
#endif
#if defined(PERF_EVENT_IOC_MODIFY_ATTRIBUTES) || (defined(HAVE_DECL_PERF_EVENT_IOC_MODIFY_ATTRIBUTES) && HAVE_DECL_PERF_EVENT_IOC_MODIFY_ATTRIBUTES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_EVENT_IOC_MODIFY_ATTRIBUTES) == (_IOW('$', 11, struct perf_event_attr *)), "PERF_EVENT_IOC_MODIFY_ATTRIBUTES != _IOW('$', 11, struct perf_event_attr *)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_EVENT_IOC_MODIFY_ATTRIBUTES _IOW('$', 11, struct perf_event_attr *)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat perf_ioctl_cmds[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data perf_ioctl_cmds_xdata[] = {
 XLAT(PERF_EVENT_IOC_ENABLE),
 #define XLAT_VAL_0 ((unsigned) (PERF_EVENT_IOC_ENABLE))
 #define XLAT_STR_0 STRINGIFY(PERF_EVENT_IOC_ENABLE)
 XLAT(PERF_EVENT_IOC_DISABLE),
 #define XLAT_VAL_1 ((unsigned) (PERF_EVENT_IOC_DISABLE))
 #define XLAT_STR_1 STRINGIFY(PERF_EVENT_IOC_DISABLE)
 XLAT(PERF_EVENT_IOC_REFRESH),
 #define XLAT_VAL_2 ((unsigned) (PERF_EVENT_IOC_REFRESH))
 #define XLAT_STR_2 STRINGIFY(PERF_EVENT_IOC_REFRESH)
 XLAT(PERF_EVENT_IOC_RESET),
 #define XLAT_VAL_3 ((unsigned) (PERF_EVENT_IOC_RESET))
 #define XLAT_STR_3 STRINGIFY(PERF_EVENT_IOC_RESET)
 XLAT(PERF_EVENT_IOC_PERIOD),
 #define XLAT_VAL_4 ((unsigned) (PERF_EVENT_IOC_PERIOD))
 #define XLAT_STR_4 STRINGIFY(PERF_EVENT_IOC_PERIOD)
 XLAT(PERF_EVENT_IOC_SET_OUTPUT),
 #define XLAT_VAL_5 ((unsigned) (PERF_EVENT_IOC_SET_OUTPUT))
 #define XLAT_STR_5 STRINGIFY(PERF_EVENT_IOC_SET_OUTPUT)
 XLAT(PERF_EVENT_IOC_SET_FILTER),
 #define XLAT_VAL_6 ((unsigned) (PERF_EVENT_IOC_SET_FILTER))
 #define XLAT_STR_6 STRINGIFY(PERF_EVENT_IOC_SET_FILTER)
 XLAT(PERF_EVENT_IOC_ID),
 #define XLAT_VAL_7 ((unsigned) (PERF_EVENT_IOC_ID))
 #define XLAT_STR_7 STRINGIFY(PERF_EVENT_IOC_ID)
 XLAT(PERF_EVENT_IOC_SET_BPF),
 #define XLAT_VAL_8 ((unsigned) (PERF_EVENT_IOC_SET_BPF))
 #define XLAT_STR_8 STRINGIFY(PERF_EVENT_IOC_SET_BPF)
 XLAT(PERF_EVENT_IOC_PAUSE_OUTPUT),
 #define XLAT_VAL_9 ((unsigned) (PERF_EVENT_IOC_PAUSE_OUTPUT))
 #define XLAT_STR_9 STRINGIFY(PERF_EVENT_IOC_PAUSE_OUTPUT)
 XLAT(PERF_EVENT_IOC_QUERY_BPF),
 #define XLAT_VAL_10 ((unsigned) (PERF_EVENT_IOC_QUERY_BPF))
 #define XLAT_STR_10 STRINGIFY(PERF_EVENT_IOC_QUERY_BPF)
 XLAT(PERF_EVENT_IOC_MODIFY_ATTRIBUTES),
 #define XLAT_VAL_11 ((unsigned) (PERF_EVENT_IOC_MODIFY_ATTRIBUTES))
 #define XLAT_STR_11 STRINGIFY(PERF_EVENT_IOC_MODIFY_ATTRIBUTES)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat perf_ioctl_cmds[1] = { {
 .data = perf_ioctl_cmds_xdata,
 .size = ARRAY_SIZE(perf_ioctl_cmds_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
