/* Generated by ./src/xlat/gen.sh from ./src/xlat/sigsegv_codes.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SEGV_MAPERR) || (defined(HAVE_DECL_SEGV_MAPERR) && HAVE_DECL_SEGV_MAPERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEGV_MAPERR) == (1), "SEGV_MAPERR != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEGV_MAPERR 1
#endif
#if defined(SEGV_ACCERR) || (defined(HAVE_DECL_SEGV_ACCERR) && HAVE_DECL_SEGV_ACCERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEGV_ACCERR) == (2), "SEGV_ACCERR != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEGV_ACCERR 2
#endif
#if defined(SEGV_BNDERR) || (defined(HAVE_DECL_SEGV_BNDERR) && HAVE_DECL_SEGV_BNDERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEGV_BNDERR) == (3), "SEGV_BNDERR != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEGV_BNDERR 3
#endif
#if defined(SEGV_PKUERR) || (defined(HAVE_DECL_SEGV_PKUERR) && HAVE_DECL_SEGV_PKUERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEGV_PKUERR) == (4), "SEGV_PKUERR != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEGV_PKUERR 4
#endif
#if defined(SEGV_ACCADI) || (defined(HAVE_DECL_SEGV_ACCADI) && HAVE_DECL_SEGV_ACCADI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEGV_ACCADI) == (5), "SEGV_ACCADI != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEGV_ACCADI 5
#endif
#if defined(SEGV_ADIDERR) || (defined(HAVE_DECL_SEGV_ADIDERR) && HAVE_DECL_SEGV_ADIDERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEGV_ADIDERR) == (6), "SEGV_ADIDERR != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEGV_ADIDERR 6
#endif
#if defined(SEGV_ADIPERR) || (defined(HAVE_DECL_SEGV_ADIPERR) && HAVE_DECL_SEGV_ADIPERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEGV_ADIPERR) == (7), "SEGV_ADIPERR != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEGV_ADIPERR 7
#endif
#if defined(SEGV_MTEAERR) || (defined(HAVE_DECL_SEGV_MTEAERR) && HAVE_DECL_SEGV_MTEAERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEGV_MTEAERR) == (8), "SEGV_MTEAERR != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEGV_MTEAERR 8
#endif
#if defined(SEGV_MTESERR) || (defined(HAVE_DECL_SEGV_MTESERR) && HAVE_DECL_SEGV_MTESERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEGV_MTESERR) == (9), "SEGV_MTESERR != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEGV_MTESERR 9
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat sigsegv_codes[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sigsegv_codes_xdata[] = {
 XLAT(SEGV_MAPERR),
 #define XLAT_VAL_0 ((unsigned) (SEGV_MAPERR))
 #define XLAT_STR_0 STRINGIFY(SEGV_MAPERR)
 XLAT(SEGV_ACCERR),
 #define XLAT_VAL_1 ((unsigned) (SEGV_ACCERR))
 #define XLAT_STR_1 STRINGIFY(SEGV_ACCERR)
#if defined(SEGV_STACKFLOW) || (defined(HAVE_DECL_SEGV_STACKFLOW) && HAVE_DECL_SEGV_STACKFLOW)
  XLAT(SEGV_STACKFLOW),
 #define XLAT_VAL_2 ((unsigned) (SEGV_STACKFLOW))
 #define XLAT_STR_2 STRINGIFY(SEGV_STACKFLOW)
#endif
 XLAT(SEGV_BNDERR),
 #define XLAT_VAL_3 ((unsigned) (SEGV_BNDERR))
 #define XLAT_STR_3 STRINGIFY(SEGV_BNDERR)
#if defined(__SEGV_PSTKOVF) || (defined(HAVE_DECL___SEGV_PSTKOVF) && HAVE_DECL___SEGV_PSTKOVF)
  XLAT(__SEGV_PSTKOVF),
 #define XLAT_VAL_4 ((unsigned) (__SEGV_PSTKOVF))
 #define XLAT_STR_4 STRINGIFY(__SEGV_PSTKOVF)
#endif
 XLAT(SEGV_PKUERR),
 #define XLAT_VAL_5 ((unsigned) (SEGV_PKUERR))
 #define XLAT_STR_5 STRINGIFY(SEGV_PKUERR)
 XLAT(SEGV_ACCADI),
 #define XLAT_VAL_6 ((unsigned) (SEGV_ACCADI))
 #define XLAT_STR_6 STRINGIFY(SEGV_ACCADI)
 XLAT(SEGV_ADIDERR),
 #define XLAT_VAL_7 ((unsigned) (SEGV_ADIDERR))
 #define XLAT_STR_7 STRINGIFY(SEGV_ADIDERR)
 XLAT(SEGV_ADIPERR),
 #define XLAT_VAL_8 ((unsigned) (SEGV_ADIPERR))
 #define XLAT_STR_8 STRINGIFY(SEGV_ADIPERR)
 XLAT(SEGV_MTEAERR),
 #define XLAT_VAL_9 ((unsigned) (SEGV_MTEAERR))
 #define XLAT_STR_9 STRINGIFY(SEGV_MTEAERR)
 XLAT(SEGV_MTESERR),
 #define XLAT_VAL_10 ((unsigned) (SEGV_MTESERR))
 #define XLAT_STR_10 STRINGIFY(SEGV_MTESERR)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat sigsegv_codes[1] = { {
 .data = sigsegv_codes_xdata,
 .size = ARRAY_SIZE(sigsegv_codes_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
