/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_vsock_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_VM_SOCKETS_BUFFER_SIZE) == (0), "SO_VM_SOCKETS_BUFFER_SIZE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_VM_SOCKETS_BUFFER_MIN_SIZE) == (1), "SO_VM_SOCKETS_BUFFER_MIN_SIZE != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_VM_SOCKETS_BUFFER_MAX_SIZE) == (2), "SO_VM_SOCKETS_BUFFER_MAX_SIZE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_VM_SOCKETS_PEER_HOST_VM_ID) == (3), "SO_VM_SOCKETS_PEER_HOST_VM_ID != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_VM_SOCKETS_TRUSTED) == (5), "SO_VM_SOCKETS_TRUSTED != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_VM_SOCKETS_CONNECT_TIMEOUT_OLD) == (6), "SO_VM_SOCKETS_CONNECT_TIMEOUT_OLD != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_VM_SOCKETS_NONBLOCK_TXRX) == (7), "SO_VM_SOCKETS_NONBLOCK_TXRX != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_VM_SOCKETS_CONNECT_TIMEOUT_NEW) == (8), "SO_VM_SOCKETS_CONNECT_TIMEOUT_NEW != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_vsock_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_vsock_options_xdata[] = {
 [SO_VM_SOCKETS_BUFFER_SIZE] = XLAT(SO_VM_SOCKETS_BUFFER_SIZE),
 #define XLAT_VAL_0 ((unsigned) (SO_VM_SOCKETS_BUFFER_SIZE))
 #define XLAT_STR_0 STRINGIFY(SO_VM_SOCKETS_BUFFER_SIZE)
 [SO_VM_SOCKETS_BUFFER_MIN_SIZE] = XLAT(SO_VM_SOCKETS_BUFFER_MIN_SIZE),
 #define XLAT_VAL_1 ((unsigned) (SO_VM_SOCKETS_BUFFER_MIN_SIZE))
 #define XLAT_STR_1 STRINGIFY(SO_VM_SOCKETS_BUFFER_MIN_SIZE)
 [SO_VM_SOCKETS_BUFFER_MAX_SIZE] = XLAT(SO_VM_SOCKETS_BUFFER_MAX_SIZE),
 #define XLAT_VAL_2 ((unsigned) (SO_VM_SOCKETS_BUFFER_MAX_SIZE))
 #define XLAT_STR_2 STRINGIFY(SO_VM_SOCKETS_BUFFER_MAX_SIZE)
 [SO_VM_SOCKETS_PEER_HOST_VM_ID] = XLAT(SO_VM_SOCKETS_PEER_HOST_VM_ID),
 #define XLAT_VAL_3 ((unsigned) (SO_VM_SOCKETS_PEER_HOST_VM_ID))
 #define XLAT_STR_3 STRINGIFY(SO_VM_SOCKETS_PEER_HOST_VM_ID)
 [SO_VM_SOCKETS_TRUSTED] = XLAT(SO_VM_SOCKETS_TRUSTED),
 #define XLAT_VAL_4 ((unsigned) (SO_VM_SOCKETS_TRUSTED))
 #define XLAT_STR_4 STRINGIFY(SO_VM_SOCKETS_TRUSTED)
 [SO_VM_SOCKETS_CONNECT_TIMEOUT_OLD] = XLAT(SO_VM_SOCKETS_CONNECT_TIMEOUT_OLD),
 #define XLAT_VAL_5 ((unsigned) (SO_VM_SOCKETS_CONNECT_TIMEOUT_OLD))
 #define XLAT_STR_5 STRINGIFY(SO_VM_SOCKETS_CONNECT_TIMEOUT_OLD)
 [SO_VM_SOCKETS_NONBLOCK_TXRX] = XLAT(SO_VM_SOCKETS_NONBLOCK_TXRX),
 #define XLAT_VAL_6 ((unsigned) (SO_VM_SOCKETS_NONBLOCK_TXRX))
 #define XLAT_STR_6 STRINGIFY(SO_VM_SOCKETS_NONBLOCK_TXRX)
 [SO_VM_SOCKETS_CONNECT_TIMEOUT_NEW] = XLAT(SO_VM_SOCKETS_CONNECT_TIMEOUT_NEW),
 #define XLAT_VAL_7 ((unsigned) (SO_VM_SOCKETS_CONNECT_TIMEOUT_NEW))
 #define XLAT_STR_7 STRINGIFY(SO_VM_SOCKETS_CONNECT_TIMEOUT_NEW)
};
static
const struct xlat sock_vsock_options[1] = { {
 .data = sock_vsock_options_xdata,
 .size = ARRAY_SIZE(sock_vsock_options_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
