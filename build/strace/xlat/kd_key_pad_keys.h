/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_key_pad_keys.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(K_P0) || (defined(HAVE_DECL_K_P0) && HAVE_DECL_K_P0)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P0) == (K(KT_PAD,0)), "K_P0 != K(KT_PAD,0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P0 K(KT_PAD,0)
#endif
#if defined(K_P0) || (defined(HAVE_DECL_K_P0) && HAVE_DECL_K_P0)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P0)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P0"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P0)
#endif
#if defined(K_P1) || (defined(HAVE_DECL_K_P1) && HAVE_DECL_K_P1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P1) == (K(KT_PAD,1)), "K_P1 != K(KT_PAD,1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P1 K(KT_PAD,1)
#endif
#if defined(K_P1) || (defined(HAVE_DECL_K_P1) && HAVE_DECL_K_P1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P1)
#endif
#if defined(K_P2) || (defined(HAVE_DECL_K_P2) && HAVE_DECL_K_P2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P2) == (K(KT_PAD,2)), "K_P2 != K(KT_PAD,2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P2 K(KT_PAD,2)
#endif
#if defined(K_P2) || (defined(HAVE_DECL_K_P2) && HAVE_DECL_K_P2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P2)
#endif
#if defined(K_P3) || (defined(HAVE_DECL_K_P3) && HAVE_DECL_K_P3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P3) == (K(KT_PAD,3)), "K_P3 != K(KT_PAD,3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P3 K(KT_PAD,3)
#endif
#if defined(K_P3) || (defined(HAVE_DECL_K_P3) && HAVE_DECL_K_P3)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P3)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P3"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P3)
#endif
#if defined(K_P4) || (defined(HAVE_DECL_K_P4) && HAVE_DECL_K_P4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P4) == (K(KT_PAD,4)), "K_P4 != K(KT_PAD,4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P4 K(KT_PAD,4)
#endif
#if defined(K_P4) || (defined(HAVE_DECL_K_P4) && HAVE_DECL_K_P4)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P4)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P4"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P4)
#endif
#if defined(K_P5) || (defined(HAVE_DECL_K_P5) && HAVE_DECL_K_P5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P5) == (K(KT_PAD,5)), "K_P5 != K(KT_PAD,5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P5 K(KT_PAD,5)
#endif
#if defined(K_P5) || (defined(HAVE_DECL_K_P5) && HAVE_DECL_K_P5)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P5)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P5"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P5)
#endif
#if defined(K_P6) || (defined(HAVE_DECL_K_P6) && HAVE_DECL_K_P6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P6) == (K(KT_PAD,6)), "K_P6 != K(KT_PAD,6)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P6 K(KT_PAD,6)
#endif
#if defined(K_P6) || (defined(HAVE_DECL_K_P6) && HAVE_DECL_K_P6)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P6)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P6"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P6)
#endif
#if defined(K_P7) || (defined(HAVE_DECL_K_P7) && HAVE_DECL_K_P7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P7) == (K(KT_PAD,7)), "K_P7 != K(KT_PAD,7)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P7 K(KT_PAD,7)
#endif
#if defined(K_P7) || (defined(HAVE_DECL_K_P7) && HAVE_DECL_K_P7)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P7)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P7"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P7)
#endif
#if defined(K_P8) || (defined(HAVE_DECL_K_P8) && HAVE_DECL_K_P8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P8) == (K(KT_PAD,8)), "K_P8 != K(KT_PAD,8)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P8 K(KT_PAD,8)
#endif
#if defined(K_P8) || (defined(HAVE_DECL_K_P8) && HAVE_DECL_K_P8)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P8)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P8"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P8)
#endif
#if defined(K_P9) || (defined(HAVE_DECL_K_P9) && HAVE_DECL_K_P9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_P9) == (K(KT_PAD,9)), "K_P9 != K(KT_PAD,9)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_P9 K(KT_PAD,9)
#endif
#if defined(K_P9) || (defined(HAVE_DECL_K_P9) && HAVE_DECL_K_P9)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_P9)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_P9"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_P9)
#endif
#if defined(K_PPLUS) || (defined(HAVE_DECL_K_PPLUS) && HAVE_DECL_K_PPLUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PPLUS) == (K(KT_PAD,10)), "K_PPLUS != K(KT_PAD,10)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PPLUS K(KT_PAD,10)
#endif
#if defined(K_PPLUS) || (defined(HAVE_DECL_K_PPLUS) && HAVE_DECL_K_PPLUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PPLUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PPLUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PPLUS)
#endif
#if defined(K_PMINUS) || (defined(HAVE_DECL_K_PMINUS) && HAVE_DECL_K_PMINUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PMINUS) == (K(KT_PAD,11)), "K_PMINUS != K(KT_PAD,11)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PMINUS K(KT_PAD,11)
#endif
#if defined(K_PMINUS) || (defined(HAVE_DECL_K_PMINUS) && HAVE_DECL_K_PMINUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PMINUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PMINUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PMINUS)
#endif
#if defined(K_PSTAR) || (defined(HAVE_DECL_K_PSTAR) && HAVE_DECL_K_PSTAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PSTAR) == (K(KT_PAD,12)), "K_PSTAR != K(KT_PAD,12)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PSTAR K(KT_PAD,12)
#endif
#if defined(K_PSTAR) || (defined(HAVE_DECL_K_PSTAR) && HAVE_DECL_K_PSTAR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PSTAR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PSTAR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PSTAR)
#endif
#if defined(K_PSLASH) || (defined(HAVE_DECL_K_PSLASH) && HAVE_DECL_K_PSLASH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PSLASH) == (K(KT_PAD,13)), "K_PSLASH != K(KT_PAD,13)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PSLASH K(KT_PAD,13)
#endif
#if defined(K_PSLASH) || (defined(HAVE_DECL_K_PSLASH) && HAVE_DECL_K_PSLASH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PSLASH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PSLASH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PSLASH)
#endif
#if defined(K_PENTER) || (defined(HAVE_DECL_K_PENTER) && HAVE_DECL_K_PENTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PENTER) == (K(KT_PAD,14)), "K_PENTER != K(KT_PAD,14)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PENTER K(KT_PAD,14)
#endif
#if defined(K_PENTER) || (defined(HAVE_DECL_K_PENTER) && HAVE_DECL_K_PENTER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PENTER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PENTER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PENTER)
#endif
#if defined(K_PCOMMA) || (defined(HAVE_DECL_K_PCOMMA) && HAVE_DECL_K_PCOMMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PCOMMA) == (K(KT_PAD,15)), "K_PCOMMA != K(KT_PAD,15)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PCOMMA K(KT_PAD,15)
#endif
#if defined(K_PCOMMA) || (defined(HAVE_DECL_K_PCOMMA) && HAVE_DECL_K_PCOMMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PCOMMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PCOMMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PCOMMA)
#endif
#if defined(K_PDOT) || (defined(HAVE_DECL_K_PDOT) && HAVE_DECL_K_PDOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PDOT) == (K(KT_PAD,16)), "K_PDOT != K(KT_PAD,16)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PDOT K(KT_PAD,16)
#endif
#if defined(K_PDOT) || (defined(HAVE_DECL_K_PDOT) && HAVE_DECL_K_PDOT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PDOT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PDOT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PDOT)
#endif
#if defined(K_PPLUSMINUS) || (defined(HAVE_DECL_K_PPLUSMINUS) && HAVE_DECL_K_PPLUSMINUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PPLUSMINUS) == (K(KT_PAD,17)), "K_PPLUSMINUS != K(KT_PAD,17)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PPLUSMINUS K(KT_PAD,17)
#endif
#if defined(K_PPLUSMINUS) || (defined(HAVE_DECL_K_PPLUSMINUS) && HAVE_DECL_K_PPLUSMINUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PPLUSMINUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PPLUSMINUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PPLUSMINUS)
#endif
#if defined(K_PPARENL) || (defined(HAVE_DECL_K_PPARENL) && HAVE_DECL_K_PPARENL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PPARENL) == (K(KT_PAD,18)), "K_PPARENL != K(KT_PAD,18)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PPARENL K(KT_PAD,18)
#endif
#if defined(K_PPARENL) || (defined(HAVE_DECL_K_PPARENL) && HAVE_DECL_K_PPARENL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PPARENL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PPARENL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PPARENL)
#endif
#if defined(K_PPARENR) || (defined(HAVE_DECL_K_PPARENR) && HAVE_DECL_K_PPARENR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_PPARENR) == (K(KT_PAD,19)), "K_PPARENR != K(KT_PAD,19)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_PPARENR K(KT_PAD,19)
#endif
#if defined(K_PPARENR) || (defined(HAVE_DECL_K_PPARENR) && HAVE_DECL_K_PPARENR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_PPARENR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_PPARENR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_PPARENR)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat kd_key_pad_keys in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_key_pad_keys_xdata[] = {
 XLAT(K_P0),
 #define XLAT_VAL_0 ((unsigned) (K_P0))
 #define XLAT_STR_0 STRINGIFY(K_P0)
 XLAT(K_P1),
 #define XLAT_VAL_1 ((unsigned) (K_P1))
 #define XLAT_STR_1 STRINGIFY(K_P1)
 XLAT(K_P2),
 #define XLAT_VAL_2 ((unsigned) (K_P2))
 #define XLAT_STR_2 STRINGIFY(K_P2)
 XLAT(K_P3),
 #define XLAT_VAL_3 ((unsigned) (K_P3))
 #define XLAT_STR_3 STRINGIFY(K_P3)
 XLAT(K_P4),
 #define XLAT_VAL_4 ((unsigned) (K_P4))
 #define XLAT_STR_4 STRINGIFY(K_P4)
 XLAT(K_P5),
 #define XLAT_VAL_5 ((unsigned) (K_P5))
 #define XLAT_STR_5 STRINGIFY(K_P5)
 XLAT(K_P6),
 #define XLAT_VAL_6 ((unsigned) (K_P6))
 #define XLAT_STR_6 STRINGIFY(K_P6)
 XLAT(K_P7),
 #define XLAT_VAL_7 ((unsigned) (K_P7))
 #define XLAT_STR_7 STRINGIFY(K_P7)
 XLAT(K_P8),
 #define XLAT_VAL_8 ((unsigned) (K_P8))
 #define XLAT_STR_8 STRINGIFY(K_P8)
 XLAT(K_P9),
 #define XLAT_VAL_9 ((unsigned) (K_P9))
 #define XLAT_STR_9 STRINGIFY(K_P9)
 XLAT(K_PPLUS),
 #define XLAT_VAL_10 ((unsigned) (K_PPLUS))
 #define XLAT_STR_10 STRINGIFY(K_PPLUS)
 XLAT(K_PMINUS),
 #define XLAT_VAL_11 ((unsigned) (K_PMINUS))
 #define XLAT_STR_11 STRINGIFY(K_PMINUS)
 XLAT(K_PSTAR),
 #define XLAT_VAL_12 ((unsigned) (K_PSTAR))
 #define XLAT_STR_12 STRINGIFY(K_PSTAR)
 XLAT(K_PSLASH),
 #define XLAT_VAL_13 ((unsigned) (K_PSLASH))
 #define XLAT_STR_13 STRINGIFY(K_PSLASH)
 XLAT(K_PENTER),
 #define XLAT_VAL_14 ((unsigned) (K_PENTER))
 #define XLAT_STR_14 STRINGIFY(K_PENTER)
 XLAT(K_PCOMMA),
 #define XLAT_VAL_15 ((unsigned) (K_PCOMMA))
 #define XLAT_STR_15 STRINGIFY(K_PCOMMA)
 XLAT(K_PDOT),
 #define XLAT_VAL_16 ((unsigned) (K_PDOT))
 #define XLAT_STR_16 STRINGIFY(K_PDOT)
 XLAT(K_PPLUSMINUS),
 #define XLAT_VAL_17 ((unsigned) (K_PPLUSMINUS))
 #define XLAT_STR_17 STRINGIFY(K_PPLUSMINUS)
 XLAT(K_PPARENL),
 #define XLAT_VAL_18 ((unsigned) (K_PPARENL))
 #define XLAT_STR_18 STRINGIFY(K_PPARENL)
 XLAT(K_PPARENR),
 #define XLAT_VAL_19 ((unsigned) (K_PPARENR))
 #define XLAT_STR_19 STRINGIFY(K_PPARENR)
};
static
const struct xlat kd_key_pad_keys[1] = { {
 .data = kd_key_pad_keys_xdata,
 .size = ARRAY_SIZE(kd_key_pad_keys_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
