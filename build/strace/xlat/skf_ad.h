/* Generated by ./src/xlat/gen.sh from ./src/xlat/skf_ad.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SKF_AD_PROTOCOL) || (defined(HAVE_DECL_SKF_AD_PROTOCOL) && HAVE_DECL_SKF_AD_PROTOCOL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_PROTOCOL) == (0), "SKF_AD_PROTOCOL != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_PROTOCOL 0
#endif
#if defined(SKF_AD_PKTTYPE) || (defined(HAVE_DECL_SKF_AD_PKTTYPE) && HAVE_DECL_SKF_AD_PKTTYPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_PKTTYPE) == (4), "SKF_AD_PKTTYPE != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_PKTTYPE 4
#endif
#if defined(SKF_AD_IFINDEX) || (defined(HAVE_DECL_SKF_AD_IFINDEX) && HAVE_DECL_SKF_AD_IFINDEX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_IFINDEX) == (8), "SKF_AD_IFINDEX != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_IFINDEX 8
#endif
#if defined(SKF_AD_NLATTR) || (defined(HAVE_DECL_SKF_AD_NLATTR) && HAVE_DECL_SKF_AD_NLATTR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_NLATTR) == (12), "SKF_AD_NLATTR != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_NLATTR 12
#endif
#if defined(SKF_AD_NLATTR_NEST) || (defined(HAVE_DECL_SKF_AD_NLATTR_NEST) && HAVE_DECL_SKF_AD_NLATTR_NEST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_NLATTR_NEST) == (16), "SKF_AD_NLATTR_NEST != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_NLATTR_NEST 16
#endif
#if defined(SKF_AD_MARK) || (defined(HAVE_DECL_SKF_AD_MARK) && HAVE_DECL_SKF_AD_MARK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_MARK) == (20), "SKF_AD_MARK != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_MARK 20
#endif
#if defined(SKF_AD_QUEUE) || (defined(HAVE_DECL_SKF_AD_QUEUE) && HAVE_DECL_SKF_AD_QUEUE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_QUEUE) == (24), "SKF_AD_QUEUE != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_QUEUE 24
#endif
#if defined(SKF_AD_HATYPE) || (defined(HAVE_DECL_SKF_AD_HATYPE) && HAVE_DECL_SKF_AD_HATYPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_HATYPE) == (28), "SKF_AD_HATYPE != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_HATYPE 28
#endif
#if defined(SKF_AD_RXHASH) || (defined(HAVE_DECL_SKF_AD_RXHASH) && HAVE_DECL_SKF_AD_RXHASH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_RXHASH) == (32), "SKF_AD_RXHASH != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_RXHASH 32
#endif
#if defined(SKF_AD_CPU) || (defined(HAVE_DECL_SKF_AD_CPU) && HAVE_DECL_SKF_AD_CPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_CPU) == (36), "SKF_AD_CPU != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_CPU 36
#endif
#if defined(SKF_AD_ALU_XOR_X) || (defined(HAVE_DECL_SKF_AD_ALU_XOR_X) && HAVE_DECL_SKF_AD_ALU_XOR_X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_ALU_XOR_X) == (40), "SKF_AD_ALU_XOR_X != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_ALU_XOR_X 40
#endif
#if defined(SKF_AD_VLAN_TAG) || (defined(HAVE_DECL_SKF_AD_VLAN_TAG) && HAVE_DECL_SKF_AD_VLAN_TAG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_VLAN_TAG) == (44), "SKF_AD_VLAN_TAG != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_VLAN_TAG 44
#endif
#if defined(SKF_AD_VLAN_TAG_PRESENT) || (defined(HAVE_DECL_SKF_AD_VLAN_TAG_PRESENT) && HAVE_DECL_SKF_AD_VLAN_TAG_PRESENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_VLAN_TAG_PRESENT) == (48), "SKF_AD_VLAN_TAG_PRESENT != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_VLAN_TAG_PRESENT 48
#endif
#if defined(SKF_AD_PAY_OFFSET) || (defined(HAVE_DECL_SKF_AD_PAY_OFFSET) && HAVE_DECL_SKF_AD_PAY_OFFSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_PAY_OFFSET) == (52), "SKF_AD_PAY_OFFSET != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_PAY_OFFSET 52
#endif
#if defined(SKF_AD_RANDOM) || (defined(HAVE_DECL_SKF_AD_RANDOM) && HAVE_DECL_SKF_AD_RANDOM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_RANDOM) == (56), "SKF_AD_RANDOM != 56");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_RANDOM 56
#endif
#if defined(SKF_AD_VLAN_TPID) || (defined(HAVE_DECL_SKF_AD_VLAN_TPID) && HAVE_DECL_SKF_AD_VLAN_TPID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SKF_AD_VLAN_TPID) == (60), "SKF_AD_VLAN_TPID != 60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SKF_AD_VLAN_TPID 60
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat skf_ad in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data skf_ad_xdata[] = {
 XLAT(SKF_AD_PROTOCOL),
 #define XLAT_VAL_0 ((unsigned) (SKF_AD_PROTOCOL))
 #define XLAT_STR_0 STRINGIFY(SKF_AD_PROTOCOL)
 XLAT(SKF_AD_PKTTYPE),
 #define XLAT_VAL_1 ((unsigned) (SKF_AD_PKTTYPE))
 #define XLAT_STR_1 STRINGIFY(SKF_AD_PKTTYPE)
 XLAT(SKF_AD_IFINDEX),
 #define XLAT_VAL_2 ((unsigned) (SKF_AD_IFINDEX))
 #define XLAT_STR_2 STRINGIFY(SKF_AD_IFINDEX)
 XLAT(SKF_AD_NLATTR),
 #define XLAT_VAL_3 ((unsigned) (SKF_AD_NLATTR))
 #define XLAT_STR_3 STRINGIFY(SKF_AD_NLATTR)
 XLAT(SKF_AD_NLATTR_NEST),
 #define XLAT_VAL_4 ((unsigned) (SKF_AD_NLATTR_NEST))
 #define XLAT_STR_4 STRINGIFY(SKF_AD_NLATTR_NEST)
 XLAT(SKF_AD_MARK),
 #define XLAT_VAL_5 ((unsigned) (SKF_AD_MARK))
 #define XLAT_STR_5 STRINGIFY(SKF_AD_MARK)
 XLAT(SKF_AD_QUEUE),
 #define XLAT_VAL_6 ((unsigned) (SKF_AD_QUEUE))
 #define XLAT_STR_6 STRINGIFY(SKF_AD_QUEUE)
 XLAT(SKF_AD_HATYPE),
 #define XLAT_VAL_7 ((unsigned) (SKF_AD_HATYPE))
 #define XLAT_STR_7 STRINGIFY(SKF_AD_HATYPE)
 XLAT(SKF_AD_RXHASH),
 #define XLAT_VAL_8 ((unsigned) (SKF_AD_RXHASH))
 #define XLAT_STR_8 STRINGIFY(SKF_AD_RXHASH)
 XLAT(SKF_AD_CPU),
 #define XLAT_VAL_9 ((unsigned) (SKF_AD_CPU))
 #define XLAT_STR_9 STRINGIFY(SKF_AD_CPU)
 XLAT(SKF_AD_ALU_XOR_X),
 #define XLAT_VAL_10 ((unsigned) (SKF_AD_ALU_XOR_X))
 #define XLAT_STR_10 STRINGIFY(SKF_AD_ALU_XOR_X)
 XLAT(SKF_AD_VLAN_TAG),
 #define XLAT_VAL_11 ((unsigned) (SKF_AD_VLAN_TAG))
 #define XLAT_STR_11 STRINGIFY(SKF_AD_VLAN_TAG)
 XLAT(SKF_AD_VLAN_TAG_PRESENT),
 #define XLAT_VAL_12 ((unsigned) (SKF_AD_VLAN_TAG_PRESENT))
 #define XLAT_STR_12 STRINGIFY(SKF_AD_VLAN_TAG_PRESENT)
 XLAT(SKF_AD_PAY_OFFSET),
 #define XLAT_VAL_13 ((unsigned) (SKF_AD_PAY_OFFSET))
 #define XLAT_STR_13 STRINGIFY(SKF_AD_PAY_OFFSET)
 XLAT(SKF_AD_RANDOM),
 #define XLAT_VAL_14 ((unsigned) (SKF_AD_RANDOM))
 #define XLAT_STR_14 STRINGIFY(SKF_AD_RANDOM)
 XLAT(SKF_AD_VLAN_TPID),
 #define XLAT_VAL_15 ((unsigned) (SKF_AD_VLAN_TPID))
 #define XLAT_STR_15 STRINGIFY(SKF_AD_VLAN_TPID)
};
static
const struct xlat skf_ad[1] = { {
 .data = skf_ad_xdata,
 .size = ARRAY_SIZE(skf_ad_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
