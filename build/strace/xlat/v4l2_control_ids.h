/* Generated by ./src/xlat/gen.sh from ./src/xlat/v4l2_control_ids.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_BRIGHTNESS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_BRIGHTNESS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_BRIGHTNESS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_CONTRAST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_CONTRAST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_CONTRAST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_SATURATION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_SATURATION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_SATURATION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_HUE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_HUE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_HUE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_VOLUME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_VOLUME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_VOLUME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_BALANCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_BALANCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_BALANCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_BASS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_BASS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_BASS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_TREBLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_TREBLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_TREBLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_MUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_MUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_MUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_LOUDNESS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_LOUDNESS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_LOUDNESS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_BLACK_LEVEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_BLACK_LEVEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_BLACK_LEVEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUTO_WHITE_BALANCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUTO_WHITE_BALANCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUTO_WHITE_BALANCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DO_WHITE_BALANCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DO_WHITE_BALANCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DO_WHITE_BALANCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RED_BALANCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RED_BALANCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RED_BALANCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_BLUE_BALANCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_BLUE_BALANCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_BLUE_BALANCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_GAMMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_GAMMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_GAMMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_EXPOSURE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_EXPOSURE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_EXPOSURE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUTOGAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUTOGAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUTOGAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_GAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_GAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_GAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_HFLIP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_HFLIP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_HFLIP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_VFLIP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_VFLIP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_VFLIP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_HCENTER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_HCENTER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_HCENTER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_VCENTER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_VCENTER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_VCENTER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_POWER_LINE_FREQUENCY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_POWER_LINE_FREQUENCY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_POWER_LINE_FREQUENCY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_HUE_AUTO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_HUE_AUTO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_HUE_AUTO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_WHITE_BALANCE_TEMPERATURE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_WHITE_BALANCE_TEMPERATURE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_WHITE_BALANCE_TEMPERATURE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_SHARPNESS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_SHARPNESS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_SHARPNESS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_BACKLIGHT_COMPENSATION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_BACKLIGHT_COMPENSATION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_BACKLIGHT_COMPENSATION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_CHROMA_AGC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_CHROMA_AGC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_CHROMA_AGC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_COLOR_KILLER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_COLOR_KILLER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_COLOR_KILLER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_COLORFX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_COLORFX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_COLORFX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUTOBRIGHTNESS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUTOBRIGHTNESS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUTOBRIGHTNESS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_BAND_STOP_FILTER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_BAND_STOP_FILTER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_BAND_STOP_FILTER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ROTATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ROTATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ROTATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_BG_COLOR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_BG_COLOR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_BG_COLOR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_CHROMA_GAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_CHROMA_GAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_CHROMA_GAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ILLUMINATORS_1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ILLUMINATORS_1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ILLUMINATORS_1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ILLUMINATORS_2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ILLUMINATORS_2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ILLUMINATORS_2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MIN_BUFFERS_FOR_CAPTURE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MIN_BUFFERS_FOR_CAPTURE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MIN_BUFFERS_FOR_CAPTURE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MIN_BUFFERS_FOR_OUTPUT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MIN_BUFFERS_FOR_OUTPUT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MIN_BUFFERS_FOR_OUTPUT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ALPHA_COMPONENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ALPHA_COMPONENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ALPHA_COMPONENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_COLORFX_CBCR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_COLORFX_CBCR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_COLORFX_CBCR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_STREAM_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_STREAM_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_STREAM_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_STREAM_PID_PMT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_STREAM_PID_PMT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_STREAM_PID_PMT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_STREAM_PID_AUDIO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_STREAM_PID_AUDIO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_STREAM_PID_AUDIO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_STREAM_PID_VIDEO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_STREAM_PID_VIDEO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_STREAM_PID_VIDEO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_STREAM_PID_PCR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_STREAM_PID_PCR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_STREAM_PID_PCR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_STREAM_PES_ID_AUDIO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_STREAM_PES_ID_AUDIO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_STREAM_PES_ID_AUDIO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_STREAM_PES_ID_VIDEO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_STREAM_PES_ID_VIDEO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_STREAM_PES_ID_VIDEO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_STREAM_VBI_FMT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_STREAM_VBI_FMT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_STREAM_VBI_FMT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_ENCODING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_ENCODING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_ENCODING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_L1_BITRATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_L1_BITRATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_L1_BITRATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_L2_BITRATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_L2_BITRATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_L2_BITRATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_L3_BITRATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_L3_BITRATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_L3_BITRATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_MODE_EXTENSION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_MODE_EXTENSION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_MODE_EXTENSION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_EMPHASIS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_EMPHASIS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_EMPHASIS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_CRC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_CRC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_CRC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_MUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_MUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_MUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_AAC_BITRATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_AAC_BITRATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_AAC_BITRATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_AC3_BITRATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_AC3_BITRATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_AC3_BITRATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_ENCODING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_ENCODING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_ENCODING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_ASPECT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_ASPECT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_ASPECT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_B_FRAMES)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_B_FRAMES"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_B_FRAMES)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_GOP_SIZE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_GOP_SIZE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_GOP_SIZE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_GOP_CLOSURE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_GOP_CLOSURE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_GOP_CLOSURE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_PULLDOWN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_PULLDOWN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_PULLDOWN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_BITRATE_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_BITRATE_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_BITRATE_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_BITRATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_BITRATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_BITRATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_BITRATE_PEAK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_BITRATE_PEAK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_BITRATE_PEAK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MUTE_YUV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MUTE_YUV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MUTE_YUV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEADER_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEADER_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEADER_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MAX_REF_PIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MAX_REF_PIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MAX_REF_PIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VBV_SIZE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VBV_SIZE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VBV_SIZE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_DEC_PTS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_DEC_PTS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_DEC_PTS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_DEC_FRAME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_DEC_FRAME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_DEC_FRAME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VBV_DELAY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VBV_DELAY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VBV_DELAY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_BASELAYER_PRIORITY_ID)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_BASELAYER_PRIORITY_ID"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_BASELAYER_PRIORITY_ID)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_AU_DELIMITER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_AU_DELIMITER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_AU_DELIMITER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_LTR_COUNT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_LTR_COUNT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_LTR_COUNT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_FRAME_LTR_INDEX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_FRAME_LTR_INDEX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_FRAME_LTR_INDEX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_USE_LTR_FRAMES)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_USE_LTR_FRAMES"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_USE_LTR_FRAMES)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_DEC_CONCEAL_COLOR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_DEC_CONCEAL_COLOR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_DEC_CONCEAL_COLOR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG2_SLICE_PARAMS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG2_SLICE_PARAMS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG2_SLICE_PARAMS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG2_QUANTIZATION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG2_QUANTIZATION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG2_QUANTIZATION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FWHT_I_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FWHT_I_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FWHT_I_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FWHT_P_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FWHT_P_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FWHT_P_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H263_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H263_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H263_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H263_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H263_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H263_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_I_PERIOD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_I_PERIOD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_I_PERIOD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_LEVEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_LEVEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_LEVEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_PROFILE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_PROFILE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_PROFILE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_FMO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_FMO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_FMO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_ASO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_ASO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_ASO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_CONSTRAINED_INTRA_PREDICTION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_CONSTRAINED_INTRA_PREDICTION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_CONSTRAINED_INTRA_PREDICTION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_CHROMA_QP_INDEX_OFFSET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_CHROMA_QP_INDEX_OFFSET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_CHROMA_QP_INDEX_OFFSET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L0_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L0_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L0_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L1_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L1_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L1_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L2_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L2_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L2_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L3_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L3_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L3_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L4_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L4_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L4_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L5_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L5_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L5_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L6_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L6_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L6_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_MPEG4_QPEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_MPEG4_QPEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_MPEG4_QPEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VP8_PROFILE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VP8_PROFILE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VP8_PROFILE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_VP9_PROFILE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_VP9_PROFILE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_VP9_PROFILE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_LAYER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_LAYER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_LAYER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_PROFILE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_PROFILE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_PROFILE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_LEVEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_LEVEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_LEVEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_FRAME_RATE_RESOLUTION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_FRAME_RATE_RESOLUTION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_FRAME_RATE_RESOLUTION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_TIER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_TIER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_TIER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_MAX_PARTITION_DEPTH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_MAX_PARTITION_DEPTH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_MAX_PARTITION_DEPTH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_LF_BETA_OFFSET_DIV2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_LF_BETA_OFFSET_DIV2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_LF_BETA_OFFSET_DIV2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_LF_TC_OFFSET_DIV2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_LF_TC_OFFSET_DIV2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_LF_TC_OFFSET_DIV2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_PERIOD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_PERIOD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_PERIOD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_LOSSLESS_CU)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_LOSSLESS_CU"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_LOSSLESS_CU)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_CONST_INTRA_PRED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_CONST_INTRA_PRED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_CONST_INTRA_PRED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_WAVEFRONT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_WAVEFRONT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_WAVEFRONT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_GENERAL_PB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_GENERAL_PB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_GENERAL_PB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_TEMPORAL_ID)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_TEMPORAL_ID"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_TEMPORAL_ID)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_STRONG_SMOOTHING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_STRONG_SMOOTHING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_STRONG_SMOOTHING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_MAX_NUM_MERGE_MV_MINUS1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_MAX_NUM_MERGE_MV_MINUS1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_MAX_NUM_MERGE_MV_MINUS1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_INTRA_PU_SPLIT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_INTRA_PU_SPLIT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_INTRA_PU_SPLIT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_TMV_PREDICTION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_TMV_PREDICTION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_TMV_PREDICTION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_WITHOUT_STARTCODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_WITHOUT_STARTCODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_WITHOUT_STARTCODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_SIZE_OF_LENGTH_FIELD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_SIZE_OF_LENGTH_FIELD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_SIZE_OF_LENGTH_FIELD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_BR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_BR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_BR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_REF_NUMBER_FOR_PFRAMES)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_REF_NUMBER_FOR_PFRAMES"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_REF_NUMBER_FOR_PFRAMES)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_PREPEND_SPSPPS_TO_IDR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_PREPEND_SPSPPS_TO_IDR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_PREPEND_SPSPPS_TO_IDR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_CONSTANT_QUALITY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_CONSTANT_QUALITY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_CONSTANT_QUALITY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_FRAME_SKIP_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_FRAME_SKIP_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_FRAME_SKIP_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MIN_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MIN_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MIN_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MAX_QP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MAX_QP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MAX_QP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY_ENABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY_ENABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY_ENABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_PADDING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_PADDING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_PADDING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_EXPOSURE_AUTO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_EXPOSURE_AUTO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_EXPOSURE_AUTO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_EXPOSURE_ABSOLUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_EXPOSURE_ABSOLUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_EXPOSURE_ABSOLUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_EXPOSURE_AUTO_PRIORITY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_EXPOSURE_AUTO_PRIORITY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_EXPOSURE_AUTO_PRIORITY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_PAN_RELATIVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_PAN_RELATIVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_PAN_RELATIVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TILT_RELATIVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TILT_RELATIVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TILT_RELATIVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_PAN_RESET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_PAN_RESET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_PAN_RESET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TILT_RESET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TILT_RESET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TILT_RESET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_PAN_ABSOLUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_PAN_ABSOLUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_PAN_ABSOLUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TILT_ABSOLUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TILT_ABSOLUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TILT_ABSOLUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FOCUS_ABSOLUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FOCUS_ABSOLUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FOCUS_ABSOLUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FOCUS_RELATIVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FOCUS_RELATIVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FOCUS_RELATIVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FOCUS_AUTO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FOCUS_AUTO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FOCUS_AUTO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ZOOM_ABSOLUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ZOOM_ABSOLUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ZOOM_ABSOLUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ZOOM_RELATIVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ZOOM_RELATIVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ZOOM_RELATIVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ZOOM_CONTINUOUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ZOOM_CONTINUOUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ZOOM_CONTINUOUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_PRIVACY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_PRIVACY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_PRIVACY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_IRIS_ABSOLUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_IRIS_ABSOLUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_IRIS_ABSOLUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_IRIS_RELATIVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_IRIS_RELATIVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_IRIS_RELATIVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUTO_EXPOSURE_BIAS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUTO_EXPOSURE_BIAS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUTO_EXPOSURE_BIAS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_WIDE_DYNAMIC_RANGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_WIDE_DYNAMIC_RANGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_WIDE_DYNAMIC_RANGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_IMAGE_STABILIZATION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_IMAGE_STABILIZATION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_IMAGE_STABILIZATION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ISO_SENSITIVITY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ISO_SENSITIVITY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ISO_SENSITIVITY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ISO_SENSITIVITY_AUTO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ISO_SENSITIVITY_AUTO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ISO_SENSITIVITY_AUTO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_EXPOSURE_METERING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_EXPOSURE_METERING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_EXPOSURE_METERING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_SCENE_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_SCENE_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_SCENE_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_3A_LOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_3A_LOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_3A_LOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUTO_FOCUS_START)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUTO_FOCUS_START"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUTO_FOCUS_START)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUTO_FOCUS_STOP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUTO_FOCUS_STOP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUTO_FOCUS_STOP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUTO_FOCUS_STATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUTO_FOCUS_STATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUTO_FOCUS_STATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUTO_FOCUS_RANGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUTO_FOCUS_RANGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUTO_FOCUS_RANGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_PAN_SPEED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_PAN_SPEED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_PAN_SPEED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TILT_SPEED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TILT_SPEED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TILT_SPEED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_DEVIATION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_DEVIATION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_DEVIATION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_PI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_PI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_PI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_PTY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_PTY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_PTY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_PS_NAME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_PS_NAME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_PS_NAME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_RADIO_TEXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_RADIO_TEXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_RADIO_TEXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_MONO_STEREO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_MONO_STEREO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_MONO_STEREO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_ARTIFICIAL_HEAD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_ARTIFICIAL_HEAD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_ARTIFICIAL_HEAD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_COMPRESSED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_COMPRESSED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_COMPRESSED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_DYNAMIC_PTY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_DYNAMIC_PTY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_DYNAMIC_PTY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_TRAFFIC_PROGRAM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_TRAFFIC_PROGRAM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_TRAFFIC_PROGRAM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_MUSIC_SPEECH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_MUSIC_SPEECH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_MUSIC_SPEECH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_ALT_FREQS_ENABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_ALT_FREQS_ENABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_ALT_FREQS_ENABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_TX_ALT_FREQS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_TX_ALT_FREQS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_TX_ALT_FREQS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_LIMITER_ENABLED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_LIMITER_ENABLED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_LIMITER_ENABLED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_LIMITER_RELEASE_TIME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_LIMITER_RELEASE_TIME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_LIMITER_RELEASE_TIME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_LIMITER_DEVIATION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_LIMITER_DEVIATION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_LIMITER_DEVIATION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_COMPRESSION_ENABLED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_COMPRESSION_ENABLED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_COMPRESSION_ENABLED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_COMPRESSION_GAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_COMPRESSION_GAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_COMPRESSION_GAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_COMPRESSION_THRESHOLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_COMPRESSION_THRESHOLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_COMPRESSION_THRESHOLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_PILOT_TONE_ENABLED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_PILOT_TONE_ENABLED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_PILOT_TONE_ENABLED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_PILOT_TONE_DEVIATION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_PILOT_TONE_DEVIATION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_PILOT_TONE_DEVIATION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_PILOT_TONE_FREQUENCY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_PILOT_TONE_FREQUENCY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_PILOT_TONE_FREQUENCY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TUNE_PREEMPHASIS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TUNE_PREEMPHASIS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TUNE_PREEMPHASIS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TUNE_POWER_LEVEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TUNE_POWER_LEVEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TUNE_POWER_LEVEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TUNE_ANTENNA_CAPACITOR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TUNE_ANTENNA_CAPACITOR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TUNE_ANTENNA_CAPACITOR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_LED_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_LED_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_LED_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_STROBE_SOURCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_STROBE_SOURCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_STROBE_SOURCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_STROBE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_STROBE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_STROBE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_STROBE_STOP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_STROBE_STOP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_STROBE_STOP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_STROBE_STATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_STROBE_STATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_STROBE_STATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_TIMEOUT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_TIMEOUT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_TIMEOUT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_INTENSITY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_INTENSITY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_INTENSITY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_TORCH_INTENSITY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_TORCH_INTENSITY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_TORCH_INTENSITY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_INDICATOR_INTENSITY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_INDICATOR_INTENSITY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_INDICATOR_INTENSITY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_FAULT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_FAULT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_FAULT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_CHARGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_CHARGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_CHARGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_FLASH_READY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_FLASH_READY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_FLASH_READY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_VBLANK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_VBLANK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_VBLANK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_HBLANK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_HBLANK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_HBLANK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_ANALOGUE_GAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_ANALOGUE_GAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_ANALOGUE_GAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TEST_PATTERN_RED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TEST_PATTERN_RED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TEST_PATTERN_RED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TEST_PATTERN_GREENR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TEST_PATTERN_GREENR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TEST_PATTERN_GREENR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TEST_PATTERN_BLUE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TEST_PATTERN_BLUE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TEST_PATTERN_BLUE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TEST_PATTERN_GREENB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TEST_PATTERN_GREENB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TEST_PATTERN_GREENB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_UNIT_CELL_SIZE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_UNIT_CELL_SIZE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_UNIT_CELL_SIZE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_NOTIFY_GAINS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_NOTIFY_GAINS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_NOTIFY_GAINS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_LINK_FREQ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_LINK_FREQ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_LINK_FREQ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_PIXEL_RATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_PIXEL_RATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_PIXEL_RATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TEST_PATTERN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TEST_PATTERN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TEST_PATTERN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DEINTERLACING_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DEINTERLACING_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DEINTERLACING_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DIGITAL_GAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DIGITAL_GAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DIGITAL_GAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DV_TX_RGB_RANGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DV_TX_RGB_RANGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DV_TX_RGB_RANGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DV_TX_IT_CONTENT_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DV_TX_IT_CONTENT_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DV_TX_IT_CONTENT_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DV_RX_RGB_RANGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DV_RX_RGB_RANGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DV_RX_RGB_RANGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DV_RX_IT_CONTENT_TYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DV_RX_IT_CONTENT_TYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DV_RX_IT_CONTENT_TYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_TUNE_DEEMPHASIS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_TUNE_DEEMPHASIS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_TUNE_DEEMPHASIS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_RECEPTION)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_RECEPTION"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_RECEPTION)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_RX_PTY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_RX_PTY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_RX_PTY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_RX_PS_NAME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_RX_PS_NAME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_RX_PS_NAME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_RX_RADIO_TEXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_RX_RADIO_TEXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_RX_RADIO_TEXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_RX_TRAFFIC_PROGRAM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_RX_TRAFFIC_PROGRAM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_RX_TRAFFIC_PROGRAM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RDS_RX_MUSIC_SPEECH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RDS_RX_MUSIC_SPEECH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RDS_RX_MUSIC_SPEECH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_BANDWIDTH_AUTO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_BANDWIDTH_AUTO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_BANDWIDTH_AUTO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_BANDWIDTH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_BANDWIDTH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_BANDWIDTH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_RF_GAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_RF_GAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_RF_GAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_LNA_GAIN_AUTO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_LNA_GAIN_AUTO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_LNA_GAIN_AUTO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_LNA_GAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_LNA_GAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_LNA_GAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_MIXER_GAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_MIXER_GAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_MIXER_GAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_IF_GAIN_AUTO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_IF_GAIN_AUTO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_IF_GAIN_AUTO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_IF_GAIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_IF_GAIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_IF_GAIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_RF_TUNER_PLL_LOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_RF_TUNER_PLL_LOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_RF_TUNER_PLL_LOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DETECT_MD_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DETECT_MD_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DETECT_MD_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DETECT_MD_THRESHOLD_GRID)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DETECT_MD_THRESHOLD_GRID"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DETECT_MD_THRESHOLD_GRID)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (V4L2_CID_DETECT_MD_REGION_GRID)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: V4L2_CID_DETECT_MD_REGION_GRID"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (V4L2_CID_DETECT_MD_REGION_GRID)
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat v4l2_control_ids[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data v4l2_control_ids_xdata[] = {

 XLAT(V4L2_CID_BRIGHTNESS),
 #define XLAT_VAL_0 ((unsigned) (V4L2_CID_BRIGHTNESS))
 #define XLAT_STR_0 STRINGIFY(V4L2_CID_BRIGHTNESS)
 XLAT(V4L2_CID_CONTRAST),
 #define XLAT_VAL_1 ((unsigned) (V4L2_CID_CONTRAST))
 #define XLAT_STR_1 STRINGIFY(V4L2_CID_CONTRAST)
 XLAT(V4L2_CID_SATURATION),
 #define XLAT_VAL_2 ((unsigned) (V4L2_CID_SATURATION))
 #define XLAT_STR_2 STRINGIFY(V4L2_CID_SATURATION)
 XLAT(V4L2_CID_HUE),
 #define XLAT_VAL_3 ((unsigned) (V4L2_CID_HUE))
 #define XLAT_STR_3 STRINGIFY(V4L2_CID_HUE)
 XLAT(V4L2_CID_AUDIO_VOLUME),
 #define XLAT_VAL_4 ((unsigned) (V4L2_CID_AUDIO_VOLUME))
 #define XLAT_STR_4 STRINGIFY(V4L2_CID_AUDIO_VOLUME)
 XLAT(V4L2_CID_AUDIO_BALANCE),
 #define XLAT_VAL_5 ((unsigned) (V4L2_CID_AUDIO_BALANCE))
 #define XLAT_STR_5 STRINGIFY(V4L2_CID_AUDIO_BALANCE)
 XLAT(V4L2_CID_AUDIO_BASS),
 #define XLAT_VAL_6 ((unsigned) (V4L2_CID_AUDIO_BASS))
 #define XLAT_STR_6 STRINGIFY(V4L2_CID_AUDIO_BASS)
 XLAT(V4L2_CID_AUDIO_TREBLE),
 #define XLAT_VAL_7 ((unsigned) (V4L2_CID_AUDIO_TREBLE))
 #define XLAT_STR_7 STRINGIFY(V4L2_CID_AUDIO_TREBLE)
 XLAT(V4L2_CID_AUDIO_MUTE),
 #define XLAT_VAL_8 ((unsigned) (V4L2_CID_AUDIO_MUTE))
 #define XLAT_STR_8 STRINGIFY(V4L2_CID_AUDIO_MUTE)
 XLAT(V4L2_CID_AUDIO_LOUDNESS),
 #define XLAT_VAL_9 ((unsigned) (V4L2_CID_AUDIO_LOUDNESS))
 #define XLAT_STR_9 STRINGIFY(V4L2_CID_AUDIO_LOUDNESS)
 XLAT(V4L2_CID_BLACK_LEVEL),
 #define XLAT_VAL_10 ((unsigned) (V4L2_CID_BLACK_LEVEL))
 #define XLAT_STR_10 STRINGIFY(V4L2_CID_BLACK_LEVEL)
 XLAT(V4L2_CID_AUTO_WHITE_BALANCE),
 #define XLAT_VAL_11 ((unsigned) (V4L2_CID_AUTO_WHITE_BALANCE))
 #define XLAT_STR_11 STRINGIFY(V4L2_CID_AUTO_WHITE_BALANCE)
 XLAT(V4L2_CID_DO_WHITE_BALANCE),
 #define XLAT_VAL_12 ((unsigned) (V4L2_CID_DO_WHITE_BALANCE))
 #define XLAT_STR_12 STRINGIFY(V4L2_CID_DO_WHITE_BALANCE)
 XLAT(V4L2_CID_RED_BALANCE),
 #define XLAT_VAL_13 ((unsigned) (V4L2_CID_RED_BALANCE))
 #define XLAT_STR_13 STRINGIFY(V4L2_CID_RED_BALANCE)
 XLAT(V4L2_CID_BLUE_BALANCE),
 #define XLAT_VAL_14 ((unsigned) (V4L2_CID_BLUE_BALANCE))
 #define XLAT_STR_14 STRINGIFY(V4L2_CID_BLUE_BALANCE)
 XLAT(V4L2_CID_GAMMA),
 #define XLAT_VAL_15 ((unsigned) (V4L2_CID_GAMMA))
 #define XLAT_STR_15 STRINGIFY(V4L2_CID_GAMMA)
 XLAT(V4L2_CID_EXPOSURE),
 #define XLAT_VAL_16 ((unsigned) (V4L2_CID_EXPOSURE))
 #define XLAT_STR_16 STRINGIFY(V4L2_CID_EXPOSURE)
 XLAT(V4L2_CID_AUTOGAIN),
 #define XLAT_VAL_17 ((unsigned) (V4L2_CID_AUTOGAIN))
 #define XLAT_STR_17 STRINGIFY(V4L2_CID_AUTOGAIN)
 XLAT(V4L2_CID_GAIN),
 #define XLAT_VAL_18 ((unsigned) (V4L2_CID_GAIN))
 #define XLAT_STR_18 STRINGIFY(V4L2_CID_GAIN)
 XLAT(V4L2_CID_HFLIP),
 #define XLAT_VAL_19 ((unsigned) (V4L2_CID_HFLIP))
 #define XLAT_STR_19 STRINGIFY(V4L2_CID_HFLIP)
 XLAT(V4L2_CID_VFLIP),
 #define XLAT_VAL_20 ((unsigned) (V4L2_CID_VFLIP))
 #define XLAT_STR_20 STRINGIFY(V4L2_CID_VFLIP)
 XLAT(V4L2_CID_HCENTER),
 #define XLAT_VAL_21 ((unsigned) (V4L2_CID_HCENTER))
 #define XLAT_STR_21 STRINGIFY(V4L2_CID_HCENTER)
 XLAT(V4L2_CID_VCENTER),
 #define XLAT_VAL_22 ((unsigned) (V4L2_CID_VCENTER))
 #define XLAT_STR_22 STRINGIFY(V4L2_CID_VCENTER)
 XLAT(V4L2_CID_POWER_LINE_FREQUENCY),
 #define XLAT_VAL_23 ((unsigned) (V4L2_CID_POWER_LINE_FREQUENCY))
 #define XLAT_STR_23 STRINGIFY(V4L2_CID_POWER_LINE_FREQUENCY)
 XLAT(V4L2_CID_HUE_AUTO),
 #define XLAT_VAL_24 ((unsigned) (V4L2_CID_HUE_AUTO))
 #define XLAT_STR_24 STRINGIFY(V4L2_CID_HUE_AUTO)
 XLAT(V4L2_CID_WHITE_BALANCE_TEMPERATURE),
 #define XLAT_VAL_25 ((unsigned) (V4L2_CID_WHITE_BALANCE_TEMPERATURE))
 #define XLAT_STR_25 STRINGIFY(V4L2_CID_WHITE_BALANCE_TEMPERATURE)
 XLAT(V4L2_CID_SHARPNESS),
 #define XLAT_VAL_26 ((unsigned) (V4L2_CID_SHARPNESS))
 #define XLAT_STR_26 STRINGIFY(V4L2_CID_SHARPNESS)
 XLAT(V4L2_CID_BACKLIGHT_COMPENSATION),
 #define XLAT_VAL_27 ((unsigned) (V4L2_CID_BACKLIGHT_COMPENSATION))
 #define XLAT_STR_27 STRINGIFY(V4L2_CID_BACKLIGHT_COMPENSATION)
 XLAT(V4L2_CID_CHROMA_AGC),
 #define XLAT_VAL_28 ((unsigned) (V4L2_CID_CHROMA_AGC))
 #define XLAT_STR_28 STRINGIFY(V4L2_CID_CHROMA_AGC)
 XLAT(V4L2_CID_COLOR_KILLER),
 #define XLAT_VAL_29 ((unsigned) (V4L2_CID_COLOR_KILLER))
 #define XLAT_STR_29 STRINGIFY(V4L2_CID_COLOR_KILLER)
 XLAT(V4L2_CID_COLORFX),
 #define XLAT_VAL_30 ((unsigned) (V4L2_CID_COLORFX))
 #define XLAT_STR_30 STRINGIFY(V4L2_CID_COLORFX)
 XLAT(V4L2_CID_AUTOBRIGHTNESS),
 #define XLAT_VAL_31 ((unsigned) (V4L2_CID_AUTOBRIGHTNESS))
 #define XLAT_STR_31 STRINGIFY(V4L2_CID_AUTOBRIGHTNESS)
 XLAT(V4L2_CID_BAND_STOP_FILTER),
 #define XLAT_VAL_32 ((unsigned) (V4L2_CID_BAND_STOP_FILTER))
 #define XLAT_STR_32 STRINGIFY(V4L2_CID_BAND_STOP_FILTER)
 XLAT(V4L2_CID_ROTATE),
 #define XLAT_VAL_33 ((unsigned) (V4L2_CID_ROTATE))
 #define XLAT_STR_33 STRINGIFY(V4L2_CID_ROTATE)
 XLAT(V4L2_CID_BG_COLOR),
 #define XLAT_VAL_34 ((unsigned) (V4L2_CID_BG_COLOR))
 #define XLAT_STR_34 STRINGIFY(V4L2_CID_BG_COLOR)
 XLAT(V4L2_CID_CHROMA_GAIN),
 #define XLAT_VAL_35 ((unsigned) (V4L2_CID_CHROMA_GAIN))
 #define XLAT_STR_35 STRINGIFY(V4L2_CID_CHROMA_GAIN)
 XLAT(V4L2_CID_ILLUMINATORS_1),
 #define XLAT_VAL_36 ((unsigned) (V4L2_CID_ILLUMINATORS_1))
 #define XLAT_STR_36 STRINGIFY(V4L2_CID_ILLUMINATORS_1)
 XLAT(V4L2_CID_ILLUMINATORS_2),
 #define XLAT_VAL_37 ((unsigned) (V4L2_CID_ILLUMINATORS_2))
 #define XLAT_STR_37 STRINGIFY(V4L2_CID_ILLUMINATORS_2)
 XLAT(V4L2_CID_MIN_BUFFERS_FOR_CAPTURE),
 #define XLAT_VAL_38 ((unsigned) (V4L2_CID_MIN_BUFFERS_FOR_CAPTURE))
 #define XLAT_STR_38 STRINGIFY(V4L2_CID_MIN_BUFFERS_FOR_CAPTURE)
 XLAT(V4L2_CID_MIN_BUFFERS_FOR_OUTPUT),
 #define XLAT_VAL_39 ((unsigned) (V4L2_CID_MIN_BUFFERS_FOR_OUTPUT))
 #define XLAT_STR_39 STRINGIFY(V4L2_CID_MIN_BUFFERS_FOR_OUTPUT)
 XLAT(V4L2_CID_ALPHA_COMPONENT),
 #define XLAT_VAL_40 ((unsigned) (V4L2_CID_ALPHA_COMPONENT))
 #define XLAT_STR_40 STRINGIFY(V4L2_CID_ALPHA_COMPONENT)
 XLAT(V4L2_CID_COLORFX_CBCR),
 #define XLAT_VAL_41 ((unsigned) (V4L2_CID_COLORFX_CBCR))
 #define XLAT_STR_41 STRINGIFY(V4L2_CID_COLORFX_CBCR)


 XLAT(V4L2_CID_MPEG_STREAM_TYPE),
 #define XLAT_VAL_42 ((unsigned) (V4L2_CID_MPEG_STREAM_TYPE))
 #define XLAT_STR_42 STRINGIFY(V4L2_CID_MPEG_STREAM_TYPE)
 XLAT(V4L2_CID_MPEG_STREAM_PID_PMT),
 #define XLAT_VAL_43 ((unsigned) (V4L2_CID_MPEG_STREAM_PID_PMT))
 #define XLAT_STR_43 STRINGIFY(V4L2_CID_MPEG_STREAM_PID_PMT)
 XLAT(V4L2_CID_MPEG_STREAM_PID_AUDIO),
 #define XLAT_VAL_44 ((unsigned) (V4L2_CID_MPEG_STREAM_PID_AUDIO))
 #define XLAT_STR_44 STRINGIFY(V4L2_CID_MPEG_STREAM_PID_AUDIO)
 XLAT(V4L2_CID_MPEG_STREAM_PID_VIDEO),
 #define XLAT_VAL_45 ((unsigned) (V4L2_CID_MPEG_STREAM_PID_VIDEO))
 #define XLAT_STR_45 STRINGIFY(V4L2_CID_MPEG_STREAM_PID_VIDEO)
 XLAT(V4L2_CID_MPEG_STREAM_PID_PCR),
 #define XLAT_VAL_46 ((unsigned) (V4L2_CID_MPEG_STREAM_PID_PCR))
 #define XLAT_STR_46 STRINGIFY(V4L2_CID_MPEG_STREAM_PID_PCR)
 XLAT(V4L2_CID_MPEG_STREAM_PES_ID_AUDIO),
 #define XLAT_VAL_47 ((unsigned) (V4L2_CID_MPEG_STREAM_PES_ID_AUDIO))
 #define XLAT_STR_47 STRINGIFY(V4L2_CID_MPEG_STREAM_PES_ID_AUDIO)
 XLAT(V4L2_CID_MPEG_STREAM_PES_ID_VIDEO),
 #define XLAT_VAL_48 ((unsigned) (V4L2_CID_MPEG_STREAM_PES_ID_VIDEO))
 #define XLAT_STR_48 STRINGIFY(V4L2_CID_MPEG_STREAM_PES_ID_VIDEO)
 XLAT(V4L2_CID_MPEG_STREAM_VBI_FMT),
 #define XLAT_VAL_49 ((unsigned) (V4L2_CID_MPEG_STREAM_VBI_FMT))
 #define XLAT_STR_49 STRINGIFY(V4L2_CID_MPEG_STREAM_VBI_FMT)

 XLAT(V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ),
 #define XLAT_VAL_50 ((unsigned) (V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ))
 #define XLAT_STR_50 STRINGIFY(V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ)
 XLAT(V4L2_CID_MPEG_AUDIO_ENCODING),
 #define XLAT_VAL_51 ((unsigned) (V4L2_CID_MPEG_AUDIO_ENCODING))
 #define XLAT_STR_51 STRINGIFY(V4L2_CID_MPEG_AUDIO_ENCODING)
 XLAT(V4L2_CID_MPEG_AUDIO_L1_BITRATE),
 #define XLAT_VAL_52 ((unsigned) (V4L2_CID_MPEG_AUDIO_L1_BITRATE))
 #define XLAT_STR_52 STRINGIFY(V4L2_CID_MPEG_AUDIO_L1_BITRATE)
 XLAT(V4L2_CID_MPEG_AUDIO_L2_BITRATE),
 #define XLAT_VAL_53 ((unsigned) (V4L2_CID_MPEG_AUDIO_L2_BITRATE))
 #define XLAT_STR_53 STRINGIFY(V4L2_CID_MPEG_AUDIO_L2_BITRATE)
 XLAT(V4L2_CID_MPEG_AUDIO_L3_BITRATE),
 #define XLAT_VAL_54 ((unsigned) (V4L2_CID_MPEG_AUDIO_L3_BITRATE))
 #define XLAT_STR_54 STRINGIFY(V4L2_CID_MPEG_AUDIO_L3_BITRATE)
 XLAT(V4L2_CID_MPEG_AUDIO_MODE),
 #define XLAT_VAL_55 ((unsigned) (V4L2_CID_MPEG_AUDIO_MODE))
 #define XLAT_STR_55 STRINGIFY(V4L2_CID_MPEG_AUDIO_MODE)
 XLAT(V4L2_CID_MPEG_AUDIO_MODE_EXTENSION),
 #define XLAT_VAL_56 ((unsigned) (V4L2_CID_MPEG_AUDIO_MODE_EXTENSION))
 #define XLAT_STR_56 STRINGIFY(V4L2_CID_MPEG_AUDIO_MODE_EXTENSION)
 XLAT(V4L2_CID_MPEG_AUDIO_EMPHASIS),
 #define XLAT_VAL_57 ((unsigned) (V4L2_CID_MPEG_AUDIO_EMPHASIS))
 #define XLAT_STR_57 STRINGIFY(V4L2_CID_MPEG_AUDIO_EMPHASIS)
 XLAT(V4L2_CID_MPEG_AUDIO_CRC),
 #define XLAT_VAL_58 ((unsigned) (V4L2_CID_MPEG_AUDIO_CRC))
 #define XLAT_STR_58 STRINGIFY(V4L2_CID_MPEG_AUDIO_CRC)
 XLAT(V4L2_CID_MPEG_AUDIO_MUTE),
 #define XLAT_VAL_59 ((unsigned) (V4L2_CID_MPEG_AUDIO_MUTE))
 #define XLAT_STR_59 STRINGIFY(V4L2_CID_MPEG_AUDIO_MUTE)
 XLAT(V4L2_CID_MPEG_AUDIO_AAC_BITRATE),
 #define XLAT_VAL_60 ((unsigned) (V4L2_CID_MPEG_AUDIO_AAC_BITRATE))
 #define XLAT_STR_60 STRINGIFY(V4L2_CID_MPEG_AUDIO_AAC_BITRATE)
 XLAT(V4L2_CID_MPEG_AUDIO_AC3_BITRATE),
 #define XLAT_VAL_61 ((unsigned) (V4L2_CID_MPEG_AUDIO_AC3_BITRATE))
 #define XLAT_STR_61 STRINGIFY(V4L2_CID_MPEG_AUDIO_AC3_BITRATE)
 XLAT(V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK),
 #define XLAT_VAL_62 ((unsigned) (V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK))
 #define XLAT_STR_62 STRINGIFY(V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK)
 XLAT(V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK),
 #define XLAT_VAL_63 ((unsigned) (V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK))
 #define XLAT_STR_63 STRINGIFY(V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK)

 XLAT(V4L2_CID_MPEG_VIDEO_ENCODING),
 #define XLAT_VAL_64 ((unsigned) (V4L2_CID_MPEG_VIDEO_ENCODING))
 #define XLAT_STR_64 STRINGIFY(V4L2_CID_MPEG_VIDEO_ENCODING)
 XLAT(V4L2_CID_MPEG_VIDEO_ASPECT),
 #define XLAT_VAL_65 ((unsigned) (V4L2_CID_MPEG_VIDEO_ASPECT))
 #define XLAT_STR_65 STRINGIFY(V4L2_CID_MPEG_VIDEO_ASPECT)
 XLAT(V4L2_CID_MPEG_VIDEO_B_FRAMES),
 #define XLAT_VAL_66 ((unsigned) (V4L2_CID_MPEG_VIDEO_B_FRAMES))
 #define XLAT_STR_66 STRINGIFY(V4L2_CID_MPEG_VIDEO_B_FRAMES)
 XLAT(V4L2_CID_MPEG_VIDEO_GOP_SIZE),
 #define XLAT_VAL_67 ((unsigned) (V4L2_CID_MPEG_VIDEO_GOP_SIZE))
 #define XLAT_STR_67 STRINGIFY(V4L2_CID_MPEG_VIDEO_GOP_SIZE)
 XLAT(V4L2_CID_MPEG_VIDEO_GOP_CLOSURE),
 #define XLAT_VAL_68 ((unsigned) (V4L2_CID_MPEG_VIDEO_GOP_CLOSURE))
 #define XLAT_STR_68 STRINGIFY(V4L2_CID_MPEG_VIDEO_GOP_CLOSURE)
 XLAT(V4L2_CID_MPEG_VIDEO_PULLDOWN),
 #define XLAT_VAL_69 ((unsigned) (V4L2_CID_MPEG_VIDEO_PULLDOWN))
 #define XLAT_STR_69 STRINGIFY(V4L2_CID_MPEG_VIDEO_PULLDOWN)
 XLAT(V4L2_CID_MPEG_VIDEO_BITRATE_MODE),
 #define XLAT_VAL_70 ((unsigned) (V4L2_CID_MPEG_VIDEO_BITRATE_MODE))
 #define XLAT_STR_70 STRINGIFY(V4L2_CID_MPEG_VIDEO_BITRATE_MODE)
 XLAT(V4L2_CID_MPEG_VIDEO_BITRATE),
 #define XLAT_VAL_71 ((unsigned) (V4L2_CID_MPEG_VIDEO_BITRATE))
 #define XLAT_STR_71 STRINGIFY(V4L2_CID_MPEG_VIDEO_BITRATE)
 XLAT(V4L2_CID_MPEG_VIDEO_BITRATE_PEAK),
 #define XLAT_VAL_72 ((unsigned) (V4L2_CID_MPEG_VIDEO_BITRATE_PEAK))
 #define XLAT_STR_72 STRINGIFY(V4L2_CID_MPEG_VIDEO_BITRATE_PEAK)
 XLAT(V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION),
 #define XLAT_VAL_73 ((unsigned) (V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION))
 #define XLAT_STR_73 STRINGIFY(V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION)
 XLAT(V4L2_CID_MPEG_VIDEO_MUTE),
 #define XLAT_VAL_74 ((unsigned) (V4L2_CID_MPEG_VIDEO_MUTE))
 #define XLAT_STR_74 STRINGIFY(V4L2_CID_MPEG_VIDEO_MUTE)
 XLAT(V4L2_CID_MPEG_VIDEO_MUTE_YUV),
 #define XLAT_VAL_75 ((unsigned) (V4L2_CID_MPEG_VIDEO_MUTE_YUV))
 #define XLAT_STR_75 STRINGIFY(V4L2_CID_MPEG_VIDEO_MUTE_YUV)
 XLAT(V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE),
 #define XLAT_VAL_76 ((unsigned) (V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE))
 #define XLAT_STR_76 STRINGIFY(V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE)
 XLAT(V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER),
 #define XLAT_VAL_77 ((unsigned) (V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER))
 #define XLAT_STR_77 STRINGIFY(V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER)
 XLAT(V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB),
 #define XLAT_VAL_78 ((unsigned) (V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB))
 #define XLAT_STR_78 STRINGIFY(V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB)
 XLAT(V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE),
 #define XLAT_VAL_79 ((unsigned) (V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE))
 #define XLAT_STR_79 STRINGIFY(V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE)
 XLAT(V4L2_CID_MPEG_VIDEO_HEADER_MODE),
 #define XLAT_VAL_80 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEADER_MODE))
 #define XLAT_STR_80 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEADER_MODE)
 XLAT(V4L2_CID_MPEG_VIDEO_MAX_REF_PIC),
 #define XLAT_VAL_81 ((unsigned) (V4L2_CID_MPEG_VIDEO_MAX_REF_PIC))
 #define XLAT_STR_81 STRINGIFY(V4L2_CID_MPEG_VIDEO_MAX_REF_PIC)
 XLAT(V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE),
 #define XLAT_VAL_82 ((unsigned) (V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE))
 #define XLAT_STR_82 STRINGIFY(V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE)
 XLAT(V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES),
 #define XLAT_VAL_83 ((unsigned) (V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES))
 #define XLAT_STR_83 STRINGIFY(V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES)
 XLAT(V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB),
 #define XLAT_VAL_84 ((unsigned) (V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB))
 #define XLAT_STR_84 STRINGIFY(V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB)
 XLAT(V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE),
 #define XLAT_VAL_85 ((unsigned) (V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE))
 #define XLAT_STR_85 STRINGIFY(V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE)
 XLAT(V4L2_CID_MPEG_VIDEO_VBV_SIZE),
 #define XLAT_VAL_86 ((unsigned) (V4L2_CID_MPEG_VIDEO_VBV_SIZE))
 #define XLAT_STR_86 STRINGIFY(V4L2_CID_MPEG_VIDEO_VBV_SIZE)
 XLAT(V4L2_CID_MPEG_VIDEO_DEC_PTS),
 #define XLAT_VAL_87 ((unsigned) (V4L2_CID_MPEG_VIDEO_DEC_PTS))
 #define XLAT_STR_87 STRINGIFY(V4L2_CID_MPEG_VIDEO_DEC_PTS)
 XLAT(V4L2_CID_MPEG_VIDEO_DEC_FRAME),
 #define XLAT_VAL_88 ((unsigned) (V4L2_CID_MPEG_VIDEO_DEC_FRAME))
 #define XLAT_STR_88 STRINGIFY(V4L2_CID_MPEG_VIDEO_DEC_FRAME)
 XLAT(V4L2_CID_MPEG_VIDEO_VBV_DELAY),
 #define XLAT_VAL_89 ((unsigned) (V4L2_CID_MPEG_VIDEO_VBV_DELAY))
 #define XLAT_STR_89 STRINGIFY(V4L2_CID_MPEG_VIDEO_VBV_DELAY)
 XLAT(V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER),
 #define XLAT_VAL_90 ((unsigned) (V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER))
 #define XLAT_STR_90 STRINGIFY(V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER)
 XLAT(V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE),
 #define XLAT_VAL_91 ((unsigned) (V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE))
 #define XLAT_STR_91 STRINGIFY(V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE)
 XLAT(V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE),
 #define XLAT_VAL_92 ((unsigned) (V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE))
 #define XLAT_STR_92 STRINGIFY(V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE)
 XLAT(V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME),
 #define XLAT_VAL_93 ((unsigned) (V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME))
 #define XLAT_STR_93 STRINGIFY(V4L2_CID_MPEG_VIDEO_FORCE_KEY_FRAME)
 XLAT(V4L2_CID_MPEG_VIDEO_BASELAYER_PRIORITY_ID),
 #define XLAT_VAL_94 ((unsigned) (V4L2_CID_MPEG_VIDEO_BASELAYER_PRIORITY_ID))
 #define XLAT_STR_94 STRINGIFY(V4L2_CID_MPEG_VIDEO_BASELAYER_PRIORITY_ID)
 XLAT(V4L2_CID_MPEG_VIDEO_AU_DELIMITER),
 #define XLAT_VAL_95 ((unsigned) (V4L2_CID_MPEG_VIDEO_AU_DELIMITER))
 #define XLAT_STR_95 STRINGIFY(V4L2_CID_MPEG_VIDEO_AU_DELIMITER)
 XLAT(V4L2_CID_MPEG_VIDEO_LTR_COUNT),
 #define XLAT_VAL_96 ((unsigned) (V4L2_CID_MPEG_VIDEO_LTR_COUNT))
 #define XLAT_STR_96 STRINGIFY(V4L2_CID_MPEG_VIDEO_LTR_COUNT)
 XLAT(V4L2_CID_MPEG_VIDEO_FRAME_LTR_INDEX),
 #define XLAT_VAL_97 ((unsigned) (V4L2_CID_MPEG_VIDEO_FRAME_LTR_INDEX))
 #define XLAT_STR_97 STRINGIFY(V4L2_CID_MPEG_VIDEO_FRAME_LTR_INDEX)
 XLAT(V4L2_CID_MPEG_VIDEO_USE_LTR_FRAMES),
 #define XLAT_VAL_98 ((unsigned) (V4L2_CID_MPEG_VIDEO_USE_LTR_FRAMES))
 #define XLAT_STR_98 STRINGIFY(V4L2_CID_MPEG_VIDEO_USE_LTR_FRAMES)
 XLAT(V4L2_CID_MPEG_VIDEO_DEC_CONCEAL_COLOR),
 #define XLAT_VAL_99 ((unsigned) (V4L2_CID_MPEG_VIDEO_DEC_CONCEAL_COLOR))
 #define XLAT_STR_99 STRINGIFY(V4L2_CID_MPEG_VIDEO_DEC_CONCEAL_COLOR)
 XLAT(V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD),
 #define XLAT_VAL_100 ((unsigned) (V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD))
 #define XLAT_STR_100 STRINGIFY(V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD)
 XLAT(V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE),
 #define XLAT_VAL_101 ((unsigned) (V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE))
 #define XLAT_STR_101 STRINGIFY(V4L2_CID_MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG2_SLICE_PARAMS),
 #define XLAT_VAL_102 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG2_SLICE_PARAMS))
 #define XLAT_STR_102 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG2_SLICE_PARAMS)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG2_QUANTIZATION),
 #define XLAT_VAL_103 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG2_QUANTIZATION))
 #define XLAT_STR_103 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG2_QUANTIZATION)
 XLAT(V4L2_CID_FWHT_I_FRAME_QP),
 #define XLAT_VAL_104 ((unsigned) (V4L2_CID_FWHT_I_FRAME_QP))
 #define XLAT_STR_104 STRINGIFY(V4L2_CID_FWHT_I_FRAME_QP)
 XLAT(V4L2_CID_FWHT_P_FRAME_QP),
 #define XLAT_VAL_105 ((unsigned) (V4L2_CID_FWHT_P_FRAME_QP))
 #define XLAT_STR_105 STRINGIFY(V4L2_CID_FWHT_P_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP),
 #define XLAT_VAL_106 ((unsigned) (V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP))
 #define XLAT_STR_106 STRINGIFY(V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP),
 #define XLAT_VAL_107 ((unsigned) (V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP))
 #define XLAT_STR_107 STRINGIFY(V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP),
 #define XLAT_VAL_108 ((unsigned) (V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP))
 #define XLAT_STR_108 STRINGIFY(V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H263_MIN_QP),
 #define XLAT_VAL_109 ((unsigned) (V4L2_CID_MPEG_VIDEO_H263_MIN_QP))
 #define XLAT_STR_109 STRINGIFY(V4L2_CID_MPEG_VIDEO_H263_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H263_MAX_QP),
 #define XLAT_VAL_110 ((unsigned) (V4L2_CID_MPEG_VIDEO_H263_MAX_QP))
 #define XLAT_STR_110 STRINGIFY(V4L2_CID_MPEG_VIDEO_H263_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP),
 #define XLAT_VAL_111 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP))
 #define XLAT_STR_111 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP),
 #define XLAT_VAL_112 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP))
 #define XLAT_STR_112 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP),
 #define XLAT_VAL_113 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP))
 #define XLAT_STR_113 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_MIN_QP),
 #define XLAT_VAL_114 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_MIN_QP))
 #define XLAT_STR_114 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_MAX_QP),
 #define XLAT_VAL_115 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_MAX_QP))
 #define XLAT_STR_115 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM),
 #define XLAT_VAL_116 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM))
 #define XLAT_STR_116 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE),
 #define XLAT_VAL_117 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE))
 #define XLAT_STR_117 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE),
 #define XLAT_VAL_118 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE))
 #define XLAT_STR_118 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_I_PERIOD),
 #define XLAT_VAL_119 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_I_PERIOD))
 #define XLAT_STR_119 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_I_PERIOD)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_LEVEL),
 #define XLAT_VAL_120 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_LEVEL))
 #define XLAT_STR_120 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_LEVEL)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA),
 #define XLAT_VAL_121 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA))
 #define XLAT_STR_121 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA),
 #define XLAT_VAL_122 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA))
 #define XLAT_STR_122 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE),
 #define XLAT_VAL_123 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE))
 #define XLAT_STR_123 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_PROFILE),
 #define XLAT_VAL_124 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_PROFILE))
 #define XLAT_STR_124 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_PROFILE)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT),
 #define XLAT_VAL_125 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT))
 #define XLAT_STR_125 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH),
 #define XLAT_VAL_126 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH))
 #define XLAT_STR_126 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE),
 #define XLAT_VAL_127 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE))
 #define XLAT_STR_127 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC),
 #define XLAT_VAL_128 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC))
 #define XLAT_STR_128 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING),
 #define XLAT_VAL_129 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING))
 #define XLAT_STR_129 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0),
 #define XLAT_VAL_130 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0))
 #define XLAT_STR_130 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE),
 #define XLAT_VAL_131 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE))
 #define XLAT_STR_131 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_FMO),
 #define XLAT_VAL_132 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_FMO))
 #define XLAT_STR_132 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_FMO)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE),
 #define XLAT_VAL_133 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE))
 #define XLAT_STR_133 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP),
 #define XLAT_VAL_134 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP))
 #define XLAT_STR_134 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION),
 #define XLAT_VAL_135 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION))
 #define XLAT_STR_135 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE),
 #define XLAT_VAL_136 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE))
 #define XLAT_STR_136 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH),
 #define XLAT_VAL_137 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH))
 #define XLAT_STR_137 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_ASO),
 #define XLAT_VAL_138 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_ASO))
 #define XLAT_STR_138 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_ASO)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER),
 #define XLAT_VAL_139 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER))
 #define XLAT_STR_139 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING),
 #define XLAT_VAL_140 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING))
 #define XLAT_STR_140 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE),
 #define XLAT_VAL_141 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE))
 #define XLAT_STR_141 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER),
 #define XLAT_VAL_142 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER))
 #define XLAT_STR_142 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP),
 #define XLAT_VAL_143 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP))
 #define XLAT_STR_143 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_CONSTRAINED_INTRA_PREDICTION),
 #define XLAT_VAL_144 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_CONSTRAINED_INTRA_PREDICTION))
 #define XLAT_STR_144 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_CONSTRAINED_INTRA_PREDICTION)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_CHROMA_QP_INDEX_OFFSET),
 #define XLAT_VAL_145 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_CHROMA_QP_INDEX_OFFSET))
 #define XLAT_STR_145 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_CHROMA_QP_INDEX_OFFSET)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MIN_QP),
 #define XLAT_VAL_146 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MIN_QP))
 #define XLAT_STR_146 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MAX_QP),
 #define XLAT_VAL_147 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MAX_QP))
 #define XLAT_STR_147 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_I_FRAME_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MIN_QP),
 #define XLAT_VAL_148 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MIN_QP))
 #define XLAT_STR_148 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MAX_QP),
 #define XLAT_VAL_149 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MAX_QP))
 #define XLAT_STR_149 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_P_FRAME_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MIN_QP),
 #define XLAT_VAL_150 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MIN_QP))
 #define XLAT_STR_150 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MAX_QP),
 #define XLAT_VAL_151 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MAX_QP))
 #define XLAT_STR_151 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_B_FRAME_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L0_BR),
 #define XLAT_VAL_152 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L0_BR))
 #define XLAT_STR_152 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L0_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L1_BR),
 #define XLAT_VAL_153 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L1_BR))
 #define XLAT_STR_153 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L1_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L2_BR),
 #define XLAT_VAL_154 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L2_BR))
 #define XLAT_STR_154 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L2_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L3_BR),
 #define XLAT_VAL_155 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L3_BR))
 #define XLAT_STR_155 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L3_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L4_BR),
 #define XLAT_VAL_156 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L4_BR))
 #define XLAT_STR_156 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L4_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L5_BR),
 #define XLAT_VAL_157 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L5_BR))
 #define XLAT_STR_157 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L5_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L6_BR),
 #define XLAT_VAL_158 ((unsigned) (V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L6_BR))
 #define XLAT_STR_158 STRINGIFY(V4L2_CID_MPEG_VIDEO_H264_HIER_CODING_L6_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP),
 #define XLAT_VAL_159 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP))
 #define XLAT_STR_159 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP),
 #define XLAT_VAL_160 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP))
 #define XLAT_STR_160 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP),
 #define XLAT_VAL_161 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP))
 #define XLAT_STR_161 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP),
 #define XLAT_VAL_162 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP))
 #define XLAT_STR_162 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP),
 #define XLAT_VAL_163 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP))
 #define XLAT_STR_163 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL),
 #define XLAT_VAL_164 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL))
 #define XLAT_STR_164 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE),
 #define XLAT_VAL_165 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE))
 #define XLAT_STR_165 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE)
 XLAT(V4L2_CID_MPEG_VIDEO_MPEG4_QPEL),
 #define XLAT_VAL_166 ((unsigned) (V4L2_CID_MPEG_VIDEO_MPEG4_QPEL))
 #define XLAT_STR_166 STRINGIFY(V4L2_CID_MPEG_VIDEO_MPEG4_QPEL)

 XLAT(V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS),
 #define XLAT_VAL_167 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS))
 #define XLAT_STR_167 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4),
 #define XLAT_VAL_168 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4))
 #define XLAT_STR_168 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES),
 #define XLAT_VAL_169 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES))
 #define XLAT_STR_169 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL),
 #define XLAT_VAL_170 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL))
 #define XLAT_STR_170 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS),
 #define XLAT_VAL_171 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS))
 #define XLAT_STR_171 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD),
 #define XLAT_VAL_172 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD))
 #define XLAT_STR_172 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL),
 #define XLAT_VAL_173 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL))
 #define XLAT_STR_173 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_MIN_QP),
 #define XLAT_VAL_174 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_MIN_QP))
 #define XLAT_STR_174 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_MAX_QP),
 #define XLAT_VAL_175 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_MAX_QP))
 #define XLAT_STR_175 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP),
 #define XLAT_VAL_176 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP))
 #define XLAT_STR_176 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP),
 #define XLAT_VAL_177 ((unsigned) (V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP))
 #define XLAT_STR_177 STRINGIFY(V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_VP8_PROFILE),
 #define XLAT_VAL_178 ((unsigned) (V4L2_CID_MPEG_VIDEO_VP8_PROFILE))
 #define XLAT_STR_178 STRINGIFY(V4L2_CID_MPEG_VIDEO_VP8_PROFILE)
 XLAT(V4L2_CID_MPEG_VIDEO_VP9_PROFILE),
 #define XLAT_VAL_179 ((unsigned) (V4L2_CID_MPEG_VIDEO_VP9_PROFILE))
 #define XLAT_STR_179 STRINGIFY(V4L2_CID_MPEG_VIDEO_VP9_PROFILE)

 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_MIN_QP),
 #define XLAT_VAL_180 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_MIN_QP))
 #define XLAT_STR_180 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_MAX_QP),
 #define XLAT_VAL_181 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_MAX_QP))
 #define XLAT_STR_181 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_QP),
 #define XLAT_VAL_182 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_QP))
 #define XLAT_STR_182 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_QP),
 #define XLAT_VAL_183 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_QP))
 #define XLAT_STR_183 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_QP),
 #define XLAT_VAL_184 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_QP))
 #define XLAT_STR_184 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_QP),
 #define XLAT_VAL_185 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_QP))
 #define XLAT_STR_185 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_TYPE),
 #define XLAT_VAL_186 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_TYPE))
 #define XLAT_STR_186 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_TYPE)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_LAYER),
 #define XLAT_VAL_187 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_LAYER))
 #define XLAT_STR_187 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_LAYER)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_QP),
 #define XLAT_VAL_188 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_QP))
 #define XLAT_STR_188 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_QP),
 #define XLAT_VAL_189 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_QP))
 #define XLAT_STR_189 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_QP),
 #define XLAT_VAL_190 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_QP))
 #define XLAT_STR_190 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_QP),
 #define XLAT_VAL_191 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_QP))
 #define XLAT_STR_191 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_QP),
 #define XLAT_VAL_192 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_QP))
 #define XLAT_STR_192 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_QP),
 #define XLAT_VAL_193 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_QP))
 #define XLAT_STR_193 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_QP),
 #define XLAT_VAL_194 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_QP))
 #define XLAT_STR_194 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_PROFILE),
 #define XLAT_VAL_195 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_PROFILE))
 #define XLAT_STR_195 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_PROFILE)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_LEVEL),
 #define XLAT_VAL_196 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_LEVEL))
 #define XLAT_STR_196 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_LEVEL)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_FRAME_RATE_RESOLUTION),
 #define XLAT_VAL_197 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_FRAME_RATE_RESOLUTION))
 #define XLAT_STR_197 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_FRAME_RATE_RESOLUTION)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_TIER),
 #define XLAT_VAL_198 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_TIER))
 #define XLAT_STR_198 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_TIER)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_MAX_PARTITION_DEPTH),
 #define XLAT_VAL_199 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_MAX_PARTITION_DEPTH))
 #define XLAT_STR_199 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_MAX_PARTITION_DEPTH)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE),
 #define XLAT_VAL_200 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE))
 #define XLAT_STR_200 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_LOOP_FILTER_MODE)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_LF_BETA_OFFSET_DIV2),
 #define XLAT_VAL_201 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_LF_BETA_OFFSET_DIV2))
 #define XLAT_STR_201 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_LF_BETA_OFFSET_DIV2)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_LF_TC_OFFSET_DIV2),
 #define XLAT_VAL_202 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_LF_TC_OFFSET_DIV2))
 #define XLAT_STR_202 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_LF_TC_OFFSET_DIV2)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_TYPE),
 #define XLAT_VAL_203 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_TYPE))
 #define XLAT_STR_203 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_TYPE)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_PERIOD),
 #define XLAT_VAL_204 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_PERIOD))
 #define XLAT_STR_204 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_REFRESH_PERIOD)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_LOSSLESS_CU),
 #define XLAT_VAL_205 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_LOSSLESS_CU))
 #define XLAT_STR_205 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_LOSSLESS_CU)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_CONST_INTRA_PRED),
 #define XLAT_VAL_206 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_CONST_INTRA_PRED))
 #define XLAT_STR_206 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_CONST_INTRA_PRED)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_WAVEFRONT),
 #define XLAT_VAL_207 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_WAVEFRONT))
 #define XLAT_STR_207 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_WAVEFRONT)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_GENERAL_PB),
 #define XLAT_VAL_208 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_GENERAL_PB))
 #define XLAT_STR_208 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_GENERAL_PB)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_TEMPORAL_ID),
 #define XLAT_VAL_209 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_TEMPORAL_ID))
 #define XLAT_STR_209 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_TEMPORAL_ID)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_STRONG_SMOOTHING),
 #define XLAT_VAL_210 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_STRONG_SMOOTHING))
 #define XLAT_STR_210 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_STRONG_SMOOTHING)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_MAX_NUM_MERGE_MV_MINUS1),
 #define XLAT_VAL_211 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_MAX_NUM_MERGE_MV_MINUS1))
 #define XLAT_STR_211 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_MAX_NUM_MERGE_MV_MINUS1)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_INTRA_PU_SPLIT),
 #define XLAT_VAL_212 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_INTRA_PU_SPLIT))
 #define XLAT_STR_212 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_INTRA_PU_SPLIT)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_TMV_PREDICTION),
 #define XLAT_VAL_213 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_TMV_PREDICTION))
 #define XLAT_STR_213 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_TMV_PREDICTION)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_WITHOUT_STARTCODE),
 #define XLAT_VAL_214 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_WITHOUT_STARTCODE))
 #define XLAT_STR_214 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_WITHOUT_STARTCODE)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_SIZE_OF_LENGTH_FIELD),
 #define XLAT_VAL_215 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_SIZE_OF_LENGTH_FIELD))
 #define XLAT_STR_215 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_SIZE_OF_LENGTH_FIELD)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_BR),
 #define XLAT_VAL_216 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_BR))
 #define XLAT_STR_216 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L0_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_BR),
 #define XLAT_VAL_217 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_BR))
 #define XLAT_STR_217 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L1_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_BR),
 #define XLAT_VAL_218 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_BR))
 #define XLAT_STR_218 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L2_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_BR),
 #define XLAT_VAL_219 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_BR))
 #define XLAT_STR_219 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L3_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_BR),
 #define XLAT_VAL_220 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_BR))
 #define XLAT_STR_220 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L4_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_BR),
 #define XLAT_VAL_221 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_BR))
 #define XLAT_STR_221 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L5_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_BR),
 #define XLAT_VAL_222 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_BR))
 #define XLAT_STR_222 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_HIER_CODING_L6_BR)
 XLAT(V4L2_CID_MPEG_VIDEO_REF_NUMBER_FOR_PFRAMES),
 #define XLAT_VAL_223 ((unsigned) (V4L2_CID_MPEG_VIDEO_REF_NUMBER_FOR_PFRAMES))
 #define XLAT_STR_223 STRINGIFY(V4L2_CID_MPEG_VIDEO_REF_NUMBER_FOR_PFRAMES)
 XLAT(V4L2_CID_MPEG_VIDEO_PREPEND_SPSPPS_TO_IDR),
 #define XLAT_VAL_224 ((unsigned) (V4L2_CID_MPEG_VIDEO_PREPEND_SPSPPS_TO_IDR))
 #define XLAT_STR_224 STRINGIFY(V4L2_CID_MPEG_VIDEO_PREPEND_SPSPPS_TO_IDR)
 XLAT(V4L2_CID_MPEG_VIDEO_CONSTANT_QUALITY),
 #define XLAT_VAL_225 ((unsigned) (V4L2_CID_MPEG_VIDEO_CONSTANT_QUALITY))
 #define XLAT_STR_225 STRINGIFY(V4L2_CID_MPEG_VIDEO_CONSTANT_QUALITY)
 XLAT(V4L2_CID_MPEG_VIDEO_FRAME_SKIP_MODE),
 #define XLAT_VAL_226 ((unsigned) (V4L2_CID_MPEG_VIDEO_FRAME_SKIP_MODE))
 #define XLAT_STR_226 STRINGIFY(V4L2_CID_MPEG_VIDEO_FRAME_SKIP_MODE)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MIN_QP),
 #define XLAT_VAL_227 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MIN_QP))
 #define XLAT_STR_227 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MAX_QP),
 #define XLAT_VAL_228 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MAX_QP))
 #define XLAT_STR_228 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_I_FRAME_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MIN_QP),
 #define XLAT_VAL_229 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MIN_QP))
 #define XLAT_STR_229 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MAX_QP),
 #define XLAT_VAL_230 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MAX_QP))
 #define XLAT_STR_230 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_P_FRAME_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MIN_QP),
 #define XLAT_VAL_231 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MIN_QP))
 #define XLAT_STR_231 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MIN_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MAX_QP),
 #define XLAT_VAL_232 ((unsigned) (V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MAX_QP))
 #define XLAT_STR_232 STRINGIFY(V4L2_CID_MPEG_VIDEO_HEVC_B_FRAME_MAX_QP)
 XLAT(V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY),
 #define XLAT_VAL_233 ((unsigned) (V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY))
 #define XLAT_STR_233 STRINGIFY(V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY)
 XLAT(V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY_ENABLE),
 #define XLAT_VAL_234 ((unsigned) (V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY_ENABLE))
 #define XLAT_STR_234 STRINGIFY(V4L2_CID_MPEG_VIDEO_DEC_DISPLAY_DELAY_ENABLE)

 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE),
 #define XLAT_VAL_235 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE))
 #define XLAT_STR_235 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER),
 #define XLAT_VAL_236 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER))
 #define XLAT_STR_236 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE),
 #define XLAT_VAL_237 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE))
 #define XLAT_STR_237 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE),
 #define XLAT_VAL_238 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE))
 #define XLAT_STR_238 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE),
 #define XLAT_VAL_239 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE))
 #define XLAT_STR_239 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER),
 #define XLAT_VAL_240 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER))
 #define XLAT_STR_240 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE),
 #define XLAT_VAL_241 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE))
 #define XLAT_STR_241 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM),
 #define XLAT_VAL_242 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM))
 #define XLAT_STR_242 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP),
 #define XLAT_VAL_243 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP))
 #define XLAT_STR_243 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM),
 #define XLAT_VAL_244 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM))
 #define XLAT_STR_244 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM)
 XLAT(V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP),
 #define XLAT_VAL_245 ((unsigned) (V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP))
 #define XLAT_STR_245 STRINGIFY(V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP)
 XLAT(V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS),
 #define XLAT_VAL_246 ((unsigned) (V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS))
 #define XLAT_STR_246 STRINGIFY(V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS)

 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY),
 #define XLAT_VAL_247 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY))
 #define XLAT_STR_247 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE),
 #define XLAT_VAL_248 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE))
 #define XLAT_STR_248 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE),
 #define XLAT_VAL_249 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE))
 #define XLAT_STR_249 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE),
 #define XLAT_VAL_250 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE))
 #define XLAT_STR_250 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_PADDING),
 #define XLAT_VAL_251 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_PADDING))
 #define XLAT_STR_251 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_PADDING)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV),
 #define XLAT_VAL_252 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV))
 #define XLAT_STR_252 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT),
 #define XLAT_VAL_253 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT))
 #define XLAT_STR_253 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF),
 #define XLAT_VAL_254 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF))
 #define XLAT_STR_254 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY),
 #define XLAT_VAL_255 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY))
 #define XLAT_STR_255 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK),
 #define XLAT_VAL_256 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK))
 #define XLAT_STR_256 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH),
 #define XLAT_VAL_257 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH))
 #define XLAT_STR_257 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC),
 #define XLAT_VAL_258 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC))
 #define XLAT_STR_258 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC)
 XLAT(V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P),
 #define XLAT_VAL_259 ((unsigned) (V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P))
 #define XLAT_STR_259 STRINGIFY(V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P)

 XLAT(V4L2_CID_EXPOSURE_AUTO),
 #define XLAT_VAL_260 ((unsigned) (V4L2_CID_EXPOSURE_AUTO))
 #define XLAT_STR_260 STRINGIFY(V4L2_CID_EXPOSURE_AUTO)
 XLAT(V4L2_CID_EXPOSURE_ABSOLUTE),
 #define XLAT_VAL_261 ((unsigned) (V4L2_CID_EXPOSURE_ABSOLUTE))
 #define XLAT_STR_261 STRINGIFY(V4L2_CID_EXPOSURE_ABSOLUTE)
 XLAT(V4L2_CID_EXPOSURE_AUTO_PRIORITY),
 #define XLAT_VAL_262 ((unsigned) (V4L2_CID_EXPOSURE_AUTO_PRIORITY))
 #define XLAT_STR_262 STRINGIFY(V4L2_CID_EXPOSURE_AUTO_PRIORITY)
 XLAT(V4L2_CID_PAN_RELATIVE),
 #define XLAT_VAL_263 ((unsigned) (V4L2_CID_PAN_RELATIVE))
 #define XLAT_STR_263 STRINGIFY(V4L2_CID_PAN_RELATIVE)
 XLAT(V4L2_CID_TILT_RELATIVE),
 #define XLAT_VAL_264 ((unsigned) (V4L2_CID_TILT_RELATIVE))
 #define XLAT_STR_264 STRINGIFY(V4L2_CID_TILT_RELATIVE)
 XLAT(V4L2_CID_PAN_RESET),
 #define XLAT_VAL_265 ((unsigned) (V4L2_CID_PAN_RESET))
 #define XLAT_STR_265 STRINGIFY(V4L2_CID_PAN_RESET)
 XLAT(V4L2_CID_TILT_RESET),
 #define XLAT_VAL_266 ((unsigned) (V4L2_CID_TILT_RESET))
 #define XLAT_STR_266 STRINGIFY(V4L2_CID_TILT_RESET)
 XLAT(V4L2_CID_PAN_ABSOLUTE),
 #define XLAT_VAL_267 ((unsigned) (V4L2_CID_PAN_ABSOLUTE))
 #define XLAT_STR_267 STRINGIFY(V4L2_CID_PAN_ABSOLUTE)
 XLAT(V4L2_CID_TILT_ABSOLUTE),
 #define XLAT_VAL_268 ((unsigned) (V4L2_CID_TILT_ABSOLUTE))
 #define XLAT_STR_268 STRINGIFY(V4L2_CID_TILT_ABSOLUTE)
 XLAT(V4L2_CID_FOCUS_ABSOLUTE),
 #define XLAT_VAL_269 ((unsigned) (V4L2_CID_FOCUS_ABSOLUTE))
 #define XLAT_STR_269 STRINGIFY(V4L2_CID_FOCUS_ABSOLUTE)
 XLAT(V4L2_CID_FOCUS_RELATIVE),
 #define XLAT_VAL_270 ((unsigned) (V4L2_CID_FOCUS_RELATIVE))
 #define XLAT_STR_270 STRINGIFY(V4L2_CID_FOCUS_RELATIVE)
 XLAT(V4L2_CID_FOCUS_AUTO),
 #define XLAT_VAL_271 ((unsigned) (V4L2_CID_FOCUS_AUTO))
 #define XLAT_STR_271 STRINGIFY(V4L2_CID_FOCUS_AUTO)
 XLAT(V4L2_CID_ZOOM_ABSOLUTE),
 #define XLAT_VAL_272 ((unsigned) (V4L2_CID_ZOOM_ABSOLUTE))
 #define XLAT_STR_272 STRINGIFY(V4L2_CID_ZOOM_ABSOLUTE)
 XLAT(V4L2_CID_ZOOM_RELATIVE),
 #define XLAT_VAL_273 ((unsigned) (V4L2_CID_ZOOM_RELATIVE))
 #define XLAT_STR_273 STRINGIFY(V4L2_CID_ZOOM_RELATIVE)
 XLAT(V4L2_CID_ZOOM_CONTINUOUS),
 #define XLAT_VAL_274 ((unsigned) (V4L2_CID_ZOOM_CONTINUOUS))
 #define XLAT_STR_274 STRINGIFY(V4L2_CID_ZOOM_CONTINUOUS)
 XLAT(V4L2_CID_PRIVACY),
 #define XLAT_VAL_275 ((unsigned) (V4L2_CID_PRIVACY))
 #define XLAT_STR_275 STRINGIFY(V4L2_CID_PRIVACY)
 XLAT(V4L2_CID_IRIS_ABSOLUTE),
 #define XLAT_VAL_276 ((unsigned) (V4L2_CID_IRIS_ABSOLUTE))
 #define XLAT_STR_276 STRINGIFY(V4L2_CID_IRIS_ABSOLUTE)
 XLAT(V4L2_CID_IRIS_RELATIVE),
 #define XLAT_VAL_277 ((unsigned) (V4L2_CID_IRIS_RELATIVE))
 #define XLAT_STR_277 STRINGIFY(V4L2_CID_IRIS_RELATIVE)
 XLAT(V4L2_CID_AUTO_EXPOSURE_BIAS),
 #define XLAT_VAL_278 ((unsigned) (V4L2_CID_AUTO_EXPOSURE_BIAS))
 #define XLAT_STR_278 STRINGIFY(V4L2_CID_AUTO_EXPOSURE_BIAS)
 XLAT(V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE),
 #define XLAT_VAL_279 ((unsigned) (V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE))
 #define XLAT_STR_279 STRINGIFY(V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE)
 XLAT(V4L2_CID_WIDE_DYNAMIC_RANGE),
 #define XLAT_VAL_280 ((unsigned) (V4L2_CID_WIDE_DYNAMIC_RANGE))
 #define XLAT_STR_280 STRINGIFY(V4L2_CID_WIDE_DYNAMIC_RANGE)
 XLAT(V4L2_CID_IMAGE_STABILIZATION),
 #define XLAT_VAL_281 ((unsigned) (V4L2_CID_IMAGE_STABILIZATION))
 #define XLAT_STR_281 STRINGIFY(V4L2_CID_IMAGE_STABILIZATION)
 XLAT(V4L2_CID_ISO_SENSITIVITY),
 #define XLAT_VAL_282 ((unsigned) (V4L2_CID_ISO_SENSITIVITY))
 #define XLAT_STR_282 STRINGIFY(V4L2_CID_ISO_SENSITIVITY)
 XLAT(V4L2_CID_ISO_SENSITIVITY_AUTO),
 #define XLAT_VAL_283 ((unsigned) (V4L2_CID_ISO_SENSITIVITY_AUTO))
 #define XLAT_STR_283 STRINGIFY(V4L2_CID_ISO_SENSITIVITY_AUTO)
 XLAT(V4L2_CID_EXPOSURE_METERING),
 #define XLAT_VAL_284 ((unsigned) (V4L2_CID_EXPOSURE_METERING))
 #define XLAT_STR_284 STRINGIFY(V4L2_CID_EXPOSURE_METERING)
 XLAT(V4L2_CID_SCENE_MODE),
 #define XLAT_VAL_285 ((unsigned) (V4L2_CID_SCENE_MODE))
 #define XLAT_STR_285 STRINGIFY(V4L2_CID_SCENE_MODE)
 XLAT(V4L2_CID_3A_LOCK),
 #define XLAT_VAL_286 ((unsigned) (V4L2_CID_3A_LOCK))
 #define XLAT_STR_286 STRINGIFY(V4L2_CID_3A_LOCK)
 XLAT(V4L2_CID_AUTO_FOCUS_START),
 #define XLAT_VAL_287 ((unsigned) (V4L2_CID_AUTO_FOCUS_START))
 #define XLAT_STR_287 STRINGIFY(V4L2_CID_AUTO_FOCUS_START)
 XLAT(V4L2_CID_AUTO_FOCUS_STOP),
 #define XLAT_VAL_288 ((unsigned) (V4L2_CID_AUTO_FOCUS_STOP))
 #define XLAT_STR_288 STRINGIFY(V4L2_CID_AUTO_FOCUS_STOP)
 XLAT(V4L2_CID_AUTO_FOCUS_STATUS),
 #define XLAT_VAL_289 ((unsigned) (V4L2_CID_AUTO_FOCUS_STATUS))
 #define XLAT_STR_289 STRINGIFY(V4L2_CID_AUTO_FOCUS_STATUS)
 XLAT(V4L2_CID_AUTO_FOCUS_RANGE),
 #define XLAT_VAL_290 ((unsigned) (V4L2_CID_AUTO_FOCUS_RANGE))
 #define XLAT_STR_290 STRINGIFY(V4L2_CID_AUTO_FOCUS_RANGE)
 XLAT(V4L2_CID_PAN_SPEED),
 #define XLAT_VAL_291 ((unsigned) (V4L2_CID_PAN_SPEED))
 #define XLAT_STR_291 STRINGIFY(V4L2_CID_PAN_SPEED)
 XLAT(V4L2_CID_TILT_SPEED),
 #define XLAT_VAL_292 ((unsigned) (V4L2_CID_TILT_SPEED))
 #define XLAT_STR_292 STRINGIFY(V4L2_CID_TILT_SPEED)

 XLAT(V4L2_CID_RDS_TX_DEVIATION),
 #define XLAT_VAL_293 ((unsigned) (V4L2_CID_RDS_TX_DEVIATION))
 #define XLAT_STR_293 STRINGIFY(V4L2_CID_RDS_TX_DEVIATION)
 XLAT(V4L2_CID_RDS_TX_PI),
 #define XLAT_VAL_294 ((unsigned) (V4L2_CID_RDS_TX_PI))
 #define XLAT_STR_294 STRINGIFY(V4L2_CID_RDS_TX_PI)
 XLAT(V4L2_CID_RDS_TX_PTY),
 #define XLAT_VAL_295 ((unsigned) (V4L2_CID_RDS_TX_PTY))
 #define XLAT_STR_295 STRINGIFY(V4L2_CID_RDS_TX_PTY)
 XLAT(V4L2_CID_RDS_TX_PS_NAME),
 #define XLAT_VAL_296 ((unsigned) (V4L2_CID_RDS_TX_PS_NAME))
 #define XLAT_STR_296 STRINGIFY(V4L2_CID_RDS_TX_PS_NAME)
 XLAT(V4L2_CID_RDS_TX_RADIO_TEXT),
 #define XLAT_VAL_297 ((unsigned) (V4L2_CID_RDS_TX_RADIO_TEXT))
 #define XLAT_STR_297 STRINGIFY(V4L2_CID_RDS_TX_RADIO_TEXT)
 XLAT(V4L2_CID_RDS_TX_MONO_STEREO),
 #define XLAT_VAL_298 ((unsigned) (V4L2_CID_RDS_TX_MONO_STEREO))
 #define XLAT_STR_298 STRINGIFY(V4L2_CID_RDS_TX_MONO_STEREO)
 XLAT(V4L2_CID_RDS_TX_ARTIFICIAL_HEAD),
 #define XLAT_VAL_299 ((unsigned) (V4L2_CID_RDS_TX_ARTIFICIAL_HEAD))
 #define XLAT_STR_299 STRINGIFY(V4L2_CID_RDS_TX_ARTIFICIAL_HEAD)
 XLAT(V4L2_CID_RDS_TX_COMPRESSED),
 #define XLAT_VAL_300 ((unsigned) (V4L2_CID_RDS_TX_COMPRESSED))
 #define XLAT_STR_300 STRINGIFY(V4L2_CID_RDS_TX_COMPRESSED)
 XLAT(V4L2_CID_RDS_TX_DYNAMIC_PTY),
 #define XLAT_VAL_301 ((unsigned) (V4L2_CID_RDS_TX_DYNAMIC_PTY))
 #define XLAT_STR_301 STRINGIFY(V4L2_CID_RDS_TX_DYNAMIC_PTY)
 XLAT(V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT),
 #define XLAT_VAL_302 ((unsigned) (V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT))
 #define XLAT_STR_302 STRINGIFY(V4L2_CID_RDS_TX_TRAFFIC_ANNOUNCEMENT)
 XLAT(V4L2_CID_RDS_TX_TRAFFIC_PROGRAM),
 #define XLAT_VAL_303 ((unsigned) (V4L2_CID_RDS_TX_TRAFFIC_PROGRAM))
 #define XLAT_STR_303 STRINGIFY(V4L2_CID_RDS_TX_TRAFFIC_PROGRAM)
 XLAT(V4L2_CID_RDS_TX_MUSIC_SPEECH),
 #define XLAT_VAL_304 ((unsigned) (V4L2_CID_RDS_TX_MUSIC_SPEECH))
 #define XLAT_STR_304 STRINGIFY(V4L2_CID_RDS_TX_MUSIC_SPEECH)
 XLAT(V4L2_CID_RDS_TX_ALT_FREQS_ENABLE),
 #define XLAT_VAL_305 ((unsigned) (V4L2_CID_RDS_TX_ALT_FREQS_ENABLE))
 #define XLAT_STR_305 STRINGIFY(V4L2_CID_RDS_TX_ALT_FREQS_ENABLE)
 XLAT(V4L2_CID_RDS_TX_ALT_FREQS),
 #define XLAT_VAL_306 ((unsigned) (V4L2_CID_RDS_TX_ALT_FREQS))
 #define XLAT_STR_306 STRINGIFY(V4L2_CID_RDS_TX_ALT_FREQS)
 XLAT(V4L2_CID_AUDIO_LIMITER_ENABLED),
 #define XLAT_VAL_307 ((unsigned) (V4L2_CID_AUDIO_LIMITER_ENABLED))
 #define XLAT_STR_307 STRINGIFY(V4L2_CID_AUDIO_LIMITER_ENABLED)
 XLAT(V4L2_CID_AUDIO_LIMITER_RELEASE_TIME),
 #define XLAT_VAL_308 ((unsigned) (V4L2_CID_AUDIO_LIMITER_RELEASE_TIME))
 #define XLAT_STR_308 STRINGIFY(V4L2_CID_AUDIO_LIMITER_RELEASE_TIME)
 XLAT(V4L2_CID_AUDIO_LIMITER_DEVIATION),
 #define XLAT_VAL_309 ((unsigned) (V4L2_CID_AUDIO_LIMITER_DEVIATION))
 #define XLAT_STR_309 STRINGIFY(V4L2_CID_AUDIO_LIMITER_DEVIATION)
 XLAT(V4L2_CID_AUDIO_COMPRESSION_ENABLED),
 #define XLAT_VAL_310 ((unsigned) (V4L2_CID_AUDIO_COMPRESSION_ENABLED))
 #define XLAT_STR_310 STRINGIFY(V4L2_CID_AUDIO_COMPRESSION_ENABLED)
 XLAT(V4L2_CID_AUDIO_COMPRESSION_GAIN),
 #define XLAT_VAL_311 ((unsigned) (V4L2_CID_AUDIO_COMPRESSION_GAIN))
 #define XLAT_STR_311 STRINGIFY(V4L2_CID_AUDIO_COMPRESSION_GAIN)
 XLAT(V4L2_CID_AUDIO_COMPRESSION_THRESHOLD),
 #define XLAT_VAL_312 ((unsigned) (V4L2_CID_AUDIO_COMPRESSION_THRESHOLD))
 #define XLAT_STR_312 STRINGIFY(V4L2_CID_AUDIO_COMPRESSION_THRESHOLD)
 XLAT(V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME),
 #define XLAT_VAL_313 ((unsigned) (V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME))
 #define XLAT_STR_313 STRINGIFY(V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME)
 XLAT(V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME),
 #define XLAT_VAL_314 ((unsigned) (V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME))
 #define XLAT_STR_314 STRINGIFY(V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME)
 XLAT(V4L2_CID_PILOT_TONE_ENABLED),
 #define XLAT_VAL_315 ((unsigned) (V4L2_CID_PILOT_TONE_ENABLED))
 #define XLAT_STR_315 STRINGIFY(V4L2_CID_PILOT_TONE_ENABLED)
 XLAT(V4L2_CID_PILOT_TONE_DEVIATION),
 #define XLAT_VAL_316 ((unsigned) (V4L2_CID_PILOT_TONE_DEVIATION))
 #define XLAT_STR_316 STRINGIFY(V4L2_CID_PILOT_TONE_DEVIATION)
 XLAT(V4L2_CID_PILOT_TONE_FREQUENCY),
 #define XLAT_VAL_317 ((unsigned) (V4L2_CID_PILOT_TONE_FREQUENCY))
 #define XLAT_STR_317 STRINGIFY(V4L2_CID_PILOT_TONE_FREQUENCY)
 XLAT(V4L2_CID_TUNE_PREEMPHASIS),
 #define XLAT_VAL_318 ((unsigned) (V4L2_CID_TUNE_PREEMPHASIS))
 #define XLAT_STR_318 STRINGIFY(V4L2_CID_TUNE_PREEMPHASIS)
 XLAT(V4L2_CID_TUNE_POWER_LEVEL),
 #define XLAT_VAL_319 ((unsigned) (V4L2_CID_TUNE_POWER_LEVEL))
 #define XLAT_STR_319 STRINGIFY(V4L2_CID_TUNE_POWER_LEVEL)
 XLAT(V4L2_CID_TUNE_ANTENNA_CAPACITOR),
 #define XLAT_VAL_320 ((unsigned) (V4L2_CID_TUNE_ANTENNA_CAPACITOR))
 #define XLAT_STR_320 STRINGIFY(V4L2_CID_TUNE_ANTENNA_CAPACITOR)

 XLAT(V4L2_CID_FLASH_LED_MODE),
 #define XLAT_VAL_321 ((unsigned) (V4L2_CID_FLASH_LED_MODE))
 #define XLAT_STR_321 STRINGIFY(V4L2_CID_FLASH_LED_MODE)
 XLAT(V4L2_CID_FLASH_STROBE_SOURCE),
 #define XLAT_VAL_322 ((unsigned) (V4L2_CID_FLASH_STROBE_SOURCE))
 #define XLAT_STR_322 STRINGIFY(V4L2_CID_FLASH_STROBE_SOURCE)
 XLAT(V4L2_CID_FLASH_STROBE),
 #define XLAT_VAL_323 ((unsigned) (V4L2_CID_FLASH_STROBE))
 #define XLAT_STR_323 STRINGIFY(V4L2_CID_FLASH_STROBE)
 XLAT(V4L2_CID_FLASH_STROBE_STOP),
 #define XLAT_VAL_324 ((unsigned) (V4L2_CID_FLASH_STROBE_STOP))
 #define XLAT_STR_324 STRINGIFY(V4L2_CID_FLASH_STROBE_STOP)
 XLAT(V4L2_CID_FLASH_STROBE_STATUS),
 #define XLAT_VAL_325 ((unsigned) (V4L2_CID_FLASH_STROBE_STATUS))
 #define XLAT_STR_325 STRINGIFY(V4L2_CID_FLASH_STROBE_STATUS)
 XLAT(V4L2_CID_FLASH_TIMEOUT),
 #define XLAT_VAL_326 ((unsigned) (V4L2_CID_FLASH_TIMEOUT))
 #define XLAT_STR_326 STRINGIFY(V4L2_CID_FLASH_TIMEOUT)
 XLAT(V4L2_CID_FLASH_INTENSITY),
 #define XLAT_VAL_327 ((unsigned) (V4L2_CID_FLASH_INTENSITY))
 #define XLAT_STR_327 STRINGIFY(V4L2_CID_FLASH_INTENSITY)
 XLAT(V4L2_CID_FLASH_TORCH_INTENSITY),
 #define XLAT_VAL_328 ((unsigned) (V4L2_CID_FLASH_TORCH_INTENSITY))
 #define XLAT_STR_328 STRINGIFY(V4L2_CID_FLASH_TORCH_INTENSITY)
 XLAT(V4L2_CID_FLASH_INDICATOR_INTENSITY),
 #define XLAT_VAL_329 ((unsigned) (V4L2_CID_FLASH_INDICATOR_INTENSITY))
 #define XLAT_STR_329 STRINGIFY(V4L2_CID_FLASH_INDICATOR_INTENSITY)
 XLAT(V4L2_CID_FLASH_FAULT),
 #define XLAT_VAL_330 ((unsigned) (V4L2_CID_FLASH_FAULT))
 #define XLAT_STR_330 STRINGIFY(V4L2_CID_FLASH_FAULT)
 XLAT(V4L2_CID_FLASH_CHARGE),
 #define XLAT_VAL_331 ((unsigned) (V4L2_CID_FLASH_CHARGE))
 #define XLAT_STR_331 STRINGIFY(V4L2_CID_FLASH_CHARGE)
 XLAT(V4L2_CID_FLASH_READY),
 #define XLAT_VAL_332 ((unsigned) (V4L2_CID_FLASH_READY))
 #define XLAT_STR_332 STRINGIFY(V4L2_CID_FLASH_READY)

 XLAT(V4L2_CID_VBLANK),
 #define XLAT_VAL_333 ((unsigned) (V4L2_CID_VBLANK))
 #define XLAT_STR_333 STRINGIFY(V4L2_CID_VBLANK)
 XLAT(V4L2_CID_HBLANK),
 #define XLAT_VAL_334 ((unsigned) (V4L2_CID_HBLANK))
 #define XLAT_STR_334 STRINGIFY(V4L2_CID_HBLANK)
 XLAT(V4L2_CID_ANALOGUE_GAIN),
 #define XLAT_VAL_335 ((unsigned) (V4L2_CID_ANALOGUE_GAIN))
 #define XLAT_STR_335 STRINGIFY(V4L2_CID_ANALOGUE_GAIN)
 XLAT(V4L2_CID_TEST_PATTERN_RED),
 #define XLAT_VAL_336 ((unsigned) (V4L2_CID_TEST_PATTERN_RED))
 #define XLAT_STR_336 STRINGIFY(V4L2_CID_TEST_PATTERN_RED)
 XLAT(V4L2_CID_TEST_PATTERN_GREENR),
 #define XLAT_VAL_337 ((unsigned) (V4L2_CID_TEST_PATTERN_GREENR))
 #define XLAT_STR_337 STRINGIFY(V4L2_CID_TEST_PATTERN_GREENR)
 XLAT(V4L2_CID_TEST_PATTERN_BLUE),
 #define XLAT_VAL_338 ((unsigned) (V4L2_CID_TEST_PATTERN_BLUE))
 #define XLAT_STR_338 STRINGIFY(V4L2_CID_TEST_PATTERN_BLUE)
 XLAT(V4L2_CID_TEST_PATTERN_GREENB),
 #define XLAT_VAL_339 ((unsigned) (V4L2_CID_TEST_PATTERN_GREENB))
 #define XLAT_STR_339 STRINGIFY(V4L2_CID_TEST_PATTERN_GREENB)
 XLAT(V4L2_CID_UNIT_CELL_SIZE),
 #define XLAT_VAL_340 ((unsigned) (V4L2_CID_UNIT_CELL_SIZE))
 #define XLAT_STR_340 STRINGIFY(V4L2_CID_UNIT_CELL_SIZE)
 XLAT(V4L2_CID_NOTIFY_GAINS),
 #define XLAT_VAL_341 ((unsigned) (V4L2_CID_NOTIFY_GAINS))
 #define XLAT_STR_341 STRINGIFY(V4L2_CID_NOTIFY_GAINS)

 XLAT(V4L2_CID_LINK_FREQ),
 #define XLAT_VAL_342 ((unsigned) (V4L2_CID_LINK_FREQ))
 #define XLAT_STR_342 STRINGIFY(V4L2_CID_LINK_FREQ)
 XLAT(V4L2_CID_PIXEL_RATE),
 #define XLAT_VAL_343 ((unsigned) (V4L2_CID_PIXEL_RATE))
 #define XLAT_STR_343 STRINGIFY(V4L2_CID_PIXEL_RATE)
 XLAT(V4L2_CID_TEST_PATTERN),
 #define XLAT_VAL_344 ((unsigned) (V4L2_CID_TEST_PATTERN))
 #define XLAT_STR_344 STRINGIFY(V4L2_CID_TEST_PATTERN)
 XLAT(V4L2_CID_DEINTERLACING_MODE),
 #define XLAT_VAL_345 ((unsigned) (V4L2_CID_DEINTERLACING_MODE))
 #define XLAT_STR_345 STRINGIFY(V4L2_CID_DEINTERLACING_MODE)
 XLAT(V4L2_CID_DIGITAL_GAIN),
 #define XLAT_VAL_346 ((unsigned) (V4L2_CID_DIGITAL_GAIN))
 #define XLAT_STR_346 STRINGIFY(V4L2_CID_DIGITAL_GAIN)

 XLAT(V4L2_CID_DV_TX_RGB_RANGE),
 #define XLAT_VAL_347 ((unsigned) (V4L2_CID_DV_TX_RGB_RANGE))
 #define XLAT_STR_347 STRINGIFY(V4L2_CID_DV_TX_RGB_RANGE)
 XLAT(V4L2_CID_DV_TX_IT_CONTENT_TYPE),
 #define XLAT_VAL_348 ((unsigned) (V4L2_CID_DV_TX_IT_CONTENT_TYPE))
 #define XLAT_STR_348 STRINGIFY(V4L2_CID_DV_TX_IT_CONTENT_TYPE)
 XLAT(V4L2_CID_DV_RX_RGB_RANGE),
 #define XLAT_VAL_349 ((unsigned) (V4L2_CID_DV_RX_RGB_RANGE))
 #define XLAT_STR_349 STRINGIFY(V4L2_CID_DV_RX_RGB_RANGE)
 XLAT(V4L2_CID_DV_RX_IT_CONTENT_TYPE),
 #define XLAT_VAL_350 ((unsigned) (V4L2_CID_DV_RX_IT_CONTENT_TYPE))
 #define XLAT_STR_350 STRINGIFY(V4L2_CID_DV_RX_IT_CONTENT_TYPE)
 XLAT(V4L2_CID_TUNE_DEEMPHASIS),
 #define XLAT_VAL_351 ((unsigned) (V4L2_CID_TUNE_DEEMPHASIS))
 #define XLAT_STR_351 STRINGIFY(V4L2_CID_TUNE_DEEMPHASIS)
 XLAT(V4L2_CID_RDS_RECEPTION),
 #define XLAT_VAL_352 ((unsigned) (V4L2_CID_RDS_RECEPTION))
 #define XLAT_STR_352 STRINGIFY(V4L2_CID_RDS_RECEPTION)
 XLAT(V4L2_CID_RDS_RX_PTY),
 #define XLAT_VAL_353 ((unsigned) (V4L2_CID_RDS_RX_PTY))
 #define XLAT_STR_353 STRINGIFY(V4L2_CID_RDS_RX_PTY)
 XLAT(V4L2_CID_RDS_RX_PS_NAME),
 #define XLAT_VAL_354 ((unsigned) (V4L2_CID_RDS_RX_PS_NAME))
 #define XLAT_STR_354 STRINGIFY(V4L2_CID_RDS_RX_PS_NAME)
 XLAT(V4L2_CID_RDS_RX_RADIO_TEXT),
 #define XLAT_VAL_355 ((unsigned) (V4L2_CID_RDS_RX_RADIO_TEXT))
 #define XLAT_STR_355 STRINGIFY(V4L2_CID_RDS_RX_RADIO_TEXT)
 XLAT(V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT),
 #define XLAT_VAL_356 ((unsigned) (V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT))
 #define XLAT_STR_356 STRINGIFY(V4L2_CID_RDS_RX_TRAFFIC_ANNOUNCEMENT)
 XLAT(V4L2_CID_RDS_RX_TRAFFIC_PROGRAM),
 #define XLAT_VAL_357 ((unsigned) (V4L2_CID_RDS_RX_TRAFFIC_PROGRAM))
 #define XLAT_STR_357 STRINGIFY(V4L2_CID_RDS_RX_TRAFFIC_PROGRAM)
 XLAT(V4L2_CID_RDS_RX_MUSIC_SPEECH),
 #define XLAT_VAL_358 ((unsigned) (V4L2_CID_RDS_RX_MUSIC_SPEECH))
 #define XLAT_STR_358 STRINGIFY(V4L2_CID_RDS_RX_MUSIC_SPEECH)
 XLAT(V4L2_CID_RF_TUNER_BANDWIDTH_AUTO),
 #define XLAT_VAL_359 ((unsigned) (V4L2_CID_RF_TUNER_BANDWIDTH_AUTO))
 #define XLAT_STR_359 STRINGIFY(V4L2_CID_RF_TUNER_BANDWIDTH_AUTO)
 XLAT(V4L2_CID_RF_TUNER_BANDWIDTH),
 #define XLAT_VAL_360 ((unsigned) (V4L2_CID_RF_TUNER_BANDWIDTH))
 #define XLAT_STR_360 STRINGIFY(V4L2_CID_RF_TUNER_BANDWIDTH)
 XLAT(V4L2_CID_RF_TUNER_RF_GAIN),
 #define XLAT_VAL_361 ((unsigned) (V4L2_CID_RF_TUNER_RF_GAIN))
 #define XLAT_STR_361 STRINGIFY(V4L2_CID_RF_TUNER_RF_GAIN)
 XLAT(V4L2_CID_RF_TUNER_LNA_GAIN_AUTO),
 #define XLAT_VAL_362 ((unsigned) (V4L2_CID_RF_TUNER_LNA_GAIN_AUTO))
 #define XLAT_STR_362 STRINGIFY(V4L2_CID_RF_TUNER_LNA_GAIN_AUTO)
 XLAT(V4L2_CID_RF_TUNER_LNA_GAIN),
 #define XLAT_VAL_363 ((unsigned) (V4L2_CID_RF_TUNER_LNA_GAIN))
 #define XLAT_STR_363 STRINGIFY(V4L2_CID_RF_TUNER_LNA_GAIN)
 XLAT(V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO),
 #define XLAT_VAL_364 ((unsigned) (V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO))
 #define XLAT_STR_364 STRINGIFY(V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO)
 XLAT(V4L2_CID_RF_TUNER_MIXER_GAIN),
 #define XLAT_VAL_365 ((unsigned) (V4L2_CID_RF_TUNER_MIXER_GAIN))
 #define XLAT_STR_365 STRINGIFY(V4L2_CID_RF_TUNER_MIXER_GAIN)
 XLAT(V4L2_CID_RF_TUNER_IF_GAIN_AUTO),
 #define XLAT_VAL_366 ((unsigned) (V4L2_CID_RF_TUNER_IF_GAIN_AUTO))
 #define XLAT_STR_366 STRINGIFY(V4L2_CID_RF_TUNER_IF_GAIN_AUTO)
 XLAT(V4L2_CID_RF_TUNER_IF_GAIN),
 #define XLAT_VAL_367 ((unsigned) (V4L2_CID_RF_TUNER_IF_GAIN))
 #define XLAT_STR_367 STRINGIFY(V4L2_CID_RF_TUNER_IF_GAIN)
 XLAT(V4L2_CID_RF_TUNER_PLL_LOCK),
 #define XLAT_VAL_368 ((unsigned) (V4L2_CID_RF_TUNER_PLL_LOCK))
 #define XLAT_STR_368 STRINGIFY(V4L2_CID_RF_TUNER_PLL_LOCK)

 XLAT(V4L2_CID_DETECT_MD_MODE),
 #define XLAT_VAL_369 ((unsigned) (V4L2_CID_DETECT_MD_MODE))
 #define XLAT_STR_369 STRINGIFY(V4L2_CID_DETECT_MD_MODE)
 XLAT(V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD),
 #define XLAT_VAL_370 ((unsigned) (V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD))
 #define XLAT_STR_370 STRINGIFY(V4L2_CID_DETECT_MD_GLOBAL_THRESHOLD)
 XLAT(V4L2_CID_DETECT_MD_THRESHOLD_GRID),
 #define XLAT_VAL_371 ((unsigned) (V4L2_CID_DETECT_MD_THRESHOLD_GRID))
 #define XLAT_STR_371 STRINGIFY(V4L2_CID_DETECT_MD_THRESHOLD_GRID)
 XLAT(V4L2_CID_DETECT_MD_REGION_GRID),
 #define XLAT_VAL_372 ((unsigned) (V4L2_CID_DETECT_MD_REGION_GRID))
 #define XLAT_STR_372 STRINGIFY(V4L2_CID_DETECT_MD_REGION_GRID)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat v4l2_control_ids[1] = { {
 .data = v4l2_control_ids_xdata,
 .size = ARRAY_SIZE(v4l2_control_ids_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
#  ifdef XLAT_VAL_79
  | XLAT_VAL_79
#  endif
#  ifdef XLAT_VAL_80
  | XLAT_VAL_80
#  endif
#  ifdef XLAT_VAL_81
  | XLAT_VAL_81
#  endif
#  ifdef XLAT_VAL_82
  | XLAT_VAL_82
#  endif
#  ifdef XLAT_VAL_83
  | XLAT_VAL_83
#  endif
#  ifdef XLAT_VAL_84
  | XLAT_VAL_84
#  endif
#  ifdef XLAT_VAL_85
  | XLAT_VAL_85
#  endif
#  ifdef XLAT_VAL_86
  | XLAT_VAL_86
#  endif
#  ifdef XLAT_VAL_87
  | XLAT_VAL_87
#  endif
#  ifdef XLAT_VAL_88
  | XLAT_VAL_88
#  endif
#  ifdef XLAT_VAL_89
  | XLAT_VAL_89
#  endif
#  ifdef XLAT_VAL_90
  | XLAT_VAL_90
#  endif
#  ifdef XLAT_VAL_91
  | XLAT_VAL_91
#  endif
#  ifdef XLAT_VAL_92
  | XLAT_VAL_92
#  endif
#  ifdef XLAT_VAL_93
  | XLAT_VAL_93
#  endif
#  ifdef XLAT_VAL_94
  | XLAT_VAL_94
#  endif
#  ifdef XLAT_VAL_95
  | XLAT_VAL_95
#  endif
#  ifdef XLAT_VAL_96
  | XLAT_VAL_96
#  endif
#  ifdef XLAT_VAL_97
  | XLAT_VAL_97
#  endif
#  ifdef XLAT_VAL_98
  | XLAT_VAL_98
#  endif
#  ifdef XLAT_VAL_99
  | XLAT_VAL_99
#  endif
#  ifdef XLAT_VAL_100
  | XLAT_VAL_100
#  endif
#  ifdef XLAT_VAL_101
  | XLAT_VAL_101
#  endif
#  ifdef XLAT_VAL_102
  | XLAT_VAL_102
#  endif
#  ifdef XLAT_VAL_103
  | XLAT_VAL_103
#  endif
#  ifdef XLAT_VAL_104
  | XLAT_VAL_104
#  endif
#  ifdef XLAT_VAL_105
  | XLAT_VAL_105
#  endif
#  ifdef XLAT_VAL_106
  | XLAT_VAL_106
#  endif
#  ifdef XLAT_VAL_107
  | XLAT_VAL_107
#  endif
#  ifdef XLAT_VAL_108
  | XLAT_VAL_108
#  endif
#  ifdef XLAT_VAL_109
  | XLAT_VAL_109
#  endif
#  ifdef XLAT_VAL_110
  | XLAT_VAL_110
#  endif
#  ifdef XLAT_VAL_111
  | XLAT_VAL_111
#  endif
#  ifdef XLAT_VAL_112
  | XLAT_VAL_112
#  endif
#  ifdef XLAT_VAL_113
  | XLAT_VAL_113
#  endif
#  ifdef XLAT_VAL_114
  | XLAT_VAL_114
#  endif
#  ifdef XLAT_VAL_115
  | XLAT_VAL_115
#  endif
#  ifdef XLAT_VAL_116
  | XLAT_VAL_116
#  endif
#  ifdef XLAT_VAL_117
  | XLAT_VAL_117
#  endif
#  ifdef XLAT_VAL_118
  | XLAT_VAL_118
#  endif
#  ifdef XLAT_VAL_119
  | XLAT_VAL_119
#  endif
#  ifdef XLAT_VAL_120
  | XLAT_VAL_120
#  endif
#  ifdef XLAT_VAL_121
  | XLAT_VAL_121
#  endif
#  ifdef XLAT_VAL_122
  | XLAT_VAL_122
#  endif
#  ifdef XLAT_VAL_123
  | XLAT_VAL_123
#  endif
#  ifdef XLAT_VAL_124
  | XLAT_VAL_124
#  endif
#  ifdef XLAT_VAL_125
  | XLAT_VAL_125
#  endif
#  ifdef XLAT_VAL_126
  | XLAT_VAL_126
#  endif
#  ifdef XLAT_VAL_127
  | XLAT_VAL_127
#  endif
#  ifdef XLAT_VAL_128
  | XLAT_VAL_128
#  endif
#  ifdef XLAT_VAL_129
  | XLAT_VAL_129
#  endif
#  ifdef XLAT_VAL_130
  | XLAT_VAL_130
#  endif
#  ifdef XLAT_VAL_131
  | XLAT_VAL_131
#  endif
#  ifdef XLAT_VAL_132
  | XLAT_VAL_132
#  endif
#  ifdef XLAT_VAL_133
  | XLAT_VAL_133
#  endif
#  ifdef XLAT_VAL_134
  | XLAT_VAL_134
#  endif
#  ifdef XLAT_VAL_135
  | XLAT_VAL_135
#  endif
#  ifdef XLAT_VAL_136
  | XLAT_VAL_136
#  endif
#  ifdef XLAT_VAL_137
  | XLAT_VAL_137
#  endif
#  ifdef XLAT_VAL_138
  | XLAT_VAL_138
#  endif
#  ifdef XLAT_VAL_139
  | XLAT_VAL_139
#  endif
#  ifdef XLAT_VAL_140
  | XLAT_VAL_140
#  endif
#  ifdef XLAT_VAL_141
  | XLAT_VAL_141
#  endif
#  ifdef XLAT_VAL_142
  | XLAT_VAL_142
#  endif
#  ifdef XLAT_VAL_143
  | XLAT_VAL_143
#  endif
#  ifdef XLAT_VAL_144
  | XLAT_VAL_144
#  endif
#  ifdef XLAT_VAL_145
  | XLAT_VAL_145
#  endif
#  ifdef XLAT_VAL_146
  | XLAT_VAL_146
#  endif
#  ifdef XLAT_VAL_147
  | XLAT_VAL_147
#  endif
#  ifdef XLAT_VAL_148
  | XLAT_VAL_148
#  endif
#  ifdef XLAT_VAL_149
  | XLAT_VAL_149
#  endif
#  ifdef XLAT_VAL_150
  | XLAT_VAL_150
#  endif
#  ifdef XLAT_VAL_151
  | XLAT_VAL_151
#  endif
#  ifdef XLAT_VAL_152
  | XLAT_VAL_152
#  endif
#  ifdef XLAT_VAL_153
  | XLAT_VAL_153
#  endif
#  ifdef XLAT_VAL_154
  | XLAT_VAL_154
#  endif
#  ifdef XLAT_VAL_155
  | XLAT_VAL_155
#  endif
#  ifdef XLAT_VAL_156
  | XLAT_VAL_156
#  endif
#  ifdef XLAT_VAL_157
  | XLAT_VAL_157
#  endif
#  ifdef XLAT_VAL_158
  | XLAT_VAL_158
#  endif
#  ifdef XLAT_VAL_159
  | XLAT_VAL_159
#  endif
#  ifdef XLAT_VAL_160
  | XLAT_VAL_160
#  endif
#  ifdef XLAT_VAL_161
  | XLAT_VAL_161
#  endif
#  ifdef XLAT_VAL_162
  | XLAT_VAL_162
#  endif
#  ifdef XLAT_VAL_163
  | XLAT_VAL_163
#  endif
#  ifdef XLAT_VAL_164
  | XLAT_VAL_164
#  endif
#  ifdef XLAT_VAL_165
  | XLAT_VAL_165
#  endif
#  ifdef XLAT_VAL_166
  | XLAT_VAL_166
#  endif
#  ifdef XLAT_VAL_167
  | XLAT_VAL_167
#  endif
#  ifdef XLAT_VAL_168
  | XLAT_VAL_168
#  endif
#  ifdef XLAT_VAL_169
  | XLAT_VAL_169
#  endif
#  ifdef XLAT_VAL_170
  | XLAT_VAL_170
#  endif
#  ifdef XLAT_VAL_171
  | XLAT_VAL_171
#  endif
#  ifdef XLAT_VAL_172
  | XLAT_VAL_172
#  endif
#  ifdef XLAT_VAL_173
  | XLAT_VAL_173
#  endif
#  ifdef XLAT_VAL_174
  | XLAT_VAL_174
#  endif
#  ifdef XLAT_VAL_175
  | XLAT_VAL_175
#  endif
#  ifdef XLAT_VAL_176
  | XLAT_VAL_176
#  endif
#  ifdef XLAT_VAL_177
  | XLAT_VAL_177
#  endif
#  ifdef XLAT_VAL_178
  | XLAT_VAL_178
#  endif
#  ifdef XLAT_VAL_179
  | XLAT_VAL_179
#  endif
#  ifdef XLAT_VAL_180
  | XLAT_VAL_180
#  endif
#  ifdef XLAT_VAL_181
  | XLAT_VAL_181
#  endif
#  ifdef XLAT_VAL_182
  | XLAT_VAL_182
#  endif
#  ifdef XLAT_VAL_183
  | XLAT_VAL_183
#  endif
#  ifdef XLAT_VAL_184
  | XLAT_VAL_184
#  endif
#  ifdef XLAT_VAL_185
  | XLAT_VAL_185
#  endif
#  ifdef XLAT_VAL_186
  | XLAT_VAL_186
#  endif
#  ifdef XLAT_VAL_187
  | XLAT_VAL_187
#  endif
#  ifdef XLAT_VAL_188
  | XLAT_VAL_188
#  endif
#  ifdef XLAT_VAL_189
  | XLAT_VAL_189
#  endif
#  ifdef XLAT_VAL_190
  | XLAT_VAL_190
#  endif
#  ifdef XLAT_VAL_191
  | XLAT_VAL_191
#  endif
#  ifdef XLAT_VAL_192
  | XLAT_VAL_192
#  endif
#  ifdef XLAT_VAL_193
  | XLAT_VAL_193
#  endif
#  ifdef XLAT_VAL_194
  | XLAT_VAL_194
#  endif
#  ifdef XLAT_VAL_195
  | XLAT_VAL_195
#  endif
#  ifdef XLAT_VAL_196
  | XLAT_VAL_196
#  endif
#  ifdef XLAT_VAL_197
  | XLAT_VAL_197
#  endif
#  ifdef XLAT_VAL_198
  | XLAT_VAL_198
#  endif
#  ifdef XLAT_VAL_199
  | XLAT_VAL_199
#  endif
#  ifdef XLAT_VAL_200
  | XLAT_VAL_200
#  endif
#  ifdef XLAT_VAL_201
  | XLAT_VAL_201
#  endif
#  ifdef XLAT_VAL_202
  | XLAT_VAL_202
#  endif
#  ifdef XLAT_VAL_203
  | XLAT_VAL_203
#  endif
#  ifdef XLAT_VAL_204
  | XLAT_VAL_204
#  endif
#  ifdef XLAT_VAL_205
  | XLAT_VAL_205
#  endif
#  ifdef XLAT_VAL_206
  | XLAT_VAL_206
#  endif
#  ifdef XLAT_VAL_207
  | XLAT_VAL_207
#  endif
#  ifdef XLAT_VAL_208
  | XLAT_VAL_208
#  endif
#  ifdef XLAT_VAL_209
  | XLAT_VAL_209
#  endif
#  ifdef XLAT_VAL_210
  | XLAT_VAL_210
#  endif
#  ifdef XLAT_VAL_211
  | XLAT_VAL_211
#  endif
#  ifdef XLAT_VAL_212
  | XLAT_VAL_212
#  endif
#  ifdef XLAT_VAL_213
  | XLAT_VAL_213
#  endif
#  ifdef XLAT_VAL_214
  | XLAT_VAL_214
#  endif
#  ifdef XLAT_VAL_215
  | XLAT_VAL_215
#  endif
#  ifdef XLAT_VAL_216
  | XLAT_VAL_216
#  endif
#  ifdef XLAT_VAL_217
  | XLAT_VAL_217
#  endif
#  ifdef XLAT_VAL_218
  | XLAT_VAL_218
#  endif
#  ifdef XLAT_VAL_219
  | XLAT_VAL_219
#  endif
#  ifdef XLAT_VAL_220
  | XLAT_VAL_220
#  endif
#  ifdef XLAT_VAL_221
  | XLAT_VAL_221
#  endif
#  ifdef XLAT_VAL_222
  | XLAT_VAL_222
#  endif
#  ifdef XLAT_VAL_223
  | XLAT_VAL_223
#  endif
#  ifdef XLAT_VAL_224
  | XLAT_VAL_224
#  endif
#  ifdef XLAT_VAL_225
  | XLAT_VAL_225
#  endif
#  ifdef XLAT_VAL_226
  | XLAT_VAL_226
#  endif
#  ifdef XLAT_VAL_227
  | XLAT_VAL_227
#  endif
#  ifdef XLAT_VAL_228
  | XLAT_VAL_228
#  endif
#  ifdef XLAT_VAL_229
  | XLAT_VAL_229
#  endif
#  ifdef XLAT_VAL_230
  | XLAT_VAL_230
#  endif
#  ifdef XLAT_VAL_231
  | XLAT_VAL_231
#  endif
#  ifdef XLAT_VAL_232
  | XLAT_VAL_232
#  endif
#  ifdef XLAT_VAL_233
  | XLAT_VAL_233
#  endif
#  ifdef XLAT_VAL_234
  | XLAT_VAL_234
#  endif
#  ifdef XLAT_VAL_235
  | XLAT_VAL_235
#  endif
#  ifdef XLAT_VAL_236
  | XLAT_VAL_236
#  endif
#  ifdef XLAT_VAL_237
  | XLAT_VAL_237
#  endif
#  ifdef XLAT_VAL_238
  | XLAT_VAL_238
#  endif
#  ifdef XLAT_VAL_239
  | XLAT_VAL_239
#  endif
#  ifdef XLAT_VAL_240
  | XLAT_VAL_240
#  endif
#  ifdef XLAT_VAL_241
  | XLAT_VAL_241
#  endif
#  ifdef XLAT_VAL_242
  | XLAT_VAL_242
#  endif
#  ifdef XLAT_VAL_243
  | XLAT_VAL_243
#  endif
#  ifdef XLAT_VAL_244
  | XLAT_VAL_244
#  endif
#  ifdef XLAT_VAL_245
  | XLAT_VAL_245
#  endif
#  ifdef XLAT_VAL_246
  | XLAT_VAL_246
#  endif
#  ifdef XLAT_VAL_247
  | XLAT_VAL_247
#  endif
#  ifdef XLAT_VAL_248
  | XLAT_VAL_248
#  endif
#  ifdef XLAT_VAL_249
  | XLAT_VAL_249
#  endif
#  ifdef XLAT_VAL_250
  | XLAT_VAL_250
#  endif
#  ifdef XLAT_VAL_251
  | XLAT_VAL_251
#  endif
#  ifdef XLAT_VAL_252
  | XLAT_VAL_252
#  endif
#  ifdef XLAT_VAL_253
  | XLAT_VAL_253
#  endif
#  ifdef XLAT_VAL_254
  | XLAT_VAL_254
#  endif
#  ifdef XLAT_VAL_255
  | XLAT_VAL_255
#  endif
#  ifdef XLAT_VAL_256
  | XLAT_VAL_256
#  endif
#  ifdef XLAT_VAL_257
  | XLAT_VAL_257
#  endif
#  ifdef XLAT_VAL_258
  | XLAT_VAL_258
#  endif
#  ifdef XLAT_VAL_259
  | XLAT_VAL_259
#  endif
#  ifdef XLAT_VAL_260
  | XLAT_VAL_260
#  endif
#  ifdef XLAT_VAL_261
  | XLAT_VAL_261
#  endif
#  ifdef XLAT_VAL_262
  | XLAT_VAL_262
#  endif
#  ifdef XLAT_VAL_263
  | XLAT_VAL_263
#  endif
#  ifdef XLAT_VAL_264
  | XLAT_VAL_264
#  endif
#  ifdef XLAT_VAL_265
  | XLAT_VAL_265
#  endif
#  ifdef XLAT_VAL_266
  | XLAT_VAL_266
#  endif
#  ifdef XLAT_VAL_267
  | XLAT_VAL_267
#  endif
#  ifdef XLAT_VAL_268
  | XLAT_VAL_268
#  endif
#  ifdef XLAT_VAL_269
  | XLAT_VAL_269
#  endif
#  ifdef XLAT_VAL_270
  | XLAT_VAL_270
#  endif
#  ifdef XLAT_VAL_271
  | XLAT_VAL_271
#  endif
#  ifdef XLAT_VAL_272
  | XLAT_VAL_272
#  endif
#  ifdef XLAT_VAL_273
  | XLAT_VAL_273
#  endif
#  ifdef XLAT_VAL_274
  | XLAT_VAL_274
#  endif
#  ifdef XLAT_VAL_275
  | XLAT_VAL_275
#  endif
#  ifdef XLAT_VAL_276
  | XLAT_VAL_276
#  endif
#  ifdef XLAT_VAL_277
  | XLAT_VAL_277
#  endif
#  ifdef XLAT_VAL_278
  | XLAT_VAL_278
#  endif
#  ifdef XLAT_VAL_279
  | XLAT_VAL_279
#  endif
#  ifdef XLAT_VAL_280
  | XLAT_VAL_280
#  endif
#  ifdef XLAT_VAL_281
  | XLAT_VAL_281
#  endif
#  ifdef XLAT_VAL_282
  | XLAT_VAL_282
#  endif
#  ifdef XLAT_VAL_283
  | XLAT_VAL_283
#  endif
#  ifdef XLAT_VAL_284
  | XLAT_VAL_284
#  endif
#  ifdef XLAT_VAL_285
  | XLAT_VAL_285
#  endif
#  ifdef XLAT_VAL_286
  | XLAT_VAL_286
#  endif
#  ifdef XLAT_VAL_287
  | XLAT_VAL_287
#  endif
#  ifdef XLAT_VAL_288
  | XLAT_VAL_288
#  endif
#  ifdef XLAT_VAL_289
  | XLAT_VAL_289
#  endif
#  ifdef XLAT_VAL_290
  | XLAT_VAL_290
#  endif
#  ifdef XLAT_VAL_291
  | XLAT_VAL_291
#  endif
#  ifdef XLAT_VAL_292
  | XLAT_VAL_292
#  endif
#  ifdef XLAT_VAL_293
  | XLAT_VAL_293
#  endif
#  ifdef XLAT_VAL_294
  | XLAT_VAL_294
#  endif
#  ifdef XLAT_VAL_295
  | XLAT_VAL_295
#  endif
#  ifdef XLAT_VAL_296
  | XLAT_VAL_296
#  endif
#  ifdef XLAT_VAL_297
  | XLAT_VAL_297
#  endif
#  ifdef XLAT_VAL_298
  | XLAT_VAL_298
#  endif
#  ifdef XLAT_VAL_299
  | XLAT_VAL_299
#  endif
#  ifdef XLAT_VAL_300
  | XLAT_VAL_300
#  endif
#  ifdef XLAT_VAL_301
  | XLAT_VAL_301
#  endif
#  ifdef XLAT_VAL_302
  | XLAT_VAL_302
#  endif
#  ifdef XLAT_VAL_303
  | XLAT_VAL_303
#  endif
#  ifdef XLAT_VAL_304
  | XLAT_VAL_304
#  endif
#  ifdef XLAT_VAL_305
  | XLAT_VAL_305
#  endif
#  ifdef XLAT_VAL_306
  | XLAT_VAL_306
#  endif
#  ifdef XLAT_VAL_307
  | XLAT_VAL_307
#  endif
#  ifdef XLAT_VAL_308
  | XLAT_VAL_308
#  endif
#  ifdef XLAT_VAL_309
  | XLAT_VAL_309
#  endif
#  ifdef XLAT_VAL_310
  | XLAT_VAL_310
#  endif
#  ifdef XLAT_VAL_311
  | XLAT_VAL_311
#  endif
#  ifdef XLAT_VAL_312
  | XLAT_VAL_312
#  endif
#  ifdef XLAT_VAL_313
  | XLAT_VAL_313
#  endif
#  ifdef XLAT_VAL_314
  | XLAT_VAL_314
#  endif
#  ifdef XLAT_VAL_315
  | XLAT_VAL_315
#  endif
#  ifdef XLAT_VAL_316
  | XLAT_VAL_316
#  endif
#  ifdef XLAT_VAL_317
  | XLAT_VAL_317
#  endif
#  ifdef XLAT_VAL_318
  | XLAT_VAL_318
#  endif
#  ifdef XLAT_VAL_319
  | XLAT_VAL_319
#  endif
#  ifdef XLAT_VAL_320
  | XLAT_VAL_320
#  endif
#  ifdef XLAT_VAL_321
  | XLAT_VAL_321
#  endif
#  ifdef XLAT_VAL_322
  | XLAT_VAL_322
#  endif
#  ifdef XLAT_VAL_323
  | XLAT_VAL_323
#  endif
#  ifdef XLAT_VAL_324
  | XLAT_VAL_324
#  endif
#  ifdef XLAT_VAL_325
  | XLAT_VAL_325
#  endif
#  ifdef XLAT_VAL_326
  | XLAT_VAL_326
#  endif
#  ifdef XLAT_VAL_327
  | XLAT_VAL_327
#  endif
#  ifdef XLAT_VAL_328
  | XLAT_VAL_328
#  endif
#  ifdef XLAT_VAL_329
  | XLAT_VAL_329
#  endif
#  ifdef XLAT_VAL_330
  | XLAT_VAL_330
#  endif
#  ifdef XLAT_VAL_331
  | XLAT_VAL_331
#  endif
#  ifdef XLAT_VAL_332
  | XLAT_VAL_332
#  endif
#  ifdef XLAT_VAL_333
  | XLAT_VAL_333
#  endif
#  ifdef XLAT_VAL_334
  | XLAT_VAL_334
#  endif
#  ifdef XLAT_VAL_335
  | XLAT_VAL_335
#  endif
#  ifdef XLAT_VAL_336
  | XLAT_VAL_336
#  endif
#  ifdef XLAT_VAL_337
  | XLAT_VAL_337
#  endif
#  ifdef XLAT_VAL_338
  | XLAT_VAL_338
#  endif
#  ifdef XLAT_VAL_339
  | XLAT_VAL_339
#  endif
#  ifdef XLAT_VAL_340
  | XLAT_VAL_340
#  endif
#  ifdef XLAT_VAL_341
  | XLAT_VAL_341
#  endif
#  ifdef XLAT_VAL_342
  | XLAT_VAL_342
#  endif
#  ifdef XLAT_VAL_343
  | XLAT_VAL_343
#  endif
#  ifdef XLAT_VAL_344
  | XLAT_VAL_344
#  endif
#  ifdef XLAT_VAL_345
  | XLAT_VAL_345
#  endif
#  ifdef XLAT_VAL_346
  | XLAT_VAL_346
#  endif
#  ifdef XLAT_VAL_347
  | XLAT_VAL_347
#  endif
#  ifdef XLAT_VAL_348
  | XLAT_VAL_348
#  endif
#  ifdef XLAT_VAL_349
  | XLAT_VAL_349
#  endif
#  ifdef XLAT_VAL_350
  | XLAT_VAL_350
#  endif
#  ifdef XLAT_VAL_351
  | XLAT_VAL_351
#  endif
#  ifdef XLAT_VAL_352
  | XLAT_VAL_352
#  endif
#  ifdef XLAT_VAL_353
  | XLAT_VAL_353
#  endif
#  ifdef XLAT_VAL_354
  | XLAT_VAL_354
#  endif
#  ifdef XLAT_VAL_355
  | XLAT_VAL_355
#  endif
#  ifdef XLAT_VAL_356
  | XLAT_VAL_356
#  endif
#  ifdef XLAT_VAL_357
  | XLAT_VAL_357
#  endif
#  ifdef XLAT_VAL_358
  | XLAT_VAL_358
#  endif
#  ifdef XLAT_VAL_359
  | XLAT_VAL_359
#  endif
#  ifdef XLAT_VAL_360
  | XLAT_VAL_360
#  endif
#  ifdef XLAT_VAL_361
  | XLAT_VAL_361
#  endif
#  ifdef XLAT_VAL_362
  | XLAT_VAL_362
#  endif
#  ifdef XLAT_VAL_363
  | XLAT_VAL_363
#  endif
#  ifdef XLAT_VAL_364
  | XLAT_VAL_364
#  endif
#  ifdef XLAT_VAL_365
  | XLAT_VAL_365
#  endif
#  ifdef XLAT_VAL_366
  | XLAT_VAL_366
#  endif
#  ifdef XLAT_VAL_367
  | XLAT_VAL_367
#  endif
#  ifdef XLAT_VAL_368
  | XLAT_VAL_368
#  endif
#  ifdef XLAT_VAL_369
  | XLAT_VAL_369
#  endif
#  ifdef XLAT_VAL_370
  | XLAT_VAL_370
#  endif
#  ifdef XLAT_VAL_371
  | XLAT_VAL_371
#  endif
#  ifdef XLAT_VAL_372
  | XLAT_VAL_372
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
#  ifdef XLAT_STR_79
  + sizeof(XLAT_STR_79)
#  endif
#  ifdef XLAT_STR_80
  + sizeof(XLAT_STR_80)
#  endif
#  ifdef XLAT_STR_81
  + sizeof(XLAT_STR_81)
#  endif
#  ifdef XLAT_STR_82
  + sizeof(XLAT_STR_82)
#  endif
#  ifdef XLAT_STR_83
  + sizeof(XLAT_STR_83)
#  endif
#  ifdef XLAT_STR_84
  + sizeof(XLAT_STR_84)
#  endif
#  ifdef XLAT_STR_85
  + sizeof(XLAT_STR_85)
#  endif
#  ifdef XLAT_STR_86
  + sizeof(XLAT_STR_86)
#  endif
#  ifdef XLAT_STR_87
  + sizeof(XLAT_STR_87)
#  endif
#  ifdef XLAT_STR_88
  + sizeof(XLAT_STR_88)
#  endif
#  ifdef XLAT_STR_89
  + sizeof(XLAT_STR_89)
#  endif
#  ifdef XLAT_STR_90
  + sizeof(XLAT_STR_90)
#  endif
#  ifdef XLAT_STR_91
  + sizeof(XLAT_STR_91)
#  endif
#  ifdef XLAT_STR_92
  + sizeof(XLAT_STR_92)
#  endif
#  ifdef XLAT_STR_93
  + sizeof(XLAT_STR_93)
#  endif
#  ifdef XLAT_STR_94
  + sizeof(XLAT_STR_94)
#  endif
#  ifdef XLAT_STR_95
  + sizeof(XLAT_STR_95)
#  endif
#  ifdef XLAT_STR_96
  + sizeof(XLAT_STR_96)
#  endif
#  ifdef XLAT_STR_97
  + sizeof(XLAT_STR_97)
#  endif
#  ifdef XLAT_STR_98
  + sizeof(XLAT_STR_98)
#  endif
#  ifdef XLAT_STR_99
  + sizeof(XLAT_STR_99)
#  endif
#  ifdef XLAT_STR_100
  + sizeof(XLAT_STR_100)
#  endif
#  ifdef XLAT_STR_101
  + sizeof(XLAT_STR_101)
#  endif
#  ifdef XLAT_STR_102
  + sizeof(XLAT_STR_102)
#  endif
#  ifdef XLAT_STR_103
  + sizeof(XLAT_STR_103)
#  endif
#  ifdef XLAT_STR_104
  + sizeof(XLAT_STR_104)
#  endif
#  ifdef XLAT_STR_105
  + sizeof(XLAT_STR_105)
#  endif
#  ifdef XLAT_STR_106
  + sizeof(XLAT_STR_106)
#  endif
#  ifdef XLAT_STR_107
  + sizeof(XLAT_STR_107)
#  endif
#  ifdef XLAT_STR_108
  + sizeof(XLAT_STR_108)
#  endif
#  ifdef XLAT_STR_109
  + sizeof(XLAT_STR_109)
#  endif
#  ifdef XLAT_STR_110
  + sizeof(XLAT_STR_110)
#  endif
#  ifdef XLAT_STR_111
  + sizeof(XLAT_STR_111)
#  endif
#  ifdef XLAT_STR_112
  + sizeof(XLAT_STR_112)
#  endif
#  ifdef XLAT_STR_113
  + sizeof(XLAT_STR_113)
#  endif
#  ifdef XLAT_STR_114
  + sizeof(XLAT_STR_114)
#  endif
#  ifdef XLAT_STR_115
  + sizeof(XLAT_STR_115)
#  endif
#  ifdef XLAT_STR_116
  + sizeof(XLAT_STR_116)
#  endif
#  ifdef XLAT_STR_117
  + sizeof(XLAT_STR_117)
#  endif
#  ifdef XLAT_STR_118
  + sizeof(XLAT_STR_118)
#  endif
#  ifdef XLAT_STR_119
  + sizeof(XLAT_STR_119)
#  endif
#  ifdef XLAT_STR_120
  + sizeof(XLAT_STR_120)
#  endif
#  ifdef XLAT_STR_121
  + sizeof(XLAT_STR_121)
#  endif
#  ifdef XLAT_STR_122
  + sizeof(XLAT_STR_122)
#  endif
#  ifdef XLAT_STR_123
  + sizeof(XLAT_STR_123)
#  endif
#  ifdef XLAT_STR_124
  + sizeof(XLAT_STR_124)
#  endif
#  ifdef XLAT_STR_125
  + sizeof(XLAT_STR_125)
#  endif
#  ifdef XLAT_STR_126
  + sizeof(XLAT_STR_126)
#  endif
#  ifdef XLAT_STR_127
  + sizeof(XLAT_STR_127)
#  endif
#  ifdef XLAT_STR_128
  + sizeof(XLAT_STR_128)
#  endif
#  ifdef XLAT_STR_129
  + sizeof(XLAT_STR_129)
#  endif
#  ifdef XLAT_STR_130
  + sizeof(XLAT_STR_130)
#  endif
#  ifdef XLAT_STR_131
  + sizeof(XLAT_STR_131)
#  endif
#  ifdef XLAT_STR_132
  + sizeof(XLAT_STR_132)
#  endif
#  ifdef XLAT_STR_133
  + sizeof(XLAT_STR_133)
#  endif
#  ifdef XLAT_STR_134
  + sizeof(XLAT_STR_134)
#  endif
#  ifdef XLAT_STR_135
  + sizeof(XLAT_STR_135)
#  endif
#  ifdef XLAT_STR_136
  + sizeof(XLAT_STR_136)
#  endif
#  ifdef XLAT_STR_137
  + sizeof(XLAT_STR_137)
#  endif
#  ifdef XLAT_STR_138
  + sizeof(XLAT_STR_138)
#  endif
#  ifdef XLAT_STR_139
  + sizeof(XLAT_STR_139)
#  endif
#  ifdef XLAT_STR_140
  + sizeof(XLAT_STR_140)
#  endif
#  ifdef XLAT_STR_141
  + sizeof(XLAT_STR_141)
#  endif
#  ifdef XLAT_STR_142
  + sizeof(XLAT_STR_142)
#  endif
#  ifdef XLAT_STR_143
  + sizeof(XLAT_STR_143)
#  endif
#  ifdef XLAT_STR_144
  + sizeof(XLAT_STR_144)
#  endif
#  ifdef XLAT_STR_145
  + sizeof(XLAT_STR_145)
#  endif
#  ifdef XLAT_STR_146
  + sizeof(XLAT_STR_146)
#  endif
#  ifdef XLAT_STR_147
  + sizeof(XLAT_STR_147)
#  endif
#  ifdef XLAT_STR_148
  + sizeof(XLAT_STR_148)
#  endif
#  ifdef XLAT_STR_149
  + sizeof(XLAT_STR_149)
#  endif
#  ifdef XLAT_STR_150
  + sizeof(XLAT_STR_150)
#  endif
#  ifdef XLAT_STR_151
  + sizeof(XLAT_STR_151)
#  endif
#  ifdef XLAT_STR_152
  + sizeof(XLAT_STR_152)
#  endif
#  ifdef XLAT_STR_153
  + sizeof(XLAT_STR_153)
#  endif
#  ifdef XLAT_STR_154
  + sizeof(XLAT_STR_154)
#  endif
#  ifdef XLAT_STR_155
  + sizeof(XLAT_STR_155)
#  endif
#  ifdef XLAT_STR_156
  + sizeof(XLAT_STR_156)
#  endif
#  ifdef XLAT_STR_157
  + sizeof(XLAT_STR_157)
#  endif
#  ifdef XLAT_STR_158
  + sizeof(XLAT_STR_158)
#  endif
#  ifdef XLAT_STR_159
  + sizeof(XLAT_STR_159)
#  endif
#  ifdef XLAT_STR_160
  + sizeof(XLAT_STR_160)
#  endif
#  ifdef XLAT_STR_161
  + sizeof(XLAT_STR_161)
#  endif
#  ifdef XLAT_STR_162
  + sizeof(XLAT_STR_162)
#  endif
#  ifdef XLAT_STR_163
  + sizeof(XLAT_STR_163)
#  endif
#  ifdef XLAT_STR_164
  + sizeof(XLAT_STR_164)
#  endif
#  ifdef XLAT_STR_165
  + sizeof(XLAT_STR_165)
#  endif
#  ifdef XLAT_STR_166
  + sizeof(XLAT_STR_166)
#  endif
#  ifdef XLAT_STR_167
  + sizeof(XLAT_STR_167)
#  endif
#  ifdef XLAT_STR_168
  + sizeof(XLAT_STR_168)
#  endif
#  ifdef XLAT_STR_169
  + sizeof(XLAT_STR_169)
#  endif
#  ifdef XLAT_STR_170
  + sizeof(XLAT_STR_170)
#  endif
#  ifdef XLAT_STR_171
  + sizeof(XLAT_STR_171)
#  endif
#  ifdef XLAT_STR_172
  + sizeof(XLAT_STR_172)
#  endif
#  ifdef XLAT_STR_173
  + sizeof(XLAT_STR_173)
#  endif
#  ifdef XLAT_STR_174
  + sizeof(XLAT_STR_174)
#  endif
#  ifdef XLAT_STR_175
  + sizeof(XLAT_STR_175)
#  endif
#  ifdef XLAT_STR_176
  + sizeof(XLAT_STR_176)
#  endif
#  ifdef XLAT_STR_177
  + sizeof(XLAT_STR_177)
#  endif
#  ifdef XLAT_STR_178
  + sizeof(XLAT_STR_178)
#  endif
#  ifdef XLAT_STR_179
  + sizeof(XLAT_STR_179)
#  endif
#  ifdef XLAT_STR_180
  + sizeof(XLAT_STR_180)
#  endif
#  ifdef XLAT_STR_181
  + sizeof(XLAT_STR_181)
#  endif
#  ifdef XLAT_STR_182
  + sizeof(XLAT_STR_182)
#  endif
#  ifdef XLAT_STR_183
  + sizeof(XLAT_STR_183)
#  endif
#  ifdef XLAT_STR_184
  + sizeof(XLAT_STR_184)
#  endif
#  ifdef XLAT_STR_185
  + sizeof(XLAT_STR_185)
#  endif
#  ifdef XLAT_STR_186
  + sizeof(XLAT_STR_186)
#  endif
#  ifdef XLAT_STR_187
  + sizeof(XLAT_STR_187)
#  endif
#  ifdef XLAT_STR_188
  + sizeof(XLAT_STR_188)
#  endif
#  ifdef XLAT_STR_189
  + sizeof(XLAT_STR_189)
#  endif
#  ifdef XLAT_STR_190
  + sizeof(XLAT_STR_190)
#  endif
#  ifdef XLAT_STR_191
  + sizeof(XLAT_STR_191)
#  endif
#  ifdef XLAT_STR_192
  + sizeof(XLAT_STR_192)
#  endif
#  ifdef XLAT_STR_193
  + sizeof(XLAT_STR_193)
#  endif
#  ifdef XLAT_STR_194
  + sizeof(XLAT_STR_194)
#  endif
#  ifdef XLAT_STR_195
  + sizeof(XLAT_STR_195)
#  endif
#  ifdef XLAT_STR_196
  + sizeof(XLAT_STR_196)
#  endif
#  ifdef XLAT_STR_197
  + sizeof(XLAT_STR_197)
#  endif
#  ifdef XLAT_STR_198
  + sizeof(XLAT_STR_198)
#  endif
#  ifdef XLAT_STR_199
  + sizeof(XLAT_STR_199)
#  endif
#  ifdef XLAT_STR_200
  + sizeof(XLAT_STR_200)
#  endif
#  ifdef XLAT_STR_201
  + sizeof(XLAT_STR_201)
#  endif
#  ifdef XLAT_STR_202
  + sizeof(XLAT_STR_202)
#  endif
#  ifdef XLAT_STR_203
  + sizeof(XLAT_STR_203)
#  endif
#  ifdef XLAT_STR_204
  + sizeof(XLAT_STR_204)
#  endif
#  ifdef XLAT_STR_205
  + sizeof(XLAT_STR_205)
#  endif
#  ifdef XLAT_STR_206
  + sizeof(XLAT_STR_206)
#  endif
#  ifdef XLAT_STR_207
  + sizeof(XLAT_STR_207)
#  endif
#  ifdef XLAT_STR_208
  + sizeof(XLAT_STR_208)
#  endif
#  ifdef XLAT_STR_209
  + sizeof(XLAT_STR_209)
#  endif
#  ifdef XLAT_STR_210
  + sizeof(XLAT_STR_210)
#  endif
#  ifdef XLAT_STR_211
  + sizeof(XLAT_STR_211)
#  endif
#  ifdef XLAT_STR_212
  + sizeof(XLAT_STR_212)
#  endif
#  ifdef XLAT_STR_213
  + sizeof(XLAT_STR_213)
#  endif
#  ifdef XLAT_STR_214
  + sizeof(XLAT_STR_214)
#  endif
#  ifdef XLAT_STR_215
  + sizeof(XLAT_STR_215)
#  endif
#  ifdef XLAT_STR_216
  + sizeof(XLAT_STR_216)
#  endif
#  ifdef XLAT_STR_217
  + sizeof(XLAT_STR_217)
#  endif
#  ifdef XLAT_STR_218
  + sizeof(XLAT_STR_218)
#  endif
#  ifdef XLAT_STR_219
  + sizeof(XLAT_STR_219)
#  endif
#  ifdef XLAT_STR_220
  + sizeof(XLAT_STR_220)
#  endif
#  ifdef XLAT_STR_221
  + sizeof(XLAT_STR_221)
#  endif
#  ifdef XLAT_STR_222
  + sizeof(XLAT_STR_222)
#  endif
#  ifdef XLAT_STR_223
  + sizeof(XLAT_STR_223)
#  endif
#  ifdef XLAT_STR_224
  + sizeof(XLAT_STR_224)
#  endif
#  ifdef XLAT_STR_225
  + sizeof(XLAT_STR_225)
#  endif
#  ifdef XLAT_STR_226
  + sizeof(XLAT_STR_226)
#  endif
#  ifdef XLAT_STR_227
  + sizeof(XLAT_STR_227)
#  endif
#  ifdef XLAT_STR_228
  + sizeof(XLAT_STR_228)
#  endif
#  ifdef XLAT_STR_229
  + sizeof(XLAT_STR_229)
#  endif
#  ifdef XLAT_STR_230
  + sizeof(XLAT_STR_230)
#  endif
#  ifdef XLAT_STR_231
  + sizeof(XLAT_STR_231)
#  endif
#  ifdef XLAT_STR_232
  + sizeof(XLAT_STR_232)
#  endif
#  ifdef XLAT_STR_233
  + sizeof(XLAT_STR_233)
#  endif
#  ifdef XLAT_STR_234
  + sizeof(XLAT_STR_234)
#  endif
#  ifdef XLAT_STR_235
  + sizeof(XLAT_STR_235)
#  endif
#  ifdef XLAT_STR_236
  + sizeof(XLAT_STR_236)
#  endif
#  ifdef XLAT_STR_237
  + sizeof(XLAT_STR_237)
#  endif
#  ifdef XLAT_STR_238
  + sizeof(XLAT_STR_238)
#  endif
#  ifdef XLAT_STR_239
  + sizeof(XLAT_STR_239)
#  endif
#  ifdef XLAT_STR_240
  + sizeof(XLAT_STR_240)
#  endif
#  ifdef XLAT_STR_241
  + sizeof(XLAT_STR_241)
#  endif
#  ifdef XLAT_STR_242
  + sizeof(XLAT_STR_242)
#  endif
#  ifdef XLAT_STR_243
  + sizeof(XLAT_STR_243)
#  endif
#  ifdef XLAT_STR_244
  + sizeof(XLAT_STR_244)
#  endif
#  ifdef XLAT_STR_245
  + sizeof(XLAT_STR_245)
#  endif
#  ifdef XLAT_STR_246
  + sizeof(XLAT_STR_246)
#  endif
#  ifdef XLAT_STR_247
  + sizeof(XLAT_STR_247)
#  endif
#  ifdef XLAT_STR_248
  + sizeof(XLAT_STR_248)
#  endif
#  ifdef XLAT_STR_249
  + sizeof(XLAT_STR_249)
#  endif
#  ifdef XLAT_STR_250
  + sizeof(XLAT_STR_250)
#  endif
#  ifdef XLAT_STR_251
  + sizeof(XLAT_STR_251)
#  endif
#  ifdef XLAT_STR_252
  + sizeof(XLAT_STR_252)
#  endif
#  ifdef XLAT_STR_253
  + sizeof(XLAT_STR_253)
#  endif
#  ifdef XLAT_STR_254
  + sizeof(XLAT_STR_254)
#  endif
#  ifdef XLAT_STR_255
  + sizeof(XLAT_STR_255)
#  endif
#  ifdef XLAT_STR_256
  + sizeof(XLAT_STR_256)
#  endif
#  ifdef XLAT_STR_257
  + sizeof(XLAT_STR_257)
#  endif
#  ifdef XLAT_STR_258
  + sizeof(XLAT_STR_258)
#  endif
#  ifdef XLAT_STR_259
  + sizeof(XLAT_STR_259)
#  endif
#  ifdef XLAT_STR_260
  + sizeof(XLAT_STR_260)
#  endif
#  ifdef XLAT_STR_261
  + sizeof(XLAT_STR_261)
#  endif
#  ifdef XLAT_STR_262
  + sizeof(XLAT_STR_262)
#  endif
#  ifdef XLAT_STR_263
  + sizeof(XLAT_STR_263)
#  endif
#  ifdef XLAT_STR_264
  + sizeof(XLAT_STR_264)
#  endif
#  ifdef XLAT_STR_265
  + sizeof(XLAT_STR_265)
#  endif
#  ifdef XLAT_STR_266
  + sizeof(XLAT_STR_266)
#  endif
#  ifdef XLAT_STR_267
  + sizeof(XLAT_STR_267)
#  endif
#  ifdef XLAT_STR_268
  + sizeof(XLAT_STR_268)
#  endif
#  ifdef XLAT_STR_269
  + sizeof(XLAT_STR_269)
#  endif
#  ifdef XLAT_STR_270
  + sizeof(XLAT_STR_270)
#  endif
#  ifdef XLAT_STR_271
  + sizeof(XLAT_STR_271)
#  endif
#  ifdef XLAT_STR_272
  + sizeof(XLAT_STR_272)
#  endif
#  ifdef XLAT_STR_273
  + sizeof(XLAT_STR_273)
#  endif
#  ifdef XLAT_STR_274
  + sizeof(XLAT_STR_274)
#  endif
#  ifdef XLAT_STR_275
  + sizeof(XLAT_STR_275)
#  endif
#  ifdef XLAT_STR_276
  + sizeof(XLAT_STR_276)
#  endif
#  ifdef XLAT_STR_277
  + sizeof(XLAT_STR_277)
#  endif
#  ifdef XLAT_STR_278
  + sizeof(XLAT_STR_278)
#  endif
#  ifdef XLAT_STR_279
  + sizeof(XLAT_STR_279)
#  endif
#  ifdef XLAT_STR_280
  + sizeof(XLAT_STR_280)
#  endif
#  ifdef XLAT_STR_281
  + sizeof(XLAT_STR_281)
#  endif
#  ifdef XLAT_STR_282
  + sizeof(XLAT_STR_282)
#  endif
#  ifdef XLAT_STR_283
  + sizeof(XLAT_STR_283)
#  endif
#  ifdef XLAT_STR_284
  + sizeof(XLAT_STR_284)
#  endif
#  ifdef XLAT_STR_285
  + sizeof(XLAT_STR_285)
#  endif
#  ifdef XLAT_STR_286
  + sizeof(XLAT_STR_286)
#  endif
#  ifdef XLAT_STR_287
  + sizeof(XLAT_STR_287)
#  endif
#  ifdef XLAT_STR_288
  + sizeof(XLAT_STR_288)
#  endif
#  ifdef XLAT_STR_289
  + sizeof(XLAT_STR_289)
#  endif
#  ifdef XLAT_STR_290
  + sizeof(XLAT_STR_290)
#  endif
#  ifdef XLAT_STR_291
  + sizeof(XLAT_STR_291)
#  endif
#  ifdef XLAT_STR_292
  + sizeof(XLAT_STR_292)
#  endif
#  ifdef XLAT_STR_293
  + sizeof(XLAT_STR_293)
#  endif
#  ifdef XLAT_STR_294
  + sizeof(XLAT_STR_294)
#  endif
#  ifdef XLAT_STR_295
  + sizeof(XLAT_STR_295)
#  endif
#  ifdef XLAT_STR_296
  + sizeof(XLAT_STR_296)
#  endif
#  ifdef XLAT_STR_297
  + sizeof(XLAT_STR_297)
#  endif
#  ifdef XLAT_STR_298
  + sizeof(XLAT_STR_298)
#  endif
#  ifdef XLAT_STR_299
  + sizeof(XLAT_STR_299)
#  endif
#  ifdef XLAT_STR_300
  + sizeof(XLAT_STR_300)
#  endif
#  ifdef XLAT_STR_301
  + sizeof(XLAT_STR_301)
#  endif
#  ifdef XLAT_STR_302
  + sizeof(XLAT_STR_302)
#  endif
#  ifdef XLAT_STR_303
  + sizeof(XLAT_STR_303)
#  endif
#  ifdef XLAT_STR_304
  + sizeof(XLAT_STR_304)
#  endif
#  ifdef XLAT_STR_305
  + sizeof(XLAT_STR_305)
#  endif
#  ifdef XLAT_STR_306
  + sizeof(XLAT_STR_306)
#  endif
#  ifdef XLAT_STR_307
  + sizeof(XLAT_STR_307)
#  endif
#  ifdef XLAT_STR_308
  + sizeof(XLAT_STR_308)
#  endif
#  ifdef XLAT_STR_309
  + sizeof(XLAT_STR_309)
#  endif
#  ifdef XLAT_STR_310
  + sizeof(XLAT_STR_310)
#  endif
#  ifdef XLAT_STR_311
  + sizeof(XLAT_STR_311)
#  endif
#  ifdef XLAT_STR_312
  + sizeof(XLAT_STR_312)
#  endif
#  ifdef XLAT_STR_313
  + sizeof(XLAT_STR_313)
#  endif
#  ifdef XLAT_STR_314
  + sizeof(XLAT_STR_314)
#  endif
#  ifdef XLAT_STR_315
  + sizeof(XLAT_STR_315)
#  endif
#  ifdef XLAT_STR_316
  + sizeof(XLAT_STR_316)
#  endif
#  ifdef XLAT_STR_317
  + sizeof(XLAT_STR_317)
#  endif
#  ifdef XLAT_STR_318
  + sizeof(XLAT_STR_318)
#  endif
#  ifdef XLAT_STR_319
  + sizeof(XLAT_STR_319)
#  endif
#  ifdef XLAT_STR_320
  + sizeof(XLAT_STR_320)
#  endif
#  ifdef XLAT_STR_321
  + sizeof(XLAT_STR_321)
#  endif
#  ifdef XLAT_STR_322
  + sizeof(XLAT_STR_322)
#  endif
#  ifdef XLAT_STR_323
  + sizeof(XLAT_STR_323)
#  endif
#  ifdef XLAT_STR_324
  + sizeof(XLAT_STR_324)
#  endif
#  ifdef XLAT_STR_325
  + sizeof(XLAT_STR_325)
#  endif
#  ifdef XLAT_STR_326
  + sizeof(XLAT_STR_326)
#  endif
#  ifdef XLAT_STR_327
  + sizeof(XLAT_STR_327)
#  endif
#  ifdef XLAT_STR_328
  + sizeof(XLAT_STR_328)
#  endif
#  ifdef XLAT_STR_329
  + sizeof(XLAT_STR_329)
#  endif
#  ifdef XLAT_STR_330
  + sizeof(XLAT_STR_330)
#  endif
#  ifdef XLAT_STR_331
  + sizeof(XLAT_STR_331)
#  endif
#  ifdef XLAT_STR_332
  + sizeof(XLAT_STR_332)
#  endif
#  ifdef XLAT_STR_333
  + sizeof(XLAT_STR_333)
#  endif
#  ifdef XLAT_STR_334
  + sizeof(XLAT_STR_334)
#  endif
#  ifdef XLAT_STR_335
  + sizeof(XLAT_STR_335)
#  endif
#  ifdef XLAT_STR_336
  + sizeof(XLAT_STR_336)
#  endif
#  ifdef XLAT_STR_337
  + sizeof(XLAT_STR_337)
#  endif
#  ifdef XLAT_STR_338
  + sizeof(XLAT_STR_338)
#  endif
#  ifdef XLAT_STR_339
  + sizeof(XLAT_STR_339)
#  endif
#  ifdef XLAT_STR_340
  + sizeof(XLAT_STR_340)
#  endif
#  ifdef XLAT_STR_341
  + sizeof(XLAT_STR_341)
#  endif
#  ifdef XLAT_STR_342
  + sizeof(XLAT_STR_342)
#  endif
#  ifdef XLAT_STR_343
  + sizeof(XLAT_STR_343)
#  endif
#  ifdef XLAT_STR_344
  + sizeof(XLAT_STR_344)
#  endif
#  ifdef XLAT_STR_345
  + sizeof(XLAT_STR_345)
#  endif
#  ifdef XLAT_STR_346
  + sizeof(XLAT_STR_346)
#  endif
#  ifdef XLAT_STR_347
  + sizeof(XLAT_STR_347)
#  endif
#  ifdef XLAT_STR_348
  + sizeof(XLAT_STR_348)
#  endif
#  ifdef XLAT_STR_349
  + sizeof(XLAT_STR_349)
#  endif
#  ifdef XLAT_STR_350
  + sizeof(XLAT_STR_350)
#  endif
#  ifdef XLAT_STR_351
  + sizeof(XLAT_STR_351)
#  endif
#  ifdef XLAT_STR_352
  + sizeof(XLAT_STR_352)
#  endif
#  ifdef XLAT_STR_353
  + sizeof(XLAT_STR_353)
#  endif
#  ifdef XLAT_STR_354
  + sizeof(XLAT_STR_354)
#  endif
#  ifdef XLAT_STR_355
  + sizeof(XLAT_STR_355)
#  endif
#  ifdef XLAT_STR_356
  + sizeof(XLAT_STR_356)
#  endif
#  ifdef XLAT_STR_357
  + sizeof(XLAT_STR_357)
#  endif
#  ifdef XLAT_STR_358
  + sizeof(XLAT_STR_358)
#  endif
#  ifdef XLAT_STR_359
  + sizeof(XLAT_STR_359)
#  endif
#  ifdef XLAT_STR_360
  + sizeof(XLAT_STR_360)
#  endif
#  ifdef XLAT_STR_361
  + sizeof(XLAT_STR_361)
#  endif
#  ifdef XLAT_STR_362
  + sizeof(XLAT_STR_362)
#  endif
#  ifdef XLAT_STR_363
  + sizeof(XLAT_STR_363)
#  endif
#  ifdef XLAT_STR_364
  + sizeof(XLAT_STR_364)
#  endif
#  ifdef XLAT_STR_365
  + sizeof(XLAT_STR_365)
#  endif
#  ifdef XLAT_STR_366
  + sizeof(XLAT_STR_366)
#  endif
#  ifdef XLAT_STR_367
  + sizeof(XLAT_STR_367)
#  endif
#  ifdef XLAT_STR_368
  + sizeof(XLAT_STR_368)
#  endif
#  ifdef XLAT_STR_369
  + sizeof(XLAT_STR_369)
#  endif
#  ifdef XLAT_STR_370
  + sizeof(XLAT_STR_370)
#  endif
#  ifdef XLAT_STR_371
  + sizeof(XLAT_STR_371)
#  endif
#  ifdef XLAT_STR_372
  + sizeof(XLAT_STR_372)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
#  undef XLAT_STR_79
#  undef XLAT_VAL_79
#  undef XLAT_STR_80
#  undef XLAT_VAL_80
#  undef XLAT_STR_81
#  undef XLAT_VAL_81
#  undef XLAT_STR_82
#  undef XLAT_VAL_82
#  undef XLAT_STR_83
#  undef XLAT_VAL_83
#  undef XLAT_STR_84
#  undef XLAT_VAL_84
#  undef XLAT_STR_85
#  undef XLAT_VAL_85
#  undef XLAT_STR_86
#  undef XLAT_VAL_86
#  undef XLAT_STR_87
#  undef XLAT_VAL_87
#  undef XLAT_STR_88
#  undef XLAT_VAL_88
#  undef XLAT_STR_89
#  undef XLAT_VAL_89
#  undef XLAT_STR_90
#  undef XLAT_VAL_90
#  undef XLAT_STR_91
#  undef XLAT_VAL_91
#  undef XLAT_STR_92
#  undef XLAT_VAL_92
#  undef XLAT_STR_93
#  undef XLAT_VAL_93
#  undef XLAT_STR_94
#  undef XLAT_VAL_94
#  undef XLAT_STR_95
#  undef XLAT_VAL_95
#  undef XLAT_STR_96
#  undef XLAT_VAL_96
#  undef XLAT_STR_97
#  undef XLAT_VAL_97
#  undef XLAT_STR_98
#  undef XLAT_VAL_98
#  undef XLAT_STR_99
#  undef XLAT_VAL_99
#  undef XLAT_STR_100
#  undef XLAT_VAL_100
#  undef XLAT_STR_101
#  undef XLAT_VAL_101
#  undef XLAT_STR_102
#  undef XLAT_VAL_102
#  undef XLAT_STR_103
#  undef XLAT_VAL_103
#  undef XLAT_STR_104
#  undef XLAT_VAL_104
#  undef XLAT_STR_105
#  undef XLAT_VAL_105
#  undef XLAT_STR_106
#  undef XLAT_VAL_106
#  undef XLAT_STR_107
#  undef XLAT_VAL_107
#  undef XLAT_STR_108
#  undef XLAT_VAL_108
#  undef XLAT_STR_109
#  undef XLAT_VAL_109
#  undef XLAT_STR_110
#  undef XLAT_VAL_110
#  undef XLAT_STR_111
#  undef XLAT_VAL_111
#  undef XLAT_STR_112
#  undef XLAT_VAL_112
#  undef XLAT_STR_113
#  undef XLAT_VAL_113
#  undef XLAT_STR_114
#  undef XLAT_VAL_114
#  undef XLAT_STR_115
#  undef XLAT_VAL_115
#  undef XLAT_STR_116
#  undef XLAT_VAL_116
#  undef XLAT_STR_117
#  undef XLAT_VAL_117
#  undef XLAT_STR_118
#  undef XLAT_VAL_118
#  undef XLAT_STR_119
#  undef XLAT_VAL_119
#  undef XLAT_STR_120
#  undef XLAT_VAL_120
#  undef XLAT_STR_121
#  undef XLAT_VAL_121
#  undef XLAT_STR_122
#  undef XLAT_VAL_122
#  undef XLAT_STR_123
#  undef XLAT_VAL_123
#  undef XLAT_STR_124
#  undef XLAT_VAL_124
#  undef XLAT_STR_125
#  undef XLAT_VAL_125
#  undef XLAT_STR_126
#  undef XLAT_VAL_126
#  undef XLAT_STR_127
#  undef XLAT_VAL_127
#  undef XLAT_STR_128
#  undef XLAT_VAL_128
#  undef XLAT_STR_129
#  undef XLAT_VAL_129
#  undef XLAT_STR_130
#  undef XLAT_VAL_130
#  undef XLAT_STR_131
#  undef XLAT_VAL_131
#  undef XLAT_STR_132
#  undef XLAT_VAL_132
#  undef XLAT_STR_133
#  undef XLAT_VAL_133
#  undef XLAT_STR_134
#  undef XLAT_VAL_134
#  undef XLAT_STR_135
#  undef XLAT_VAL_135
#  undef XLAT_STR_136
#  undef XLAT_VAL_136
#  undef XLAT_STR_137
#  undef XLAT_VAL_137
#  undef XLAT_STR_138
#  undef XLAT_VAL_138
#  undef XLAT_STR_139
#  undef XLAT_VAL_139
#  undef XLAT_STR_140
#  undef XLAT_VAL_140
#  undef XLAT_STR_141
#  undef XLAT_VAL_141
#  undef XLAT_STR_142
#  undef XLAT_VAL_142
#  undef XLAT_STR_143
#  undef XLAT_VAL_143
#  undef XLAT_STR_144
#  undef XLAT_VAL_144
#  undef XLAT_STR_145
#  undef XLAT_VAL_145
#  undef XLAT_STR_146
#  undef XLAT_VAL_146
#  undef XLAT_STR_147
#  undef XLAT_VAL_147
#  undef XLAT_STR_148
#  undef XLAT_VAL_148
#  undef XLAT_STR_149
#  undef XLAT_VAL_149
#  undef XLAT_STR_150
#  undef XLAT_VAL_150
#  undef XLAT_STR_151
#  undef XLAT_VAL_151
#  undef XLAT_STR_152
#  undef XLAT_VAL_152
#  undef XLAT_STR_153
#  undef XLAT_VAL_153
#  undef XLAT_STR_154
#  undef XLAT_VAL_154
#  undef XLAT_STR_155
#  undef XLAT_VAL_155
#  undef XLAT_STR_156
#  undef XLAT_VAL_156
#  undef XLAT_STR_157
#  undef XLAT_VAL_157
#  undef XLAT_STR_158
#  undef XLAT_VAL_158
#  undef XLAT_STR_159
#  undef XLAT_VAL_159
#  undef XLAT_STR_160
#  undef XLAT_VAL_160
#  undef XLAT_STR_161
#  undef XLAT_VAL_161
#  undef XLAT_STR_162
#  undef XLAT_VAL_162
#  undef XLAT_STR_163
#  undef XLAT_VAL_163
#  undef XLAT_STR_164
#  undef XLAT_VAL_164
#  undef XLAT_STR_165
#  undef XLAT_VAL_165
#  undef XLAT_STR_166
#  undef XLAT_VAL_166
#  undef XLAT_STR_167
#  undef XLAT_VAL_167
#  undef XLAT_STR_168
#  undef XLAT_VAL_168
#  undef XLAT_STR_169
#  undef XLAT_VAL_169
#  undef XLAT_STR_170
#  undef XLAT_VAL_170
#  undef XLAT_STR_171
#  undef XLAT_VAL_171
#  undef XLAT_STR_172
#  undef XLAT_VAL_172
#  undef XLAT_STR_173
#  undef XLAT_VAL_173
#  undef XLAT_STR_174
#  undef XLAT_VAL_174
#  undef XLAT_STR_175
#  undef XLAT_VAL_175
#  undef XLAT_STR_176
#  undef XLAT_VAL_176
#  undef XLAT_STR_177
#  undef XLAT_VAL_177
#  undef XLAT_STR_178
#  undef XLAT_VAL_178
#  undef XLAT_STR_179
#  undef XLAT_VAL_179
#  undef XLAT_STR_180
#  undef XLAT_VAL_180
#  undef XLAT_STR_181
#  undef XLAT_VAL_181
#  undef XLAT_STR_182
#  undef XLAT_VAL_182
#  undef XLAT_STR_183
#  undef XLAT_VAL_183
#  undef XLAT_STR_184
#  undef XLAT_VAL_184
#  undef XLAT_STR_185
#  undef XLAT_VAL_185
#  undef XLAT_STR_186
#  undef XLAT_VAL_186
#  undef XLAT_STR_187
#  undef XLAT_VAL_187
#  undef XLAT_STR_188
#  undef XLAT_VAL_188
#  undef XLAT_STR_189
#  undef XLAT_VAL_189
#  undef XLAT_STR_190
#  undef XLAT_VAL_190
#  undef XLAT_STR_191
#  undef XLAT_VAL_191
#  undef XLAT_STR_192
#  undef XLAT_VAL_192
#  undef XLAT_STR_193
#  undef XLAT_VAL_193
#  undef XLAT_STR_194
#  undef XLAT_VAL_194
#  undef XLAT_STR_195
#  undef XLAT_VAL_195
#  undef XLAT_STR_196
#  undef XLAT_VAL_196
#  undef XLAT_STR_197
#  undef XLAT_VAL_197
#  undef XLAT_STR_198
#  undef XLAT_VAL_198
#  undef XLAT_STR_199
#  undef XLAT_VAL_199
#  undef XLAT_STR_200
#  undef XLAT_VAL_200
#  undef XLAT_STR_201
#  undef XLAT_VAL_201
#  undef XLAT_STR_202
#  undef XLAT_VAL_202
#  undef XLAT_STR_203
#  undef XLAT_VAL_203
#  undef XLAT_STR_204
#  undef XLAT_VAL_204
#  undef XLAT_STR_205
#  undef XLAT_VAL_205
#  undef XLAT_STR_206
#  undef XLAT_VAL_206
#  undef XLAT_STR_207
#  undef XLAT_VAL_207
#  undef XLAT_STR_208
#  undef XLAT_VAL_208
#  undef XLAT_STR_209
#  undef XLAT_VAL_209
#  undef XLAT_STR_210
#  undef XLAT_VAL_210
#  undef XLAT_STR_211
#  undef XLAT_VAL_211
#  undef XLAT_STR_212
#  undef XLAT_VAL_212
#  undef XLAT_STR_213
#  undef XLAT_VAL_213
#  undef XLAT_STR_214
#  undef XLAT_VAL_214
#  undef XLAT_STR_215
#  undef XLAT_VAL_215
#  undef XLAT_STR_216
#  undef XLAT_VAL_216
#  undef XLAT_STR_217
#  undef XLAT_VAL_217
#  undef XLAT_STR_218
#  undef XLAT_VAL_218
#  undef XLAT_STR_219
#  undef XLAT_VAL_219
#  undef XLAT_STR_220
#  undef XLAT_VAL_220
#  undef XLAT_STR_221
#  undef XLAT_VAL_221
#  undef XLAT_STR_222
#  undef XLAT_VAL_222
#  undef XLAT_STR_223
#  undef XLAT_VAL_223
#  undef XLAT_STR_224
#  undef XLAT_VAL_224
#  undef XLAT_STR_225
#  undef XLAT_VAL_225
#  undef XLAT_STR_226
#  undef XLAT_VAL_226
#  undef XLAT_STR_227
#  undef XLAT_VAL_227
#  undef XLAT_STR_228
#  undef XLAT_VAL_228
#  undef XLAT_STR_229
#  undef XLAT_VAL_229
#  undef XLAT_STR_230
#  undef XLAT_VAL_230
#  undef XLAT_STR_231
#  undef XLAT_VAL_231
#  undef XLAT_STR_232
#  undef XLAT_VAL_232
#  undef XLAT_STR_233
#  undef XLAT_VAL_233
#  undef XLAT_STR_234
#  undef XLAT_VAL_234
#  undef XLAT_STR_235
#  undef XLAT_VAL_235
#  undef XLAT_STR_236
#  undef XLAT_VAL_236
#  undef XLAT_STR_237
#  undef XLAT_VAL_237
#  undef XLAT_STR_238
#  undef XLAT_VAL_238
#  undef XLAT_STR_239
#  undef XLAT_VAL_239
#  undef XLAT_STR_240
#  undef XLAT_VAL_240
#  undef XLAT_STR_241
#  undef XLAT_VAL_241
#  undef XLAT_STR_242
#  undef XLAT_VAL_242
#  undef XLAT_STR_243
#  undef XLAT_VAL_243
#  undef XLAT_STR_244
#  undef XLAT_VAL_244
#  undef XLAT_STR_245
#  undef XLAT_VAL_245
#  undef XLAT_STR_246
#  undef XLAT_VAL_246
#  undef XLAT_STR_247
#  undef XLAT_VAL_247
#  undef XLAT_STR_248
#  undef XLAT_VAL_248
#  undef XLAT_STR_249
#  undef XLAT_VAL_249
#  undef XLAT_STR_250
#  undef XLAT_VAL_250
#  undef XLAT_STR_251
#  undef XLAT_VAL_251
#  undef XLAT_STR_252
#  undef XLAT_VAL_252
#  undef XLAT_STR_253
#  undef XLAT_VAL_253
#  undef XLAT_STR_254
#  undef XLAT_VAL_254
#  undef XLAT_STR_255
#  undef XLAT_VAL_255
#  undef XLAT_STR_256
#  undef XLAT_VAL_256
#  undef XLAT_STR_257
#  undef XLAT_VAL_257
#  undef XLAT_STR_258
#  undef XLAT_VAL_258
#  undef XLAT_STR_259
#  undef XLAT_VAL_259
#  undef XLAT_STR_260
#  undef XLAT_VAL_260
#  undef XLAT_STR_261
#  undef XLAT_VAL_261
#  undef XLAT_STR_262
#  undef XLAT_VAL_262
#  undef XLAT_STR_263
#  undef XLAT_VAL_263
#  undef XLAT_STR_264
#  undef XLAT_VAL_264
#  undef XLAT_STR_265
#  undef XLAT_VAL_265
#  undef XLAT_STR_266
#  undef XLAT_VAL_266
#  undef XLAT_STR_267
#  undef XLAT_VAL_267
#  undef XLAT_STR_268
#  undef XLAT_VAL_268
#  undef XLAT_STR_269
#  undef XLAT_VAL_269
#  undef XLAT_STR_270
#  undef XLAT_VAL_270
#  undef XLAT_STR_271
#  undef XLAT_VAL_271
#  undef XLAT_STR_272
#  undef XLAT_VAL_272
#  undef XLAT_STR_273
#  undef XLAT_VAL_273
#  undef XLAT_STR_274
#  undef XLAT_VAL_274
#  undef XLAT_STR_275
#  undef XLAT_VAL_275
#  undef XLAT_STR_276
#  undef XLAT_VAL_276
#  undef XLAT_STR_277
#  undef XLAT_VAL_277
#  undef XLAT_STR_278
#  undef XLAT_VAL_278
#  undef XLAT_STR_279
#  undef XLAT_VAL_279
#  undef XLAT_STR_280
#  undef XLAT_VAL_280
#  undef XLAT_STR_281
#  undef XLAT_VAL_281
#  undef XLAT_STR_282
#  undef XLAT_VAL_282
#  undef XLAT_STR_283
#  undef XLAT_VAL_283
#  undef XLAT_STR_284
#  undef XLAT_VAL_284
#  undef XLAT_STR_285
#  undef XLAT_VAL_285
#  undef XLAT_STR_286
#  undef XLAT_VAL_286
#  undef XLAT_STR_287
#  undef XLAT_VAL_287
#  undef XLAT_STR_288
#  undef XLAT_VAL_288
#  undef XLAT_STR_289
#  undef XLAT_VAL_289
#  undef XLAT_STR_290
#  undef XLAT_VAL_290
#  undef XLAT_STR_291
#  undef XLAT_VAL_291
#  undef XLAT_STR_292
#  undef XLAT_VAL_292
#  undef XLAT_STR_293
#  undef XLAT_VAL_293
#  undef XLAT_STR_294
#  undef XLAT_VAL_294
#  undef XLAT_STR_295
#  undef XLAT_VAL_295
#  undef XLAT_STR_296
#  undef XLAT_VAL_296
#  undef XLAT_STR_297
#  undef XLAT_VAL_297
#  undef XLAT_STR_298
#  undef XLAT_VAL_298
#  undef XLAT_STR_299
#  undef XLAT_VAL_299
#  undef XLAT_STR_300
#  undef XLAT_VAL_300
#  undef XLAT_STR_301
#  undef XLAT_VAL_301
#  undef XLAT_STR_302
#  undef XLAT_VAL_302
#  undef XLAT_STR_303
#  undef XLAT_VAL_303
#  undef XLAT_STR_304
#  undef XLAT_VAL_304
#  undef XLAT_STR_305
#  undef XLAT_VAL_305
#  undef XLAT_STR_306
#  undef XLAT_VAL_306
#  undef XLAT_STR_307
#  undef XLAT_VAL_307
#  undef XLAT_STR_308
#  undef XLAT_VAL_308
#  undef XLAT_STR_309
#  undef XLAT_VAL_309
#  undef XLAT_STR_310
#  undef XLAT_VAL_310
#  undef XLAT_STR_311
#  undef XLAT_VAL_311
#  undef XLAT_STR_312
#  undef XLAT_VAL_312
#  undef XLAT_STR_313
#  undef XLAT_VAL_313
#  undef XLAT_STR_314
#  undef XLAT_VAL_314
#  undef XLAT_STR_315
#  undef XLAT_VAL_315
#  undef XLAT_STR_316
#  undef XLAT_VAL_316
#  undef XLAT_STR_317
#  undef XLAT_VAL_317
#  undef XLAT_STR_318
#  undef XLAT_VAL_318
#  undef XLAT_STR_319
#  undef XLAT_VAL_319
#  undef XLAT_STR_320
#  undef XLAT_VAL_320
#  undef XLAT_STR_321
#  undef XLAT_VAL_321
#  undef XLAT_STR_322
#  undef XLAT_VAL_322
#  undef XLAT_STR_323
#  undef XLAT_VAL_323
#  undef XLAT_STR_324
#  undef XLAT_VAL_324
#  undef XLAT_STR_325
#  undef XLAT_VAL_325
#  undef XLAT_STR_326
#  undef XLAT_VAL_326
#  undef XLAT_STR_327
#  undef XLAT_VAL_327
#  undef XLAT_STR_328
#  undef XLAT_VAL_328
#  undef XLAT_STR_329
#  undef XLAT_VAL_329
#  undef XLAT_STR_330
#  undef XLAT_VAL_330
#  undef XLAT_STR_331
#  undef XLAT_VAL_331
#  undef XLAT_STR_332
#  undef XLAT_VAL_332
#  undef XLAT_STR_333
#  undef XLAT_VAL_333
#  undef XLAT_STR_334
#  undef XLAT_VAL_334
#  undef XLAT_STR_335
#  undef XLAT_VAL_335
#  undef XLAT_STR_336
#  undef XLAT_VAL_336
#  undef XLAT_STR_337
#  undef XLAT_VAL_337
#  undef XLAT_STR_338
#  undef XLAT_VAL_338
#  undef XLAT_STR_339
#  undef XLAT_VAL_339
#  undef XLAT_STR_340
#  undef XLAT_VAL_340
#  undef XLAT_STR_341
#  undef XLAT_VAL_341
#  undef XLAT_STR_342
#  undef XLAT_VAL_342
#  undef XLAT_STR_343
#  undef XLAT_VAL_343
#  undef XLAT_STR_344
#  undef XLAT_VAL_344
#  undef XLAT_STR_345
#  undef XLAT_VAL_345
#  undef XLAT_STR_346
#  undef XLAT_VAL_346
#  undef XLAT_STR_347
#  undef XLAT_VAL_347
#  undef XLAT_STR_348
#  undef XLAT_VAL_348
#  undef XLAT_STR_349
#  undef XLAT_VAL_349
#  undef XLAT_STR_350
#  undef XLAT_VAL_350
#  undef XLAT_STR_351
#  undef XLAT_VAL_351
#  undef XLAT_STR_352
#  undef XLAT_VAL_352
#  undef XLAT_STR_353
#  undef XLAT_VAL_353
#  undef XLAT_STR_354
#  undef XLAT_VAL_354
#  undef XLAT_STR_355
#  undef XLAT_VAL_355
#  undef XLAT_STR_356
#  undef XLAT_VAL_356
#  undef XLAT_STR_357
#  undef XLAT_VAL_357
#  undef XLAT_STR_358
#  undef XLAT_VAL_358
#  undef XLAT_STR_359
#  undef XLAT_VAL_359
#  undef XLAT_STR_360
#  undef XLAT_VAL_360
#  undef XLAT_STR_361
#  undef XLAT_VAL_361
#  undef XLAT_STR_362
#  undef XLAT_VAL_362
#  undef XLAT_STR_363
#  undef XLAT_VAL_363
#  undef XLAT_STR_364
#  undef XLAT_VAL_364
#  undef XLAT_STR_365
#  undef XLAT_VAL_365
#  undef XLAT_STR_366
#  undef XLAT_VAL_366
#  undef XLAT_STR_367
#  undef XLAT_VAL_367
#  undef XLAT_STR_368
#  undef XLAT_VAL_368
#  undef XLAT_STR_369
#  undef XLAT_VAL_369
#  undef XLAT_STR_370
#  undef XLAT_VAL_370
#  undef XLAT_STR_371
#  undef XLAT_VAL_371
#  undef XLAT_STR_372
#  undef XLAT_VAL_372
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
