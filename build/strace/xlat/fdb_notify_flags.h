/* Generated by ./src/xlat/gen.sh from ./src/xlat/fdb_notify_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(FDB_NOTIFY_BIT) || (defined(HAVE_DECL_FDB_NOTIFY_BIT) && HAVE_DECL_FDB_NOTIFY_BIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FDB_NOTIFY_BIT) == ((1 << 0)), "FDB_NOTIFY_BIT != (1 << 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FDB_NOTIFY_BIT (1 << 0)
#endif
#if defined(FDB_NOTIFY_INACTIVE_BIT) || (defined(HAVE_DECL_FDB_NOTIFY_INACTIVE_BIT) && HAVE_DECL_FDB_NOTIFY_INACTIVE_BIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((FDB_NOTIFY_INACTIVE_BIT) == ((1 << 1)), "FDB_NOTIFY_INACTIVE_BIT != (1 << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define FDB_NOTIFY_INACTIVE_BIT (1 << 1)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat fdb_notify_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data fdb_notify_flags_xdata[] = {
 XLAT(FDB_NOTIFY_BIT),
 #define XLAT_VAL_0 ((unsigned) (FDB_NOTIFY_BIT))
 #define XLAT_STR_0 STRINGIFY(FDB_NOTIFY_BIT)
 XLAT(FDB_NOTIFY_INACTIVE_BIT),
 #define XLAT_VAL_1 ((unsigned) (FDB_NOTIFY_INACTIVE_BIT))
 #define XLAT_STR_1 STRINGIFY(FDB_NOTIFY_INACTIVE_BIT)
};
static
const struct xlat fdb_notify_flags[1] = { {
 .data = fdb_notify_flags_xdata,
 .size = ARRAY_SIZE(fdb_notify_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
