/* Generated by ./src/xlat/gen.sh from ./src/xlat/cap_mask1.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat cap_mask1 in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data cap_mask1_xdata[] = {
 XLAT_PAIR(1ULL<<CAP_MAC_OVERRIDE, "1<<CAP_MAC_OVERRIDE"),
 #define XLAT_VAL_0 ((unsigned) (1ULL<<CAP_MAC_OVERRIDE))
 #define XLAT_STR_0 "1<<CAP_MAC_OVERRIDE"
 XLAT_PAIR(1ULL<<CAP_MAC_ADMIN, "1<<CAP_MAC_ADMIN"),
 #define XLAT_VAL_1 ((unsigned) (1ULL<<CAP_MAC_ADMIN))
 #define XLAT_STR_1 "1<<CAP_MAC_ADMIN"
 XLAT_PAIR(1ULL<<CAP_SYSLOG, "1<<CAP_SYSLOG"),
 #define XLAT_VAL_2 ((unsigned) (1ULL<<CAP_SYSLOG))
 #define XLAT_STR_2 "1<<CAP_SYSLOG"
 XLAT_PAIR(1ULL<<CAP_WAKE_ALARM, "1<<CAP_WAKE_ALARM"),
 #define XLAT_VAL_3 ((unsigned) (1ULL<<CAP_WAKE_ALARM))
 #define XLAT_STR_3 "1<<CAP_WAKE_ALARM"
 XLAT_PAIR(1ULL<<CAP_BLOCK_SUSPEND, "1<<CAP_BLOCK_SUSPEND"),
 #define XLAT_VAL_4 ((unsigned) (1ULL<<CAP_BLOCK_SUSPEND))
 #define XLAT_STR_4 "1<<CAP_BLOCK_SUSPEND"
 XLAT_PAIR(1ULL<<CAP_AUDIT_READ, "1<<CAP_AUDIT_READ"),
 #define XLAT_VAL_5 ((unsigned) (1ULL<<CAP_AUDIT_READ))
 #define XLAT_STR_5 "1<<CAP_AUDIT_READ"
 XLAT_PAIR(1ULL<<CAP_PERFMON, "1<<CAP_PERFMON"),
 #define XLAT_VAL_6 ((unsigned) (1ULL<<CAP_PERFMON))
 #define XLAT_STR_6 "1<<CAP_PERFMON"
 XLAT_PAIR(1ULL<<CAP_BPF, "1<<CAP_BPF"),
 #define XLAT_VAL_7 ((unsigned) (1ULL<<CAP_BPF))
 #define XLAT_STR_7 "1<<CAP_BPF"
 XLAT_PAIR(1ULL<<CAP_CHECKPOINT_RESTORE, "1<<CAP_CHECKPOINT_RESTORE"),
 #define XLAT_VAL_8 ((unsigned) (1ULL<<CAP_CHECKPOINT_RESTORE))
 #define XLAT_STR_8 "1<<CAP_CHECKPOINT_RESTORE"
};
static
const struct xlat cap_mask1[1] = { {
 .data = cap_mask1_xdata,
 .size = ARRAY_SIZE(cap_mask1_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
