/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_alg_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ALG_SET_KEY) || (defined(HAVE_DECL_ALG_SET_KEY) && HAVE_DECL_ALG_SET_KEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ALG_SET_KEY) == (1), "ALG_SET_KEY != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ALG_SET_KEY 1
#endif
#if defined(ALG_SET_IV) || (defined(HAVE_DECL_ALG_SET_IV) && HAVE_DECL_ALG_SET_IV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ALG_SET_IV) == (2), "ALG_SET_IV != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ALG_SET_IV 2
#endif
#if defined(ALG_SET_OP) || (defined(HAVE_DECL_ALG_SET_OP) && HAVE_DECL_ALG_SET_OP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ALG_SET_OP) == (3), "ALG_SET_OP != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ALG_SET_OP 3
#endif
#if defined(ALG_SET_AEAD_ASSOCLEN) || (defined(HAVE_DECL_ALG_SET_AEAD_ASSOCLEN) && HAVE_DECL_ALG_SET_AEAD_ASSOCLEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ALG_SET_AEAD_ASSOCLEN) == (4), "ALG_SET_AEAD_ASSOCLEN != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ALG_SET_AEAD_ASSOCLEN 4
#endif
#if defined(ALG_SET_AEAD_AUTHSIZE) || (defined(HAVE_DECL_ALG_SET_AEAD_AUTHSIZE) && HAVE_DECL_ALG_SET_AEAD_AUTHSIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ALG_SET_AEAD_AUTHSIZE) == (5), "ALG_SET_AEAD_AUTHSIZE != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ALG_SET_AEAD_AUTHSIZE 5
#endif
#if defined(ALG_SET_DRBG_ENTROPY) || (defined(HAVE_DECL_ALG_SET_DRBG_ENTROPY) && HAVE_DECL_ALG_SET_DRBG_ENTROPY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ALG_SET_DRBG_ENTROPY) == (6), "ALG_SET_DRBG_ENTROPY != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ALG_SET_DRBG_ENTROPY 6
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_alg_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_alg_options_xdata[] = {
 [ALG_SET_KEY] = XLAT(ALG_SET_KEY),
 #define XLAT_VAL_0 ((unsigned) (ALG_SET_KEY))
 #define XLAT_STR_0 STRINGIFY(ALG_SET_KEY)
 [ALG_SET_IV] = XLAT(ALG_SET_IV),
 #define XLAT_VAL_1 ((unsigned) (ALG_SET_IV))
 #define XLAT_STR_1 STRINGIFY(ALG_SET_IV)
 [ALG_SET_OP] = XLAT(ALG_SET_OP),
 #define XLAT_VAL_2 ((unsigned) (ALG_SET_OP))
 #define XLAT_STR_2 STRINGIFY(ALG_SET_OP)
 [ALG_SET_AEAD_ASSOCLEN] = XLAT(ALG_SET_AEAD_ASSOCLEN),
 #define XLAT_VAL_3 ((unsigned) (ALG_SET_AEAD_ASSOCLEN))
 #define XLAT_STR_3 STRINGIFY(ALG_SET_AEAD_ASSOCLEN)
 [ALG_SET_AEAD_AUTHSIZE] = XLAT(ALG_SET_AEAD_AUTHSIZE),
 #define XLAT_VAL_4 ((unsigned) (ALG_SET_AEAD_AUTHSIZE))
 #define XLAT_STR_4 STRINGIFY(ALG_SET_AEAD_AUTHSIZE)
 [ALG_SET_DRBG_ENTROPY] = XLAT(ALG_SET_DRBG_ENTROPY),
 #define XLAT_VAL_5 ((unsigned) (ALG_SET_DRBG_ENTROPY))
 #define XLAT_STR_5 STRINGIFY(ALG_SET_DRBG_ENTROPY)
};
static
const struct xlat sock_alg_options[1] = { {
 .data = sock_alg_options_xdata,
 .size = ARRAY_SIZE(sock_alg_options_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
