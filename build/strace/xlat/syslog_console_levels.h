/* Generated by ./src/xlat/gen.sh from ./src/xlat/syslog_console_levels.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(LOGLEVEL_EMERG) || (defined(HAVE_DECL_LOGLEVEL_EMERG) && HAVE_DECL_LOGLEVEL_EMERG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGLEVEL_EMERG) == (0), "LOGLEVEL_EMERG != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGLEVEL_EMERG 0
#endif
#if defined(LOGLEVEL_ALERT) || (defined(HAVE_DECL_LOGLEVEL_ALERT) && HAVE_DECL_LOGLEVEL_ALERT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGLEVEL_ALERT) == (1), "LOGLEVEL_ALERT != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGLEVEL_ALERT 1
#endif
#if defined(LOGLEVEL_CRIT) || (defined(HAVE_DECL_LOGLEVEL_CRIT) && HAVE_DECL_LOGLEVEL_CRIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGLEVEL_CRIT) == (2), "LOGLEVEL_CRIT != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGLEVEL_CRIT 2
#endif
#if defined(LOGLEVEL_ERR) || (defined(HAVE_DECL_LOGLEVEL_ERR) && HAVE_DECL_LOGLEVEL_ERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGLEVEL_ERR) == (3), "LOGLEVEL_ERR != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGLEVEL_ERR 3
#endif
#if defined(LOGLEVEL_WARNING) || (defined(HAVE_DECL_LOGLEVEL_WARNING) && HAVE_DECL_LOGLEVEL_WARNING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGLEVEL_WARNING) == (4), "LOGLEVEL_WARNING != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGLEVEL_WARNING 4
#endif
#if defined(LOGLEVEL_NOTICE) || (defined(HAVE_DECL_LOGLEVEL_NOTICE) && HAVE_DECL_LOGLEVEL_NOTICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGLEVEL_NOTICE) == (5), "LOGLEVEL_NOTICE != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGLEVEL_NOTICE 5
#endif
#if defined(LOGLEVEL_INFO) || (defined(HAVE_DECL_LOGLEVEL_INFO) && HAVE_DECL_LOGLEVEL_INFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGLEVEL_INFO) == (6), "LOGLEVEL_INFO != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGLEVEL_INFO 6
#endif
#if defined(LOGLEVEL_DEBUG) || (defined(HAVE_DECL_LOGLEVEL_DEBUG) && HAVE_DECL_LOGLEVEL_DEBUG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGLEVEL_DEBUG) == (7), "LOGLEVEL_DEBUG != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGLEVEL_DEBUG 7
#endif
#if defined(LOGLEVEL_DEBUG) || (defined(HAVE_DECL_LOGLEVEL_DEBUG) && HAVE_DECL_LOGLEVEL_DEBUG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((LOGLEVEL_DEBUG) == (7), "LOGLEVEL_DEBUG != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define LOGLEVEL_DEBUG 7
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat syslog_console_levels in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data syslog_console_levels_xdata[] = {

 [LOGLEVEL_EMERG] = XLAT(LOGLEVEL_EMERG),
 #define XLAT_VAL_0 ((unsigned) (LOGLEVEL_EMERG))
 #define XLAT_STR_0 STRINGIFY(LOGLEVEL_EMERG)
 [LOGLEVEL_ALERT] = XLAT(LOGLEVEL_ALERT),
 #define XLAT_VAL_1 ((unsigned) (LOGLEVEL_ALERT))
 #define XLAT_STR_1 STRINGIFY(LOGLEVEL_ALERT)
 [LOGLEVEL_CRIT] = XLAT(LOGLEVEL_CRIT),
 #define XLAT_VAL_2 ((unsigned) (LOGLEVEL_CRIT))
 #define XLAT_STR_2 STRINGIFY(LOGLEVEL_CRIT)
 [LOGLEVEL_ERR] = XLAT(LOGLEVEL_ERR),
 #define XLAT_VAL_3 ((unsigned) (LOGLEVEL_ERR))
 #define XLAT_STR_3 STRINGIFY(LOGLEVEL_ERR)
 [LOGLEVEL_WARNING] = XLAT(LOGLEVEL_WARNING),
 #define XLAT_VAL_4 ((unsigned) (LOGLEVEL_WARNING))
 #define XLAT_STR_4 STRINGIFY(LOGLEVEL_WARNING)
 [LOGLEVEL_NOTICE] = XLAT(LOGLEVEL_NOTICE),
 #define XLAT_VAL_5 ((unsigned) (LOGLEVEL_NOTICE))
 #define XLAT_STR_5 STRINGIFY(LOGLEVEL_NOTICE)
 [LOGLEVEL_INFO] = XLAT(LOGLEVEL_INFO),
 #define XLAT_VAL_6 ((unsigned) (LOGLEVEL_INFO))
 #define XLAT_STR_6 STRINGIFY(LOGLEVEL_INFO)
 [LOGLEVEL_DEBUG] = XLAT(LOGLEVEL_DEBUG),
 #define XLAT_VAL_7 ((unsigned) (LOGLEVEL_DEBUG))
 #define XLAT_STR_7 STRINGIFY(LOGLEVEL_DEBUG)
 [LOGLEVEL_DEBUG+1] = XLAT(LOGLEVEL_DEBUG+1),
 #define XLAT_VAL_8 ((unsigned) (LOGLEVEL_DEBUG+1))
 #define XLAT_STR_8 STRINGIFY(LOGLEVEL_DEBUG+1)
};
static
const struct xlat syslog_console_levels[1] = { {
 .data = syslog_console_levels_xdata,
 .size = ARRAY_SIZE(syslog_console_levels_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
