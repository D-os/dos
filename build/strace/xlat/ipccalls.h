/* Generated by ./src/xlat/gen.sh from ./src/xlat/ipccalls.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SEMOP) || (defined(HAVE_DECL_SEMOP) && HAVE_DECL_SEMOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEMOP) == (1), "SEMOP != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEMOP 1
#endif
#if defined(SEMGET) || (defined(HAVE_DECL_SEMGET) && HAVE_DECL_SEMGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEMGET) == (2), "SEMGET != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEMGET 2
#endif
#if defined(SEMCTL) || (defined(HAVE_DECL_SEMCTL) && HAVE_DECL_SEMCTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEMCTL) == (3), "SEMCTL != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEMCTL 3
#endif
#if defined(SEMTIMEDOP) || (defined(HAVE_DECL_SEMTIMEDOP) && HAVE_DECL_SEMTIMEDOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SEMTIMEDOP) == (4), "SEMTIMEDOP != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SEMTIMEDOP 4
#endif
#if defined(MSGSND) || (defined(HAVE_DECL_MSGSND) && HAVE_DECL_MSGSND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSGSND) == (11), "MSGSND != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSGSND 11
#endif
#if defined(MSGRCV) || (defined(HAVE_DECL_MSGRCV) && HAVE_DECL_MSGRCV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSGRCV) == (12), "MSGRCV != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSGRCV 12
#endif
#if defined(MSGGET) || (defined(HAVE_DECL_MSGGET) && HAVE_DECL_MSGGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSGGET) == (13), "MSGGET != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSGGET 13
#endif
#if defined(MSGCTL) || (defined(HAVE_DECL_MSGCTL) && HAVE_DECL_MSGCTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSGCTL) == (14), "MSGCTL != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSGCTL 14
#endif
#if defined(SHMAT) || (defined(HAVE_DECL_SHMAT) && HAVE_DECL_SHMAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SHMAT) == (21), "SHMAT != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SHMAT 21
#endif
#if defined(SHMDT) || (defined(HAVE_DECL_SHMDT) && HAVE_DECL_SHMDT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SHMDT) == (22), "SHMDT != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SHMDT 22
#endif
#if defined(SHMGET) || (defined(HAVE_DECL_SHMGET) && HAVE_DECL_SHMGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SHMGET) == (23), "SHMGET != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SHMGET 23
#endif
#if defined(SHMCTL) || (defined(HAVE_DECL_SHMCTL) && HAVE_DECL_SHMCTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SHMCTL) == (24), "SHMCTL != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SHMCTL 24
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ipccalls in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data ipccalls_xdata[] = {
 XLAT(SEMOP),
 #define XLAT_VAL_0 ((unsigned) (SEMOP))
 #define XLAT_STR_0 STRINGIFY(SEMOP)
 XLAT(SEMGET),
 #define XLAT_VAL_1 ((unsigned) (SEMGET))
 #define XLAT_STR_1 STRINGIFY(SEMGET)
 XLAT(SEMCTL),
 #define XLAT_VAL_2 ((unsigned) (SEMCTL))
 #define XLAT_STR_2 STRINGIFY(SEMCTL)
 XLAT(SEMTIMEDOP),
 #define XLAT_VAL_3 ((unsigned) (SEMTIMEDOP))
 #define XLAT_STR_3 STRINGIFY(SEMTIMEDOP)
 XLAT(MSGSND),
 #define XLAT_VAL_4 ((unsigned) (MSGSND))
 #define XLAT_STR_4 STRINGIFY(MSGSND)
 XLAT(MSGRCV),
 #define XLAT_VAL_5 ((unsigned) (MSGRCV))
 #define XLAT_STR_5 STRINGIFY(MSGRCV)
 XLAT(MSGGET),
 #define XLAT_VAL_6 ((unsigned) (MSGGET))
 #define XLAT_STR_6 STRINGIFY(MSGGET)
 XLAT(MSGCTL),
 #define XLAT_VAL_7 ((unsigned) (MSGCTL))
 #define XLAT_STR_7 STRINGIFY(MSGCTL)
 XLAT(SHMAT),
 #define XLAT_VAL_8 ((unsigned) (SHMAT))
 #define XLAT_STR_8 STRINGIFY(SHMAT)
 XLAT(SHMDT),
 #define XLAT_VAL_9 ((unsigned) (SHMDT))
 #define XLAT_STR_9 STRINGIFY(SHMDT)
 XLAT(SHMGET),
 #define XLAT_VAL_10 ((unsigned) (SHMGET))
 #define XLAT_STR_10 STRINGIFY(SHMGET)
 XLAT(SHMCTL),
 #define XLAT_VAL_11 ((unsigned) (SHMCTL))
 #define XLAT_STR_11 STRINGIFY(SHMCTL)
};
static
const struct xlat ipccalls[1] = { {
 .data = ipccalls_xdata,
 .size = ARRAY_SIZE(ipccalls_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
