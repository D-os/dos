/* Generated by ./src/xlat/gen.sh from ./src/xlat/statx_masks.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(STATX_ALL) || (defined(HAVE_DECL_STATX_ALL) && HAVE_DECL_STATX_ALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_ALL) == (0x00000fffU), "STATX_ALL != 0x00000fffU");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_ALL 0x00000fffU
#endif
#if defined(STATX_BASIC_STATS) || (defined(HAVE_DECL_STATX_BASIC_STATS) && HAVE_DECL_STATX_BASIC_STATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_BASIC_STATS) == (0x000007ffU), "STATX_BASIC_STATS != 0x000007ffU");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_BASIC_STATS 0x000007ffU
#endif
#if defined(STATX_TYPE) || (defined(HAVE_DECL_STATX_TYPE) && HAVE_DECL_STATX_TYPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_TYPE) == (0x00000001U), "STATX_TYPE != 0x00000001U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_TYPE 0x00000001U
#endif
#if defined(STATX_MODE) || (defined(HAVE_DECL_STATX_MODE) && HAVE_DECL_STATX_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_MODE) == (0x00000002U), "STATX_MODE != 0x00000002U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_MODE 0x00000002U
#endif
#if defined(STATX_NLINK) || (defined(HAVE_DECL_STATX_NLINK) && HAVE_DECL_STATX_NLINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_NLINK) == (0x00000004U), "STATX_NLINK != 0x00000004U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_NLINK 0x00000004U
#endif
#if defined(STATX_UID) || (defined(HAVE_DECL_STATX_UID) && HAVE_DECL_STATX_UID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_UID) == (0x00000008U), "STATX_UID != 0x00000008U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_UID 0x00000008U
#endif
#if defined(STATX_GID) || (defined(HAVE_DECL_STATX_GID) && HAVE_DECL_STATX_GID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_GID) == (0x00000010U), "STATX_GID != 0x00000010U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_GID 0x00000010U
#endif
#if defined(STATX_ATIME) || (defined(HAVE_DECL_STATX_ATIME) && HAVE_DECL_STATX_ATIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_ATIME) == (0x00000020U), "STATX_ATIME != 0x00000020U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_ATIME 0x00000020U
#endif
#if defined(STATX_MTIME) || (defined(HAVE_DECL_STATX_MTIME) && HAVE_DECL_STATX_MTIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_MTIME) == (0x00000040U), "STATX_MTIME != 0x00000040U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_MTIME 0x00000040U
#endif
#if defined(STATX_CTIME) || (defined(HAVE_DECL_STATX_CTIME) && HAVE_DECL_STATX_CTIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_CTIME) == (0x00000080U), "STATX_CTIME != 0x00000080U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_CTIME 0x00000080U
#endif
#if defined(STATX_INO) || (defined(HAVE_DECL_STATX_INO) && HAVE_DECL_STATX_INO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_INO) == (0x00000100U), "STATX_INO != 0x00000100U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_INO 0x00000100U
#endif
#if defined(STATX_SIZE) || (defined(HAVE_DECL_STATX_SIZE) && HAVE_DECL_STATX_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_SIZE) == (0x00000200U), "STATX_SIZE != 0x00000200U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_SIZE 0x00000200U
#endif
#if defined(STATX_BLOCKS) || (defined(HAVE_DECL_STATX_BLOCKS) && HAVE_DECL_STATX_BLOCKS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_BLOCKS) == (0x00000400U), "STATX_BLOCKS != 0x00000400U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_BLOCKS 0x00000400U
#endif
#if defined(STATX_BTIME) || (defined(HAVE_DECL_STATX_BTIME) && HAVE_DECL_STATX_BTIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_BTIME) == (0x00000800U), "STATX_BTIME != 0x00000800U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_BTIME 0x00000800U
#endif
#if defined(STATX_MNT_ID) || (defined(HAVE_DECL_STATX_MNT_ID) && HAVE_DECL_STATX_MNT_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((STATX_MNT_ID) == (0x00001000U), "STATX_MNT_ID != 0x00001000U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define STATX_MNT_ID 0x00001000U
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat statx_masks in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data statx_masks_xdata[] = {
 XLAT(STATX_ALL),
 #define XLAT_VAL_0 ((unsigned) (STATX_ALL))
 #define XLAT_STR_0 STRINGIFY(STATX_ALL)
 XLAT(STATX_BASIC_STATS),
 #define XLAT_VAL_1 ((unsigned) (STATX_BASIC_STATS))
 #define XLAT_STR_1 STRINGIFY(STATX_BASIC_STATS)

 XLAT(STATX_TYPE),
 #define XLAT_VAL_2 ((unsigned) (STATX_TYPE))
 #define XLAT_STR_2 STRINGIFY(STATX_TYPE)
 XLAT(STATX_MODE),
 #define XLAT_VAL_3 ((unsigned) (STATX_MODE))
 #define XLAT_STR_3 STRINGIFY(STATX_MODE)
 XLAT(STATX_NLINK),
 #define XLAT_VAL_4 ((unsigned) (STATX_NLINK))
 #define XLAT_STR_4 STRINGIFY(STATX_NLINK)
 XLAT(STATX_UID),
 #define XLAT_VAL_5 ((unsigned) (STATX_UID))
 #define XLAT_STR_5 STRINGIFY(STATX_UID)
 XLAT(STATX_GID),
 #define XLAT_VAL_6 ((unsigned) (STATX_GID))
 #define XLAT_STR_6 STRINGIFY(STATX_GID)
 XLAT(STATX_ATIME),
 #define XLAT_VAL_7 ((unsigned) (STATX_ATIME))
 #define XLAT_STR_7 STRINGIFY(STATX_ATIME)
 XLAT(STATX_MTIME),
 #define XLAT_VAL_8 ((unsigned) (STATX_MTIME))
 #define XLAT_STR_8 STRINGIFY(STATX_MTIME)
 XLAT(STATX_CTIME),
 #define XLAT_VAL_9 ((unsigned) (STATX_CTIME))
 #define XLAT_STR_9 STRINGIFY(STATX_CTIME)
 XLAT(STATX_INO),
 #define XLAT_VAL_10 ((unsigned) (STATX_INO))
 #define XLAT_STR_10 STRINGIFY(STATX_INO)
 XLAT(STATX_SIZE),
 #define XLAT_VAL_11 ((unsigned) (STATX_SIZE))
 #define XLAT_STR_11 STRINGIFY(STATX_SIZE)
 XLAT(STATX_BLOCKS),
 #define XLAT_VAL_12 ((unsigned) (STATX_BLOCKS))
 #define XLAT_STR_12 STRINGIFY(STATX_BLOCKS)
 XLAT(STATX_BTIME),
 #define XLAT_VAL_13 ((unsigned) (STATX_BTIME))
 #define XLAT_STR_13 STRINGIFY(STATX_BTIME)
 XLAT(STATX_MNT_ID),
 #define XLAT_VAL_14 ((unsigned) (STATX_MNT_ID))
 #define XLAT_STR_14 STRINGIFY(STATX_MNT_ID)
};
static
const struct xlat statx_masks[1] = { {
 .data = statx_masks_xdata,
 .size = ARRAY_SIZE(statx_masks_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
