/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_ioctl_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(KIOCSOUND) || (defined(HAVE_DECL_KIOCSOUND) && HAVE_DECL_KIOCSOUND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KIOCSOUND) == (0x4B2F), "KIOCSOUND != 0x4B2F");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KIOCSOUND 0x4B2F
#endif
#if defined(KIOCSOUND) || (defined(HAVE_DECL_KIOCSOUND) && HAVE_DECL_KIOCSOUND)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KIOCSOUND)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KIOCSOUND"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KIOCSOUND)
#endif
#if defined(KDMKTONE) || (defined(HAVE_DECL_KDMKTONE) && HAVE_DECL_KDMKTONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDMKTONE) == (0x4B30), "KDMKTONE != 0x4B30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDMKTONE 0x4B30
#endif
#if defined(KDMKTONE) || (defined(HAVE_DECL_KDMKTONE) && HAVE_DECL_KDMKTONE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDMKTONE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDMKTONE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDMKTONE)
#endif
#if defined(KDGETLED) || (defined(HAVE_DECL_KDGETLED) && HAVE_DECL_KDGETLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGETLED) == (0x4B31), "KDGETLED != 0x4B31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGETLED 0x4B31
#endif
#if defined(KDGETLED) || (defined(HAVE_DECL_KDGETLED) && HAVE_DECL_KDGETLED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGETLED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGETLED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGETLED)
#endif
#if defined(KDSETLED) || (defined(HAVE_DECL_KDSETLED) && HAVE_DECL_KDSETLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSETLED) == (0x4B32), "KDSETLED != 0x4B32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSETLED 0x4B32
#endif
#if defined(KDSETLED) || (defined(HAVE_DECL_KDSETLED) && HAVE_DECL_KDSETLED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSETLED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSETLED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSETLED)
#endif
#if defined(KDGKBTYPE) || (defined(HAVE_DECL_KDGKBTYPE) && HAVE_DECL_KDGKBTYPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGKBTYPE) == (0x4B33), "KDGKBTYPE != 0x4B33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGKBTYPE 0x4B33
#endif
#if defined(KDGKBTYPE) || (defined(HAVE_DECL_KDGKBTYPE) && HAVE_DECL_KDGKBTYPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGKBTYPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGKBTYPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGKBTYPE)
#endif
#if defined(KDADDIO) || (defined(HAVE_DECL_KDADDIO) && HAVE_DECL_KDADDIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDADDIO) == (0x4B34), "KDADDIO != 0x4B34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDADDIO 0x4B34
#endif
#if defined(KDADDIO) || (defined(HAVE_DECL_KDADDIO) && HAVE_DECL_KDADDIO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDADDIO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDADDIO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDADDIO)
#endif
#if defined(KDDELIO) || (defined(HAVE_DECL_KDDELIO) && HAVE_DECL_KDDELIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDDELIO) == (0x4B35), "KDDELIO != 0x4B35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDDELIO 0x4B35
#endif
#if defined(KDDELIO) || (defined(HAVE_DECL_KDDELIO) && HAVE_DECL_KDDELIO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDDELIO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDDELIO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDDELIO)
#endif
#if defined(KDENABIO) || (defined(HAVE_DECL_KDENABIO) && HAVE_DECL_KDENABIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDENABIO) == (0x4B36), "KDENABIO != 0x4B36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDENABIO 0x4B36
#endif
#if defined(KDENABIO) || (defined(HAVE_DECL_KDENABIO) && HAVE_DECL_KDENABIO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDENABIO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDENABIO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDENABIO)
#endif
#if defined(KDDISABIO) || (defined(HAVE_DECL_KDDISABIO) && HAVE_DECL_KDDISABIO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDDISABIO) == (0x4B37), "KDDISABIO != 0x4B37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDDISABIO 0x4B37
#endif
#if defined(KDDISABIO) || (defined(HAVE_DECL_KDDISABIO) && HAVE_DECL_KDDISABIO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDDISABIO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDDISABIO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDDISABIO)
#endif
#if defined(KDSETMODE) || (defined(HAVE_DECL_KDSETMODE) && HAVE_DECL_KDSETMODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSETMODE) == (0x4B3A), "KDSETMODE != 0x4B3A");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSETMODE 0x4B3A
#endif
#if defined(KDSETMODE) || (defined(HAVE_DECL_KDSETMODE) && HAVE_DECL_KDSETMODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSETMODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSETMODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSETMODE)
#endif
#if defined(KDGETMODE) || (defined(HAVE_DECL_KDGETMODE) && HAVE_DECL_KDGETMODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGETMODE) == (0x4B3B), "KDGETMODE != 0x4B3B");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGETMODE 0x4B3B
#endif
#if defined(KDGETMODE) || (defined(HAVE_DECL_KDGETMODE) && HAVE_DECL_KDGETMODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGETMODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGETMODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGETMODE)
#endif
#if defined(KDMAPDISP) || (defined(HAVE_DECL_KDMAPDISP) && HAVE_DECL_KDMAPDISP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDMAPDISP) == (0x4B3C), "KDMAPDISP != 0x4B3C");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDMAPDISP 0x4B3C
#endif
#if defined(KDMAPDISP) || (defined(HAVE_DECL_KDMAPDISP) && HAVE_DECL_KDMAPDISP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDMAPDISP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDMAPDISP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDMAPDISP)
#endif
#if defined(KDUNMAPDISP) || (defined(HAVE_DECL_KDUNMAPDISP) && HAVE_DECL_KDUNMAPDISP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDUNMAPDISP) == (0x4B3D), "KDUNMAPDISP != 0x4B3D");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDUNMAPDISP 0x4B3D
#endif
#if defined(KDUNMAPDISP) || (defined(HAVE_DECL_KDUNMAPDISP) && HAVE_DECL_KDUNMAPDISP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDUNMAPDISP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDUNMAPDISP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDUNMAPDISP)
#endif
#if defined(GIO_SCRNMAP) || (defined(HAVE_DECL_GIO_SCRNMAP) && HAVE_DECL_GIO_SCRNMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GIO_SCRNMAP) == (0x4B40), "GIO_SCRNMAP != 0x4B40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GIO_SCRNMAP 0x4B40
#endif
#if defined(GIO_SCRNMAP) || (defined(HAVE_DECL_GIO_SCRNMAP) && HAVE_DECL_GIO_SCRNMAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (GIO_SCRNMAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: GIO_SCRNMAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (GIO_SCRNMAP)
#endif
#if defined(PIO_SCRNMAP) || (defined(HAVE_DECL_PIO_SCRNMAP) && HAVE_DECL_PIO_SCRNMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIO_SCRNMAP) == (0x4B41), "PIO_SCRNMAP != 0x4B41");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIO_SCRNMAP 0x4B41
#endif
#if defined(PIO_SCRNMAP) || (defined(HAVE_DECL_PIO_SCRNMAP) && HAVE_DECL_PIO_SCRNMAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PIO_SCRNMAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PIO_SCRNMAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PIO_SCRNMAP)
#endif
#if defined(KDGKBMODE) || (defined(HAVE_DECL_KDGKBMODE) && HAVE_DECL_KDGKBMODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGKBMODE) == (0x4B44), "KDGKBMODE != 0x4B44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGKBMODE 0x4B44
#endif
#if defined(KDGKBMODE) || (defined(HAVE_DECL_KDGKBMODE) && HAVE_DECL_KDGKBMODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGKBMODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGKBMODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGKBMODE)
#endif
#if defined(KDSKBMODE) || (defined(HAVE_DECL_KDSKBMODE) && HAVE_DECL_KDSKBMODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSKBMODE) == (0x4B45), "KDSKBMODE != 0x4B45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSKBMODE 0x4B45
#endif
#if defined(KDSKBMODE) || (defined(HAVE_DECL_KDSKBMODE) && HAVE_DECL_KDSKBMODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSKBMODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSKBMODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSKBMODE)
#endif
#if defined(KDGKBENT) || (defined(HAVE_DECL_KDGKBENT) && HAVE_DECL_KDGKBENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGKBENT) == (0x4B46), "KDGKBENT != 0x4B46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGKBENT 0x4B46
#endif
#if defined(KDGKBENT) || (defined(HAVE_DECL_KDGKBENT) && HAVE_DECL_KDGKBENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGKBENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGKBENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGKBENT)
#endif
#if defined(KDSKBENT) || (defined(HAVE_DECL_KDSKBENT) && HAVE_DECL_KDSKBENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSKBENT) == (0x4B47), "KDSKBENT != 0x4B47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSKBENT 0x4B47
#endif
#if defined(KDSKBENT) || (defined(HAVE_DECL_KDSKBENT) && HAVE_DECL_KDSKBENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSKBENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSKBENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSKBENT)
#endif
#if defined(KDGKBSENT) || (defined(HAVE_DECL_KDGKBSENT) && HAVE_DECL_KDGKBSENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGKBSENT) == (0x4B48), "KDGKBSENT != 0x4B48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGKBSENT 0x4B48
#endif
#if defined(KDGKBSENT) || (defined(HAVE_DECL_KDGKBSENT) && HAVE_DECL_KDGKBSENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGKBSENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGKBSENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGKBSENT)
#endif
#if defined(KDSKBSENT) || (defined(HAVE_DECL_KDSKBSENT) && HAVE_DECL_KDSKBSENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSKBSENT) == (0x4B49), "KDSKBSENT != 0x4B49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSKBSENT 0x4B49
#endif
#if defined(KDSKBSENT) || (defined(HAVE_DECL_KDSKBSENT) && HAVE_DECL_KDSKBSENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSKBSENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSKBSENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSKBSENT)
#endif
#if defined(KDGKBDIACR) || (defined(HAVE_DECL_KDGKBDIACR) && HAVE_DECL_KDGKBDIACR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGKBDIACR) == (0x4B4A), "KDGKBDIACR != 0x4B4A");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGKBDIACR 0x4B4A
#endif
#if defined(KDGKBDIACR) || (defined(HAVE_DECL_KDGKBDIACR) && HAVE_DECL_KDGKBDIACR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGKBDIACR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGKBDIACR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGKBDIACR)
#endif
#if defined(KDSKBDIACR) || (defined(HAVE_DECL_KDSKBDIACR) && HAVE_DECL_KDSKBDIACR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSKBDIACR) == (0x4B4B), "KDSKBDIACR != 0x4B4B");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSKBDIACR 0x4B4B
#endif
#if defined(KDSKBDIACR) || (defined(HAVE_DECL_KDSKBDIACR) && HAVE_DECL_KDSKBDIACR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSKBDIACR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSKBDIACR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSKBDIACR)
#endif
#if defined(KDGETKEYCODE) || (defined(HAVE_DECL_KDGETKEYCODE) && HAVE_DECL_KDGETKEYCODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGETKEYCODE) == (0x4B4C), "KDGETKEYCODE != 0x4B4C");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGETKEYCODE 0x4B4C
#endif
#if defined(KDGETKEYCODE) || (defined(HAVE_DECL_KDGETKEYCODE) && HAVE_DECL_KDGETKEYCODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGETKEYCODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGETKEYCODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGETKEYCODE)
#endif
#if defined(KDSETKEYCODE) || (defined(HAVE_DECL_KDSETKEYCODE) && HAVE_DECL_KDSETKEYCODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSETKEYCODE) == (0x4B4D), "KDSETKEYCODE != 0x4B4D");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSETKEYCODE 0x4B4D
#endif
#if defined(KDSETKEYCODE) || (defined(HAVE_DECL_KDSETKEYCODE) && HAVE_DECL_KDSETKEYCODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSETKEYCODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSETKEYCODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSETKEYCODE)
#endif
#if defined(KDSIGACCEPT) || (defined(HAVE_DECL_KDSIGACCEPT) && HAVE_DECL_KDSIGACCEPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSIGACCEPT) == (0x4B4E), "KDSIGACCEPT != 0x4B4E");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSIGACCEPT 0x4B4E
#endif
#if defined(KDSIGACCEPT) || (defined(HAVE_DECL_KDSIGACCEPT) && HAVE_DECL_KDSIGACCEPT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSIGACCEPT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSIGACCEPT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSIGACCEPT)
#endif
#if defined(KDKBDREP) || (defined(HAVE_DECL_KDKBDREP) && HAVE_DECL_KDKBDREP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDKBDREP) == (0x4B52), "KDKBDREP != 0x4B52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDKBDREP 0x4B52
#endif
#if defined(KDKBDREP) || (defined(HAVE_DECL_KDKBDREP) && HAVE_DECL_KDKBDREP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDKBDREP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDKBDREP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDKBDREP)
#endif
#if defined(GIO_FONT) || (defined(HAVE_DECL_GIO_FONT) && HAVE_DECL_GIO_FONT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GIO_FONT) == (0x4B60), "GIO_FONT != 0x4B60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GIO_FONT 0x4B60
#endif
#if defined(GIO_FONT) || (defined(HAVE_DECL_GIO_FONT) && HAVE_DECL_GIO_FONT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (GIO_FONT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: GIO_FONT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (GIO_FONT)
#endif
#if defined(PIO_FONT) || (defined(HAVE_DECL_PIO_FONT) && HAVE_DECL_PIO_FONT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIO_FONT) == (0x4B61), "PIO_FONT != 0x4B61");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIO_FONT 0x4B61
#endif
#if defined(PIO_FONT) || (defined(HAVE_DECL_PIO_FONT) && HAVE_DECL_PIO_FONT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PIO_FONT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PIO_FONT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PIO_FONT)
#endif
#if defined(KDGKBMETA) || (defined(HAVE_DECL_KDGKBMETA) && HAVE_DECL_KDGKBMETA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGKBMETA) == (0x4B62), "KDGKBMETA != 0x4B62");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGKBMETA 0x4B62
#endif
#if defined(KDGKBMETA) || (defined(HAVE_DECL_KDGKBMETA) && HAVE_DECL_KDGKBMETA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGKBMETA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGKBMETA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGKBMETA)
#endif
#if defined(KDSKBMETA) || (defined(HAVE_DECL_KDSKBMETA) && HAVE_DECL_KDSKBMETA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSKBMETA) == (0x4B63), "KDSKBMETA != 0x4B63");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSKBMETA 0x4B63
#endif
#if defined(KDSKBMETA) || (defined(HAVE_DECL_KDSKBMETA) && HAVE_DECL_KDSKBMETA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSKBMETA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSKBMETA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSKBMETA)
#endif
#if defined(KDGKBLED) || (defined(HAVE_DECL_KDGKBLED) && HAVE_DECL_KDGKBLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGKBLED) == (0x4B64), "KDGKBLED != 0x4B64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGKBLED 0x4B64
#endif
#if defined(KDGKBLED) || (defined(HAVE_DECL_KDGKBLED) && HAVE_DECL_KDGKBLED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGKBLED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGKBLED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGKBLED)
#endif
#if defined(KDSKBLED) || (defined(HAVE_DECL_KDSKBLED) && HAVE_DECL_KDSKBLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSKBLED) == (0x4B65), "KDSKBLED != 0x4B65");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSKBLED 0x4B65
#endif
#if defined(KDSKBLED) || (defined(HAVE_DECL_KDSKBLED) && HAVE_DECL_KDSKBLED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSKBLED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSKBLED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSKBLED)
#endif
#if defined(GIO_UNIMAP) || (defined(HAVE_DECL_GIO_UNIMAP) && HAVE_DECL_GIO_UNIMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GIO_UNIMAP) == (0x4B66), "GIO_UNIMAP != 0x4B66");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GIO_UNIMAP 0x4B66
#endif
#if defined(GIO_UNIMAP) || (defined(HAVE_DECL_GIO_UNIMAP) && HAVE_DECL_GIO_UNIMAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (GIO_UNIMAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: GIO_UNIMAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (GIO_UNIMAP)
#endif
#if defined(PIO_UNIMAP) || (defined(HAVE_DECL_PIO_UNIMAP) && HAVE_DECL_PIO_UNIMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIO_UNIMAP) == (0x4B67), "PIO_UNIMAP != 0x4B67");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIO_UNIMAP 0x4B67
#endif
#if defined(PIO_UNIMAP) || (defined(HAVE_DECL_PIO_UNIMAP) && HAVE_DECL_PIO_UNIMAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PIO_UNIMAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PIO_UNIMAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PIO_UNIMAP)
#endif
#if defined(PIO_UNIMAPCLR) || (defined(HAVE_DECL_PIO_UNIMAPCLR) && HAVE_DECL_PIO_UNIMAPCLR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIO_UNIMAPCLR) == (0x4B68), "PIO_UNIMAPCLR != 0x4B68");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIO_UNIMAPCLR 0x4B68
#endif
#if defined(PIO_UNIMAPCLR) || (defined(HAVE_DECL_PIO_UNIMAPCLR) && HAVE_DECL_PIO_UNIMAPCLR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PIO_UNIMAPCLR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PIO_UNIMAPCLR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PIO_UNIMAPCLR)
#endif
#if defined(GIO_UNISCRNMAP) || (defined(HAVE_DECL_GIO_UNISCRNMAP) && HAVE_DECL_GIO_UNISCRNMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GIO_UNISCRNMAP) == (0x4B69), "GIO_UNISCRNMAP != 0x4B69");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GIO_UNISCRNMAP 0x4B69
#endif
#if defined(GIO_UNISCRNMAP) || (defined(HAVE_DECL_GIO_UNISCRNMAP) && HAVE_DECL_GIO_UNISCRNMAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (GIO_UNISCRNMAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: GIO_UNISCRNMAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (GIO_UNISCRNMAP)
#endif
#if defined(PIO_UNISCRNMAP) || (defined(HAVE_DECL_PIO_UNISCRNMAP) && HAVE_DECL_PIO_UNISCRNMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIO_UNISCRNMAP) == (0x4B6A), "PIO_UNISCRNMAP != 0x4B6A");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIO_UNISCRNMAP 0x4B6A
#endif
#if defined(PIO_UNISCRNMAP) || (defined(HAVE_DECL_PIO_UNISCRNMAP) && HAVE_DECL_PIO_UNISCRNMAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PIO_UNISCRNMAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PIO_UNISCRNMAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PIO_UNISCRNMAP)
#endif
#if defined(GIO_FONTX) || (defined(HAVE_DECL_GIO_FONTX) && HAVE_DECL_GIO_FONTX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GIO_FONTX) == (0x4B6B), "GIO_FONTX != 0x4B6B");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GIO_FONTX 0x4B6B
#endif
#if defined(GIO_FONTX) || (defined(HAVE_DECL_GIO_FONTX) && HAVE_DECL_GIO_FONTX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (GIO_FONTX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: GIO_FONTX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (GIO_FONTX)
#endif
#if defined(PIO_FONTX) || (defined(HAVE_DECL_PIO_FONTX) && HAVE_DECL_PIO_FONTX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIO_FONTX) == (0x4B6C), "PIO_FONTX != 0x4B6C");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIO_FONTX 0x4B6C
#endif
#if defined(PIO_FONTX) || (defined(HAVE_DECL_PIO_FONTX) && HAVE_DECL_PIO_FONTX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PIO_FONTX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PIO_FONTX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PIO_FONTX)
#endif
#if defined(PIO_FONTRESET) || (defined(HAVE_DECL_PIO_FONTRESET) && HAVE_DECL_PIO_FONTRESET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIO_FONTRESET) == (0x4B6D), "PIO_FONTRESET != 0x4B6D");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIO_FONTRESET 0x4B6D
#endif
#if defined(PIO_FONTRESET) || (defined(HAVE_DECL_PIO_FONTRESET) && HAVE_DECL_PIO_FONTRESET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PIO_FONTRESET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PIO_FONTRESET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PIO_FONTRESET)
#endif
#if defined(GIO_CMAP) || (defined(HAVE_DECL_GIO_CMAP) && HAVE_DECL_GIO_CMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GIO_CMAP) == (0x4B70), "GIO_CMAP != 0x4B70");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GIO_CMAP 0x4B70
#endif
#if defined(GIO_CMAP) || (defined(HAVE_DECL_GIO_CMAP) && HAVE_DECL_GIO_CMAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (GIO_CMAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: GIO_CMAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (GIO_CMAP)
#endif
#if defined(PIO_CMAP) || (defined(HAVE_DECL_PIO_CMAP) && HAVE_DECL_PIO_CMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PIO_CMAP) == (0x4B71), "PIO_CMAP != 0x4B71");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PIO_CMAP 0x4B71
#endif
#if defined(PIO_CMAP) || (defined(HAVE_DECL_PIO_CMAP) && HAVE_DECL_PIO_CMAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (PIO_CMAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: PIO_CMAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (PIO_CMAP)
#endif
#if defined(KDFONTOP) || (defined(HAVE_DECL_KDFONTOP) && HAVE_DECL_KDFONTOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDFONTOP) == (0x4B72), "KDFONTOP != 0x4B72");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDFONTOP 0x4B72
#endif
#if defined(KDFONTOP) || (defined(HAVE_DECL_KDFONTOP) && HAVE_DECL_KDFONTOP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDFONTOP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDFONTOP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDFONTOP)
#endif
#if defined(KDGKBDIACRUC) || (defined(HAVE_DECL_KDGKBDIACRUC) && HAVE_DECL_KDGKBDIACRUC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDGKBDIACRUC) == (0x4BFA), "KDGKBDIACRUC != 0x4BFA");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDGKBDIACRUC 0x4BFA
#endif
#if defined(KDGKBDIACRUC) || (defined(HAVE_DECL_KDGKBDIACRUC) && HAVE_DECL_KDGKBDIACRUC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDGKBDIACRUC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDGKBDIACRUC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDGKBDIACRUC)
#endif
#if defined(KDSKBDIACRUC) || (defined(HAVE_DECL_KDSKBDIACRUC) && HAVE_DECL_KDSKBDIACRUC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KDSKBDIACRUC) == (0x4BFB), "KDSKBDIACRUC != 0x4BFB");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KDSKBDIACRUC 0x4BFB
#endif
#if defined(KDSKBDIACRUC) || (defined(HAVE_DECL_KDSKBDIACRUC) && HAVE_DECL_KDSKBDIACRUC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (KDSKBDIACRUC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: KDSKBDIACRUC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (KDSKBDIACRUC)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat kd_ioctl_cmds[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_ioctl_cmds_xdata[] = {

 XLAT(KIOCSOUND),
 #define XLAT_VAL_0 ((unsigned) (KIOCSOUND))
 #define XLAT_STR_0 STRINGIFY(KIOCSOUND)
 XLAT(KDMKTONE),
 #define XLAT_VAL_1 ((unsigned) (KDMKTONE))
 #define XLAT_STR_1 STRINGIFY(KDMKTONE)
 XLAT(KDGETLED),
 #define XLAT_VAL_2 ((unsigned) (KDGETLED))
 #define XLAT_STR_2 STRINGIFY(KDGETLED)
 XLAT(KDSETLED),
 #define XLAT_VAL_3 ((unsigned) (KDSETLED))
 #define XLAT_STR_3 STRINGIFY(KDSETLED)
 XLAT(KDGKBTYPE),
 #define XLAT_VAL_4 ((unsigned) (KDGKBTYPE))
 #define XLAT_STR_4 STRINGIFY(KDGKBTYPE)
 XLAT(KDADDIO),
 #define XLAT_VAL_5 ((unsigned) (KDADDIO))
 #define XLAT_STR_5 STRINGIFY(KDADDIO)
 XLAT(KDDELIO),
 #define XLAT_VAL_6 ((unsigned) (KDDELIO))
 #define XLAT_STR_6 STRINGIFY(KDDELIO)
 XLAT(KDENABIO),
 #define XLAT_VAL_7 ((unsigned) (KDENABIO))
 #define XLAT_STR_7 STRINGIFY(KDENABIO)
 XLAT(KDDISABIO),
 #define XLAT_VAL_8 ((unsigned) (KDDISABIO))
 #define XLAT_STR_8 STRINGIFY(KDDISABIO)
 XLAT(KDSETMODE),
 #define XLAT_VAL_9 ((unsigned) (KDSETMODE))
 #define XLAT_STR_9 STRINGIFY(KDSETMODE)
 XLAT(KDGETMODE),
 #define XLAT_VAL_10 ((unsigned) (KDGETMODE))
 #define XLAT_STR_10 STRINGIFY(KDGETMODE)
 XLAT(KDMAPDISP),
 #define XLAT_VAL_11 ((unsigned) (KDMAPDISP))
 #define XLAT_STR_11 STRINGIFY(KDMAPDISP)
 XLAT(KDUNMAPDISP),
 #define XLAT_VAL_12 ((unsigned) (KDUNMAPDISP))
 #define XLAT_STR_12 STRINGIFY(KDUNMAPDISP)
 XLAT(GIO_SCRNMAP),
 #define XLAT_VAL_13 ((unsigned) (GIO_SCRNMAP))
 #define XLAT_STR_13 STRINGIFY(GIO_SCRNMAP)
 XLAT(PIO_SCRNMAP),
 #define XLAT_VAL_14 ((unsigned) (PIO_SCRNMAP))
 #define XLAT_STR_14 STRINGIFY(PIO_SCRNMAP)
 XLAT(KDGKBMODE),
 #define XLAT_VAL_15 ((unsigned) (KDGKBMODE))
 #define XLAT_STR_15 STRINGIFY(KDGKBMODE)
 XLAT(KDSKBMODE),
 #define XLAT_VAL_16 ((unsigned) (KDSKBMODE))
 #define XLAT_STR_16 STRINGIFY(KDSKBMODE)
 XLAT(KDGKBENT),
 #define XLAT_VAL_17 ((unsigned) (KDGKBENT))
 #define XLAT_STR_17 STRINGIFY(KDGKBENT)
 XLAT(KDSKBENT),
 #define XLAT_VAL_18 ((unsigned) (KDSKBENT))
 #define XLAT_STR_18 STRINGIFY(KDSKBENT)
 XLAT(KDGKBSENT),
 #define XLAT_VAL_19 ((unsigned) (KDGKBSENT))
 #define XLAT_STR_19 STRINGIFY(KDGKBSENT)
 XLAT(KDSKBSENT),
 #define XLAT_VAL_20 ((unsigned) (KDSKBSENT))
 #define XLAT_STR_20 STRINGIFY(KDSKBSENT)
 XLAT(KDGKBDIACR),
 #define XLAT_VAL_21 ((unsigned) (KDGKBDIACR))
 #define XLAT_STR_21 STRINGIFY(KDGKBDIACR)
 XLAT(KDSKBDIACR),
 #define XLAT_VAL_22 ((unsigned) (KDSKBDIACR))
 #define XLAT_STR_22 STRINGIFY(KDSKBDIACR)
 XLAT(KDGETKEYCODE),
 #define XLAT_VAL_23 ((unsigned) (KDGETKEYCODE))
 #define XLAT_STR_23 STRINGIFY(KDGETKEYCODE)
 XLAT(KDSETKEYCODE),
 #define XLAT_VAL_24 ((unsigned) (KDSETKEYCODE))
 #define XLAT_STR_24 STRINGIFY(KDSETKEYCODE)
 XLAT(KDSIGACCEPT),
 #define XLAT_VAL_25 ((unsigned) (KDSIGACCEPT))
 #define XLAT_STR_25 STRINGIFY(KDSIGACCEPT)
 XLAT(KDKBDREP),
 #define XLAT_VAL_26 ((unsigned) (KDKBDREP))
 #define XLAT_STR_26 STRINGIFY(KDKBDREP)
 XLAT(GIO_FONT),
 #define XLAT_VAL_27 ((unsigned) (GIO_FONT))
 #define XLAT_STR_27 STRINGIFY(GIO_FONT)
 XLAT(PIO_FONT),
 #define XLAT_VAL_28 ((unsigned) (PIO_FONT))
 #define XLAT_STR_28 STRINGIFY(PIO_FONT)
 XLAT(KDGKBMETA),
 #define XLAT_VAL_29 ((unsigned) (KDGKBMETA))
 #define XLAT_STR_29 STRINGIFY(KDGKBMETA)
 XLAT(KDSKBMETA),
 #define XLAT_VAL_30 ((unsigned) (KDSKBMETA))
 #define XLAT_STR_30 STRINGIFY(KDSKBMETA)
 XLAT(KDGKBLED),
 #define XLAT_VAL_31 ((unsigned) (KDGKBLED))
 #define XLAT_STR_31 STRINGIFY(KDGKBLED)
 XLAT(KDSKBLED),
 #define XLAT_VAL_32 ((unsigned) (KDSKBLED))
 #define XLAT_STR_32 STRINGIFY(KDSKBLED)
 XLAT(GIO_UNIMAP),
 #define XLAT_VAL_33 ((unsigned) (GIO_UNIMAP))
 #define XLAT_STR_33 STRINGIFY(GIO_UNIMAP)
 XLAT(PIO_UNIMAP),
 #define XLAT_VAL_34 ((unsigned) (PIO_UNIMAP))
 #define XLAT_STR_34 STRINGIFY(PIO_UNIMAP)
 XLAT(PIO_UNIMAPCLR),
 #define XLAT_VAL_35 ((unsigned) (PIO_UNIMAPCLR))
 #define XLAT_STR_35 STRINGIFY(PIO_UNIMAPCLR)
 XLAT(GIO_UNISCRNMAP),
 #define XLAT_VAL_36 ((unsigned) (GIO_UNISCRNMAP))
 #define XLAT_STR_36 STRINGIFY(GIO_UNISCRNMAP)
 XLAT(PIO_UNISCRNMAP),
 #define XLAT_VAL_37 ((unsigned) (PIO_UNISCRNMAP))
 #define XLAT_STR_37 STRINGIFY(PIO_UNISCRNMAP)
 XLAT(GIO_FONTX),
 #define XLAT_VAL_38 ((unsigned) (GIO_FONTX))
 #define XLAT_STR_38 STRINGIFY(GIO_FONTX)
 XLAT(PIO_FONTX),
 #define XLAT_VAL_39 ((unsigned) (PIO_FONTX))
 #define XLAT_STR_39 STRINGIFY(PIO_FONTX)
 XLAT(PIO_FONTRESET),
 #define XLAT_VAL_40 ((unsigned) (PIO_FONTRESET))
 #define XLAT_STR_40 STRINGIFY(PIO_FONTRESET)
 XLAT(GIO_CMAP),
 #define XLAT_VAL_41 ((unsigned) (GIO_CMAP))
 #define XLAT_STR_41 STRINGIFY(GIO_CMAP)
 XLAT(PIO_CMAP),
 #define XLAT_VAL_42 ((unsigned) (PIO_CMAP))
 #define XLAT_STR_42 STRINGIFY(PIO_CMAP)
 XLAT(KDFONTOP),
 #define XLAT_VAL_43 ((unsigned) (KDFONTOP))
 #define XLAT_STR_43 STRINGIFY(KDFONTOP)
 XLAT(KDGKBDIACRUC),
 #define XLAT_VAL_44 ((unsigned) (KDGKBDIACRUC))
 #define XLAT_STR_44 STRINGIFY(KDGKBDIACRUC)
 XLAT(KDSKBDIACRUC),
 #define XLAT_VAL_45 ((unsigned) (KDSKBDIACRUC))
 #define XLAT_STR_45 STRINGIFY(KDSKBDIACRUC)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat kd_ioctl_cmds[1] = { {
 .data = kd_ioctl_cmds_xdata,
 .size = ARRAY_SIZE(kd_ioctl_cmds_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
