/* Generated by ./src/xlat/gen.sh from ./src/xlat/hdio_drive_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ATA_CMD_NOP) || (defined(HAVE_DECL_ATA_CMD_NOP) && HAVE_DECL_ATA_CMD_NOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_NOP) == (0x00), "ATA_CMD_NOP != 0x00");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_NOP 0x00
#endif
#if defined(ATA_CMD_NOP) || (defined(HAVE_DECL_ATA_CMD_NOP) && HAVE_DECL_ATA_CMD_NOP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_NOP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_NOP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_NOP)
#endif
#if defined(ATA_CMD_CFA_REQ_EXT_ERR) || (defined(HAVE_DECL_ATA_CMD_CFA_REQ_EXT_ERR) && HAVE_DECL_ATA_CMD_CFA_REQ_EXT_ERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_CFA_REQ_EXT_ERR) == (0x03), "ATA_CMD_CFA_REQ_EXT_ERR != 0x03");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_CFA_REQ_EXT_ERR 0x03
#endif
#if defined(ATA_CMD_CFA_REQ_EXT_ERR) || (defined(HAVE_DECL_ATA_CMD_CFA_REQ_EXT_ERR) && HAVE_DECL_ATA_CMD_CFA_REQ_EXT_ERR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_CFA_REQ_EXT_ERR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_CFA_REQ_EXT_ERR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_CFA_REQ_EXT_ERR)
#endif
#if defined(ATA_CMD_DSM) || (defined(HAVE_DECL_ATA_CMD_DSM) && HAVE_DECL_ATA_CMD_DSM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_DSM) == (0x06), "ATA_CMD_DSM != 0x06");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_DSM 0x06
#endif
#if defined(ATA_CMD_DSM) || (defined(HAVE_DECL_ATA_CMD_DSM) && HAVE_DECL_ATA_CMD_DSM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_DSM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_DSM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_DSM)
#endif
#if defined(ATA_CMD_DEV_RESET) || (defined(HAVE_DECL_ATA_CMD_DEV_RESET) && HAVE_DECL_ATA_CMD_DEV_RESET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_DEV_RESET) == (0x08), "ATA_CMD_DEV_RESET != 0x08");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_DEV_RESET 0x08
#endif
#if defined(ATA_CMD_DEV_RESET) || (defined(HAVE_DECL_ATA_CMD_DEV_RESET) && HAVE_DECL_ATA_CMD_DEV_RESET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_DEV_RESET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_DEV_RESET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_DEV_RESET)
#endif
#if defined(ATA_CMD_REQ_SENSE_DATA) || (defined(HAVE_DECL_ATA_CMD_REQ_SENSE_DATA) && HAVE_DECL_ATA_CMD_REQ_SENSE_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_REQ_SENSE_DATA) == (0x0B), "ATA_CMD_REQ_SENSE_DATA != 0x0B");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_REQ_SENSE_DATA 0x0B
#endif
#if defined(ATA_CMD_REQ_SENSE_DATA) || (defined(HAVE_DECL_ATA_CMD_REQ_SENSE_DATA) && HAVE_DECL_ATA_CMD_REQ_SENSE_DATA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_REQ_SENSE_DATA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_REQ_SENSE_DATA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_REQ_SENSE_DATA)
#endif
#if defined(ATA_CMD_RESTORE) || (defined(HAVE_DECL_ATA_CMD_RESTORE) && HAVE_DECL_ATA_CMD_RESTORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_RESTORE) == (0x10), "ATA_CMD_RESTORE != 0x10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_RESTORE 0x10
#endif
#if defined(ATA_CMD_RESTORE) || (defined(HAVE_DECL_ATA_CMD_RESTORE) && HAVE_DECL_ATA_CMD_RESTORE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_RESTORE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_RESTORE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_RESTORE)
#endif
#if defined(ATA_CMD_PIO_READ) || (defined(HAVE_DECL_ATA_CMD_PIO_READ) && HAVE_DECL_ATA_CMD_PIO_READ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_PIO_READ) == (0x20), "ATA_CMD_PIO_READ != 0x20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_PIO_READ 0x20
#endif
#if defined(ATA_CMD_PIO_READ) || (defined(HAVE_DECL_ATA_CMD_PIO_READ) && HAVE_DECL_ATA_CMD_PIO_READ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_PIO_READ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_PIO_READ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_PIO_READ)
#endif
#if defined(ATA_CMD_READ_LONG) || (defined(HAVE_DECL_ATA_CMD_READ_LONG) && HAVE_DECL_ATA_CMD_READ_LONG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_LONG) == (0x22), "ATA_CMD_READ_LONG != 0x22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_LONG 0x22
#endif
#if defined(ATA_CMD_READ_LONG) || (defined(HAVE_DECL_ATA_CMD_READ_LONG) && HAVE_DECL_ATA_CMD_READ_LONG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_LONG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_LONG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_LONG)
#endif
#if defined(ATA_CMD_READ_LONG_ONCE) || (defined(HAVE_DECL_ATA_CMD_READ_LONG_ONCE) && HAVE_DECL_ATA_CMD_READ_LONG_ONCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_LONG_ONCE) == (0x23), "ATA_CMD_READ_LONG_ONCE != 0x23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_LONG_ONCE 0x23
#endif
#if defined(ATA_CMD_READ_LONG_ONCE) || (defined(HAVE_DECL_ATA_CMD_READ_LONG_ONCE) && HAVE_DECL_ATA_CMD_READ_LONG_ONCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_LONG_ONCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_LONG_ONCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_LONG_ONCE)
#endif
#if defined(ATA_CMD_PIO_READ_EXT) || (defined(HAVE_DECL_ATA_CMD_PIO_READ_EXT) && HAVE_DECL_ATA_CMD_PIO_READ_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_PIO_READ_EXT) == (0x24), "ATA_CMD_PIO_READ_EXT != 0x24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_PIO_READ_EXT 0x24
#endif
#if defined(ATA_CMD_PIO_READ_EXT) || (defined(HAVE_DECL_ATA_CMD_PIO_READ_EXT) && HAVE_DECL_ATA_CMD_PIO_READ_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_PIO_READ_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_PIO_READ_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_PIO_READ_EXT)
#endif
#if defined(ATA_CMD_READ_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_EXT) && HAVE_DECL_ATA_CMD_READ_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_EXT) == (0x25), "ATA_CMD_READ_EXT != 0x25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_EXT 0x25
#endif
#if defined(ATA_CMD_READ_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_EXT) && HAVE_DECL_ATA_CMD_READ_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_EXT)
#endif
#if defined(ATA_CMD_READ_QUEUED) || (defined(HAVE_DECL_ATA_CMD_READ_QUEUED) && HAVE_DECL_ATA_CMD_READ_QUEUED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_QUEUED) == (0x26), "ATA_CMD_READ_QUEUED != 0x26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_QUEUED 0x26
#endif
#if defined(ATA_CMD_READ_QUEUED) || (defined(HAVE_DECL_ATA_CMD_READ_QUEUED) && HAVE_DECL_ATA_CMD_READ_QUEUED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_QUEUED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_QUEUED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_QUEUED)
#endif
#if defined(ATA_CMD_READ_NATIVE_MAX_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_NATIVE_MAX_EXT) && HAVE_DECL_ATA_CMD_READ_NATIVE_MAX_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_NATIVE_MAX_EXT) == (0x27), "ATA_CMD_READ_NATIVE_MAX_EXT != 0x27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_NATIVE_MAX_EXT 0x27
#endif
#if defined(ATA_CMD_READ_NATIVE_MAX_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_NATIVE_MAX_EXT) && HAVE_DECL_ATA_CMD_READ_NATIVE_MAX_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_NATIVE_MAX_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_NATIVE_MAX_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_NATIVE_MAX_EXT)
#endif
#if defined(ATA_CMD_READ_MULTI_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_MULTI_EXT) && HAVE_DECL_ATA_CMD_READ_MULTI_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_MULTI_EXT) == (0x29), "ATA_CMD_READ_MULTI_EXT != 0x29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_MULTI_EXT 0x29
#endif
#if defined(ATA_CMD_READ_MULTI_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_MULTI_EXT) && HAVE_DECL_ATA_CMD_READ_MULTI_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_MULTI_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_MULTI_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_MULTI_EXT)
#endif
#if defined(ATA_CMD_READ_STREAM_DMA_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_STREAM_DMA_EXT) && HAVE_DECL_ATA_CMD_READ_STREAM_DMA_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_STREAM_DMA_EXT) == (0x2A), "ATA_CMD_READ_STREAM_DMA_EXT != 0x2A");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_STREAM_DMA_EXT 0x2A
#endif
#if defined(ATA_CMD_READ_STREAM_DMA_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_STREAM_DMA_EXT) && HAVE_DECL_ATA_CMD_READ_STREAM_DMA_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_STREAM_DMA_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_STREAM_DMA_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_STREAM_DMA_EXT)
#endif
#if defined(ATA_CMD_READ_STREAM_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_STREAM_EXT) && HAVE_DECL_ATA_CMD_READ_STREAM_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_STREAM_EXT) == (0x2B), "ATA_CMD_READ_STREAM_EXT != 0x2B");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_STREAM_EXT 0x2B
#endif
#if defined(ATA_CMD_READ_STREAM_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_STREAM_EXT) && HAVE_DECL_ATA_CMD_READ_STREAM_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_STREAM_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_STREAM_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_STREAM_EXT)
#endif
#if defined(ATA_CMD_READ_LOG_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_LOG_EXT) && HAVE_DECL_ATA_CMD_READ_LOG_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_LOG_EXT) == (0x2F), "ATA_CMD_READ_LOG_EXT != 0x2F");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_LOG_EXT 0x2F
#endif
#if defined(ATA_CMD_READ_LOG_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_LOG_EXT) && HAVE_DECL_ATA_CMD_READ_LOG_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_LOG_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_LOG_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_LOG_EXT)
#endif
#if defined(ATA_CMD_PIO_WRITE) || (defined(HAVE_DECL_ATA_CMD_PIO_WRITE) && HAVE_DECL_ATA_CMD_PIO_WRITE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_PIO_WRITE) == (0x30), "ATA_CMD_PIO_WRITE != 0x30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_PIO_WRITE 0x30
#endif
#if defined(ATA_CMD_PIO_WRITE) || (defined(HAVE_DECL_ATA_CMD_PIO_WRITE) && HAVE_DECL_ATA_CMD_PIO_WRITE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_PIO_WRITE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_PIO_WRITE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_PIO_WRITE)
#endif
#if defined(ATA_CMD_WRITE_LONG) || (defined(HAVE_DECL_ATA_CMD_WRITE_LONG) && HAVE_DECL_ATA_CMD_WRITE_LONG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_LONG) == (0x32), "ATA_CMD_WRITE_LONG != 0x32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_LONG 0x32
#endif
#if defined(ATA_CMD_WRITE_LONG) || (defined(HAVE_DECL_ATA_CMD_WRITE_LONG) && HAVE_DECL_ATA_CMD_WRITE_LONG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_LONG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_LONG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_LONG)
#endif
#if defined(ATA_CMD_WRITE_LONG_ONCE) || (defined(HAVE_DECL_ATA_CMD_WRITE_LONG_ONCE) && HAVE_DECL_ATA_CMD_WRITE_LONG_ONCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_LONG_ONCE) == (0x33), "ATA_CMD_WRITE_LONG_ONCE != 0x33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_LONG_ONCE 0x33
#endif
#if defined(ATA_CMD_WRITE_LONG_ONCE) || (defined(HAVE_DECL_ATA_CMD_WRITE_LONG_ONCE) && HAVE_DECL_ATA_CMD_WRITE_LONG_ONCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_LONG_ONCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_LONG_ONCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_LONG_ONCE)
#endif
#if defined(ATA_CMD_PIO_WRITE_EXT) || (defined(HAVE_DECL_ATA_CMD_PIO_WRITE_EXT) && HAVE_DECL_ATA_CMD_PIO_WRITE_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_PIO_WRITE_EXT) == (0x34), "ATA_CMD_PIO_WRITE_EXT != 0x34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_PIO_WRITE_EXT 0x34
#endif
#if defined(ATA_CMD_PIO_WRITE_EXT) || (defined(HAVE_DECL_ATA_CMD_PIO_WRITE_EXT) && HAVE_DECL_ATA_CMD_PIO_WRITE_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_PIO_WRITE_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_PIO_WRITE_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_PIO_WRITE_EXT)
#endif
#if defined(ATA_CMD_WRITE_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_EXT) && HAVE_DECL_ATA_CMD_WRITE_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_EXT) == (0x35), "ATA_CMD_WRITE_EXT != 0x35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_EXT 0x35
#endif
#if defined(ATA_CMD_WRITE_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_EXT) && HAVE_DECL_ATA_CMD_WRITE_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_EXT)
#endif
#if defined(ATA_CMD_WRITE_QUEUED) || (defined(HAVE_DECL_ATA_CMD_WRITE_QUEUED) && HAVE_DECL_ATA_CMD_WRITE_QUEUED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_QUEUED) == (0x36), "ATA_CMD_WRITE_QUEUED != 0x36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_QUEUED 0x36
#endif
#if defined(ATA_CMD_WRITE_QUEUED) || (defined(HAVE_DECL_ATA_CMD_WRITE_QUEUED) && HAVE_DECL_ATA_CMD_WRITE_QUEUED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_QUEUED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_QUEUED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_QUEUED)
#endif
#if defined(ATA_CMD_SET_MAX_EXT) || (defined(HAVE_DECL_ATA_CMD_SET_MAX_EXT) && HAVE_DECL_ATA_CMD_SET_MAX_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SET_MAX_EXT) == (0x37), "ATA_CMD_SET_MAX_EXT != 0x37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SET_MAX_EXT 0x37
#endif
#if defined(ATA_CMD_SET_MAX_EXT) || (defined(HAVE_DECL_ATA_CMD_SET_MAX_EXT) && HAVE_DECL_ATA_CMD_SET_MAX_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SET_MAX_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SET_MAX_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SET_MAX_EXT)
#endif
#if defined(ATA_CMD_CFA_WRITE_NE) || (defined(HAVE_DECL_ATA_CMD_CFA_WRITE_NE) && HAVE_DECL_ATA_CMD_CFA_WRITE_NE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_CFA_WRITE_NE) == (0x38), "ATA_CMD_CFA_WRITE_NE != 0x38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_CFA_WRITE_NE 0x38
#endif
#if defined(ATA_CMD_CFA_WRITE_NE) || (defined(HAVE_DECL_ATA_CMD_CFA_WRITE_NE) && HAVE_DECL_ATA_CMD_CFA_WRITE_NE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_CFA_WRITE_NE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_CFA_WRITE_NE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_CFA_WRITE_NE)
#endif
#if defined(ATA_CMD_WRITE_MULTI_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_MULTI_EXT) && HAVE_DECL_ATA_CMD_WRITE_MULTI_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_MULTI_EXT) == (0x39), "ATA_CMD_WRITE_MULTI_EXT != 0x39");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_MULTI_EXT 0x39
#endif
#if defined(ATA_CMD_WRITE_MULTI_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_MULTI_EXT) && HAVE_DECL_ATA_CMD_WRITE_MULTI_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_MULTI_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_MULTI_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_MULTI_EXT)
#endif
#if defined(ATA_CMD_WRITE_STREAM_DMA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_STREAM_DMA_EXT) && HAVE_DECL_ATA_CMD_WRITE_STREAM_DMA_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_STREAM_DMA_EXT) == (0x3A), "ATA_CMD_WRITE_STREAM_DMA_EXT != 0x3A");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_STREAM_DMA_EXT 0x3A
#endif
#if defined(ATA_CMD_WRITE_STREAM_DMA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_STREAM_DMA_EXT) && HAVE_DECL_ATA_CMD_WRITE_STREAM_DMA_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_STREAM_DMA_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_STREAM_DMA_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_STREAM_DMA_EXT)
#endif
#if defined(ATA_CMD_WRITE_STREAM_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_STREAM_EXT) && HAVE_DECL_ATA_CMD_WRITE_STREAM_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_STREAM_EXT) == (0x3B), "ATA_CMD_WRITE_STREAM_EXT != 0x3B");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_STREAM_EXT 0x3B
#endif
#if defined(ATA_CMD_WRITE_STREAM_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_STREAM_EXT) && HAVE_DECL_ATA_CMD_WRITE_STREAM_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_STREAM_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_STREAM_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_STREAM_EXT)
#endif
#if defined(ATA_CMD_WRITE_FUA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_FUA_EXT) && HAVE_DECL_ATA_CMD_WRITE_FUA_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_FUA_EXT) == (0x3D), "ATA_CMD_WRITE_FUA_EXT != 0x3D");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_FUA_EXT 0x3D
#endif
#if defined(ATA_CMD_WRITE_FUA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_FUA_EXT) && HAVE_DECL_ATA_CMD_WRITE_FUA_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_FUA_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_FUA_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_FUA_EXT)
#endif
#if defined(ATA_CMD_WRITE_QUEUED_FUA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_QUEUED_FUA_EXT) && HAVE_DECL_ATA_CMD_WRITE_QUEUED_FUA_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_QUEUED_FUA_EXT) == (0x3E), "ATA_CMD_WRITE_QUEUED_FUA_EXT != 0x3E");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_QUEUED_FUA_EXT 0x3E
#endif
#if defined(ATA_CMD_WRITE_QUEUED_FUA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_QUEUED_FUA_EXT) && HAVE_DECL_ATA_CMD_WRITE_QUEUED_FUA_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_QUEUED_FUA_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_QUEUED_FUA_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_QUEUED_FUA_EXT)
#endif
#if defined(ATA_CMD_WRITE_LOG_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_LOG_EXT) && HAVE_DECL_ATA_CMD_WRITE_LOG_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_LOG_EXT) == (0x3F), "ATA_CMD_WRITE_LOG_EXT != 0x3F");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_LOG_EXT 0x3F
#endif
#if defined(ATA_CMD_WRITE_LOG_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_LOG_EXT) && HAVE_DECL_ATA_CMD_WRITE_LOG_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_LOG_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_LOG_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_LOG_EXT)
#endif
#if defined(ATA_CMD_VERIFY) || (defined(HAVE_DECL_ATA_CMD_VERIFY) && HAVE_DECL_ATA_CMD_VERIFY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_VERIFY) == (0x40), "ATA_CMD_VERIFY != 0x40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_VERIFY 0x40
#endif
#if defined(ATA_CMD_VERIFY) || (defined(HAVE_DECL_ATA_CMD_VERIFY) && HAVE_DECL_ATA_CMD_VERIFY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_VERIFY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_VERIFY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_VERIFY)
#endif
#if defined(ATA_CMD_VERIFY_EXT) || (defined(HAVE_DECL_ATA_CMD_VERIFY_EXT) && HAVE_DECL_ATA_CMD_VERIFY_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_VERIFY_EXT) == (0x42), "ATA_CMD_VERIFY_EXT != 0x42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_VERIFY_EXT 0x42
#endif
#if defined(ATA_CMD_VERIFY_EXT) || (defined(HAVE_DECL_ATA_CMD_VERIFY_EXT) && HAVE_DECL_ATA_CMD_VERIFY_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_VERIFY_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_VERIFY_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_VERIFY_EXT)
#endif
#if defined(ATA_CMD_WRITE_UNCORR_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_UNCORR_EXT) && HAVE_DECL_ATA_CMD_WRITE_UNCORR_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_UNCORR_EXT) == (0x45), "ATA_CMD_WRITE_UNCORR_EXT != 0x45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_UNCORR_EXT 0x45
#endif
#if defined(ATA_CMD_WRITE_UNCORR_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_UNCORR_EXT) && HAVE_DECL_ATA_CMD_WRITE_UNCORR_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_UNCORR_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_UNCORR_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_UNCORR_EXT)
#endif
#if defined(ATA_CMD_READ_LOG_DMA_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_LOG_DMA_EXT) && HAVE_DECL_ATA_CMD_READ_LOG_DMA_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_LOG_DMA_EXT) == (0x47), "ATA_CMD_READ_LOG_DMA_EXT != 0x47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_LOG_DMA_EXT 0x47
#endif
#if defined(ATA_CMD_READ_LOG_DMA_EXT) || (defined(HAVE_DECL_ATA_CMD_READ_LOG_DMA_EXT) && HAVE_DECL_ATA_CMD_READ_LOG_DMA_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_LOG_DMA_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_LOG_DMA_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_LOG_DMA_EXT)
#endif
#if defined(ATA_CMD_ZAC_MGMT_IN) || (defined(HAVE_DECL_ATA_CMD_ZAC_MGMT_IN) && HAVE_DECL_ATA_CMD_ZAC_MGMT_IN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_ZAC_MGMT_IN) == (0x4A), "ATA_CMD_ZAC_MGMT_IN != 0x4A");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_ZAC_MGMT_IN 0x4A
#endif
#if defined(ATA_CMD_ZAC_MGMT_IN) || (defined(HAVE_DECL_ATA_CMD_ZAC_MGMT_IN) && HAVE_DECL_ATA_CMD_ZAC_MGMT_IN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_ZAC_MGMT_IN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_ZAC_MGMT_IN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_ZAC_MGMT_IN)
#endif
#if defined(ATA_CMD_CONFIG_STREAM) || (defined(HAVE_DECL_ATA_CMD_CONFIG_STREAM) && HAVE_DECL_ATA_CMD_CONFIG_STREAM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_CONFIG_STREAM) == (0x51), "ATA_CMD_CONFIG_STREAM != 0x51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_CONFIG_STREAM 0x51
#endif
#if defined(ATA_CMD_CONFIG_STREAM) || (defined(HAVE_DECL_ATA_CMD_CONFIG_STREAM) && HAVE_DECL_ATA_CMD_CONFIG_STREAM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_CONFIG_STREAM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_CONFIG_STREAM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_CONFIG_STREAM)
#endif
#if defined(ATA_CMD_WRITE_LOG_DMA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_LOG_DMA_EXT) && HAVE_DECL_ATA_CMD_WRITE_LOG_DMA_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_LOG_DMA_EXT) == (0x57), "ATA_CMD_WRITE_LOG_DMA_EXT != 0x57");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_LOG_DMA_EXT 0x57
#endif
#if defined(ATA_CMD_WRITE_LOG_DMA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_LOG_DMA_EXT) && HAVE_DECL_ATA_CMD_WRITE_LOG_DMA_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_LOG_DMA_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_LOG_DMA_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_LOG_DMA_EXT)
#endif
#if defined(ATA_CMD_TRUSTED_NONDATA) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_NONDATA) && HAVE_DECL_ATA_CMD_TRUSTED_NONDATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_TRUSTED_NONDATA) == (0x5B), "ATA_CMD_TRUSTED_NONDATA != 0x5B");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_TRUSTED_NONDATA 0x5B
#endif
#if defined(ATA_CMD_TRUSTED_NONDATA) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_NONDATA) && HAVE_DECL_ATA_CMD_TRUSTED_NONDATA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_TRUSTED_NONDATA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_TRUSTED_NONDATA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_TRUSTED_NONDATA)
#endif
#if defined(ATA_CMD_TRUSTED_RCV) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_RCV) && HAVE_DECL_ATA_CMD_TRUSTED_RCV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_TRUSTED_RCV) == (0x5C), "ATA_CMD_TRUSTED_RCV != 0x5C");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_TRUSTED_RCV 0x5C
#endif
#if defined(ATA_CMD_TRUSTED_RCV) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_RCV) && HAVE_DECL_ATA_CMD_TRUSTED_RCV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_TRUSTED_RCV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_TRUSTED_RCV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_TRUSTED_RCV)
#endif
#if defined(ATA_CMD_TRUSTED_RCV_DMA) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_RCV_DMA) && HAVE_DECL_ATA_CMD_TRUSTED_RCV_DMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_TRUSTED_RCV_DMA) == (0x5D), "ATA_CMD_TRUSTED_RCV_DMA != 0x5D");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_TRUSTED_RCV_DMA 0x5D
#endif
#if defined(ATA_CMD_TRUSTED_RCV_DMA) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_RCV_DMA) && HAVE_DECL_ATA_CMD_TRUSTED_RCV_DMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_TRUSTED_RCV_DMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_TRUSTED_RCV_DMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_TRUSTED_RCV_DMA)
#endif
#if defined(ATA_CMD_TRUSTED_SND) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_SND) && HAVE_DECL_ATA_CMD_TRUSTED_SND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_TRUSTED_SND) == (0x5E), "ATA_CMD_TRUSTED_SND != 0x5E");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_TRUSTED_SND 0x5E
#endif
#if defined(ATA_CMD_TRUSTED_SND) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_SND) && HAVE_DECL_ATA_CMD_TRUSTED_SND)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_TRUSTED_SND)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_TRUSTED_SND"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_TRUSTED_SND)
#endif
#if defined(ATA_CMD_TRUSTED_SND_DMA) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_SND_DMA) && HAVE_DECL_ATA_CMD_TRUSTED_SND_DMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_TRUSTED_SND_DMA) == (0x5F), "ATA_CMD_TRUSTED_SND_DMA != 0x5F");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_TRUSTED_SND_DMA 0x5F
#endif
#if defined(ATA_CMD_TRUSTED_SND_DMA) || (defined(HAVE_DECL_ATA_CMD_TRUSTED_SND_DMA) && HAVE_DECL_ATA_CMD_TRUSTED_SND_DMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_TRUSTED_SND_DMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_TRUSTED_SND_DMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_TRUSTED_SND_DMA)
#endif
#if defined(ATA_CMD_FPDMA_READ) || (defined(HAVE_DECL_ATA_CMD_FPDMA_READ) && HAVE_DECL_ATA_CMD_FPDMA_READ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_FPDMA_READ) == (0x60), "ATA_CMD_FPDMA_READ != 0x60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_FPDMA_READ 0x60
#endif
#if defined(ATA_CMD_FPDMA_READ) || (defined(HAVE_DECL_ATA_CMD_FPDMA_READ) && HAVE_DECL_ATA_CMD_FPDMA_READ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_FPDMA_READ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_FPDMA_READ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_FPDMA_READ)
#endif
#if defined(ATA_CMD_FPDMA_WRITE) || (defined(HAVE_DECL_ATA_CMD_FPDMA_WRITE) && HAVE_DECL_ATA_CMD_FPDMA_WRITE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_FPDMA_WRITE) == (0x61), "ATA_CMD_FPDMA_WRITE != 0x61");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_FPDMA_WRITE 0x61
#endif
#if defined(ATA_CMD_FPDMA_WRITE) || (defined(HAVE_DECL_ATA_CMD_FPDMA_WRITE) && HAVE_DECL_ATA_CMD_FPDMA_WRITE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_FPDMA_WRITE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_FPDMA_WRITE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_FPDMA_WRITE)
#endif
#if defined(ATA_CMD_NCQ_NON_DATA) || (defined(HAVE_DECL_ATA_CMD_NCQ_NON_DATA) && HAVE_DECL_ATA_CMD_NCQ_NON_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_NCQ_NON_DATA) == (0x63), "ATA_CMD_NCQ_NON_DATA != 0x63");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_NCQ_NON_DATA 0x63
#endif
#if defined(ATA_CMD_NCQ_NON_DATA) || (defined(HAVE_DECL_ATA_CMD_NCQ_NON_DATA) && HAVE_DECL_ATA_CMD_NCQ_NON_DATA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_NCQ_NON_DATA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_NCQ_NON_DATA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_NCQ_NON_DATA)
#endif
#if defined(ATA_CMD_FPDMA_SEND) || (defined(HAVE_DECL_ATA_CMD_FPDMA_SEND) && HAVE_DECL_ATA_CMD_FPDMA_SEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_FPDMA_SEND) == (0x64), "ATA_CMD_FPDMA_SEND != 0x64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_FPDMA_SEND 0x64
#endif
#if defined(ATA_CMD_FPDMA_SEND) || (defined(HAVE_DECL_ATA_CMD_FPDMA_SEND) && HAVE_DECL_ATA_CMD_FPDMA_SEND)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_FPDMA_SEND)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_FPDMA_SEND"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_FPDMA_SEND)
#endif
#if defined(ATA_CMD_FPDMA_RECV) || (defined(HAVE_DECL_ATA_CMD_FPDMA_RECV) && HAVE_DECL_ATA_CMD_FPDMA_RECV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_FPDMA_RECV) == (0x65), "ATA_CMD_FPDMA_RECV != 0x65");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_FPDMA_RECV 0x65
#endif
#if defined(ATA_CMD_FPDMA_RECV) || (defined(HAVE_DECL_ATA_CMD_FPDMA_RECV) && HAVE_DECL_ATA_CMD_FPDMA_RECV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_FPDMA_RECV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_FPDMA_RECV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_FPDMA_RECV)
#endif
#if defined(ATA_CMD_CFA_TRANS_SECT) || (defined(HAVE_DECL_ATA_CMD_CFA_TRANS_SECT) && HAVE_DECL_ATA_CMD_CFA_TRANS_SECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_CFA_TRANS_SECT) == (0x87), "ATA_CMD_CFA_TRANS_SECT != 0x87");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_CFA_TRANS_SECT 0x87
#endif
#if defined(ATA_CMD_CFA_TRANS_SECT) || (defined(HAVE_DECL_ATA_CMD_CFA_TRANS_SECT) && HAVE_DECL_ATA_CMD_CFA_TRANS_SECT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_CFA_TRANS_SECT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_CFA_TRANS_SECT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_CFA_TRANS_SECT)
#endif
#if defined(ATA_CMD_EDD) || (defined(HAVE_DECL_ATA_CMD_EDD) && HAVE_DECL_ATA_CMD_EDD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_EDD) == (0x90), "ATA_CMD_EDD != 0x90");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_EDD 0x90
#endif
#if defined(ATA_CMD_EDD) || (defined(HAVE_DECL_ATA_CMD_EDD) && HAVE_DECL_ATA_CMD_EDD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_EDD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_EDD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_EDD)
#endif
#if defined(ATA_CMD_INIT_DEV_PARAMS) || (defined(HAVE_DECL_ATA_CMD_INIT_DEV_PARAMS) && HAVE_DECL_ATA_CMD_INIT_DEV_PARAMS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_INIT_DEV_PARAMS) == (0x91), "ATA_CMD_INIT_DEV_PARAMS != 0x91");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_INIT_DEV_PARAMS 0x91
#endif
#if defined(ATA_CMD_INIT_DEV_PARAMS) || (defined(HAVE_DECL_ATA_CMD_INIT_DEV_PARAMS) && HAVE_DECL_ATA_CMD_INIT_DEV_PARAMS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_INIT_DEV_PARAMS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_INIT_DEV_PARAMS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_INIT_DEV_PARAMS)
#endif
#if defined(ATA_CMD_DOWNLOAD_MICRO) || (defined(HAVE_DECL_ATA_CMD_DOWNLOAD_MICRO) && HAVE_DECL_ATA_CMD_DOWNLOAD_MICRO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_DOWNLOAD_MICRO) == (0x92), "ATA_CMD_DOWNLOAD_MICRO != 0x92");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_DOWNLOAD_MICRO 0x92
#endif
#if defined(ATA_CMD_DOWNLOAD_MICRO) || (defined(HAVE_DECL_ATA_CMD_DOWNLOAD_MICRO) && HAVE_DECL_ATA_CMD_DOWNLOAD_MICRO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_DOWNLOAD_MICRO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_DOWNLOAD_MICRO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_DOWNLOAD_MICRO)
#endif
#if defined(ATA_CMD_DOWNLOAD_MICRO_DMA) || (defined(HAVE_DECL_ATA_CMD_DOWNLOAD_MICRO_DMA) && HAVE_DECL_ATA_CMD_DOWNLOAD_MICRO_DMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_DOWNLOAD_MICRO_DMA) == (0x93), "ATA_CMD_DOWNLOAD_MICRO_DMA != 0x93");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_DOWNLOAD_MICRO_DMA 0x93
#endif
#if defined(ATA_CMD_DOWNLOAD_MICRO_DMA) || (defined(HAVE_DECL_ATA_CMD_DOWNLOAD_MICRO_DMA) && HAVE_DECL_ATA_CMD_DOWNLOAD_MICRO_DMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_DOWNLOAD_MICRO_DMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_DOWNLOAD_MICRO_DMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_DOWNLOAD_MICRO_DMA)
#endif
#if defined(ATA_CMD_ZAC_MGMT_OUT) || (defined(HAVE_DECL_ATA_CMD_ZAC_MGMT_OUT) && HAVE_DECL_ATA_CMD_ZAC_MGMT_OUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_ZAC_MGMT_OUT) == (0x9F), "ATA_CMD_ZAC_MGMT_OUT != 0x9F");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_ZAC_MGMT_OUT 0x9F
#endif
#if defined(ATA_CMD_ZAC_MGMT_OUT) || (defined(HAVE_DECL_ATA_CMD_ZAC_MGMT_OUT) && HAVE_DECL_ATA_CMD_ZAC_MGMT_OUT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_ZAC_MGMT_OUT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_ZAC_MGMT_OUT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_ZAC_MGMT_OUT)
#endif
#if defined(ATA_CMD_PACKET) || (defined(HAVE_DECL_ATA_CMD_PACKET) && HAVE_DECL_ATA_CMD_PACKET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_PACKET) == (0xA0), "ATA_CMD_PACKET != 0xA0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_PACKET 0xA0
#endif
#if defined(ATA_CMD_PACKET) || (defined(HAVE_DECL_ATA_CMD_PACKET) && HAVE_DECL_ATA_CMD_PACKET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_PACKET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_PACKET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_PACKET)
#endif
#if defined(ATA_CMD_ID_ATAPI) || (defined(HAVE_DECL_ATA_CMD_ID_ATAPI) && HAVE_DECL_ATA_CMD_ID_ATAPI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_ID_ATAPI) == (0xA1), "ATA_CMD_ID_ATAPI != 0xA1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_ID_ATAPI 0xA1
#endif
#if defined(ATA_CMD_ID_ATAPI) || (defined(HAVE_DECL_ATA_CMD_ID_ATAPI) && HAVE_DECL_ATA_CMD_ID_ATAPI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_ID_ATAPI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_ID_ATAPI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_ID_ATAPI)
#endif
#if defined(ATA_CMD_SERVICE) || (defined(HAVE_DECL_ATA_CMD_SERVICE) && HAVE_DECL_ATA_CMD_SERVICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SERVICE) == (0xA2), "ATA_CMD_SERVICE != 0xA2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SERVICE 0xA2
#endif
#if defined(ATA_CMD_SERVICE) || (defined(HAVE_DECL_ATA_CMD_SERVICE) && HAVE_DECL_ATA_CMD_SERVICE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SERVICE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SERVICE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SERVICE)
#endif
#if defined(ATA_CMD_SMART) || (defined(HAVE_DECL_ATA_CMD_SMART) && HAVE_DECL_ATA_CMD_SMART)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SMART) == (0xB0), "ATA_CMD_SMART != 0xB0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SMART 0xB0
#endif
#if defined(ATA_CMD_SMART) || (defined(HAVE_DECL_ATA_CMD_SMART) && HAVE_DECL_ATA_CMD_SMART)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SMART)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SMART"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SMART)
#endif
#if defined(ATA_CMD_CONF_OVERLAY) || (defined(HAVE_DECL_ATA_CMD_CONF_OVERLAY) && HAVE_DECL_ATA_CMD_CONF_OVERLAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_CONF_OVERLAY) == (0xB1), "ATA_CMD_CONF_OVERLAY != 0xB1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_CONF_OVERLAY 0xB1
#endif
#if defined(ATA_CMD_CONF_OVERLAY) || (defined(HAVE_DECL_ATA_CMD_CONF_OVERLAY) && HAVE_DECL_ATA_CMD_CONF_OVERLAY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_CONF_OVERLAY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_CONF_OVERLAY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_CONF_OVERLAY)
#endif
#if defined(ATA_CMD_SANITIZE_DEVICE) || (defined(HAVE_DECL_ATA_CMD_SANITIZE_DEVICE) && HAVE_DECL_ATA_CMD_SANITIZE_DEVICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SANITIZE_DEVICE) == (0xB4), "ATA_CMD_SANITIZE_DEVICE != 0xB4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SANITIZE_DEVICE 0xB4
#endif
#if defined(ATA_CMD_SANITIZE_DEVICE) || (defined(HAVE_DECL_ATA_CMD_SANITIZE_DEVICE) && HAVE_DECL_ATA_CMD_SANITIZE_DEVICE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SANITIZE_DEVICE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SANITIZE_DEVICE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SANITIZE_DEVICE)
#endif
#if defined(ATA_CMD_CFA_ERASE) || (defined(HAVE_DECL_ATA_CMD_CFA_ERASE) && HAVE_DECL_ATA_CMD_CFA_ERASE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_CFA_ERASE) == (0xC0), "ATA_CMD_CFA_ERASE != 0xC0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_CFA_ERASE 0xC0
#endif
#if defined(ATA_CMD_CFA_ERASE) || (defined(HAVE_DECL_ATA_CMD_CFA_ERASE) && HAVE_DECL_ATA_CMD_CFA_ERASE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_CFA_ERASE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_CFA_ERASE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_CFA_ERASE)
#endif
#if defined(ATA_CMD_READ_MULTI) || (defined(HAVE_DECL_ATA_CMD_READ_MULTI) && HAVE_DECL_ATA_CMD_READ_MULTI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_MULTI) == (0xC4), "ATA_CMD_READ_MULTI != 0xC4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_MULTI 0xC4
#endif
#if defined(ATA_CMD_READ_MULTI) || (defined(HAVE_DECL_ATA_CMD_READ_MULTI) && HAVE_DECL_ATA_CMD_READ_MULTI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_MULTI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_MULTI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_MULTI)
#endif
#if defined(ATA_CMD_WRITE_MULTI) || (defined(HAVE_DECL_ATA_CMD_WRITE_MULTI) && HAVE_DECL_ATA_CMD_WRITE_MULTI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_MULTI) == (0xC5), "ATA_CMD_WRITE_MULTI != 0xC5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_MULTI 0xC5
#endif
#if defined(ATA_CMD_WRITE_MULTI) || (defined(HAVE_DECL_ATA_CMD_WRITE_MULTI) && HAVE_DECL_ATA_CMD_WRITE_MULTI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_MULTI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_MULTI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_MULTI)
#endif
#if defined(ATA_CMD_SET_MULTI) || (defined(HAVE_DECL_ATA_CMD_SET_MULTI) && HAVE_DECL_ATA_CMD_SET_MULTI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SET_MULTI) == (0xC6), "ATA_CMD_SET_MULTI != 0xC6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SET_MULTI 0xC6
#endif
#if defined(ATA_CMD_SET_MULTI) || (defined(HAVE_DECL_ATA_CMD_SET_MULTI) && HAVE_DECL_ATA_CMD_SET_MULTI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SET_MULTI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SET_MULTI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SET_MULTI)
#endif
#if defined(ATA_CMD_READ) || (defined(HAVE_DECL_ATA_CMD_READ) && HAVE_DECL_ATA_CMD_READ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ) == (0xC8), "ATA_CMD_READ != 0xC8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ 0xC8
#endif
#if defined(ATA_CMD_READ) || (defined(HAVE_DECL_ATA_CMD_READ) && HAVE_DECL_ATA_CMD_READ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ)
#endif
#if defined(ATA_CMD_WRITE) || (defined(HAVE_DECL_ATA_CMD_WRITE) && HAVE_DECL_ATA_CMD_WRITE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE) == (0xCA), "ATA_CMD_WRITE != 0xCA");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE 0xCA
#endif
#if defined(ATA_CMD_WRITE) || (defined(HAVE_DECL_ATA_CMD_WRITE) && HAVE_DECL_ATA_CMD_WRITE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE)
#endif
#if defined(ATA_CMD_CFA_WRITE_MULT_NE) || (defined(HAVE_DECL_ATA_CMD_CFA_WRITE_MULT_NE) && HAVE_DECL_ATA_CMD_CFA_WRITE_MULT_NE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_CFA_WRITE_MULT_NE) == (0xCD), "ATA_CMD_CFA_WRITE_MULT_NE != 0xCD");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_CFA_WRITE_MULT_NE 0xCD
#endif
#if defined(ATA_CMD_CFA_WRITE_MULT_NE) || (defined(HAVE_DECL_ATA_CMD_CFA_WRITE_MULT_NE) && HAVE_DECL_ATA_CMD_CFA_WRITE_MULT_NE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_CFA_WRITE_MULT_NE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_CFA_WRITE_MULT_NE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_CFA_WRITE_MULT_NE)
#endif
#if defined(ATA_CMD_WRITE_MULTI_FUA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_MULTI_FUA_EXT) && HAVE_DECL_ATA_CMD_WRITE_MULTI_FUA_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_WRITE_MULTI_FUA_EXT) == (0xCE), "ATA_CMD_WRITE_MULTI_FUA_EXT != 0xCE");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_WRITE_MULTI_FUA_EXT 0xCE
#endif
#if defined(ATA_CMD_WRITE_MULTI_FUA_EXT) || (defined(HAVE_DECL_ATA_CMD_WRITE_MULTI_FUA_EXT) && HAVE_DECL_ATA_CMD_WRITE_MULTI_FUA_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_WRITE_MULTI_FUA_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_WRITE_MULTI_FUA_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_WRITE_MULTI_FUA_EXT)
#endif
#if defined(ATA_CMD_CHK_MED_CRD_TYP) || (defined(HAVE_DECL_ATA_CMD_CHK_MED_CRD_TYP) && HAVE_DECL_ATA_CMD_CHK_MED_CRD_TYP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_CHK_MED_CRD_TYP) == (0xD1), "ATA_CMD_CHK_MED_CRD_TYP != 0xD1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_CHK_MED_CRD_TYP 0xD1
#endif
#if defined(ATA_CMD_CHK_MED_CRD_TYP) || (defined(HAVE_DECL_ATA_CMD_CHK_MED_CRD_TYP) && HAVE_DECL_ATA_CMD_CHK_MED_CRD_TYP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_CHK_MED_CRD_TYP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_CHK_MED_CRD_TYP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_CHK_MED_CRD_TYP)
#endif
#if defined(ATA_CMD_MEDIA_LOCK) || (defined(HAVE_DECL_ATA_CMD_MEDIA_LOCK) && HAVE_DECL_ATA_CMD_MEDIA_LOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_MEDIA_LOCK) == (0xDE), "ATA_CMD_MEDIA_LOCK != 0xDE");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_MEDIA_LOCK 0xDE
#endif
#if defined(ATA_CMD_MEDIA_LOCK) || (defined(HAVE_DECL_ATA_CMD_MEDIA_LOCK) && HAVE_DECL_ATA_CMD_MEDIA_LOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_MEDIA_LOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_MEDIA_LOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_MEDIA_LOCK)
#endif
#if defined(ATA_CMD_MEDIA_UNLOCK) || (defined(HAVE_DECL_ATA_CMD_MEDIA_UNLOCK) && HAVE_DECL_ATA_CMD_MEDIA_UNLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_MEDIA_UNLOCK) == (0xDF), "ATA_CMD_MEDIA_UNLOCK != 0xDF");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_MEDIA_UNLOCK 0xDF
#endif
#if defined(ATA_CMD_MEDIA_UNLOCK) || (defined(HAVE_DECL_ATA_CMD_MEDIA_UNLOCK) && HAVE_DECL_ATA_CMD_MEDIA_UNLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_MEDIA_UNLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_MEDIA_UNLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_MEDIA_UNLOCK)
#endif
#if defined(ATA_CMD_STANDBYNOW1) || (defined(HAVE_DECL_ATA_CMD_STANDBYNOW1) && HAVE_DECL_ATA_CMD_STANDBYNOW1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_STANDBYNOW1) == (0xE0), "ATA_CMD_STANDBYNOW1 != 0xE0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_STANDBYNOW1 0xE0
#endif
#if defined(ATA_CMD_STANDBYNOW1) || (defined(HAVE_DECL_ATA_CMD_STANDBYNOW1) && HAVE_DECL_ATA_CMD_STANDBYNOW1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_STANDBYNOW1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_STANDBYNOW1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_STANDBYNOW1)
#endif
#if defined(ATA_CMD_IDLEIMMEDIATE) || (defined(HAVE_DECL_ATA_CMD_IDLEIMMEDIATE) && HAVE_DECL_ATA_CMD_IDLEIMMEDIATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_IDLEIMMEDIATE) == (0xE1), "ATA_CMD_IDLEIMMEDIATE != 0xE1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_IDLEIMMEDIATE 0xE1
#endif
#if defined(ATA_CMD_IDLEIMMEDIATE) || (defined(HAVE_DECL_ATA_CMD_IDLEIMMEDIATE) && HAVE_DECL_ATA_CMD_IDLEIMMEDIATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_IDLEIMMEDIATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_IDLEIMMEDIATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_IDLEIMMEDIATE)
#endif
#if defined(ATA_CMD_STANDBY) || (defined(HAVE_DECL_ATA_CMD_STANDBY) && HAVE_DECL_ATA_CMD_STANDBY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_STANDBY) == (0xE2), "ATA_CMD_STANDBY != 0xE2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_STANDBY 0xE2
#endif
#if defined(ATA_CMD_STANDBY) || (defined(HAVE_DECL_ATA_CMD_STANDBY) && HAVE_DECL_ATA_CMD_STANDBY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_STANDBY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_STANDBY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_STANDBY)
#endif
#if defined(ATA_CMD_IDLE) || (defined(HAVE_DECL_ATA_CMD_IDLE) && HAVE_DECL_ATA_CMD_IDLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_IDLE) == (0xE3), "ATA_CMD_IDLE != 0xE3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_IDLE 0xE3
#endif
#if defined(ATA_CMD_IDLE) || (defined(HAVE_DECL_ATA_CMD_IDLE) && HAVE_DECL_ATA_CMD_IDLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_IDLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_IDLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_IDLE)
#endif
#if defined(ATA_CMD_PMP_READ) || (defined(HAVE_DECL_ATA_CMD_PMP_READ) && HAVE_DECL_ATA_CMD_PMP_READ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_PMP_READ) == (0xE4), "ATA_CMD_PMP_READ != 0xE4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_PMP_READ 0xE4
#endif
#if defined(ATA_CMD_PMP_READ) || (defined(HAVE_DECL_ATA_CMD_PMP_READ) && HAVE_DECL_ATA_CMD_PMP_READ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_PMP_READ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_PMP_READ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_PMP_READ)
#endif
#if defined(ATA_CMD_CHK_POWER) || (defined(HAVE_DECL_ATA_CMD_CHK_POWER) && HAVE_DECL_ATA_CMD_CHK_POWER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_CHK_POWER) == (0xE5), "ATA_CMD_CHK_POWER != 0xE5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_CHK_POWER 0xE5
#endif
#if defined(ATA_CMD_CHK_POWER) || (defined(HAVE_DECL_ATA_CMD_CHK_POWER) && HAVE_DECL_ATA_CMD_CHK_POWER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_CHK_POWER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_CHK_POWER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_CHK_POWER)
#endif
#if defined(ATA_CMD_SLEEP) || (defined(HAVE_DECL_ATA_CMD_SLEEP) && HAVE_DECL_ATA_CMD_SLEEP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SLEEP) == (0xE6), "ATA_CMD_SLEEP != 0xE6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SLEEP 0xE6
#endif
#if defined(ATA_CMD_SLEEP) || (defined(HAVE_DECL_ATA_CMD_SLEEP) && HAVE_DECL_ATA_CMD_SLEEP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SLEEP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SLEEP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SLEEP)
#endif
#if defined(ATA_CMD_FLUSH) || (defined(HAVE_DECL_ATA_CMD_FLUSH) && HAVE_DECL_ATA_CMD_FLUSH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_FLUSH) == (0xE7), "ATA_CMD_FLUSH != 0xE7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_FLUSH 0xE7
#endif
#if defined(ATA_CMD_FLUSH) || (defined(HAVE_DECL_ATA_CMD_FLUSH) && HAVE_DECL_ATA_CMD_FLUSH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_FLUSH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_FLUSH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_FLUSH)
#endif
#if defined(ATA_CMD_PMP_WRITE) || (defined(HAVE_DECL_ATA_CMD_PMP_WRITE) && HAVE_DECL_ATA_CMD_PMP_WRITE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_PMP_WRITE) == (0xE8), "ATA_CMD_PMP_WRITE != 0xE8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_PMP_WRITE 0xE8
#endif
#if defined(ATA_CMD_PMP_WRITE) || (defined(HAVE_DECL_ATA_CMD_PMP_WRITE) && HAVE_DECL_ATA_CMD_PMP_WRITE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_PMP_WRITE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_PMP_WRITE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_PMP_WRITE)
#endif
#if defined(ATA_CMD_PMP_READ_DMA) || (defined(HAVE_DECL_ATA_CMD_PMP_READ_DMA) && HAVE_DECL_ATA_CMD_PMP_READ_DMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_PMP_READ_DMA) == (0xE9), "ATA_CMD_PMP_READ_DMA != 0xE9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_PMP_READ_DMA 0xE9
#endif
#if defined(ATA_CMD_PMP_READ_DMA) || (defined(HAVE_DECL_ATA_CMD_PMP_READ_DMA) && HAVE_DECL_ATA_CMD_PMP_READ_DMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_PMP_READ_DMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_PMP_READ_DMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_PMP_READ_DMA)
#endif
#if defined(ATA_CMD_FLUSH_EXT) || (defined(HAVE_DECL_ATA_CMD_FLUSH_EXT) && HAVE_DECL_ATA_CMD_FLUSH_EXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_FLUSH_EXT) == (0xEA), "ATA_CMD_FLUSH_EXT != 0xEA");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_FLUSH_EXT 0xEA
#endif
#if defined(ATA_CMD_FLUSH_EXT) || (defined(HAVE_DECL_ATA_CMD_FLUSH_EXT) && HAVE_DECL_ATA_CMD_FLUSH_EXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_FLUSH_EXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_FLUSH_EXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_FLUSH_EXT)
#endif
#if defined(ATA_CMD_PMP_WRITE_DMA) || (defined(HAVE_DECL_ATA_CMD_PMP_WRITE_DMA) && HAVE_DECL_ATA_CMD_PMP_WRITE_DMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_PMP_WRITE_DMA) == (0xEB), "ATA_CMD_PMP_WRITE_DMA != 0xEB");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_PMP_WRITE_DMA 0xEB
#endif
#if defined(ATA_CMD_PMP_WRITE_DMA) || (defined(HAVE_DECL_ATA_CMD_PMP_WRITE_DMA) && HAVE_DECL_ATA_CMD_PMP_WRITE_DMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_PMP_WRITE_DMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_PMP_WRITE_DMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_PMP_WRITE_DMA)
#endif
#if defined(ATA_CMD_ID_ATA) || (defined(HAVE_DECL_ATA_CMD_ID_ATA) && HAVE_DECL_ATA_CMD_ID_ATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_ID_ATA) == (0xEC), "ATA_CMD_ID_ATA != 0xEC");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_ID_ATA 0xEC
#endif
#if defined(ATA_CMD_ID_ATA) || (defined(HAVE_DECL_ATA_CMD_ID_ATA) && HAVE_DECL_ATA_CMD_ID_ATA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_ID_ATA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_ID_ATA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_ID_ATA)
#endif
#if defined(ATA_CMD_SET_FEATURES) || (defined(HAVE_DECL_ATA_CMD_SET_FEATURES) && HAVE_DECL_ATA_CMD_SET_FEATURES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SET_FEATURES) == (0xEF), "ATA_CMD_SET_FEATURES != 0xEF");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SET_FEATURES 0xEF
#endif
#if defined(ATA_CMD_SET_FEATURES) || (defined(HAVE_DECL_ATA_CMD_SET_FEATURES) && HAVE_DECL_ATA_CMD_SET_FEATURES)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SET_FEATURES)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SET_FEATURES"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SET_FEATURES)
#endif
#if defined(ATA_CMD_SEC_SET_PASS) || (defined(HAVE_DECL_ATA_CMD_SEC_SET_PASS) && HAVE_DECL_ATA_CMD_SEC_SET_PASS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SEC_SET_PASS) == (0xF1), "ATA_CMD_SEC_SET_PASS != 0xF1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SEC_SET_PASS 0xF1
#endif
#if defined(ATA_CMD_SEC_SET_PASS) || (defined(HAVE_DECL_ATA_CMD_SEC_SET_PASS) && HAVE_DECL_ATA_CMD_SEC_SET_PASS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SEC_SET_PASS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SEC_SET_PASS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SEC_SET_PASS)
#endif
#if defined(ATA_CMD_SEC_UNLOCK) || (defined(HAVE_DECL_ATA_CMD_SEC_UNLOCK) && HAVE_DECL_ATA_CMD_SEC_UNLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SEC_UNLOCK) == (0xF2), "ATA_CMD_SEC_UNLOCK != 0xF2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SEC_UNLOCK 0xF2
#endif
#if defined(ATA_CMD_SEC_UNLOCK) || (defined(HAVE_DECL_ATA_CMD_SEC_UNLOCK) && HAVE_DECL_ATA_CMD_SEC_UNLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SEC_UNLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SEC_UNLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SEC_UNLOCK)
#endif
#if defined(ATA_CMD_SEC_ERASE_PREP) || (defined(HAVE_DECL_ATA_CMD_SEC_ERASE_PREP) && HAVE_DECL_ATA_CMD_SEC_ERASE_PREP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SEC_ERASE_PREP) == (0xF3), "ATA_CMD_SEC_ERASE_PREP != 0xF3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SEC_ERASE_PREP 0xF3
#endif
#if defined(ATA_CMD_SEC_ERASE_PREP) || (defined(HAVE_DECL_ATA_CMD_SEC_ERASE_PREP) && HAVE_DECL_ATA_CMD_SEC_ERASE_PREP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SEC_ERASE_PREP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SEC_ERASE_PREP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SEC_ERASE_PREP)
#endif
#if defined(ATA_CMD_SEC_ERASE_UNIT) || (defined(HAVE_DECL_ATA_CMD_SEC_ERASE_UNIT) && HAVE_DECL_ATA_CMD_SEC_ERASE_UNIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SEC_ERASE_UNIT) == (0xF4), "ATA_CMD_SEC_ERASE_UNIT != 0xF4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SEC_ERASE_UNIT 0xF4
#endif
#if defined(ATA_CMD_SEC_ERASE_UNIT) || (defined(HAVE_DECL_ATA_CMD_SEC_ERASE_UNIT) && HAVE_DECL_ATA_CMD_SEC_ERASE_UNIT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SEC_ERASE_UNIT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SEC_ERASE_UNIT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SEC_ERASE_UNIT)
#endif
#if defined(ATA_CMD_SEC_FREEZE_LOCK) || (defined(HAVE_DECL_ATA_CMD_SEC_FREEZE_LOCK) && HAVE_DECL_ATA_CMD_SEC_FREEZE_LOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SEC_FREEZE_LOCK) == (0xF5), "ATA_CMD_SEC_FREEZE_LOCK != 0xF5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SEC_FREEZE_LOCK 0xF5
#endif
#if defined(ATA_CMD_SEC_FREEZE_LOCK) || (defined(HAVE_DECL_ATA_CMD_SEC_FREEZE_LOCK) && HAVE_DECL_ATA_CMD_SEC_FREEZE_LOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SEC_FREEZE_LOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SEC_FREEZE_LOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SEC_FREEZE_LOCK)
#endif
#if defined(ATA_CMD_SEC_DISABLE_PASS) || (defined(HAVE_DECL_ATA_CMD_SEC_DISABLE_PASS) && HAVE_DECL_ATA_CMD_SEC_DISABLE_PASS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SEC_DISABLE_PASS) == (0xF6), "ATA_CMD_SEC_DISABLE_PASS != 0xF6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SEC_DISABLE_PASS 0xF6
#endif
#if defined(ATA_CMD_SEC_DISABLE_PASS) || (defined(HAVE_DECL_ATA_CMD_SEC_DISABLE_PASS) && HAVE_DECL_ATA_CMD_SEC_DISABLE_PASS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SEC_DISABLE_PASS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SEC_DISABLE_PASS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SEC_DISABLE_PASS)
#endif
#if defined(ATA_CMD_READ_NATIVE_MAX) || (defined(HAVE_DECL_ATA_CMD_READ_NATIVE_MAX) && HAVE_DECL_ATA_CMD_READ_NATIVE_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_READ_NATIVE_MAX) == (0xF8), "ATA_CMD_READ_NATIVE_MAX != 0xF8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_READ_NATIVE_MAX 0xF8
#endif
#if defined(ATA_CMD_READ_NATIVE_MAX) || (defined(HAVE_DECL_ATA_CMD_READ_NATIVE_MAX) && HAVE_DECL_ATA_CMD_READ_NATIVE_MAX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_READ_NATIVE_MAX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_READ_NATIVE_MAX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_READ_NATIVE_MAX)
#endif
#if defined(ATA_CMD_SET_MAX) || (defined(HAVE_DECL_ATA_CMD_SET_MAX) && HAVE_DECL_ATA_CMD_SET_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ATA_CMD_SET_MAX) == (0xF9), "ATA_CMD_SET_MAX != 0xF9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ATA_CMD_SET_MAX 0xF9
#endif
#if defined(ATA_CMD_SET_MAX) || (defined(HAVE_DECL_ATA_CMD_SET_MAX) && HAVE_DECL_ATA_CMD_SET_MAX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ATA_CMD_SET_MAX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ATA_CMD_SET_MAX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ATA_CMD_SET_MAX)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat hdio_drive_cmds[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data hdio_drive_cmds_xdata[] = {
 XLAT(ATA_CMD_NOP),
 #define XLAT_VAL_0 ((unsigned) (ATA_CMD_NOP))
 #define XLAT_STR_0 STRINGIFY(ATA_CMD_NOP)
 XLAT(ATA_CMD_CFA_REQ_EXT_ERR),
 #define XLAT_VAL_1 ((unsigned) (ATA_CMD_CFA_REQ_EXT_ERR))
 #define XLAT_STR_1 STRINGIFY(ATA_CMD_CFA_REQ_EXT_ERR)
 XLAT(ATA_CMD_DSM),
 #define XLAT_VAL_2 ((unsigned) (ATA_CMD_DSM))
 #define XLAT_STR_2 STRINGIFY(ATA_CMD_DSM)
 XLAT(ATA_CMD_DEV_RESET),
 #define XLAT_VAL_3 ((unsigned) (ATA_CMD_DEV_RESET))
 #define XLAT_STR_3 STRINGIFY(ATA_CMD_DEV_RESET)
 XLAT(ATA_CMD_REQ_SENSE_DATA),
 #define XLAT_VAL_4 ((unsigned) (ATA_CMD_REQ_SENSE_DATA))
 #define XLAT_STR_4 STRINGIFY(ATA_CMD_REQ_SENSE_DATA)
 XLAT(ATA_CMD_RESTORE),
 #define XLAT_VAL_5 ((unsigned) (ATA_CMD_RESTORE))
 #define XLAT_STR_5 STRINGIFY(ATA_CMD_RESTORE)
 XLAT(ATA_CMD_PIO_READ),
 #define XLAT_VAL_6 ((unsigned) (ATA_CMD_PIO_READ))
 #define XLAT_STR_6 STRINGIFY(ATA_CMD_PIO_READ)
 XLAT(ATA_CMD_READ_LONG),
 #define XLAT_VAL_7 ((unsigned) (ATA_CMD_READ_LONG))
 #define XLAT_STR_7 STRINGIFY(ATA_CMD_READ_LONG)
 XLAT(ATA_CMD_READ_LONG_ONCE),
 #define XLAT_VAL_8 ((unsigned) (ATA_CMD_READ_LONG_ONCE))
 #define XLAT_STR_8 STRINGIFY(ATA_CMD_READ_LONG_ONCE)
 XLAT(ATA_CMD_PIO_READ_EXT),
 #define XLAT_VAL_9 ((unsigned) (ATA_CMD_PIO_READ_EXT))
 #define XLAT_STR_9 STRINGIFY(ATA_CMD_PIO_READ_EXT)
 XLAT(ATA_CMD_READ_EXT),
 #define XLAT_VAL_10 ((unsigned) (ATA_CMD_READ_EXT))
 #define XLAT_STR_10 STRINGIFY(ATA_CMD_READ_EXT)
 XLAT(ATA_CMD_READ_QUEUED),
 #define XLAT_VAL_11 ((unsigned) (ATA_CMD_READ_QUEUED))
 #define XLAT_STR_11 STRINGIFY(ATA_CMD_READ_QUEUED)
 XLAT(ATA_CMD_READ_NATIVE_MAX_EXT),
 #define XLAT_VAL_12 ((unsigned) (ATA_CMD_READ_NATIVE_MAX_EXT))
 #define XLAT_STR_12 STRINGIFY(ATA_CMD_READ_NATIVE_MAX_EXT)
 XLAT(ATA_CMD_READ_MULTI_EXT),
 #define XLAT_VAL_13 ((unsigned) (ATA_CMD_READ_MULTI_EXT))
 #define XLAT_STR_13 STRINGIFY(ATA_CMD_READ_MULTI_EXT)
 XLAT(ATA_CMD_READ_STREAM_DMA_EXT),
 #define XLAT_VAL_14 ((unsigned) (ATA_CMD_READ_STREAM_DMA_EXT))
 #define XLAT_STR_14 STRINGIFY(ATA_CMD_READ_STREAM_DMA_EXT)
 XLAT(ATA_CMD_READ_STREAM_EXT),
 #define XLAT_VAL_15 ((unsigned) (ATA_CMD_READ_STREAM_EXT))
 #define XLAT_STR_15 STRINGIFY(ATA_CMD_READ_STREAM_EXT)
 XLAT(ATA_CMD_READ_LOG_EXT),
 #define XLAT_VAL_16 ((unsigned) (ATA_CMD_READ_LOG_EXT))
 #define XLAT_STR_16 STRINGIFY(ATA_CMD_READ_LOG_EXT)
 XLAT(ATA_CMD_PIO_WRITE),
 #define XLAT_VAL_17 ((unsigned) (ATA_CMD_PIO_WRITE))
 #define XLAT_STR_17 STRINGIFY(ATA_CMD_PIO_WRITE)
 XLAT(ATA_CMD_WRITE_LONG),
 #define XLAT_VAL_18 ((unsigned) (ATA_CMD_WRITE_LONG))
 #define XLAT_STR_18 STRINGIFY(ATA_CMD_WRITE_LONG)
 XLAT(ATA_CMD_WRITE_LONG_ONCE),
 #define XLAT_VAL_19 ((unsigned) (ATA_CMD_WRITE_LONG_ONCE))
 #define XLAT_STR_19 STRINGIFY(ATA_CMD_WRITE_LONG_ONCE)
 XLAT(ATA_CMD_PIO_WRITE_EXT),
 #define XLAT_VAL_20 ((unsigned) (ATA_CMD_PIO_WRITE_EXT))
 #define XLAT_STR_20 STRINGIFY(ATA_CMD_PIO_WRITE_EXT)
 XLAT(ATA_CMD_WRITE_EXT),
 #define XLAT_VAL_21 ((unsigned) (ATA_CMD_WRITE_EXT))
 #define XLAT_STR_21 STRINGIFY(ATA_CMD_WRITE_EXT)
 XLAT(ATA_CMD_WRITE_QUEUED),
 #define XLAT_VAL_22 ((unsigned) (ATA_CMD_WRITE_QUEUED))
 #define XLAT_STR_22 STRINGIFY(ATA_CMD_WRITE_QUEUED)
 XLAT(ATA_CMD_SET_MAX_EXT),
 #define XLAT_VAL_23 ((unsigned) (ATA_CMD_SET_MAX_EXT))
 #define XLAT_STR_23 STRINGIFY(ATA_CMD_SET_MAX_EXT)
 XLAT(ATA_CMD_CFA_WRITE_NE),
 #define XLAT_VAL_24 ((unsigned) (ATA_CMD_CFA_WRITE_NE))
 #define XLAT_STR_24 STRINGIFY(ATA_CMD_CFA_WRITE_NE)
 XLAT(ATA_CMD_WRITE_MULTI_EXT),
 #define XLAT_VAL_25 ((unsigned) (ATA_CMD_WRITE_MULTI_EXT))
 #define XLAT_STR_25 STRINGIFY(ATA_CMD_WRITE_MULTI_EXT)
 XLAT(ATA_CMD_WRITE_STREAM_DMA_EXT),
 #define XLAT_VAL_26 ((unsigned) (ATA_CMD_WRITE_STREAM_DMA_EXT))
 #define XLAT_STR_26 STRINGIFY(ATA_CMD_WRITE_STREAM_DMA_EXT)
 XLAT(ATA_CMD_WRITE_STREAM_EXT),
 #define XLAT_VAL_27 ((unsigned) (ATA_CMD_WRITE_STREAM_EXT))
 #define XLAT_STR_27 STRINGIFY(ATA_CMD_WRITE_STREAM_EXT)
 XLAT(ATA_CMD_WRITE_FUA_EXT),
 #define XLAT_VAL_28 ((unsigned) (ATA_CMD_WRITE_FUA_EXT))
 #define XLAT_STR_28 STRINGIFY(ATA_CMD_WRITE_FUA_EXT)
 XLAT(ATA_CMD_WRITE_QUEUED_FUA_EXT),
 #define XLAT_VAL_29 ((unsigned) (ATA_CMD_WRITE_QUEUED_FUA_EXT))
 #define XLAT_STR_29 STRINGIFY(ATA_CMD_WRITE_QUEUED_FUA_EXT)
 XLAT(ATA_CMD_WRITE_LOG_EXT),
 #define XLAT_VAL_30 ((unsigned) (ATA_CMD_WRITE_LOG_EXT))
 #define XLAT_STR_30 STRINGIFY(ATA_CMD_WRITE_LOG_EXT)
 XLAT(ATA_CMD_VERIFY),
 #define XLAT_VAL_31 ((unsigned) (ATA_CMD_VERIFY))
 #define XLAT_STR_31 STRINGIFY(ATA_CMD_VERIFY)
 XLAT(ATA_CMD_VERIFY_EXT),
 #define XLAT_VAL_32 ((unsigned) (ATA_CMD_VERIFY_EXT))
 #define XLAT_STR_32 STRINGIFY(ATA_CMD_VERIFY_EXT)
 XLAT(ATA_CMD_WRITE_UNCORR_EXT),
 #define XLAT_VAL_33 ((unsigned) (ATA_CMD_WRITE_UNCORR_EXT))
 #define XLAT_STR_33 STRINGIFY(ATA_CMD_WRITE_UNCORR_EXT)
 XLAT(ATA_CMD_READ_LOG_DMA_EXT),
 #define XLAT_VAL_34 ((unsigned) (ATA_CMD_READ_LOG_DMA_EXT))
 #define XLAT_STR_34 STRINGIFY(ATA_CMD_READ_LOG_DMA_EXT)
 XLAT(ATA_CMD_ZAC_MGMT_IN),
 #define XLAT_VAL_35 ((unsigned) (ATA_CMD_ZAC_MGMT_IN))
 #define XLAT_STR_35 STRINGIFY(ATA_CMD_ZAC_MGMT_IN)
 XLAT(ATA_CMD_CONFIG_STREAM),
 #define XLAT_VAL_36 ((unsigned) (ATA_CMD_CONFIG_STREAM))
 #define XLAT_STR_36 STRINGIFY(ATA_CMD_CONFIG_STREAM)
 XLAT(ATA_CMD_WRITE_LOG_DMA_EXT),
 #define XLAT_VAL_37 ((unsigned) (ATA_CMD_WRITE_LOG_DMA_EXT))
 #define XLAT_STR_37 STRINGIFY(ATA_CMD_WRITE_LOG_DMA_EXT)
 XLAT(ATA_CMD_TRUSTED_NONDATA),
 #define XLAT_VAL_38 ((unsigned) (ATA_CMD_TRUSTED_NONDATA))
 #define XLAT_STR_38 STRINGIFY(ATA_CMD_TRUSTED_NONDATA)
 XLAT(ATA_CMD_TRUSTED_RCV),
 #define XLAT_VAL_39 ((unsigned) (ATA_CMD_TRUSTED_RCV))
 #define XLAT_STR_39 STRINGIFY(ATA_CMD_TRUSTED_RCV)
 XLAT(ATA_CMD_TRUSTED_RCV_DMA),
 #define XLAT_VAL_40 ((unsigned) (ATA_CMD_TRUSTED_RCV_DMA))
 #define XLAT_STR_40 STRINGIFY(ATA_CMD_TRUSTED_RCV_DMA)
 XLAT(ATA_CMD_TRUSTED_SND),
 #define XLAT_VAL_41 ((unsigned) (ATA_CMD_TRUSTED_SND))
 #define XLAT_STR_41 STRINGIFY(ATA_CMD_TRUSTED_SND)
 XLAT(ATA_CMD_TRUSTED_SND_DMA),
 #define XLAT_VAL_42 ((unsigned) (ATA_CMD_TRUSTED_SND_DMA))
 #define XLAT_STR_42 STRINGIFY(ATA_CMD_TRUSTED_SND_DMA)
 XLAT(ATA_CMD_FPDMA_READ),
 #define XLAT_VAL_43 ((unsigned) (ATA_CMD_FPDMA_READ))
 #define XLAT_STR_43 STRINGIFY(ATA_CMD_FPDMA_READ)
 XLAT(ATA_CMD_FPDMA_WRITE),
 #define XLAT_VAL_44 ((unsigned) (ATA_CMD_FPDMA_WRITE))
 #define XLAT_STR_44 STRINGIFY(ATA_CMD_FPDMA_WRITE)
 XLAT(ATA_CMD_NCQ_NON_DATA),
 #define XLAT_VAL_45 ((unsigned) (ATA_CMD_NCQ_NON_DATA))
 #define XLAT_STR_45 STRINGIFY(ATA_CMD_NCQ_NON_DATA)
 XLAT(ATA_CMD_FPDMA_SEND),
 #define XLAT_VAL_46 ((unsigned) (ATA_CMD_FPDMA_SEND))
 #define XLAT_STR_46 STRINGIFY(ATA_CMD_FPDMA_SEND)
 XLAT(ATA_CMD_FPDMA_RECV),
 #define XLAT_VAL_47 ((unsigned) (ATA_CMD_FPDMA_RECV))
 #define XLAT_STR_47 STRINGIFY(ATA_CMD_FPDMA_RECV)
 XLAT(ATA_CMD_CFA_TRANS_SECT),
 #define XLAT_VAL_48 ((unsigned) (ATA_CMD_CFA_TRANS_SECT))
 #define XLAT_STR_48 STRINGIFY(ATA_CMD_CFA_TRANS_SECT)
 XLAT(ATA_CMD_EDD),
 #define XLAT_VAL_49 ((unsigned) (ATA_CMD_EDD))
 #define XLAT_STR_49 STRINGIFY(ATA_CMD_EDD)
 XLAT(ATA_CMD_INIT_DEV_PARAMS),
 #define XLAT_VAL_50 ((unsigned) (ATA_CMD_INIT_DEV_PARAMS))
 #define XLAT_STR_50 STRINGIFY(ATA_CMD_INIT_DEV_PARAMS)
 XLAT(ATA_CMD_DOWNLOAD_MICRO),
 #define XLAT_VAL_51 ((unsigned) (ATA_CMD_DOWNLOAD_MICRO))
 #define XLAT_STR_51 STRINGIFY(ATA_CMD_DOWNLOAD_MICRO)
 XLAT(ATA_CMD_DOWNLOAD_MICRO_DMA),
 #define XLAT_VAL_52 ((unsigned) (ATA_CMD_DOWNLOAD_MICRO_DMA))
 #define XLAT_STR_52 STRINGIFY(ATA_CMD_DOWNLOAD_MICRO_DMA)
 XLAT(ATA_CMD_ZAC_MGMT_OUT),
 #define XLAT_VAL_53 ((unsigned) (ATA_CMD_ZAC_MGMT_OUT))
 #define XLAT_STR_53 STRINGIFY(ATA_CMD_ZAC_MGMT_OUT)
 XLAT(ATA_CMD_PACKET),
 #define XLAT_VAL_54 ((unsigned) (ATA_CMD_PACKET))
 #define XLAT_STR_54 STRINGIFY(ATA_CMD_PACKET)
 XLAT(ATA_CMD_ID_ATAPI),
 #define XLAT_VAL_55 ((unsigned) (ATA_CMD_ID_ATAPI))
 #define XLAT_STR_55 STRINGIFY(ATA_CMD_ID_ATAPI)
 XLAT(ATA_CMD_SERVICE),
 #define XLAT_VAL_56 ((unsigned) (ATA_CMD_SERVICE))
 #define XLAT_STR_56 STRINGIFY(ATA_CMD_SERVICE)
 XLAT(ATA_CMD_SMART),
 #define XLAT_VAL_57 ((unsigned) (ATA_CMD_SMART))
 #define XLAT_STR_57 STRINGIFY(ATA_CMD_SMART)
 XLAT(ATA_CMD_CONF_OVERLAY),
 #define XLAT_VAL_58 ((unsigned) (ATA_CMD_CONF_OVERLAY))
 #define XLAT_STR_58 STRINGIFY(ATA_CMD_CONF_OVERLAY)
 XLAT(ATA_CMD_SANITIZE_DEVICE),
 #define XLAT_VAL_59 ((unsigned) (ATA_CMD_SANITIZE_DEVICE))
 #define XLAT_STR_59 STRINGIFY(ATA_CMD_SANITIZE_DEVICE)
 XLAT(ATA_CMD_CFA_ERASE),
 #define XLAT_VAL_60 ((unsigned) (ATA_CMD_CFA_ERASE))
 #define XLAT_STR_60 STRINGIFY(ATA_CMD_CFA_ERASE)
 XLAT(ATA_CMD_READ_MULTI),
 #define XLAT_VAL_61 ((unsigned) (ATA_CMD_READ_MULTI))
 #define XLAT_STR_61 STRINGIFY(ATA_CMD_READ_MULTI)
 XLAT(ATA_CMD_WRITE_MULTI),
 #define XLAT_VAL_62 ((unsigned) (ATA_CMD_WRITE_MULTI))
 #define XLAT_STR_62 STRINGIFY(ATA_CMD_WRITE_MULTI)
 XLAT(ATA_CMD_SET_MULTI),
 #define XLAT_VAL_63 ((unsigned) (ATA_CMD_SET_MULTI))
 #define XLAT_STR_63 STRINGIFY(ATA_CMD_SET_MULTI)
 XLAT(ATA_CMD_READ),
 #define XLAT_VAL_64 ((unsigned) (ATA_CMD_READ))
 #define XLAT_STR_64 STRINGIFY(ATA_CMD_READ)
 XLAT(ATA_CMD_WRITE),
 #define XLAT_VAL_65 ((unsigned) (ATA_CMD_WRITE))
 #define XLAT_STR_65 STRINGIFY(ATA_CMD_WRITE)
 XLAT(ATA_CMD_CFA_WRITE_MULT_NE),
 #define XLAT_VAL_66 ((unsigned) (ATA_CMD_CFA_WRITE_MULT_NE))
 #define XLAT_STR_66 STRINGIFY(ATA_CMD_CFA_WRITE_MULT_NE)
 XLAT(ATA_CMD_WRITE_MULTI_FUA_EXT),
 #define XLAT_VAL_67 ((unsigned) (ATA_CMD_WRITE_MULTI_FUA_EXT))
 #define XLAT_STR_67 STRINGIFY(ATA_CMD_WRITE_MULTI_FUA_EXT)
 XLAT(ATA_CMD_CHK_MED_CRD_TYP),
 #define XLAT_VAL_68 ((unsigned) (ATA_CMD_CHK_MED_CRD_TYP))
 #define XLAT_STR_68 STRINGIFY(ATA_CMD_CHK_MED_CRD_TYP)
 XLAT(ATA_CMD_MEDIA_LOCK),
 #define XLAT_VAL_69 ((unsigned) (ATA_CMD_MEDIA_LOCK))
 #define XLAT_STR_69 STRINGIFY(ATA_CMD_MEDIA_LOCK)
 XLAT(ATA_CMD_MEDIA_UNLOCK),
 #define XLAT_VAL_70 ((unsigned) (ATA_CMD_MEDIA_UNLOCK))
 #define XLAT_STR_70 STRINGIFY(ATA_CMD_MEDIA_UNLOCK)
 XLAT(ATA_CMD_STANDBYNOW1),
 #define XLAT_VAL_71 ((unsigned) (ATA_CMD_STANDBYNOW1))
 #define XLAT_STR_71 STRINGIFY(ATA_CMD_STANDBYNOW1)
 XLAT(ATA_CMD_IDLEIMMEDIATE),
 #define XLAT_VAL_72 ((unsigned) (ATA_CMD_IDLEIMMEDIATE))
 #define XLAT_STR_72 STRINGIFY(ATA_CMD_IDLEIMMEDIATE)
 XLAT(ATA_CMD_STANDBY),
 #define XLAT_VAL_73 ((unsigned) (ATA_CMD_STANDBY))
 #define XLAT_STR_73 STRINGIFY(ATA_CMD_STANDBY)
 XLAT(ATA_CMD_IDLE),
 #define XLAT_VAL_74 ((unsigned) (ATA_CMD_IDLE))
 #define XLAT_STR_74 STRINGIFY(ATA_CMD_IDLE)
 XLAT(ATA_CMD_PMP_READ),
 #define XLAT_VAL_75 ((unsigned) (ATA_CMD_PMP_READ))
 #define XLAT_STR_75 STRINGIFY(ATA_CMD_PMP_READ)
 XLAT(ATA_CMD_CHK_POWER),
 #define XLAT_VAL_76 ((unsigned) (ATA_CMD_CHK_POWER))
 #define XLAT_STR_76 STRINGIFY(ATA_CMD_CHK_POWER)
 XLAT(ATA_CMD_SLEEP),
 #define XLAT_VAL_77 ((unsigned) (ATA_CMD_SLEEP))
 #define XLAT_STR_77 STRINGIFY(ATA_CMD_SLEEP)
 XLAT(ATA_CMD_FLUSH),
 #define XLAT_VAL_78 ((unsigned) (ATA_CMD_FLUSH))
 #define XLAT_STR_78 STRINGIFY(ATA_CMD_FLUSH)
 XLAT(ATA_CMD_PMP_WRITE),
 #define XLAT_VAL_79 ((unsigned) (ATA_CMD_PMP_WRITE))
 #define XLAT_STR_79 STRINGIFY(ATA_CMD_PMP_WRITE)
 XLAT(ATA_CMD_PMP_READ_DMA),
 #define XLAT_VAL_80 ((unsigned) (ATA_CMD_PMP_READ_DMA))
 #define XLAT_STR_80 STRINGIFY(ATA_CMD_PMP_READ_DMA)
 XLAT(ATA_CMD_FLUSH_EXT),
 #define XLAT_VAL_81 ((unsigned) (ATA_CMD_FLUSH_EXT))
 #define XLAT_STR_81 STRINGIFY(ATA_CMD_FLUSH_EXT)
 XLAT(ATA_CMD_PMP_WRITE_DMA),
 #define XLAT_VAL_82 ((unsigned) (ATA_CMD_PMP_WRITE_DMA))
 #define XLAT_STR_82 STRINGIFY(ATA_CMD_PMP_WRITE_DMA)
 XLAT(ATA_CMD_ID_ATA),
 #define XLAT_VAL_83 ((unsigned) (ATA_CMD_ID_ATA))
 #define XLAT_STR_83 STRINGIFY(ATA_CMD_ID_ATA)
 XLAT(ATA_CMD_SET_FEATURES),
 #define XLAT_VAL_84 ((unsigned) (ATA_CMD_SET_FEATURES))
 #define XLAT_STR_84 STRINGIFY(ATA_CMD_SET_FEATURES)
 XLAT(ATA_CMD_SEC_SET_PASS),
 #define XLAT_VAL_85 ((unsigned) (ATA_CMD_SEC_SET_PASS))
 #define XLAT_STR_85 STRINGIFY(ATA_CMD_SEC_SET_PASS)
 XLAT(ATA_CMD_SEC_UNLOCK),
 #define XLAT_VAL_86 ((unsigned) (ATA_CMD_SEC_UNLOCK))
 #define XLAT_STR_86 STRINGIFY(ATA_CMD_SEC_UNLOCK)
 XLAT(ATA_CMD_SEC_ERASE_PREP),
 #define XLAT_VAL_87 ((unsigned) (ATA_CMD_SEC_ERASE_PREP))
 #define XLAT_STR_87 STRINGIFY(ATA_CMD_SEC_ERASE_PREP)
 XLAT(ATA_CMD_SEC_ERASE_UNIT),
 #define XLAT_VAL_88 ((unsigned) (ATA_CMD_SEC_ERASE_UNIT))
 #define XLAT_STR_88 STRINGIFY(ATA_CMD_SEC_ERASE_UNIT)
 XLAT(ATA_CMD_SEC_FREEZE_LOCK),
 #define XLAT_VAL_89 ((unsigned) (ATA_CMD_SEC_FREEZE_LOCK))
 #define XLAT_STR_89 STRINGIFY(ATA_CMD_SEC_FREEZE_LOCK)
 XLAT(ATA_CMD_SEC_DISABLE_PASS),
 #define XLAT_VAL_90 ((unsigned) (ATA_CMD_SEC_DISABLE_PASS))
 #define XLAT_STR_90 STRINGIFY(ATA_CMD_SEC_DISABLE_PASS)
 XLAT(ATA_CMD_READ_NATIVE_MAX),
 #define XLAT_VAL_91 ((unsigned) (ATA_CMD_READ_NATIVE_MAX))
 #define XLAT_STR_91 STRINGIFY(ATA_CMD_READ_NATIVE_MAX)
 XLAT(ATA_CMD_SET_MAX),
 #define XLAT_VAL_92 ((unsigned) (ATA_CMD_SET_MAX))
 #define XLAT_STR_92 STRINGIFY(ATA_CMD_SET_MAX)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat hdio_drive_cmds[1] = { {
 .data = hdio_drive_cmds_xdata,
 .size = ARRAY_SIZE(hdio_drive_cmds_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
#  ifdef XLAT_VAL_79
  | XLAT_VAL_79
#  endif
#  ifdef XLAT_VAL_80
  | XLAT_VAL_80
#  endif
#  ifdef XLAT_VAL_81
  | XLAT_VAL_81
#  endif
#  ifdef XLAT_VAL_82
  | XLAT_VAL_82
#  endif
#  ifdef XLAT_VAL_83
  | XLAT_VAL_83
#  endif
#  ifdef XLAT_VAL_84
  | XLAT_VAL_84
#  endif
#  ifdef XLAT_VAL_85
  | XLAT_VAL_85
#  endif
#  ifdef XLAT_VAL_86
  | XLAT_VAL_86
#  endif
#  ifdef XLAT_VAL_87
  | XLAT_VAL_87
#  endif
#  ifdef XLAT_VAL_88
  | XLAT_VAL_88
#  endif
#  ifdef XLAT_VAL_89
  | XLAT_VAL_89
#  endif
#  ifdef XLAT_VAL_90
  | XLAT_VAL_90
#  endif
#  ifdef XLAT_VAL_91
  | XLAT_VAL_91
#  endif
#  ifdef XLAT_VAL_92
  | XLAT_VAL_92
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
#  ifdef XLAT_STR_79
  + sizeof(XLAT_STR_79)
#  endif
#  ifdef XLAT_STR_80
  + sizeof(XLAT_STR_80)
#  endif
#  ifdef XLAT_STR_81
  + sizeof(XLAT_STR_81)
#  endif
#  ifdef XLAT_STR_82
  + sizeof(XLAT_STR_82)
#  endif
#  ifdef XLAT_STR_83
  + sizeof(XLAT_STR_83)
#  endif
#  ifdef XLAT_STR_84
  + sizeof(XLAT_STR_84)
#  endif
#  ifdef XLAT_STR_85
  + sizeof(XLAT_STR_85)
#  endif
#  ifdef XLAT_STR_86
  + sizeof(XLAT_STR_86)
#  endif
#  ifdef XLAT_STR_87
  + sizeof(XLAT_STR_87)
#  endif
#  ifdef XLAT_STR_88
  + sizeof(XLAT_STR_88)
#  endif
#  ifdef XLAT_STR_89
  + sizeof(XLAT_STR_89)
#  endif
#  ifdef XLAT_STR_90
  + sizeof(XLAT_STR_90)
#  endif
#  ifdef XLAT_STR_91
  + sizeof(XLAT_STR_91)
#  endif
#  ifdef XLAT_STR_92
  + sizeof(XLAT_STR_92)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
#  undef XLAT_STR_79
#  undef XLAT_VAL_79
#  undef XLAT_STR_80
#  undef XLAT_VAL_80
#  undef XLAT_STR_81
#  undef XLAT_VAL_81
#  undef XLAT_STR_82
#  undef XLAT_VAL_82
#  undef XLAT_STR_83
#  undef XLAT_VAL_83
#  undef XLAT_STR_84
#  undef XLAT_VAL_84
#  undef XLAT_STR_85
#  undef XLAT_VAL_85
#  undef XLAT_STR_86
#  undef XLAT_VAL_86
#  undef XLAT_STR_87
#  undef XLAT_VAL_87
#  undef XLAT_STR_88
#  undef XLAT_VAL_88
#  undef XLAT_STR_89
#  undef XLAT_VAL_89
#  undef XLAT_STR_90
#  undef XLAT_VAL_90
#  undef XLAT_STR_91
#  undef XLAT_VAL_91
#  undef XLAT_STR_92
#  undef XLAT_VAL_92
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
