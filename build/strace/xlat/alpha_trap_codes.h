/* Generated by ./src/xlat/gen.sh from ./src/xlat/alpha_trap_codes.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(GEN_INTOVF) || (defined(HAVE_DECL_GEN_INTOVF) && HAVE_DECL_GEN_INTOVF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_INTOVF) == (-1), "GEN_INTOVF != -1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_INTOVF -1
#endif
#if defined(GEN_INTDIV) || (defined(HAVE_DECL_GEN_INTDIV) && HAVE_DECL_GEN_INTDIV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_INTDIV) == (-2), "GEN_INTDIV != -2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_INTDIV -2
#endif
#if defined(GEN_FLTOVF) || (defined(HAVE_DECL_GEN_FLTOVF) && HAVE_DECL_GEN_FLTOVF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_FLTOVF) == (-3), "GEN_FLTOVF != -3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_FLTOVF -3
#endif
#if defined(GEN_FLTDIV) || (defined(HAVE_DECL_GEN_FLTDIV) && HAVE_DECL_GEN_FLTDIV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_FLTDIV) == (-4), "GEN_FLTDIV != -4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_FLTDIV -4
#endif
#if defined(GEN_FLTUND) || (defined(HAVE_DECL_GEN_FLTUND) && HAVE_DECL_GEN_FLTUND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_FLTUND) == (-5), "GEN_FLTUND != -5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_FLTUND -5
#endif
#if defined(GEN_FLTINV) || (defined(HAVE_DECL_GEN_FLTINV) && HAVE_DECL_GEN_FLTINV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_FLTINV) == (-6), "GEN_FLTINV != -6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_FLTINV -6
#endif
#if defined(GEN_FLTINE) || (defined(HAVE_DECL_GEN_FLTINE) && HAVE_DECL_GEN_FLTINE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_FLTINE) == (-7), "GEN_FLTINE != -7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_FLTINE -7
#endif
#if defined(GEN_DECOVF) || (defined(HAVE_DECL_GEN_DECOVF) && HAVE_DECL_GEN_DECOVF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_DECOVF) == (-8), "GEN_DECOVF != -8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_DECOVF -8
#endif
#if defined(GEN_DECDIV) || (defined(HAVE_DECL_GEN_DECDIV) && HAVE_DECL_GEN_DECDIV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_DECDIV) == (-9), "GEN_DECDIV != -9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_DECDIV -9
#endif
#if defined(GEN_DECINV) || (defined(HAVE_DECL_GEN_DECINV) && HAVE_DECL_GEN_DECINV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_DECINV) == (-10), "GEN_DECINV != -10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_DECINV -10
#endif
#if defined(GEN_ROPRAND) || (defined(HAVE_DECL_GEN_ROPRAND) && HAVE_DECL_GEN_ROPRAND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_ROPRAND) == (-11), "GEN_ROPRAND != -11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_ROPRAND -11
#endif
#if defined(GEN_ASSERTERR) || (defined(HAVE_DECL_GEN_ASSERTERR) && HAVE_DECL_GEN_ASSERTERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_ASSERTERR) == (-12), "GEN_ASSERTERR != -12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_ASSERTERR -12
#endif
#if defined(GEN_NULPTRERR) || (defined(HAVE_DECL_GEN_NULPTRERR) && HAVE_DECL_GEN_NULPTRERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_NULPTRERR) == (-13), "GEN_NULPTRERR != -13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_NULPTRERR -13
#endif
#if defined(GEN_STKOVF) || (defined(HAVE_DECL_GEN_STKOVF) && HAVE_DECL_GEN_STKOVF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_STKOVF) == (-14), "GEN_STKOVF != -14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_STKOVF -14
#endif
#if defined(GEN_STRLENERR) || (defined(HAVE_DECL_GEN_STRLENERR) && HAVE_DECL_GEN_STRLENERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_STRLENERR) == (-15), "GEN_STRLENERR != -15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_STRLENERR -15
#endif
#if defined(GEN_SUBSTRERR) || (defined(HAVE_DECL_GEN_SUBSTRERR) && HAVE_DECL_GEN_SUBSTRERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_SUBSTRERR) == (-16), "GEN_SUBSTRERR != -16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_SUBSTRERR -16
#endif
#if defined(GEN_RANGERR) || (defined(HAVE_DECL_GEN_RANGERR) && HAVE_DECL_GEN_RANGERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_RANGERR) == (-17), "GEN_RANGERR != -17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_RANGERR -17
#endif
#if defined(GEN_SUBRNG) || (defined(HAVE_DECL_GEN_SUBRNG) && HAVE_DECL_GEN_SUBRNG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_SUBRNG) == (-18), "GEN_SUBRNG != -18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_SUBRNG -18
#endif
#if defined(GEN_SUBRNG1) || (defined(HAVE_DECL_GEN_SUBRNG1) && HAVE_DECL_GEN_SUBRNG1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_SUBRNG1) == (-19), "GEN_SUBRNG1 != -19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_SUBRNG1 -19
#endif
#if defined(GEN_SUBRNG2) || (defined(HAVE_DECL_GEN_SUBRNG2) && HAVE_DECL_GEN_SUBRNG2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_SUBRNG2) == (-20), "GEN_SUBRNG2 != -20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_SUBRNG2 -20
#endif
#if defined(GEN_SUBRNG3) || (defined(HAVE_DECL_GEN_SUBRNG3) && HAVE_DECL_GEN_SUBRNG3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_SUBRNG3) == (-21), "GEN_SUBRNG3 != -21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_SUBRNG3 -21
#endif
#if defined(GEN_SUBRNG4) || (defined(HAVE_DECL_GEN_SUBRNG4) && HAVE_DECL_GEN_SUBRNG4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_SUBRNG4) == (-22), "GEN_SUBRNG4 != -22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_SUBRNG4 -22
#endif
#if defined(GEN_SUBRNG5) || (defined(HAVE_DECL_GEN_SUBRNG5) && HAVE_DECL_GEN_SUBRNG5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_SUBRNG5) == (-23), "GEN_SUBRNG5 != -23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_SUBRNG5 -23
#endif
#if defined(GEN_SUBRNG6) || (defined(HAVE_DECL_GEN_SUBRNG6) && HAVE_DECL_GEN_SUBRNG6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_SUBRNG6) == (-24), "GEN_SUBRNG6 != -24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_SUBRNG6 -24
#endif
#if defined(GEN_SUBRNG7) || (defined(HAVE_DECL_GEN_SUBRNG7) && HAVE_DECL_GEN_SUBRNG7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((GEN_SUBRNG7) == (-25), "GEN_SUBRNG7 != -25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define GEN_SUBRNG7 -25
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat alpha_trap_codes[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data alpha_trap_codes_xdata[] = {
 XLAT(GEN_INTOVF),
 #define XLAT_VAL_0 ((unsigned) (GEN_INTOVF))
 #define XLAT_STR_0 STRINGIFY(GEN_INTOVF)
 XLAT(GEN_INTDIV),
 #define XLAT_VAL_1 ((unsigned) (GEN_INTDIV))
 #define XLAT_STR_1 STRINGIFY(GEN_INTDIV)
 XLAT(GEN_FLTOVF),
 #define XLAT_VAL_2 ((unsigned) (GEN_FLTOVF))
 #define XLAT_STR_2 STRINGIFY(GEN_FLTOVF)
 XLAT(GEN_FLTDIV),
 #define XLAT_VAL_3 ((unsigned) (GEN_FLTDIV))
 #define XLAT_STR_3 STRINGIFY(GEN_FLTDIV)
 XLAT(GEN_FLTUND),
 #define XLAT_VAL_4 ((unsigned) (GEN_FLTUND))
 #define XLAT_STR_4 STRINGIFY(GEN_FLTUND)
 XLAT(GEN_FLTINV),
 #define XLAT_VAL_5 ((unsigned) (GEN_FLTINV))
 #define XLAT_STR_5 STRINGIFY(GEN_FLTINV)
 XLAT(GEN_FLTINE),
 #define XLAT_VAL_6 ((unsigned) (GEN_FLTINE))
 #define XLAT_STR_6 STRINGIFY(GEN_FLTINE)
 XLAT(GEN_DECOVF),
 #define XLAT_VAL_7 ((unsigned) (GEN_DECOVF))
 #define XLAT_STR_7 STRINGIFY(GEN_DECOVF)
 XLAT(GEN_DECDIV),
 #define XLAT_VAL_8 ((unsigned) (GEN_DECDIV))
 #define XLAT_STR_8 STRINGIFY(GEN_DECDIV)
 XLAT(GEN_DECINV),
 #define XLAT_VAL_9 ((unsigned) (GEN_DECINV))
 #define XLAT_STR_9 STRINGIFY(GEN_DECINV)
 XLAT(GEN_ROPRAND),
 #define XLAT_VAL_10 ((unsigned) (GEN_ROPRAND))
 #define XLAT_STR_10 STRINGIFY(GEN_ROPRAND)
 XLAT(GEN_ASSERTERR),
 #define XLAT_VAL_11 ((unsigned) (GEN_ASSERTERR))
 #define XLAT_STR_11 STRINGIFY(GEN_ASSERTERR)
 XLAT(GEN_NULPTRERR),
 #define XLAT_VAL_12 ((unsigned) (GEN_NULPTRERR))
 #define XLAT_STR_12 STRINGIFY(GEN_NULPTRERR)
 XLAT(GEN_STKOVF),
 #define XLAT_VAL_13 ((unsigned) (GEN_STKOVF))
 #define XLAT_STR_13 STRINGIFY(GEN_STKOVF)
 XLAT(GEN_STRLENERR),
 #define XLAT_VAL_14 ((unsigned) (GEN_STRLENERR))
 #define XLAT_STR_14 STRINGIFY(GEN_STRLENERR)
 XLAT(GEN_SUBSTRERR),
 #define XLAT_VAL_15 ((unsigned) (GEN_SUBSTRERR))
 #define XLAT_STR_15 STRINGIFY(GEN_SUBSTRERR)
 XLAT(GEN_RANGERR),
 #define XLAT_VAL_16 ((unsigned) (GEN_RANGERR))
 #define XLAT_STR_16 STRINGIFY(GEN_RANGERR)
 XLAT(GEN_SUBRNG),
 #define XLAT_VAL_17 ((unsigned) (GEN_SUBRNG))
 #define XLAT_STR_17 STRINGIFY(GEN_SUBRNG)
 XLAT(GEN_SUBRNG1),
 #define XLAT_VAL_18 ((unsigned) (GEN_SUBRNG1))
 #define XLAT_STR_18 STRINGIFY(GEN_SUBRNG1)
 XLAT(GEN_SUBRNG2),
 #define XLAT_VAL_19 ((unsigned) (GEN_SUBRNG2))
 #define XLAT_STR_19 STRINGIFY(GEN_SUBRNG2)
 XLAT(GEN_SUBRNG3),
 #define XLAT_VAL_20 ((unsigned) (GEN_SUBRNG3))
 #define XLAT_STR_20 STRINGIFY(GEN_SUBRNG3)
 XLAT(GEN_SUBRNG4),
 #define XLAT_VAL_21 ((unsigned) (GEN_SUBRNG4))
 #define XLAT_STR_21 STRINGIFY(GEN_SUBRNG4)
 XLAT(GEN_SUBRNG5),
 #define XLAT_VAL_22 ((unsigned) (GEN_SUBRNG5))
 #define XLAT_STR_22 STRINGIFY(GEN_SUBRNG5)
 XLAT(GEN_SUBRNG6),
 #define XLAT_VAL_23 ((unsigned) (GEN_SUBRNG6))
 #define XLAT_STR_23 STRINGIFY(GEN_SUBRNG6)
 XLAT(GEN_SUBRNG7),
 #define XLAT_VAL_24 ((unsigned) (GEN_SUBRNG7))
 #define XLAT_STR_24 STRINGIFY(GEN_SUBRNG7)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat alpha_trap_codes[1] = { {
 .data = alpha_trap_codes_xdata,
 .size = ARRAY_SIZE(alpha_trap_codes_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
