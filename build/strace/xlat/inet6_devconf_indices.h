/* Generated by ./src/xlat/gen.sh from ./src/xlat/inet6_devconf_indices.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(DEVCONF_FORWARDING) || (defined(HAVE_DECL_DEVCONF_FORWARDING) && HAVE_DECL_DEVCONF_FORWARDING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_FORWARDING) == (0), "DEVCONF_FORWARDING != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_FORWARDING 0
#endif
#if defined(DEVCONF_HOPLIMIT) || (defined(HAVE_DECL_DEVCONF_HOPLIMIT) && HAVE_DECL_DEVCONF_HOPLIMIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_HOPLIMIT) == (1), "DEVCONF_HOPLIMIT != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_HOPLIMIT 1
#endif
#if defined(DEVCONF_MTU6) || (defined(HAVE_DECL_DEVCONF_MTU6) && HAVE_DECL_DEVCONF_MTU6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_MTU6) == (2), "DEVCONF_MTU6 != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_MTU6 2
#endif
#if defined(DEVCONF_ACCEPT_RA) || (defined(HAVE_DECL_DEVCONF_ACCEPT_RA) && HAVE_DECL_DEVCONF_ACCEPT_RA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_RA) == (3), "DEVCONF_ACCEPT_RA != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_RA 3
#endif
#if defined(DEVCONF_ACCEPT_REDIRECTS) || (defined(HAVE_DECL_DEVCONF_ACCEPT_REDIRECTS) && HAVE_DECL_DEVCONF_ACCEPT_REDIRECTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_REDIRECTS) == (4), "DEVCONF_ACCEPT_REDIRECTS != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_REDIRECTS 4
#endif
#if defined(DEVCONF_AUTOCONF) || (defined(HAVE_DECL_DEVCONF_AUTOCONF) && HAVE_DECL_DEVCONF_AUTOCONF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_AUTOCONF) == (5), "DEVCONF_AUTOCONF != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_AUTOCONF 5
#endif
#if defined(DEVCONF_DAD_TRANSMITS) || (defined(HAVE_DECL_DEVCONF_DAD_TRANSMITS) && HAVE_DECL_DEVCONF_DAD_TRANSMITS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_DAD_TRANSMITS) == (6), "DEVCONF_DAD_TRANSMITS != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_DAD_TRANSMITS 6
#endif
#if defined(DEVCONF_RTR_SOLICITS) || (defined(HAVE_DECL_DEVCONF_RTR_SOLICITS) && HAVE_DECL_DEVCONF_RTR_SOLICITS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_RTR_SOLICITS) == (7), "DEVCONF_RTR_SOLICITS != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_RTR_SOLICITS 7
#endif
#if defined(DEVCONF_RTR_SOLICIT_INTERVAL) || (defined(HAVE_DECL_DEVCONF_RTR_SOLICIT_INTERVAL) && HAVE_DECL_DEVCONF_RTR_SOLICIT_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_RTR_SOLICIT_INTERVAL) == (8), "DEVCONF_RTR_SOLICIT_INTERVAL != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_RTR_SOLICIT_INTERVAL 8
#endif
#if defined(DEVCONF_RTR_SOLICIT_DELAY) || (defined(HAVE_DECL_DEVCONF_RTR_SOLICIT_DELAY) && HAVE_DECL_DEVCONF_RTR_SOLICIT_DELAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_RTR_SOLICIT_DELAY) == (9), "DEVCONF_RTR_SOLICIT_DELAY != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_RTR_SOLICIT_DELAY 9
#endif
#if defined(DEVCONF_USE_TEMPADDR) || (defined(HAVE_DECL_DEVCONF_USE_TEMPADDR) && HAVE_DECL_DEVCONF_USE_TEMPADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_USE_TEMPADDR) == (10), "DEVCONF_USE_TEMPADDR != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_USE_TEMPADDR 10
#endif
#if defined(DEVCONF_TEMP_VALID_LFT) || (defined(HAVE_DECL_DEVCONF_TEMP_VALID_LFT) && HAVE_DECL_DEVCONF_TEMP_VALID_LFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_TEMP_VALID_LFT) == (11), "DEVCONF_TEMP_VALID_LFT != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_TEMP_VALID_LFT 11
#endif
#if defined(DEVCONF_TEMP_PREFERED_LFT) || (defined(HAVE_DECL_DEVCONF_TEMP_PREFERED_LFT) && HAVE_DECL_DEVCONF_TEMP_PREFERED_LFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_TEMP_PREFERED_LFT) == (12), "DEVCONF_TEMP_PREFERED_LFT != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_TEMP_PREFERED_LFT 12
#endif
#if defined(DEVCONF_REGEN_MAX_RETRY) || (defined(HAVE_DECL_DEVCONF_REGEN_MAX_RETRY) && HAVE_DECL_DEVCONF_REGEN_MAX_RETRY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_REGEN_MAX_RETRY) == (13), "DEVCONF_REGEN_MAX_RETRY != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_REGEN_MAX_RETRY 13
#endif
#if defined(DEVCONF_MAX_DESYNC_FACTOR) || (defined(HAVE_DECL_DEVCONF_MAX_DESYNC_FACTOR) && HAVE_DECL_DEVCONF_MAX_DESYNC_FACTOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_MAX_DESYNC_FACTOR) == (14), "DEVCONF_MAX_DESYNC_FACTOR != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_MAX_DESYNC_FACTOR 14
#endif
#if defined(DEVCONF_MAX_ADDRESSES) || (defined(HAVE_DECL_DEVCONF_MAX_ADDRESSES) && HAVE_DECL_DEVCONF_MAX_ADDRESSES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_MAX_ADDRESSES) == (15), "DEVCONF_MAX_ADDRESSES != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_MAX_ADDRESSES 15
#endif
#if defined(DEVCONF_FORCE_MLD_VERSION) || (defined(HAVE_DECL_DEVCONF_FORCE_MLD_VERSION) && HAVE_DECL_DEVCONF_FORCE_MLD_VERSION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_FORCE_MLD_VERSION) == (16), "DEVCONF_FORCE_MLD_VERSION != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_FORCE_MLD_VERSION 16
#endif
#if defined(DEVCONF_ACCEPT_RA_DEFRTR) || (defined(HAVE_DECL_DEVCONF_ACCEPT_RA_DEFRTR) && HAVE_DECL_DEVCONF_ACCEPT_RA_DEFRTR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_RA_DEFRTR) == (17), "DEVCONF_ACCEPT_RA_DEFRTR != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_RA_DEFRTR 17
#endif
#if defined(DEVCONF_ACCEPT_RA_PINFO) || (defined(HAVE_DECL_DEVCONF_ACCEPT_RA_PINFO) && HAVE_DECL_DEVCONF_ACCEPT_RA_PINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_RA_PINFO) == (18), "DEVCONF_ACCEPT_RA_PINFO != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_RA_PINFO 18
#endif
#if defined(DEVCONF_ACCEPT_RA_RTR_PREF) || (defined(HAVE_DECL_DEVCONF_ACCEPT_RA_RTR_PREF) && HAVE_DECL_DEVCONF_ACCEPT_RA_RTR_PREF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_RA_RTR_PREF) == (19), "DEVCONF_ACCEPT_RA_RTR_PREF != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_RA_RTR_PREF 19
#endif
#if defined(DEVCONF_RTR_PROBE_INTERVAL) || (defined(HAVE_DECL_DEVCONF_RTR_PROBE_INTERVAL) && HAVE_DECL_DEVCONF_RTR_PROBE_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_RTR_PROBE_INTERVAL) == (20), "DEVCONF_RTR_PROBE_INTERVAL != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_RTR_PROBE_INTERVAL 20
#endif
#if defined(DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN) || (defined(HAVE_DECL_DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN) && HAVE_DECL_DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN) == (21), "DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN 21
#endif
#if defined(DEVCONF_PROXY_NDP) || (defined(HAVE_DECL_DEVCONF_PROXY_NDP) && HAVE_DECL_DEVCONF_PROXY_NDP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_PROXY_NDP) == (22), "DEVCONF_PROXY_NDP != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_PROXY_NDP 22
#endif
#if defined(DEVCONF_OPTIMISTIC_DAD) || (defined(HAVE_DECL_DEVCONF_OPTIMISTIC_DAD) && HAVE_DECL_DEVCONF_OPTIMISTIC_DAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_OPTIMISTIC_DAD) == (23), "DEVCONF_OPTIMISTIC_DAD != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_OPTIMISTIC_DAD 23
#endif
#if defined(DEVCONF_ACCEPT_SOURCE_ROUTE) || (defined(HAVE_DECL_DEVCONF_ACCEPT_SOURCE_ROUTE) && HAVE_DECL_DEVCONF_ACCEPT_SOURCE_ROUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_SOURCE_ROUTE) == (24), "DEVCONF_ACCEPT_SOURCE_ROUTE != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_SOURCE_ROUTE 24
#endif
#if defined(DEVCONF_MC_FORWARDING) || (defined(HAVE_DECL_DEVCONF_MC_FORWARDING) && HAVE_DECL_DEVCONF_MC_FORWARDING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_MC_FORWARDING) == (25), "DEVCONF_MC_FORWARDING != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_MC_FORWARDING 25
#endif
#if defined(DEVCONF_DISABLE_IPV6) || (defined(HAVE_DECL_DEVCONF_DISABLE_IPV6) && HAVE_DECL_DEVCONF_DISABLE_IPV6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_DISABLE_IPV6) == (26), "DEVCONF_DISABLE_IPV6 != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_DISABLE_IPV6 26
#endif
#if defined(DEVCONF_ACCEPT_DAD) || (defined(HAVE_DECL_DEVCONF_ACCEPT_DAD) && HAVE_DECL_DEVCONF_ACCEPT_DAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_DAD) == (27), "DEVCONF_ACCEPT_DAD != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_DAD 27
#endif
#if defined(DEVCONF_FORCE_TLLAO) || (defined(HAVE_DECL_DEVCONF_FORCE_TLLAO) && HAVE_DECL_DEVCONF_FORCE_TLLAO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_FORCE_TLLAO) == (28), "DEVCONF_FORCE_TLLAO != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_FORCE_TLLAO 28
#endif
#if defined(DEVCONF_NDISC_NOTIFY) || (defined(HAVE_DECL_DEVCONF_NDISC_NOTIFY) && HAVE_DECL_DEVCONF_NDISC_NOTIFY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_NDISC_NOTIFY) == (29), "DEVCONF_NDISC_NOTIFY != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_NDISC_NOTIFY 29
#endif
#if defined(DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL) || (defined(HAVE_DECL_DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL) && HAVE_DECL_DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL) == (30), "DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL 30
#endif
#if defined(DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL) || (defined(HAVE_DECL_DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL) && HAVE_DECL_DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL) == (31), "DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL != 31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL 31
#endif
#if defined(DEVCONF_SUPPRESS_FRAG_NDISC) || (defined(HAVE_DECL_DEVCONF_SUPPRESS_FRAG_NDISC) && HAVE_DECL_DEVCONF_SUPPRESS_FRAG_NDISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_SUPPRESS_FRAG_NDISC) == (32), "DEVCONF_SUPPRESS_FRAG_NDISC != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_SUPPRESS_FRAG_NDISC 32
#endif
#if defined(DEVCONF_ACCEPT_RA_FROM_LOCAL) || (defined(HAVE_DECL_DEVCONF_ACCEPT_RA_FROM_LOCAL) && HAVE_DECL_DEVCONF_ACCEPT_RA_FROM_LOCAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_RA_FROM_LOCAL) == (33), "DEVCONF_ACCEPT_RA_FROM_LOCAL != 33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_RA_FROM_LOCAL 33
#endif
#if defined(DEVCONF_USE_OPTIMISTIC) || (defined(HAVE_DECL_DEVCONF_USE_OPTIMISTIC) && HAVE_DECL_DEVCONF_USE_OPTIMISTIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_USE_OPTIMISTIC) == (34), "DEVCONF_USE_OPTIMISTIC != 34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_USE_OPTIMISTIC 34
#endif
#if defined(DEVCONF_ACCEPT_RA_MTU) || (defined(HAVE_DECL_DEVCONF_ACCEPT_RA_MTU) && HAVE_DECL_DEVCONF_ACCEPT_RA_MTU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_RA_MTU) == (35), "DEVCONF_ACCEPT_RA_MTU != 35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_RA_MTU 35
#endif
#if defined(DEVCONF_STABLE_SECRET) || (defined(HAVE_DECL_DEVCONF_STABLE_SECRET) && HAVE_DECL_DEVCONF_STABLE_SECRET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_STABLE_SECRET) == (36), "DEVCONF_STABLE_SECRET != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_STABLE_SECRET 36
#endif
#if defined(DEVCONF_USE_OIF_ADDRS_ONLY) || (defined(HAVE_DECL_DEVCONF_USE_OIF_ADDRS_ONLY) && HAVE_DECL_DEVCONF_USE_OIF_ADDRS_ONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_USE_OIF_ADDRS_ONLY) == (37), "DEVCONF_USE_OIF_ADDRS_ONLY != 37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_USE_OIF_ADDRS_ONLY 37
#endif
#if defined(DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT) || (defined(HAVE_DECL_DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT) && HAVE_DECL_DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT) == (38), "DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT != 38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT 38
#endif
#if defined(DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN) || (defined(HAVE_DECL_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN) && HAVE_DECL_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN) == (39), "DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN != 39");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN 39
#endif
#if defined(DEVCONF_DROP_UNICAST_IN_L2_MULTICAST) || (defined(HAVE_DECL_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST) && HAVE_DECL_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_DROP_UNICAST_IN_L2_MULTICAST) == (40), "DEVCONF_DROP_UNICAST_IN_L2_MULTICAST != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_DROP_UNICAST_IN_L2_MULTICAST 40
#endif
#if defined(DEVCONF_DROP_UNSOLICITED_NA) || (defined(HAVE_DECL_DEVCONF_DROP_UNSOLICITED_NA) && HAVE_DECL_DEVCONF_DROP_UNSOLICITED_NA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_DROP_UNSOLICITED_NA) == (41), "DEVCONF_DROP_UNSOLICITED_NA != 41");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_DROP_UNSOLICITED_NA 41
#endif
#if defined(DEVCONF_KEEP_ADDR_ON_DOWN) || (defined(HAVE_DECL_DEVCONF_KEEP_ADDR_ON_DOWN) && HAVE_DECL_DEVCONF_KEEP_ADDR_ON_DOWN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_KEEP_ADDR_ON_DOWN) == (42), "DEVCONF_KEEP_ADDR_ON_DOWN != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_KEEP_ADDR_ON_DOWN 42
#endif
#if defined(DEVCONF_RTR_SOLICIT_MAX_INTERVAL) || (defined(HAVE_DECL_DEVCONF_RTR_SOLICIT_MAX_INTERVAL) && HAVE_DECL_DEVCONF_RTR_SOLICIT_MAX_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_RTR_SOLICIT_MAX_INTERVAL) == (43), "DEVCONF_RTR_SOLICIT_MAX_INTERVAL != 43");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_RTR_SOLICIT_MAX_INTERVAL 43
#endif
#if defined(DEVCONF_SEG6_ENABLED) || (defined(HAVE_DECL_DEVCONF_SEG6_ENABLED) && HAVE_DECL_DEVCONF_SEG6_ENABLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_SEG6_ENABLED) == (44), "DEVCONF_SEG6_ENABLED != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_SEG6_ENABLED 44
#endif
#if defined(DEVCONF_SEG6_REQUIRE_HMAC) || (defined(HAVE_DECL_DEVCONF_SEG6_REQUIRE_HMAC) && HAVE_DECL_DEVCONF_SEG6_REQUIRE_HMAC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_SEG6_REQUIRE_HMAC) == (45), "DEVCONF_SEG6_REQUIRE_HMAC != 45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_SEG6_REQUIRE_HMAC 45
#endif
#if defined(DEVCONF_ENHANCED_DAD) || (defined(HAVE_DECL_DEVCONF_ENHANCED_DAD) && HAVE_DECL_DEVCONF_ENHANCED_DAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ENHANCED_DAD) == (46), "DEVCONF_ENHANCED_DAD != 46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ENHANCED_DAD 46
#endif
#if defined(DEVCONF_ADDR_GEN_MODE) || (defined(HAVE_DECL_DEVCONF_ADDR_GEN_MODE) && HAVE_DECL_DEVCONF_ADDR_GEN_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ADDR_GEN_MODE) == (47), "DEVCONF_ADDR_GEN_MODE != 47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ADDR_GEN_MODE 47
#endif
#if defined(DEVCONF_DISABLE_POLICY) || (defined(HAVE_DECL_DEVCONF_DISABLE_POLICY) && HAVE_DECL_DEVCONF_DISABLE_POLICY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_DISABLE_POLICY) == (48), "DEVCONF_DISABLE_POLICY != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_DISABLE_POLICY 48
#endif
#if defined(DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN) || (defined(HAVE_DECL_DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN) && HAVE_DECL_DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN) == (49), "DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN != 49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN 49
#endif
#if defined(DEVCONF_NDISC_TCLASS) || (defined(HAVE_DECL_DEVCONF_NDISC_TCLASS) && HAVE_DECL_DEVCONF_NDISC_TCLASS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_NDISC_TCLASS) == (50), "DEVCONF_NDISC_TCLASS != 50");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_NDISC_TCLASS 50
#endif
#if defined(DEVCONF_RPL_SEG_ENABLED) || (defined(HAVE_DECL_DEVCONF_RPL_SEG_ENABLED) && HAVE_DECL_DEVCONF_RPL_SEG_ENABLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_RPL_SEG_ENABLED) == (51), "DEVCONF_RPL_SEG_ENABLED != 51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_RPL_SEG_ENABLED 51
#endif
#if defined(DEVCONF_RA_DEFRTR_METRIC) || (defined(HAVE_DECL_DEVCONF_RA_DEFRTR_METRIC) && HAVE_DECL_DEVCONF_RA_DEFRTR_METRIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_RA_DEFRTR_METRIC) == (52), "DEVCONF_RA_DEFRTR_METRIC != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_RA_DEFRTR_METRIC 52
#endif
#if defined(DEVCONF_IOAM6_ENABLED) || (defined(HAVE_DECL_DEVCONF_IOAM6_ENABLED) && HAVE_DECL_DEVCONF_IOAM6_ENABLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_IOAM6_ENABLED) == (53), "DEVCONF_IOAM6_ENABLED != 53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_IOAM6_ENABLED 53
#endif
#if defined(DEVCONF_IOAM6_ID) || (defined(HAVE_DECL_DEVCONF_IOAM6_ID) && HAVE_DECL_DEVCONF_IOAM6_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_IOAM6_ID) == (54), "DEVCONF_IOAM6_ID != 54");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_IOAM6_ID 54
#endif
#if defined(DEVCONF_IOAM6_ID_WIDE) || (defined(HAVE_DECL_DEVCONF_IOAM6_ID_WIDE) && HAVE_DECL_DEVCONF_IOAM6_ID_WIDE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_IOAM6_ID_WIDE) == (55), "DEVCONF_IOAM6_ID_WIDE != 55");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_IOAM6_ID_WIDE 55
#endif
#if defined(DEVCONF_NDISC_EVICT_NOCARRIER) || (defined(HAVE_DECL_DEVCONF_NDISC_EVICT_NOCARRIER) && HAVE_DECL_DEVCONF_NDISC_EVICT_NOCARRIER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_NDISC_EVICT_NOCARRIER) == (56), "DEVCONF_NDISC_EVICT_NOCARRIER != 56");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_NDISC_EVICT_NOCARRIER 56
#endif
#if defined(DEVCONF_ACCEPT_UNTRACKED_NA) || (defined(HAVE_DECL_DEVCONF_ACCEPT_UNTRACKED_NA) && HAVE_DECL_DEVCONF_ACCEPT_UNTRACKED_NA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((DEVCONF_ACCEPT_UNTRACKED_NA) == (57), "DEVCONF_ACCEPT_UNTRACKED_NA != 57");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define DEVCONF_ACCEPT_UNTRACKED_NA 57
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat inet6_devconf_indices in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data inet6_devconf_indices_xdata[] = {
 [DEVCONF_FORWARDING] = XLAT(DEVCONF_FORWARDING),
 #define XLAT_VAL_0 ((unsigned) (DEVCONF_FORWARDING))
 #define XLAT_STR_0 STRINGIFY(DEVCONF_FORWARDING)
 [DEVCONF_HOPLIMIT] = XLAT(DEVCONF_HOPLIMIT),
 #define XLAT_VAL_1 ((unsigned) (DEVCONF_HOPLIMIT))
 #define XLAT_STR_1 STRINGIFY(DEVCONF_HOPLIMIT)
 [DEVCONF_MTU6] = XLAT(DEVCONF_MTU6),
 #define XLAT_VAL_2 ((unsigned) (DEVCONF_MTU6))
 #define XLAT_STR_2 STRINGIFY(DEVCONF_MTU6)
 [DEVCONF_ACCEPT_RA] = XLAT(DEVCONF_ACCEPT_RA),
 #define XLAT_VAL_3 ((unsigned) (DEVCONF_ACCEPT_RA))
 #define XLAT_STR_3 STRINGIFY(DEVCONF_ACCEPT_RA)
 [DEVCONF_ACCEPT_REDIRECTS] = XLAT(DEVCONF_ACCEPT_REDIRECTS),
 #define XLAT_VAL_4 ((unsigned) (DEVCONF_ACCEPT_REDIRECTS))
 #define XLAT_STR_4 STRINGIFY(DEVCONF_ACCEPT_REDIRECTS)
 [DEVCONF_AUTOCONF] = XLAT(DEVCONF_AUTOCONF),
 #define XLAT_VAL_5 ((unsigned) (DEVCONF_AUTOCONF))
 #define XLAT_STR_5 STRINGIFY(DEVCONF_AUTOCONF)
 [DEVCONF_DAD_TRANSMITS] = XLAT(DEVCONF_DAD_TRANSMITS),
 #define XLAT_VAL_6 ((unsigned) (DEVCONF_DAD_TRANSMITS))
 #define XLAT_STR_6 STRINGIFY(DEVCONF_DAD_TRANSMITS)
 [DEVCONF_RTR_SOLICITS] = XLAT(DEVCONF_RTR_SOLICITS),
 #define XLAT_VAL_7 ((unsigned) (DEVCONF_RTR_SOLICITS))
 #define XLAT_STR_7 STRINGIFY(DEVCONF_RTR_SOLICITS)
 [DEVCONF_RTR_SOLICIT_INTERVAL] = XLAT(DEVCONF_RTR_SOLICIT_INTERVAL),
 #define XLAT_VAL_8 ((unsigned) (DEVCONF_RTR_SOLICIT_INTERVAL))
 #define XLAT_STR_8 STRINGIFY(DEVCONF_RTR_SOLICIT_INTERVAL)
 [DEVCONF_RTR_SOLICIT_DELAY] = XLAT(DEVCONF_RTR_SOLICIT_DELAY),
 #define XLAT_VAL_9 ((unsigned) (DEVCONF_RTR_SOLICIT_DELAY))
 #define XLAT_STR_9 STRINGIFY(DEVCONF_RTR_SOLICIT_DELAY)
 [DEVCONF_USE_TEMPADDR] = XLAT(DEVCONF_USE_TEMPADDR),
 #define XLAT_VAL_10 ((unsigned) (DEVCONF_USE_TEMPADDR))
 #define XLAT_STR_10 STRINGIFY(DEVCONF_USE_TEMPADDR)
 [DEVCONF_TEMP_VALID_LFT] = XLAT(DEVCONF_TEMP_VALID_LFT),
 #define XLAT_VAL_11 ((unsigned) (DEVCONF_TEMP_VALID_LFT))
 #define XLAT_STR_11 STRINGIFY(DEVCONF_TEMP_VALID_LFT)
 [DEVCONF_TEMP_PREFERED_LFT] = XLAT(DEVCONF_TEMP_PREFERED_LFT),
 #define XLAT_VAL_12 ((unsigned) (DEVCONF_TEMP_PREFERED_LFT))
 #define XLAT_STR_12 STRINGIFY(DEVCONF_TEMP_PREFERED_LFT)
 [DEVCONF_REGEN_MAX_RETRY] = XLAT(DEVCONF_REGEN_MAX_RETRY),
 #define XLAT_VAL_13 ((unsigned) (DEVCONF_REGEN_MAX_RETRY))
 #define XLAT_STR_13 STRINGIFY(DEVCONF_REGEN_MAX_RETRY)
 [DEVCONF_MAX_DESYNC_FACTOR] = XLAT(DEVCONF_MAX_DESYNC_FACTOR),
 #define XLAT_VAL_14 ((unsigned) (DEVCONF_MAX_DESYNC_FACTOR))
 #define XLAT_STR_14 STRINGIFY(DEVCONF_MAX_DESYNC_FACTOR)
 [DEVCONF_MAX_ADDRESSES] = XLAT(DEVCONF_MAX_ADDRESSES),
 #define XLAT_VAL_15 ((unsigned) (DEVCONF_MAX_ADDRESSES))
 #define XLAT_STR_15 STRINGIFY(DEVCONF_MAX_ADDRESSES)
 [DEVCONF_FORCE_MLD_VERSION] = XLAT(DEVCONF_FORCE_MLD_VERSION),
 #define XLAT_VAL_16 ((unsigned) (DEVCONF_FORCE_MLD_VERSION))
 #define XLAT_STR_16 STRINGIFY(DEVCONF_FORCE_MLD_VERSION)
 [DEVCONF_ACCEPT_RA_DEFRTR] = XLAT(DEVCONF_ACCEPT_RA_DEFRTR),
 #define XLAT_VAL_17 ((unsigned) (DEVCONF_ACCEPT_RA_DEFRTR))
 #define XLAT_STR_17 STRINGIFY(DEVCONF_ACCEPT_RA_DEFRTR)
 [DEVCONF_ACCEPT_RA_PINFO] = XLAT(DEVCONF_ACCEPT_RA_PINFO),
 #define XLAT_VAL_18 ((unsigned) (DEVCONF_ACCEPT_RA_PINFO))
 #define XLAT_STR_18 STRINGIFY(DEVCONF_ACCEPT_RA_PINFO)
 [DEVCONF_ACCEPT_RA_RTR_PREF] = XLAT(DEVCONF_ACCEPT_RA_RTR_PREF),
 #define XLAT_VAL_19 ((unsigned) (DEVCONF_ACCEPT_RA_RTR_PREF))
 #define XLAT_STR_19 STRINGIFY(DEVCONF_ACCEPT_RA_RTR_PREF)
 [DEVCONF_RTR_PROBE_INTERVAL] = XLAT(DEVCONF_RTR_PROBE_INTERVAL),
 #define XLAT_VAL_20 ((unsigned) (DEVCONF_RTR_PROBE_INTERVAL))
 #define XLAT_STR_20 STRINGIFY(DEVCONF_RTR_PROBE_INTERVAL)
 [DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN] = XLAT(DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN),
 #define XLAT_VAL_21 ((unsigned) (DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN))
 #define XLAT_STR_21 STRINGIFY(DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN)
 [DEVCONF_PROXY_NDP] = XLAT(DEVCONF_PROXY_NDP),
 #define XLAT_VAL_22 ((unsigned) (DEVCONF_PROXY_NDP))
 #define XLAT_STR_22 STRINGIFY(DEVCONF_PROXY_NDP)
 [DEVCONF_OPTIMISTIC_DAD] = XLAT(DEVCONF_OPTIMISTIC_DAD),
 #define XLAT_VAL_23 ((unsigned) (DEVCONF_OPTIMISTIC_DAD))
 #define XLAT_STR_23 STRINGIFY(DEVCONF_OPTIMISTIC_DAD)
 [DEVCONF_ACCEPT_SOURCE_ROUTE] = XLAT(DEVCONF_ACCEPT_SOURCE_ROUTE),
 #define XLAT_VAL_24 ((unsigned) (DEVCONF_ACCEPT_SOURCE_ROUTE))
 #define XLAT_STR_24 STRINGIFY(DEVCONF_ACCEPT_SOURCE_ROUTE)
 [DEVCONF_MC_FORWARDING] = XLAT(DEVCONF_MC_FORWARDING),
 #define XLAT_VAL_25 ((unsigned) (DEVCONF_MC_FORWARDING))
 #define XLAT_STR_25 STRINGIFY(DEVCONF_MC_FORWARDING)
 [DEVCONF_DISABLE_IPV6] = XLAT(DEVCONF_DISABLE_IPV6),
 #define XLAT_VAL_26 ((unsigned) (DEVCONF_DISABLE_IPV6))
 #define XLAT_STR_26 STRINGIFY(DEVCONF_DISABLE_IPV6)
 [DEVCONF_ACCEPT_DAD] = XLAT(DEVCONF_ACCEPT_DAD),
 #define XLAT_VAL_27 ((unsigned) (DEVCONF_ACCEPT_DAD))
 #define XLAT_STR_27 STRINGIFY(DEVCONF_ACCEPT_DAD)
 [DEVCONF_FORCE_TLLAO] = XLAT(DEVCONF_FORCE_TLLAO),
 #define XLAT_VAL_28 ((unsigned) (DEVCONF_FORCE_TLLAO))
 #define XLAT_STR_28 STRINGIFY(DEVCONF_FORCE_TLLAO)
 [DEVCONF_NDISC_NOTIFY] = XLAT(DEVCONF_NDISC_NOTIFY),
 #define XLAT_VAL_29 ((unsigned) (DEVCONF_NDISC_NOTIFY))
 #define XLAT_STR_29 STRINGIFY(DEVCONF_NDISC_NOTIFY)
 [DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL] = XLAT(DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL),
 #define XLAT_VAL_30 ((unsigned) (DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL))
 #define XLAT_STR_30 STRINGIFY(DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL)
 [DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL] = XLAT(DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL),
 #define XLAT_VAL_31 ((unsigned) (DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL))
 #define XLAT_STR_31 STRINGIFY(DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL)
 [DEVCONF_SUPPRESS_FRAG_NDISC] = XLAT(DEVCONF_SUPPRESS_FRAG_NDISC),
 #define XLAT_VAL_32 ((unsigned) (DEVCONF_SUPPRESS_FRAG_NDISC))
 #define XLAT_STR_32 STRINGIFY(DEVCONF_SUPPRESS_FRAG_NDISC)
 [DEVCONF_ACCEPT_RA_FROM_LOCAL] = XLAT(DEVCONF_ACCEPT_RA_FROM_LOCAL),
 #define XLAT_VAL_33 ((unsigned) (DEVCONF_ACCEPT_RA_FROM_LOCAL))
 #define XLAT_STR_33 STRINGIFY(DEVCONF_ACCEPT_RA_FROM_LOCAL)
 [DEVCONF_USE_OPTIMISTIC] = XLAT(DEVCONF_USE_OPTIMISTIC),
 #define XLAT_VAL_34 ((unsigned) (DEVCONF_USE_OPTIMISTIC))
 #define XLAT_STR_34 STRINGIFY(DEVCONF_USE_OPTIMISTIC)
 [DEVCONF_ACCEPT_RA_MTU] = XLAT(DEVCONF_ACCEPT_RA_MTU),
 #define XLAT_VAL_35 ((unsigned) (DEVCONF_ACCEPT_RA_MTU))
 #define XLAT_STR_35 STRINGIFY(DEVCONF_ACCEPT_RA_MTU)
 [DEVCONF_STABLE_SECRET] = XLAT(DEVCONF_STABLE_SECRET),
 #define XLAT_VAL_36 ((unsigned) (DEVCONF_STABLE_SECRET))
 #define XLAT_STR_36 STRINGIFY(DEVCONF_STABLE_SECRET)
 [DEVCONF_USE_OIF_ADDRS_ONLY] = XLAT(DEVCONF_USE_OIF_ADDRS_ONLY),
 #define XLAT_VAL_37 ((unsigned) (DEVCONF_USE_OIF_ADDRS_ONLY))
 #define XLAT_STR_37 STRINGIFY(DEVCONF_USE_OIF_ADDRS_ONLY)
 [DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT] = XLAT(DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT),
 #define XLAT_VAL_38 ((unsigned) (DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT))
 #define XLAT_STR_38 STRINGIFY(DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT)
 [DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN] = XLAT(DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN),
 #define XLAT_VAL_39 ((unsigned) (DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN))
 #define XLAT_STR_39 STRINGIFY(DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN)
 [DEVCONF_DROP_UNICAST_IN_L2_MULTICAST] = XLAT(DEVCONF_DROP_UNICAST_IN_L2_MULTICAST),
 #define XLAT_VAL_40 ((unsigned) (DEVCONF_DROP_UNICAST_IN_L2_MULTICAST))
 #define XLAT_STR_40 STRINGIFY(DEVCONF_DROP_UNICAST_IN_L2_MULTICAST)
 [DEVCONF_DROP_UNSOLICITED_NA] = XLAT(DEVCONF_DROP_UNSOLICITED_NA),
 #define XLAT_VAL_41 ((unsigned) (DEVCONF_DROP_UNSOLICITED_NA))
 #define XLAT_STR_41 STRINGIFY(DEVCONF_DROP_UNSOLICITED_NA)
 [DEVCONF_KEEP_ADDR_ON_DOWN] = XLAT(DEVCONF_KEEP_ADDR_ON_DOWN),
 #define XLAT_VAL_42 ((unsigned) (DEVCONF_KEEP_ADDR_ON_DOWN))
 #define XLAT_STR_42 STRINGIFY(DEVCONF_KEEP_ADDR_ON_DOWN)
 [DEVCONF_RTR_SOLICIT_MAX_INTERVAL] = XLAT(DEVCONF_RTR_SOLICIT_MAX_INTERVAL),
 #define XLAT_VAL_43 ((unsigned) (DEVCONF_RTR_SOLICIT_MAX_INTERVAL))
 #define XLAT_STR_43 STRINGIFY(DEVCONF_RTR_SOLICIT_MAX_INTERVAL)
 [DEVCONF_SEG6_ENABLED] = XLAT(DEVCONF_SEG6_ENABLED),
 #define XLAT_VAL_44 ((unsigned) (DEVCONF_SEG6_ENABLED))
 #define XLAT_STR_44 STRINGIFY(DEVCONF_SEG6_ENABLED)
 [DEVCONF_SEG6_REQUIRE_HMAC] = XLAT(DEVCONF_SEG6_REQUIRE_HMAC),
 #define XLAT_VAL_45 ((unsigned) (DEVCONF_SEG6_REQUIRE_HMAC))
 #define XLAT_STR_45 STRINGIFY(DEVCONF_SEG6_REQUIRE_HMAC)
 [DEVCONF_ENHANCED_DAD] = XLAT(DEVCONF_ENHANCED_DAD),
 #define XLAT_VAL_46 ((unsigned) (DEVCONF_ENHANCED_DAD))
 #define XLAT_STR_46 STRINGIFY(DEVCONF_ENHANCED_DAD)
 [DEVCONF_ADDR_GEN_MODE] = XLAT(DEVCONF_ADDR_GEN_MODE),
 #define XLAT_VAL_47 ((unsigned) (DEVCONF_ADDR_GEN_MODE))
 #define XLAT_STR_47 STRINGIFY(DEVCONF_ADDR_GEN_MODE)
 [DEVCONF_DISABLE_POLICY] = XLAT(DEVCONF_DISABLE_POLICY),
 #define XLAT_VAL_48 ((unsigned) (DEVCONF_DISABLE_POLICY))
 #define XLAT_STR_48 STRINGIFY(DEVCONF_DISABLE_POLICY)
 [DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN] = XLAT(DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN),
 #define XLAT_VAL_49 ((unsigned) (DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN))
 #define XLAT_STR_49 STRINGIFY(DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN)
 [DEVCONF_NDISC_TCLASS] = XLAT(DEVCONF_NDISC_TCLASS),
 #define XLAT_VAL_50 ((unsigned) (DEVCONF_NDISC_TCLASS))
 #define XLAT_STR_50 STRINGIFY(DEVCONF_NDISC_TCLASS)
 [DEVCONF_RPL_SEG_ENABLED] = XLAT(DEVCONF_RPL_SEG_ENABLED),
 #define XLAT_VAL_51 ((unsigned) (DEVCONF_RPL_SEG_ENABLED))
 #define XLAT_STR_51 STRINGIFY(DEVCONF_RPL_SEG_ENABLED)
 [DEVCONF_RA_DEFRTR_METRIC] = XLAT(DEVCONF_RA_DEFRTR_METRIC),
 #define XLAT_VAL_52 ((unsigned) (DEVCONF_RA_DEFRTR_METRIC))
 #define XLAT_STR_52 STRINGIFY(DEVCONF_RA_DEFRTR_METRIC)
 [DEVCONF_IOAM6_ENABLED] = XLAT(DEVCONF_IOAM6_ENABLED),
 #define XLAT_VAL_53 ((unsigned) (DEVCONF_IOAM6_ENABLED))
 #define XLAT_STR_53 STRINGIFY(DEVCONF_IOAM6_ENABLED)
 [DEVCONF_IOAM6_ID] = XLAT(DEVCONF_IOAM6_ID),
 #define XLAT_VAL_54 ((unsigned) (DEVCONF_IOAM6_ID))
 #define XLAT_STR_54 STRINGIFY(DEVCONF_IOAM6_ID)
 [DEVCONF_IOAM6_ID_WIDE] = XLAT(DEVCONF_IOAM6_ID_WIDE),
 #define XLAT_VAL_55 ((unsigned) (DEVCONF_IOAM6_ID_WIDE))
 #define XLAT_STR_55 STRINGIFY(DEVCONF_IOAM6_ID_WIDE)
 [DEVCONF_NDISC_EVICT_NOCARRIER] = XLAT(DEVCONF_NDISC_EVICT_NOCARRIER),
 #define XLAT_VAL_56 ((unsigned) (DEVCONF_NDISC_EVICT_NOCARRIER))
 #define XLAT_STR_56 STRINGIFY(DEVCONF_NDISC_EVICT_NOCARRIER)
 [DEVCONF_ACCEPT_UNTRACKED_NA] = XLAT(DEVCONF_ACCEPT_UNTRACKED_NA),
 #define XLAT_VAL_57 ((unsigned) (DEVCONF_ACCEPT_UNTRACKED_NA))
 #define XLAT_STR_57 STRINGIFY(DEVCONF_ACCEPT_UNTRACKED_NA)
};
static
const struct xlat inet6_devconf_indices[1] = { {
 .data = inet6_devconf_indices_xdata,
 .size = ARRAY_SIZE(inet6_devconf_indices_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
