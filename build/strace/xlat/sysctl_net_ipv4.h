/* Generated by ./src/xlat/gen.sh from ./src/xlat/sysctl_net_ipv4.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NET_IPV4_FORWARD) || (defined(HAVE_DECL_NET_IPV4_FORWARD) && HAVE_DECL_NET_IPV4_FORWARD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_FORWARD) == (8), "NET_IPV4_FORWARD != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_FORWARD 8
#endif
#if defined(NET_IPV4_DYNADDR) || (defined(HAVE_DECL_NET_IPV4_DYNADDR) && HAVE_DECL_NET_IPV4_DYNADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_DYNADDR) == (9), "NET_IPV4_DYNADDR != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_DYNADDR 9
#endif
#if defined(NET_IPV4_CONF) || (defined(HAVE_DECL_NET_IPV4_CONF) && HAVE_DECL_NET_IPV4_CONF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_CONF) == (16), "NET_IPV4_CONF != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_CONF 16
#endif
#if defined(NET_IPV4_NEIGH) || (defined(HAVE_DECL_NET_IPV4_NEIGH) && HAVE_DECL_NET_IPV4_NEIGH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_NEIGH) == (17), "NET_IPV4_NEIGH != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_NEIGH 17
#endif
#if defined(NET_IPV4_ROUTE) || (defined(HAVE_DECL_NET_IPV4_ROUTE) && HAVE_DECL_NET_IPV4_ROUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ROUTE) == (18), "NET_IPV4_ROUTE != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ROUTE 18
#endif
#if defined(NET_IPV4_FIB_HASH) || (defined(HAVE_DECL_NET_IPV4_FIB_HASH) && HAVE_DECL_NET_IPV4_FIB_HASH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_FIB_HASH) == (19), "NET_IPV4_FIB_HASH != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_FIB_HASH 19
#endif
#if defined(NET_IPV4_NETFILTER) || (defined(HAVE_DECL_NET_IPV4_NETFILTER) && HAVE_DECL_NET_IPV4_NETFILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_NETFILTER) == (20), "NET_IPV4_NETFILTER != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_NETFILTER 20
#endif
#if defined(NET_IPV4_TCP_TIMESTAMPS) || (defined(HAVE_DECL_NET_IPV4_TCP_TIMESTAMPS) && HAVE_DECL_NET_IPV4_TCP_TIMESTAMPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_TIMESTAMPS) == (33), "NET_IPV4_TCP_TIMESTAMPS != 33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_TIMESTAMPS 33
#endif
#if defined(NET_IPV4_TCP_WINDOW_SCALING) || (defined(HAVE_DECL_NET_IPV4_TCP_WINDOW_SCALING) && HAVE_DECL_NET_IPV4_TCP_WINDOW_SCALING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_WINDOW_SCALING) == (34), "NET_IPV4_TCP_WINDOW_SCALING != 34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_WINDOW_SCALING 34
#endif
#if defined(NET_IPV4_TCP_SACK) || (defined(HAVE_DECL_NET_IPV4_TCP_SACK) && HAVE_DECL_NET_IPV4_TCP_SACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_SACK) == (35), "NET_IPV4_TCP_SACK != 35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_SACK 35
#endif
#if defined(NET_IPV4_TCP_RETRANS_COLLAPSE) || (defined(HAVE_DECL_NET_IPV4_TCP_RETRANS_COLLAPSE) && HAVE_DECL_NET_IPV4_TCP_RETRANS_COLLAPSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_RETRANS_COLLAPSE) == (36), "NET_IPV4_TCP_RETRANS_COLLAPSE != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_RETRANS_COLLAPSE 36
#endif
#if defined(NET_IPV4_DEFAULT_TTL) || (defined(HAVE_DECL_NET_IPV4_DEFAULT_TTL) && HAVE_DECL_NET_IPV4_DEFAULT_TTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_DEFAULT_TTL) == (37), "NET_IPV4_DEFAULT_TTL != 37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_DEFAULT_TTL 37
#endif
#if defined(NET_IPV4_AUTOCONFIG) || (defined(HAVE_DECL_NET_IPV4_AUTOCONFIG) && HAVE_DECL_NET_IPV4_AUTOCONFIG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_AUTOCONFIG) == (38), "NET_IPV4_AUTOCONFIG != 38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_AUTOCONFIG 38
#endif
#if defined(NET_IPV4_NO_PMTU_DISC) || (defined(HAVE_DECL_NET_IPV4_NO_PMTU_DISC) && HAVE_DECL_NET_IPV4_NO_PMTU_DISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_NO_PMTU_DISC) == (39), "NET_IPV4_NO_PMTU_DISC != 39");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_NO_PMTU_DISC 39
#endif
#if defined(NET_IPV4_TCP_SYN_RETRIES) || (defined(HAVE_DECL_NET_IPV4_TCP_SYN_RETRIES) && HAVE_DECL_NET_IPV4_TCP_SYN_RETRIES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_SYN_RETRIES) == (40), "NET_IPV4_TCP_SYN_RETRIES != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_SYN_RETRIES 40
#endif
#if defined(NET_IPV4_IPFRAG_HIGH_THRESH) || (defined(HAVE_DECL_NET_IPV4_IPFRAG_HIGH_THRESH) && HAVE_DECL_NET_IPV4_IPFRAG_HIGH_THRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_IPFRAG_HIGH_THRESH) == (41), "NET_IPV4_IPFRAG_HIGH_THRESH != 41");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_IPFRAG_HIGH_THRESH 41
#endif
#if defined(NET_IPV4_IPFRAG_LOW_THRESH) || (defined(HAVE_DECL_NET_IPV4_IPFRAG_LOW_THRESH) && HAVE_DECL_NET_IPV4_IPFRAG_LOW_THRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_IPFRAG_LOW_THRESH) == (42), "NET_IPV4_IPFRAG_LOW_THRESH != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_IPFRAG_LOW_THRESH 42
#endif
#if defined(NET_IPV4_IPFRAG_TIME) || (defined(HAVE_DECL_NET_IPV4_IPFRAG_TIME) && HAVE_DECL_NET_IPV4_IPFRAG_TIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_IPFRAG_TIME) == (43), "NET_IPV4_IPFRAG_TIME != 43");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_IPFRAG_TIME 43
#endif
#if defined(NET_IPV4_TCP_MAX_KA_PROBES) || (defined(HAVE_DECL_NET_IPV4_TCP_MAX_KA_PROBES) && HAVE_DECL_NET_IPV4_TCP_MAX_KA_PROBES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_MAX_KA_PROBES) == (44), "NET_IPV4_TCP_MAX_KA_PROBES != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_MAX_KA_PROBES 44
#endif
#if defined(NET_IPV4_TCP_KEEPALIVE_TIME) || (defined(HAVE_DECL_NET_IPV4_TCP_KEEPALIVE_TIME) && HAVE_DECL_NET_IPV4_TCP_KEEPALIVE_TIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_KEEPALIVE_TIME) == (45), "NET_IPV4_TCP_KEEPALIVE_TIME != 45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_KEEPALIVE_TIME 45
#endif
#if defined(NET_IPV4_TCP_KEEPALIVE_PROBES) || (defined(HAVE_DECL_NET_IPV4_TCP_KEEPALIVE_PROBES) && HAVE_DECL_NET_IPV4_TCP_KEEPALIVE_PROBES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_KEEPALIVE_PROBES) == (46), "NET_IPV4_TCP_KEEPALIVE_PROBES != 46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_KEEPALIVE_PROBES 46
#endif
#if defined(NET_IPV4_TCP_RETRIES1) || (defined(HAVE_DECL_NET_IPV4_TCP_RETRIES1) && HAVE_DECL_NET_IPV4_TCP_RETRIES1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_RETRIES1) == (47), "NET_IPV4_TCP_RETRIES1 != 47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_RETRIES1 47
#endif
#if defined(NET_IPV4_TCP_RETRIES2) || (defined(HAVE_DECL_NET_IPV4_TCP_RETRIES2) && HAVE_DECL_NET_IPV4_TCP_RETRIES2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_RETRIES2) == (48), "NET_IPV4_TCP_RETRIES2 != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_RETRIES2 48
#endif
#if defined(NET_IPV4_TCP_FIN_TIMEOUT) || (defined(HAVE_DECL_NET_IPV4_TCP_FIN_TIMEOUT) && HAVE_DECL_NET_IPV4_TCP_FIN_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_FIN_TIMEOUT) == (49), "NET_IPV4_TCP_FIN_TIMEOUT != 49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_FIN_TIMEOUT 49
#endif
#if defined(NET_IPV4_IP_MASQ_DEBUG) || (defined(HAVE_DECL_NET_IPV4_IP_MASQ_DEBUG) && HAVE_DECL_NET_IPV4_IP_MASQ_DEBUG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_IP_MASQ_DEBUG) == (50), "NET_IPV4_IP_MASQ_DEBUG != 50");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_IP_MASQ_DEBUG 50
#endif
#if defined(NET_TCP_SYNCOOKIES) || (defined(HAVE_DECL_NET_TCP_SYNCOOKIES) && HAVE_DECL_NET_TCP_SYNCOOKIES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_SYNCOOKIES) == (51), "NET_TCP_SYNCOOKIES != 51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_SYNCOOKIES 51
#endif
#if defined(NET_TCP_STDURG) || (defined(HAVE_DECL_NET_TCP_STDURG) && HAVE_DECL_NET_TCP_STDURG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_STDURG) == (52), "NET_TCP_STDURG != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_STDURG 52
#endif
#if defined(NET_TCP_RFC1337) || (defined(HAVE_DECL_NET_TCP_RFC1337) && HAVE_DECL_NET_TCP_RFC1337)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_RFC1337) == (53), "NET_TCP_RFC1337 != 53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_RFC1337 53
#endif
#if defined(NET_TCP_SYN_TAILDROP) || (defined(HAVE_DECL_NET_TCP_SYN_TAILDROP) && HAVE_DECL_NET_TCP_SYN_TAILDROP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_SYN_TAILDROP) == (54), "NET_TCP_SYN_TAILDROP != 54");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_SYN_TAILDROP 54
#endif
#if defined(NET_TCP_MAX_SYN_BACKLOG) || (defined(HAVE_DECL_NET_TCP_MAX_SYN_BACKLOG) && HAVE_DECL_NET_TCP_MAX_SYN_BACKLOG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_MAX_SYN_BACKLOG) == (55), "NET_TCP_MAX_SYN_BACKLOG != 55");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_MAX_SYN_BACKLOG 55
#endif
#if defined(NET_IPV4_LOCAL_PORT_RANGE) || (defined(HAVE_DECL_NET_IPV4_LOCAL_PORT_RANGE) && HAVE_DECL_NET_IPV4_LOCAL_PORT_RANGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_LOCAL_PORT_RANGE) == (56), "NET_IPV4_LOCAL_PORT_RANGE != 56");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_LOCAL_PORT_RANGE 56
#endif
#if defined(NET_IPV4_ICMP_ECHO_IGNORE_ALL) || (defined(HAVE_DECL_NET_IPV4_ICMP_ECHO_IGNORE_ALL) && HAVE_DECL_NET_IPV4_ICMP_ECHO_IGNORE_ALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_ECHO_IGNORE_ALL) == (57), "NET_IPV4_ICMP_ECHO_IGNORE_ALL != 57");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_ECHO_IGNORE_ALL 57
#endif
#if defined(NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS) || (defined(HAVE_DECL_NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS) && HAVE_DECL_NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS) == (58), "NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS != 58");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS 58
#endif
#if defined(NET_IPV4_ICMP_SOURCEQUENCH_RATE) || (defined(HAVE_DECL_NET_IPV4_ICMP_SOURCEQUENCH_RATE) && HAVE_DECL_NET_IPV4_ICMP_SOURCEQUENCH_RATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_SOURCEQUENCH_RATE) == (59), "NET_IPV4_ICMP_SOURCEQUENCH_RATE != 59");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_SOURCEQUENCH_RATE 59
#endif
#if defined(NET_IPV4_ICMP_DESTUNREACH_RATE) || (defined(HAVE_DECL_NET_IPV4_ICMP_DESTUNREACH_RATE) && HAVE_DECL_NET_IPV4_ICMP_DESTUNREACH_RATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_DESTUNREACH_RATE) == (60), "NET_IPV4_ICMP_DESTUNREACH_RATE != 60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_DESTUNREACH_RATE 60
#endif
#if defined(NET_IPV4_ICMP_TIMEEXCEED_RATE) || (defined(HAVE_DECL_NET_IPV4_ICMP_TIMEEXCEED_RATE) && HAVE_DECL_NET_IPV4_ICMP_TIMEEXCEED_RATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_TIMEEXCEED_RATE) == (61), "NET_IPV4_ICMP_TIMEEXCEED_RATE != 61");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_TIMEEXCEED_RATE 61
#endif
#if defined(NET_IPV4_ICMP_PARAMPROB_RATE) || (defined(HAVE_DECL_NET_IPV4_ICMP_PARAMPROB_RATE) && HAVE_DECL_NET_IPV4_ICMP_PARAMPROB_RATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_PARAMPROB_RATE) == (62), "NET_IPV4_ICMP_PARAMPROB_RATE != 62");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_PARAMPROB_RATE 62
#endif
#if defined(NET_IPV4_ICMP_ECHOREPLY_RATE) || (defined(HAVE_DECL_NET_IPV4_ICMP_ECHOREPLY_RATE) && HAVE_DECL_NET_IPV4_ICMP_ECHOREPLY_RATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_ECHOREPLY_RATE) == (63), "NET_IPV4_ICMP_ECHOREPLY_RATE != 63");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_ECHOREPLY_RATE 63
#endif
#if defined(NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES) || (defined(HAVE_DECL_NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES) && HAVE_DECL_NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES) == (64), "NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES != 64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES 64
#endif
#if defined(NET_IPV4_IGMP_MAX_MEMBERSHIPS) || (defined(HAVE_DECL_NET_IPV4_IGMP_MAX_MEMBERSHIPS) && HAVE_DECL_NET_IPV4_IGMP_MAX_MEMBERSHIPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_IGMP_MAX_MEMBERSHIPS) == (65), "NET_IPV4_IGMP_MAX_MEMBERSHIPS != 65");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_IGMP_MAX_MEMBERSHIPS 65
#endif
#if defined(NET_TCP_TW_RECYCLE) || (defined(HAVE_DECL_NET_TCP_TW_RECYCLE) && HAVE_DECL_NET_TCP_TW_RECYCLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_TW_RECYCLE) == (66), "NET_TCP_TW_RECYCLE != 66");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_TW_RECYCLE 66
#endif
#if defined(NET_IPV4_ALWAYS_DEFRAG) || (defined(HAVE_DECL_NET_IPV4_ALWAYS_DEFRAG) && HAVE_DECL_NET_IPV4_ALWAYS_DEFRAG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ALWAYS_DEFRAG) == (67), "NET_IPV4_ALWAYS_DEFRAG != 67");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ALWAYS_DEFRAG 67
#endif
#if defined(NET_IPV4_TCP_KEEPALIVE_INTVL) || (defined(HAVE_DECL_NET_IPV4_TCP_KEEPALIVE_INTVL) && HAVE_DECL_NET_IPV4_TCP_KEEPALIVE_INTVL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_KEEPALIVE_INTVL) == (68), "NET_IPV4_TCP_KEEPALIVE_INTVL != 68");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_KEEPALIVE_INTVL 68
#endif
#if defined(NET_IPV4_INET_PEER_THRESHOLD) || (defined(HAVE_DECL_NET_IPV4_INET_PEER_THRESHOLD) && HAVE_DECL_NET_IPV4_INET_PEER_THRESHOLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_INET_PEER_THRESHOLD) == (69), "NET_IPV4_INET_PEER_THRESHOLD != 69");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_INET_PEER_THRESHOLD 69
#endif
#if defined(NET_IPV4_INET_PEER_MINTTL) || (defined(HAVE_DECL_NET_IPV4_INET_PEER_MINTTL) && HAVE_DECL_NET_IPV4_INET_PEER_MINTTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_INET_PEER_MINTTL) == (70), "NET_IPV4_INET_PEER_MINTTL != 70");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_INET_PEER_MINTTL 70
#endif
#if defined(NET_IPV4_INET_PEER_MAXTTL) || (defined(HAVE_DECL_NET_IPV4_INET_PEER_MAXTTL) && HAVE_DECL_NET_IPV4_INET_PEER_MAXTTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_INET_PEER_MAXTTL) == (71), "NET_IPV4_INET_PEER_MAXTTL != 71");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_INET_PEER_MAXTTL 71
#endif
#if defined(NET_IPV4_INET_PEER_GC_MINTIME) || (defined(HAVE_DECL_NET_IPV4_INET_PEER_GC_MINTIME) && HAVE_DECL_NET_IPV4_INET_PEER_GC_MINTIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_INET_PEER_GC_MINTIME) == (72), "NET_IPV4_INET_PEER_GC_MINTIME != 72");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_INET_PEER_GC_MINTIME 72
#endif
#if defined(NET_IPV4_INET_PEER_GC_MAXTIME) || (defined(HAVE_DECL_NET_IPV4_INET_PEER_GC_MAXTIME) && HAVE_DECL_NET_IPV4_INET_PEER_GC_MAXTIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_INET_PEER_GC_MAXTIME) == (73), "NET_IPV4_INET_PEER_GC_MAXTIME != 73");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_INET_PEER_GC_MAXTIME 73
#endif
#if defined(NET_TCP_ORPHAN_RETRIES) || (defined(HAVE_DECL_NET_TCP_ORPHAN_RETRIES) && HAVE_DECL_NET_TCP_ORPHAN_RETRIES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_ORPHAN_RETRIES) == (74), "NET_TCP_ORPHAN_RETRIES != 74");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_ORPHAN_RETRIES 74
#endif
#if defined(NET_TCP_ABORT_ON_OVERFLOW) || (defined(HAVE_DECL_NET_TCP_ABORT_ON_OVERFLOW) && HAVE_DECL_NET_TCP_ABORT_ON_OVERFLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_ABORT_ON_OVERFLOW) == (75), "NET_TCP_ABORT_ON_OVERFLOW != 75");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_ABORT_ON_OVERFLOW 75
#endif
#if defined(NET_TCP_SYNACK_RETRIES) || (defined(HAVE_DECL_NET_TCP_SYNACK_RETRIES) && HAVE_DECL_NET_TCP_SYNACK_RETRIES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_SYNACK_RETRIES) == (76), "NET_TCP_SYNACK_RETRIES != 76");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_SYNACK_RETRIES 76
#endif
#if defined(NET_TCP_MAX_ORPHANS) || (defined(HAVE_DECL_NET_TCP_MAX_ORPHANS) && HAVE_DECL_NET_TCP_MAX_ORPHANS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_MAX_ORPHANS) == (77), "NET_TCP_MAX_ORPHANS != 77");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_MAX_ORPHANS 77
#endif
#if defined(NET_TCP_MAX_TW_BUCKETS) || (defined(HAVE_DECL_NET_TCP_MAX_TW_BUCKETS) && HAVE_DECL_NET_TCP_MAX_TW_BUCKETS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_MAX_TW_BUCKETS) == (78), "NET_TCP_MAX_TW_BUCKETS != 78");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_MAX_TW_BUCKETS 78
#endif
#if defined(NET_TCP_FACK) || (defined(HAVE_DECL_NET_TCP_FACK) && HAVE_DECL_NET_TCP_FACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_FACK) == (79), "NET_TCP_FACK != 79");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_FACK 79
#endif
#if defined(NET_TCP_REORDERING) || (defined(HAVE_DECL_NET_TCP_REORDERING) && HAVE_DECL_NET_TCP_REORDERING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_REORDERING) == (80), "NET_TCP_REORDERING != 80");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_REORDERING 80
#endif
#if defined(NET_TCP_ECN) || (defined(HAVE_DECL_NET_TCP_ECN) && HAVE_DECL_NET_TCP_ECN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_ECN) == (81), "NET_TCP_ECN != 81");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_ECN 81
#endif
#if defined(NET_TCP_DSACK) || (defined(HAVE_DECL_NET_TCP_DSACK) && HAVE_DECL_NET_TCP_DSACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_DSACK) == (82), "NET_TCP_DSACK != 82");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_DSACK 82
#endif
#if defined(NET_TCP_MEM) || (defined(HAVE_DECL_NET_TCP_MEM) && HAVE_DECL_NET_TCP_MEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_MEM) == (83), "NET_TCP_MEM != 83");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_MEM 83
#endif
#if defined(NET_TCP_WMEM) || (defined(HAVE_DECL_NET_TCP_WMEM) && HAVE_DECL_NET_TCP_WMEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_WMEM) == (84), "NET_TCP_WMEM != 84");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_WMEM 84
#endif
#if defined(NET_TCP_RMEM) || (defined(HAVE_DECL_NET_TCP_RMEM) && HAVE_DECL_NET_TCP_RMEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_RMEM) == (85), "NET_TCP_RMEM != 85");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_RMEM 85
#endif
#if defined(NET_TCP_APP_WIN) || (defined(HAVE_DECL_NET_TCP_APP_WIN) && HAVE_DECL_NET_TCP_APP_WIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_APP_WIN) == (86), "NET_TCP_APP_WIN != 86");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_APP_WIN 86
#endif
#if defined(NET_TCP_ADV_WIN_SCALE) || (defined(HAVE_DECL_NET_TCP_ADV_WIN_SCALE) && HAVE_DECL_NET_TCP_ADV_WIN_SCALE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_ADV_WIN_SCALE) == (87), "NET_TCP_ADV_WIN_SCALE != 87");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_ADV_WIN_SCALE 87
#endif
#if defined(NET_IPV4_NONLOCAL_BIND) || (defined(HAVE_DECL_NET_IPV4_NONLOCAL_BIND) && HAVE_DECL_NET_IPV4_NONLOCAL_BIND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_NONLOCAL_BIND) == (88), "NET_IPV4_NONLOCAL_BIND != 88");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_NONLOCAL_BIND 88
#endif
#if defined(NET_IPV4_ICMP_RATELIMIT) || (defined(HAVE_DECL_NET_IPV4_ICMP_RATELIMIT) && HAVE_DECL_NET_IPV4_ICMP_RATELIMIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_RATELIMIT) == (89), "NET_IPV4_ICMP_RATELIMIT != 89");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_RATELIMIT 89
#endif
#if defined(NET_IPV4_ICMP_RATEMASK) || (defined(HAVE_DECL_NET_IPV4_ICMP_RATEMASK) && HAVE_DECL_NET_IPV4_ICMP_RATEMASK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_RATEMASK) == (90), "NET_IPV4_ICMP_RATEMASK != 90");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_RATEMASK 90
#endif
#if defined(NET_TCP_TW_REUSE) || (defined(HAVE_DECL_NET_TCP_TW_REUSE) && HAVE_DECL_NET_TCP_TW_REUSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_TW_REUSE) == (91), "NET_TCP_TW_REUSE != 91");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_TW_REUSE 91
#endif
#if defined(NET_TCP_FRTO) || (defined(HAVE_DECL_NET_TCP_FRTO) && HAVE_DECL_NET_TCP_FRTO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_FRTO) == (92), "NET_TCP_FRTO != 92");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_FRTO 92
#endif
#if defined(NET_TCP_LOW_LATENCY) || (defined(HAVE_DECL_NET_TCP_LOW_LATENCY) && HAVE_DECL_NET_TCP_LOW_LATENCY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_LOW_LATENCY) == (93), "NET_TCP_LOW_LATENCY != 93");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_LOW_LATENCY 93
#endif
#if defined(NET_IPV4_IPFRAG_SECRET_INTERVAL) || (defined(HAVE_DECL_NET_IPV4_IPFRAG_SECRET_INTERVAL) && HAVE_DECL_NET_IPV4_IPFRAG_SECRET_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_IPFRAG_SECRET_INTERVAL) == (94), "NET_IPV4_IPFRAG_SECRET_INTERVAL != 94");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_IPFRAG_SECRET_INTERVAL 94
#endif
#if defined(NET_TCP_WESTWOOD) || (defined(HAVE_DECL_NET_TCP_WESTWOOD) && HAVE_DECL_NET_TCP_WESTWOOD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_WESTWOOD) == (95), "NET_TCP_WESTWOOD != 95");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_WESTWOOD 95
#endif
#if defined(NET_IPV4_IGMP_MAX_MSF) || (defined(HAVE_DECL_NET_IPV4_IGMP_MAX_MSF) && HAVE_DECL_NET_IPV4_IGMP_MAX_MSF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_IGMP_MAX_MSF) == (96), "NET_IPV4_IGMP_MAX_MSF != 96");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_IGMP_MAX_MSF 96
#endif
#if defined(NET_TCP_NO_METRICS_SAVE) || (defined(HAVE_DECL_NET_TCP_NO_METRICS_SAVE) && HAVE_DECL_NET_TCP_NO_METRICS_SAVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_NO_METRICS_SAVE) == (97), "NET_TCP_NO_METRICS_SAVE != 97");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_NO_METRICS_SAVE 97
#endif
#if defined(NET_TCP_VEGAS) || (defined(HAVE_DECL_NET_TCP_VEGAS) && HAVE_DECL_NET_TCP_VEGAS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_VEGAS) == (98), "NET_TCP_VEGAS != 98");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_VEGAS 98
#endif
#if defined(NET_TCP_VEGAS_ALPHA) || (defined(HAVE_DECL_NET_TCP_VEGAS_ALPHA) && HAVE_DECL_NET_TCP_VEGAS_ALPHA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_VEGAS_ALPHA) == (99), "NET_TCP_VEGAS_ALPHA != 99");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_VEGAS_ALPHA 99
#endif
#if defined(NET_TCP_VEGAS_BETA) || (defined(HAVE_DECL_NET_TCP_VEGAS_BETA) && HAVE_DECL_NET_TCP_VEGAS_BETA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_VEGAS_BETA) == (100), "NET_TCP_VEGAS_BETA != 100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_VEGAS_BETA 100
#endif
#if defined(NET_TCP_VEGAS_GAMMA) || (defined(HAVE_DECL_NET_TCP_VEGAS_GAMMA) && HAVE_DECL_NET_TCP_VEGAS_GAMMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_VEGAS_GAMMA) == (101), "NET_TCP_VEGAS_GAMMA != 101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_VEGAS_GAMMA 101
#endif
#if defined(NET_TCP_BIC) || (defined(HAVE_DECL_NET_TCP_BIC) && HAVE_DECL_NET_TCP_BIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_BIC) == (102), "NET_TCP_BIC != 102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_BIC 102
#endif
#if defined(NET_TCP_BIC_FAST_CONVERGENCE) || (defined(HAVE_DECL_NET_TCP_BIC_FAST_CONVERGENCE) && HAVE_DECL_NET_TCP_BIC_FAST_CONVERGENCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_BIC_FAST_CONVERGENCE) == (103), "NET_TCP_BIC_FAST_CONVERGENCE != 103");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_BIC_FAST_CONVERGENCE 103
#endif
#if defined(NET_TCP_BIC_LOW_WINDOW) || (defined(HAVE_DECL_NET_TCP_BIC_LOW_WINDOW) && HAVE_DECL_NET_TCP_BIC_LOW_WINDOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_BIC_LOW_WINDOW) == (104), "NET_TCP_BIC_LOW_WINDOW != 104");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_BIC_LOW_WINDOW 104
#endif
#if defined(NET_TCP_DEFAULT_WIN_SCALE) || (defined(HAVE_DECL_NET_TCP_DEFAULT_WIN_SCALE) && HAVE_DECL_NET_TCP_DEFAULT_WIN_SCALE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_DEFAULT_WIN_SCALE) == (105), "NET_TCP_DEFAULT_WIN_SCALE != 105");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_DEFAULT_WIN_SCALE 105
#endif
#if defined(NET_TCP_MODERATE_RCVBUF) || (defined(HAVE_DECL_NET_TCP_MODERATE_RCVBUF) && HAVE_DECL_NET_TCP_MODERATE_RCVBUF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_MODERATE_RCVBUF) == (106), "NET_TCP_MODERATE_RCVBUF != 106");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_MODERATE_RCVBUF 106
#endif
#if defined(NET_TCP_TSO_WIN_DIVISOR) || (defined(HAVE_DECL_NET_TCP_TSO_WIN_DIVISOR) && HAVE_DECL_NET_TCP_TSO_WIN_DIVISOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_TSO_WIN_DIVISOR) == (107), "NET_TCP_TSO_WIN_DIVISOR != 107");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_TSO_WIN_DIVISOR 107
#endif
#if defined(NET_TCP_BIC_BETA) || (defined(HAVE_DECL_NET_TCP_BIC_BETA) && HAVE_DECL_NET_TCP_BIC_BETA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_BIC_BETA) == (108), "NET_TCP_BIC_BETA != 108");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_BIC_BETA 108
#endif
#if defined(NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR) || (defined(HAVE_DECL_NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR) && HAVE_DECL_NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR) == (109), "NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR != 109");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR 109
#endif
#if defined(NET_TCP_CONG_CONTROL) || (defined(HAVE_DECL_NET_TCP_CONG_CONTROL) && HAVE_DECL_NET_TCP_CONG_CONTROL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_CONG_CONTROL) == (110), "NET_TCP_CONG_CONTROL != 110");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_CONG_CONTROL 110
#endif
#if defined(NET_TCP_ABC) || (defined(HAVE_DECL_NET_TCP_ABC) && HAVE_DECL_NET_TCP_ABC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_ABC) == (111), "NET_TCP_ABC != 111");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_ABC 111
#endif
#if defined(NET_IPV4_IPFRAG_MAX_DIST) || (defined(HAVE_DECL_NET_IPV4_IPFRAG_MAX_DIST) && HAVE_DECL_NET_IPV4_IPFRAG_MAX_DIST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_IPFRAG_MAX_DIST) == (112), "NET_IPV4_IPFRAG_MAX_DIST != 112");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_IPFRAG_MAX_DIST 112
#endif
#if defined(NET_TCP_MTU_PROBING) || (defined(HAVE_DECL_NET_TCP_MTU_PROBING) && HAVE_DECL_NET_TCP_MTU_PROBING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_MTU_PROBING) == (113), "NET_TCP_MTU_PROBING != 113");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_MTU_PROBING 113
#endif
#if defined(NET_TCP_BASE_MSS) || (defined(HAVE_DECL_NET_TCP_BASE_MSS) && HAVE_DECL_NET_TCP_BASE_MSS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_BASE_MSS) == (114), "NET_TCP_BASE_MSS != 114");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_BASE_MSS 114
#endif
#if defined(NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS) || (defined(HAVE_DECL_NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS) && HAVE_DECL_NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS) == (115), "NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS != 115");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS 115
#endif
#if defined(NET_TCP_DMA_COPYBREAK) || (defined(HAVE_DECL_NET_TCP_DMA_COPYBREAK) && HAVE_DECL_NET_TCP_DMA_COPYBREAK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_DMA_COPYBREAK) == (116), "NET_TCP_DMA_COPYBREAK != 116");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_DMA_COPYBREAK 116
#endif
#if defined(NET_TCP_SLOW_START_AFTER_IDLE) || (defined(HAVE_DECL_NET_TCP_SLOW_START_AFTER_IDLE) && HAVE_DECL_NET_TCP_SLOW_START_AFTER_IDLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_SLOW_START_AFTER_IDLE) == (117), "NET_TCP_SLOW_START_AFTER_IDLE != 117");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_SLOW_START_AFTER_IDLE 117
#endif
#if defined(NET_CIPSOV4_CACHE_ENABLE) || (defined(HAVE_DECL_NET_CIPSOV4_CACHE_ENABLE) && HAVE_DECL_NET_CIPSOV4_CACHE_ENABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CIPSOV4_CACHE_ENABLE) == (118), "NET_CIPSOV4_CACHE_ENABLE != 118");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CIPSOV4_CACHE_ENABLE 118
#endif
#if defined(NET_CIPSOV4_CACHE_BUCKET_SIZE) || (defined(HAVE_DECL_NET_CIPSOV4_CACHE_BUCKET_SIZE) && HAVE_DECL_NET_CIPSOV4_CACHE_BUCKET_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CIPSOV4_CACHE_BUCKET_SIZE) == (119), "NET_CIPSOV4_CACHE_BUCKET_SIZE != 119");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CIPSOV4_CACHE_BUCKET_SIZE 119
#endif
#if defined(NET_CIPSOV4_RBM_OPTFMT) || (defined(HAVE_DECL_NET_CIPSOV4_RBM_OPTFMT) && HAVE_DECL_NET_CIPSOV4_RBM_OPTFMT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CIPSOV4_RBM_OPTFMT) == (120), "NET_CIPSOV4_RBM_OPTFMT != 120");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CIPSOV4_RBM_OPTFMT 120
#endif
#if defined(NET_CIPSOV4_RBM_STRICTVALID) || (defined(HAVE_DECL_NET_CIPSOV4_RBM_STRICTVALID) && HAVE_DECL_NET_CIPSOV4_RBM_STRICTVALID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CIPSOV4_RBM_STRICTVALID) == (121), "NET_CIPSOV4_RBM_STRICTVALID != 121");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CIPSOV4_RBM_STRICTVALID 121
#endif
#if defined(NET_TCP_AVAIL_CONG_CONTROL) || (defined(HAVE_DECL_NET_TCP_AVAIL_CONG_CONTROL) && HAVE_DECL_NET_TCP_AVAIL_CONG_CONTROL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_AVAIL_CONG_CONTROL) == (122), "NET_TCP_AVAIL_CONG_CONTROL != 122");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_AVAIL_CONG_CONTROL 122
#endif
#if defined(NET_TCP_ALLOWED_CONG_CONTROL) || (defined(HAVE_DECL_NET_TCP_ALLOWED_CONG_CONTROL) && HAVE_DECL_NET_TCP_ALLOWED_CONG_CONTROL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_ALLOWED_CONG_CONTROL) == (123), "NET_TCP_ALLOWED_CONG_CONTROL != 123");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_ALLOWED_CONG_CONTROL 123
#endif
#if defined(NET_TCP_MAX_SSTHRESH) || (defined(HAVE_DECL_NET_TCP_MAX_SSTHRESH) && HAVE_DECL_NET_TCP_MAX_SSTHRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_MAX_SSTHRESH) == (124), "NET_TCP_MAX_SSTHRESH != 124");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_MAX_SSTHRESH 124
#endif
#if defined(NET_TCP_FRTO_RESPONSE) || (defined(HAVE_DECL_NET_TCP_FRTO_RESPONSE) && HAVE_DECL_NET_TCP_FRTO_RESPONSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TCP_FRTO_RESPONSE) == (125), "NET_TCP_FRTO_RESPONSE != 125");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TCP_FRTO_RESPONSE 125
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sysctl_net_ipv4 in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sysctl_net_ipv4_xdata[] = {
















 [NET_IPV4_FORWARD] = XLAT(NET_IPV4_FORWARD),
 #define XLAT_VAL_0 ((unsigned) (NET_IPV4_FORWARD))
 #define XLAT_STR_0 STRINGIFY(NET_IPV4_FORWARD)

 [NET_IPV4_DYNADDR] = XLAT(NET_IPV4_DYNADDR),
 #define XLAT_VAL_1 ((unsigned) (NET_IPV4_DYNADDR))
 #define XLAT_STR_1 STRINGIFY(NET_IPV4_DYNADDR)


 [NET_IPV4_CONF] = XLAT(NET_IPV4_CONF),
 #define XLAT_VAL_2 ((unsigned) (NET_IPV4_CONF))
 #define XLAT_STR_2 STRINGIFY(NET_IPV4_CONF)

 [NET_IPV4_NEIGH] = XLAT(NET_IPV4_NEIGH),
 #define XLAT_VAL_3 ((unsigned) (NET_IPV4_NEIGH))
 #define XLAT_STR_3 STRINGIFY(NET_IPV4_NEIGH)

 [NET_IPV4_ROUTE] = XLAT(NET_IPV4_ROUTE),
 #define XLAT_VAL_4 ((unsigned) (NET_IPV4_ROUTE))
 #define XLAT_STR_4 STRINGIFY(NET_IPV4_ROUTE)
 [NET_IPV4_FIB_HASH] = XLAT(NET_IPV4_FIB_HASH),
 #define XLAT_VAL_5 ((unsigned) (NET_IPV4_FIB_HASH))
 #define XLAT_STR_5 STRINGIFY(NET_IPV4_FIB_HASH)
 [NET_IPV4_NETFILTER] = XLAT(NET_IPV4_NETFILTER),
 #define XLAT_VAL_6 ((unsigned) (NET_IPV4_NETFILTER))
 #define XLAT_STR_6 STRINGIFY(NET_IPV4_NETFILTER)






 [NET_IPV4_TCP_TIMESTAMPS] = XLAT(NET_IPV4_TCP_TIMESTAMPS),
 #define XLAT_VAL_7 ((unsigned) (NET_IPV4_TCP_TIMESTAMPS))
 #define XLAT_STR_7 STRINGIFY(NET_IPV4_TCP_TIMESTAMPS)

 [NET_IPV4_TCP_WINDOW_SCALING] = XLAT(NET_IPV4_TCP_WINDOW_SCALING),
 #define XLAT_VAL_8 ((unsigned) (NET_IPV4_TCP_WINDOW_SCALING))
 #define XLAT_STR_8 STRINGIFY(NET_IPV4_TCP_WINDOW_SCALING)

 [NET_IPV4_TCP_SACK] = XLAT(NET_IPV4_TCP_SACK),
 #define XLAT_VAL_9 ((unsigned) (NET_IPV4_TCP_SACK))
 #define XLAT_STR_9 STRINGIFY(NET_IPV4_TCP_SACK)

 [NET_IPV4_TCP_RETRANS_COLLAPSE] = XLAT(NET_IPV4_TCP_RETRANS_COLLAPSE),
 #define XLAT_VAL_10 ((unsigned) (NET_IPV4_TCP_RETRANS_COLLAPSE))
 #define XLAT_STR_10 STRINGIFY(NET_IPV4_TCP_RETRANS_COLLAPSE)



 [NET_IPV4_DEFAULT_TTL] = XLAT(NET_IPV4_DEFAULT_TTL),
 #define XLAT_VAL_11 ((unsigned) (NET_IPV4_DEFAULT_TTL))
 #define XLAT_STR_11 STRINGIFY(NET_IPV4_DEFAULT_TTL)













 [NET_IPV4_AUTOCONFIG] = XLAT(NET_IPV4_AUTOCONFIG),
 #define XLAT_VAL_12 ((unsigned) (NET_IPV4_AUTOCONFIG))
 #define XLAT_STR_12 STRINGIFY(NET_IPV4_AUTOCONFIG)







 [NET_IPV4_NO_PMTU_DISC] = XLAT(NET_IPV4_NO_PMTU_DISC),
 #define XLAT_VAL_13 ((unsigned) (NET_IPV4_NO_PMTU_DISC))
 #define XLAT_STR_13 STRINGIFY(NET_IPV4_NO_PMTU_DISC)









 [NET_IPV4_TCP_SYN_RETRIES] = XLAT(NET_IPV4_TCP_SYN_RETRIES),
 #define XLAT_VAL_14 ((unsigned) (NET_IPV4_TCP_SYN_RETRIES))
 #define XLAT_STR_14 STRINGIFY(NET_IPV4_TCP_SYN_RETRIES)





 [NET_IPV4_IPFRAG_HIGH_THRESH] = XLAT(NET_IPV4_IPFRAG_HIGH_THRESH),
 #define XLAT_VAL_15 ((unsigned) (NET_IPV4_IPFRAG_HIGH_THRESH))
 #define XLAT_STR_15 STRINGIFY(NET_IPV4_IPFRAG_HIGH_THRESH)

 [NET_IPV4_IPFRAG_LOW_THRESH] = XLAT(NET_IPV4_IPFRAG_LOW_THRESH),
 #define XLAT_VAL_16 ((unsigned) (NET_IPV4_IPFRAG_LOW_THRESH))
 #define XLAT_STR_16 STRINGIFY(NET_IPV4_IPFRAG_LOW_THRESH)

 [NET_IPV4_IPFRAG_TIME] = XLAT(NET_IPV4_IPFRAG_TIME),
 #define XLAT_VAL_17 ((unsigned) (NET_IPV4_IPFRAG_TIME))
 #define XLAT_STR_17 STRINGIFY(NET_IPV4_IPFRAG_TIME)

 [NET_IPV4_TCP_MAX_KA_PROBES] = XLAT(NET_IPV4_TCP_MAX_KA_PROBES),
 #define XLAT_VAL_18 ((unsigned) (NET_IPV4_TCP_MAX_KA_PROBES))
 #define XLAT_STR_18 STRINGIFY(NET_IPV4_TCP_MAX_KA_PROBES)

 [NET_IPV4_TCP_KEEPALIVE_TIME] = XLAT(NET_IPV4_TCP_KEEPALIVE_TIME),
 #define XLAT_VAL_19 ((unsigned) (NET_IPV4_TCP_KEEPALIVE_TIME))
 #define XLAT_STR_19 STRINGIFY(NET_IPV4_TCP_KEEPALIVE_TIME)

 [NET_IPV4_TCP_KEEPALIVE_PROBES] = XLAT(NET_IPV4_TCP_KEEPALIVE_PROBES),
 #define XLAT_VAL_20 ((unsigned) (NET_IPV4_TCP_KEEPALIVE_PROBES))
 #define XLAT_STR_20 STRINGIFY(NET_IPV4_TCP_KEEPALIVE_PROBES)

 [NET_IPV4_TCP_RETRIES1] = XLAT(NET_IPV4_TCP_RETRIES1),
 #define XLAT_VAL_21 ((unsigned) (NET_IPV4_TCP_RETRIES1))
 #define XLAT_STR_21 STRINGIFY(NET_IPV4_TCP_RETRIES1)

 [NET_IPV4_TCP_RETRIES2] = XLAT(NET_IPV4_TCP_RETRIES2),
 #define XLAT_VAL_22 ((unsigned) (NET_IPV4_TCP_RETRIES2))
 #define XLAT_STR_22 STRINGIFY(NET_IPV4_TCP_RETRIES2)



 [NET_IPV4_TCP_FIN_TIMEOUT] = XLAT(NET_IPV4_TCP_FIN_TIMEOUT),
 #define XLAT_VAL_23 ((unsigned) (NET_IPV4_TCP_FIN_TIMEOUT))
 #define XLAT_STR_23 STRINGIFY(NET_IPV4_TCP_FIN_TIMEOUT)







 [NET_IPV4_IP_MASQ_DEBUG] = XLAT(NET_IPV4_IP_MASQ_DEBUG),
 #define XLAT_VAL_24 ((unsigned) (NET_IPV4_IP_MASQ_DEBUG))
 #define XLAT_STR_24 STRINGIFY(NET_IPV4_IP_MASQ_DEBUG)

 [NET_TCP_SYNCOOKIES] = XLAT(NET_TCP_SYNCOOKIES),
 #define XLAT_VAL_25 ((unsigned) (NET_TCP_SYNCOOKIES))
 #define XLAT_STR_25 STRINGIFY(NET_TCP_SYNCOOKIES)



 [NET_TCP_STDURG] = XLAT(NET_TCP_STDURG),
 #define XLAT_VAL_26 ((unsigned) (NET_TCP_STDURG))
 #define XLAT_STR_26 STRINGIFY(NET_TCP_STDURG)

 [NET_TCP_RFC1337] = XLAT(NET_TCP_RFC1337),
 #define XLAT_VAL_27 ((unsigned) (NET_TCP_RFC1337))
 #define XLAT_STR_27 STRINGIFY(NET_TCP_RFC1337)

 [NET_TCP_SYN_TAILDROP] = XLAT(NET_TCP_SYN_TAILDROP),
 #define XLAT_VAL_28 ((unsigned) (NET_TCP_SYN_TAILDROP))
 #define XLAT_STR_28 STRINGIFY(NET_TCP_SYN_TAILDROP)

 [NET_TCP_MAX_SYN_BACKLOG] = XLAT(NET_TCP_MAX_SYN_BACKLOG),
 #define XLAT_VAL_29 ((unsigned) (NET_TCP_MAX_SYN_BACKLOG))
 #define XLAT_STR_29 STRINGIFY(NET_TCP_MAX_SYN_BACKLOG)

 [NET_IPV4_LOCAL_PORT_RANGE] = XLAT(NET_IPV4_LOCAL_PORT_RANGE),
 #define XLAT_VAL_30 ((unsigned) (NET_IPV4_LOCAL_PORT_RANGE))
 #define XLAT_STR_30 STRINGIFY(NET_IPV4_LOCAL_PORT_RANGE)

 [NET_IPV4_ICMP_ECHO_IGNORE_ALL] = XLAT(NET_IPV4_ICMP_ECHO_IGNORE_ALL),
 #define XLAT_VAL_31 ((unsigned) (NET_IPV4_ICMP_ECHO_IGNORE_ALL))
 #define XLAT_STR_31 STRINGIFY(NET_IPV4_ICMP_ECHO_IGNORE_ALL)

 [NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS] = XLAT(NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS),
 #define XLAT_VAL_32 ((unsigned) (NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS))
 #define XLAT_STR_32 STRINGIFY(NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS)

 [NET_IPV4_ICMP_SOURCEQUENCH_RATE] = XLAT(NET_IPV4_ICMP_SOURCEQUENCH_RATE),
 #define XLAT_VAL_33 ((unsigned) (NET_IPV4_ICMP_SOURCEQUENCH_RATE))
 #define XLAT_STR_33 STRINGIFY(NET_IPV4_ICMP_SOURCEQUENCH_RATE)

 [NET_IPV4_ICMP_DESTUNREACH_RATE] = XLAT(NET_IPV4_ICMP_DESTUNREACH_RATE),
 #define XLAT_VAL_34 ((unsigned) (NET_IPV4_ICMP_DESTUNREACH_RATE))
 #define XLAT_STR_34 STRINGIFY(NET_IPV4_ICMP_DESTUNREACH_RATE)

 [NET_IPV4_ICMP_TIMEEXCEED_RATE] = XLAT(NET_IPV4_ICMP_TIMEEXCEED_RATE),
 #define XLAT_VAL_35 ((unsigned) (NET_IPV4_ICMP_TIMEEXCEED_RATE))
 #define XLAT_STR_35 STRINGIFY(NET_IPV4_ICMP_TIMEEXCEED_RATE)

 [NET_IPV4_ICMP_PARAMPROB_RATE] = XLAT(NET_IPV4_ICMP_PARAMPROB_RATE),
 #define XLAT_VAL_36 ((unsigned) (NET_IPV4_ICMP_PARAMPROB_RATE))
 #define XLAT_STR_36 STRINGIFY(NET_IPV4_ICMP_PARAMPROB_RATE)

 [NET_IPV4_ICMP_ECHOREPLY_RATE] = XLAT(NET_IPV4_ICMP_ECHOREPLY_RATE),
 #define XLAT_VAL_37 ((unsigned) (NET_IPV4_ICMP_ECHOREPLY_RATE))
 #define XLAT_STR_37 STRINGIFY(NET_IPV4_ICMP_ECHOREPLY_RATE)

 [NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES] = XLAT(NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES),
 #define XLAT_VAL_38 ((unsigned) (NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES))
 #define XLAT_STR_38 STRINGIFY(NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES)

 [NET_IPV4_IGMP_MAX_MEMBERSHIPS] = XLAT(NET_IPV4_IGMP_MAX_MEMBERSHIPS),
 #define XLAT_VAL_39 ((unsigned) (NET_IPV4_IGMP_MAX_MEMBERSHIPS))
 #define XLAT_STR_39 STRINGIFY(NET_IPV4_IGMP_MAX_MEMBERSHIPS)

 [NET_TCP_TW_RECYCLE] = XLAT(NET_TCP_TW_RECYCLE),
 #define XLAT_VAL_40 ((unsigned) (NET_TCP_TW_RECYCLE))
 #define XLAT_STR_40 STRINGIFY(NET_TCP_TW_RECYCLE)

 [NET_IPV4_ALWAYS_DEFRAG] = XLAT(NET_IPV4_ALWAYS_DEFRAG),
 #define XLAT_VAL_41 ((unsigned) (NET_IPV4_ALWAYS_DEFRAG))
 #define XLAT_STR_41 STRINGIFY(NET_IPV4_ALWAYS_DEFRAG)

 [NET_IPV4_TCP_KEEPALIVE_INTVL] = XLAT(NET_IPV4_TCP_KEEPALIVE_INTVL),
 #define XLAT_VAL_42 ((unsigned) (NET_IPV4_TCP_KEEPALIVE_INTVL))
 #define XLAT_STR_42 STRINGIFY(NET_IPV4_TCP_KEEPALIVE_INTVL)

 [NET_IPV4_INET_PEER_THRESHOLD] = XLAT(NET_IPV4_INET_PEER_THRESHOLD),
 #define XLAT_VAL_43 ((unsigned) (NET_IPV4_INET_PEER_THRESHOLD))
 #define XLAT_STR_43 STRINGIFY(NET_IPV4_INET_PEER_THRESHOLD)
 [NET_IPV4_INET_PEER_MINTTL] = XLAT(NET_IPV4_INET_PEER_MINTTL),
 #define XLAT_VAL_44 ((unsigned) (NET_IPV4_INET_PEER_MINTTL))
 #define XLAT_STR_44 STRINGIFY(NET_IPV4_INET_PEER_MINTTL)
 [NET_IPV4_INET_PEER_MAXTTL] = XLAT(NET_IPV4_INET_PEER_MAXTTL),
 #define XLAT_VAL_45 ((unsigned) (NET_IPV4_INET_PEER_MAXTTL))
 #define XLAT_STR_45 STRINGIFY(NET_IPV4_INET_PEER_MAXTTL)
 [NET_IPV4_INET_PEER_GC_MINTIME] = XLAT(NET_IPV4_INET_PEER_GC_MINTIME),
 #define XLAT_VAL_46 ((unsigned) (NET_IPV4_INET_PEER_GC_MINTIME))
 #define XLAT_STR_46 STRINGIFY(NET_IPV4_INET_PEER_GC_MINTIME)
 [NET_IPV4_INET_PEER_GC_MAXTIME] = XLAT(NET_IPV4_INET_PEER_GC_MAXTIME),
 #define XLAT_VAL_47 ((unsigned) (NET_IPV4_INET_PEER_GC_MAXTIME))
 #define XLAT_STR_47 STRINGIFY(NET_IPV4_INET_PEER_GC_MAXTIME)

 [NET_TCP_ORPHAN_RETRIES] = XLAT(NET_TCP_ORPHAN_RETRIES),
 #define XLAT_VAL_48 ((unsigned) (NET_TCP_ORPHAN_RETRIES))
 #define XLAT_STR_48 STRINGIFY(NET_TCP_ORPHAN_RETRIES)
 [NET_TCP_ABORT_ON_OVERFLOW] = XLAT(NET_TCP_ABORT_ON_OVERFLOW),
 #define XLAT_VAL_49 ((unsigned) (NET_TCP_ABORT_ON_OVERFLOW))
 #define XLAT_STR_49 STRINGIFY(NET_TCP_ABORT_ON_OVERFLOW)
 [NET_TCP_SYNACK_RETRIES] = XLAT(NET_TCP_SYNACK_RETRIES),
 #define XLAT_VAL_50 ((unsigned) (NET_TCP_SYNACK_RETRIES))
 #define XLAT_STR_50 STRINGIFY(NET_TCP_SYNACK_RETRIES)
 [NET_TCP_MAX_ORPHANS] = XLAT(NET_TCP_MAX_ORPHANS),
 #define XLAT_VAL_51 ((unsigned) (NET_TCP_MAX_ORPHANS))
 #define XLAT_STR_51 STRINGIFY(NET_TCP_MAX_ORPHANS)
 [NET_TCP_MAX_TW_BUCKETS] = XLAT(NET_TCP_MAX_TW_BUCKETS),
 #define XLAT_VAL_52 ((unsigned) (NET_TCP_MAX_TW_BUCKETS))
 #define XLAT_STR_52 STRINGIFY(NET_TCP_MAX_TW_BUCKETS)

 [NET_TCP_FACK] = XLAT(NET_TCP_FACK),
 #define XLAT_VAL_53 ((unsigned) (NET_TCP_FACK))
 #define XLAT_STR_53 STRINGIFY(NET_TCP_FACK)
 [NET_TCP_REORDERING] = XLAT(NET_TCP_REORDERING),
 #define XLAT_VAL_54 ((unsigned) (NET_TCP_REORDERING))
 #define XLAT_STR_54 STRINGIFY(NET_TCP_REORDERING)
 [NET_TCP_ECN] = XLAT(NET_TCP_ECN),
 #define XLAT_VAL_55 ((unsigned) (NET_TCP_ECN))
 #define XLAT_STR_55 STRINGIFY(NET_TCP_ECN)
 [NET_TCP_DSACK] = XLAT(NET_TCP_DSACK),
 #define XLAT_VAL_56 ((unsigned) (NET_TCP_DSACK))
 #define XLAT_STR_56 STRINGIFY(NET_TCP_DSACK)
 [NET_TCP_MEM] = XLAT(NET_TCP_MEM),
 #define XLAT_VAL_57 ((unsigned) (NET_TCP_MEM))
 #define XLAT_STR_57 STRINGIFY(NET_TCP_MEM)
 [NET_TCP_WMEM] = XLAT(NET_TCP_WMEM),
 #define XLAT_VAL_58 ((unsigned) (NET_TCP_WMEM))
 #define XLAT_STR_58 STRINGIFY(NET_TCP_WMEM)
 [NET_TCP_RMEM] = XLAT(NET_TCP_RMEM),
 #define XLAT_VAL_59 ((unsigned) (NET_TCP_RMEM))
 #define XLAT_STR_59 STRINGIFY(NET_TCP_RMEM)
 [NET_TCP_APP_WIN] = XLAT(NET_TCP_APP_WIN),
 #define XLAT_VAL_60 ((unsigned) (NET_TCP_APP_WIN))
 #define XLAT_STR_60 STRINGIFY(NET_TCP_APP_WIN)
 [NET_TCP_ADV_WIN_SCALE] = XLAT(NET_TCP_ADV_WIN_SCALE),
 #define XLAT_VAL_61 ((unsigned) (NET_TCP_ADV_WIN_SCALE))
 #define XLAT_STR_61 STRINGIFY(NET_TCP_ADV_WIN_SCALE)

 [NET_IPV4_NONLOCAL_BIND] = XLAT(NET_IPV4_NONLOCAL_BIND),
 #define XLAT_VAL_62 ((unsigned) (NET_IPV4_NONLOCAL_BIND))
 #define XLAT_STR_62 STRINGIFY(NET_IPV4_NONLOCAL_BIND)

 [NET_IPV4_ICMP_RATELIMIT] = XLAT(NET_IPV4_ICMP_RATELIMIT),
 #define XLAT_VAL_63 ((unsigned) (NET_IPV4_ICMP_RATELIMIT))
 #define XLAT_STR_63 STRINGIFY(NET_IPV4_ICMP_RATELIMIT)
 [NET_IPV4_ICMP_RATEMASK] = XLAT(NET_IPV4_ICMP_RATEMASK),
 #define XLAT_VAL_64 ((unsigned) (NET_IPV4_ICMP_RATEMASK))
 #define XLAT_STR_64 STRINGIFY(NET_IPV4_ICMP_RATEMASK)

 [NET_TCP_TW_REUSE] = XLAT(NET_TCP_TW_REUSE),
 #define XLAT_VAL_65 ((unsigned) (NET_TCP_TW_REUSE))
 #define XLAT_STR_65 STRINGIFY(NET_TCP_TW_REUSE)

 [NET_TCP_FRTO] = XLAT(NET_TCP_FRTO),
 #define XLAT_VAL_66 ((unsigned) (NET_TCP_FRTO))
 #define XLAT_STR_66 STRINGIFY(NET_TCP_FRTO)

 [NET_TCP_LOW_LATENCY] = XLAT(NET_TCP_LOW_LATENCY),
 #define XLAT_VAL_67 ((unsigned) (NET_TCP_LOW_LATENCY))
 #define XLAT_STR_67 STRINGIFY(NET_TCP_LOW_LATENCY)

 [NET_IPV4_IPFRAG_SECRET_INTERVAL] = XLAT(NET_IPV4_IPFRAG_SECRET_INTERVAL),
 #define XLAT_VAL_68 ((unsigned) (NET_IPV4_IPFRAG_SECRET_INTERVAL))
 #define XLAT_STR_68 STRINGIFY(NET_IPV4_IPFRAG_SECRET_INTERVAL)

 [NET_TCP_WESTWOOD] = XLAT(NET_TCP_WESTWOOD),
 #define XLAT_VAL_69 ((unsigned) (NET_TCP_WESTWOOD))
 #define XLAT_STR_69 STRINGIFY(NET_TCP_WESTWOOD)

 [NET_IPV4_IGMP_MAX_MSF] = XLAT(NET_IPV4_IGMP_MAX_MSF),
 #define XLAT_VAL_70 ((unsigned) (NET_IPV4_IGMP_MAX_MSF))
 #define XLAT_STR_70 STRINGIFY(NET_IPV4_IGMP_MAX_MSF)

 [NET_TCP_NO_METRICS_SAVE] = XLAT(NET_TCP_NO_METRICS_SAVE),
 #define XLAT_VAL_71 ((unsigned) (NET_TCP_NO_METRICS_SAVE))
 #define XLAT_STR_71 STRINGIFY(NET_TCP_NO_METRICS_SAVE)

 [NET_TCP_VEGAS] = XLAT(NET_TCP_VEGAS),
 #define XLAT_VAL_72 ((unsigned) (NET_TCP_VEGAS))
 #define XLAT_STR_72 STRINGIFY(NET_TCP_VEGAS)
 [NET_TCP_VEGAS_ALPHA] = XLAT(NET_TCP_VEGAS_ALPHA),
 #define XLAT_VAL_73 ((unsigned) (NET_TCP_VEGAS_ALPHA))
 #define XLAT_STR_73 STRINGIFY(NET_TCP_VEGAS_ALPHA)
 [NET_TCP_VEGAS_BETA] = XLAT(NET_TCP_VEGAS_BETA),
 #define XLAT_VAL_74 ((unsigned) (NET_TCP_VEGAS_BETA))
 #define XLAT_STR_74 STRINGIFY(NET_TCP_VEGAS_BETA)
 [NET_TCP_VEGAS_GAMMA] = XLAT(NET_TCP_VEGAS_GAMMA),
 #define XLAT_VAL_75 ((unsigned) (NET_TCP_VEGAS_GAMMA))
 #define XLAT_STR_75 STRINGIFY(NET_TCP_VEGAS_GAMMA)

 [NET_TCP_BIC] = XLAT(NET_TCP_BIC),
 #define XLAT_VAL_76 ((unsigned) (NET_TCP_BIC))
 #define XLAT_STR_76 STRINGIFY(NET_TCP_BIC)
 [NET_TCP_BIC_FAST_CONVERGENCE] = XLAT(NET_TCP_BIC_FAST_CONVERGENCE),
 #define XLAT_VAL_77 ((unsigned) (NET_TCP_BIC_FAST_CONVERGENCE))
 #define XLAT_STR_77 STRINGIFY(NET_TCP_BIC_FAST_CONVERGENCE)
 [NET_TCP_BIC_LOW_WINDOW] = XLAT(NET_TCP_BIC_LOW_WINDOW),
 #define XLAT_VAL_78 ((unsigned) (NET_TCP_BIC_LOW_WINDOW))
 #define XLAT_STR_78 STRINGIFY(NET_TCP_BIC_LOW_WINDOW)

 [NET_TCP_DEFAULT_WIN_SCALE] = XLAT(NET_TCP_DEFAULT_WIN_SCALE),
 #define XLAT_VAL_79 ((unsigned) (NET_TCP_DEFAULT_WIN_SCALE))
 #define XLAT_STR_79 STRINGIFY(NET_TCP_DEFAULT_WIN_SCALE)

 [NET_TCP_MODERATE_RCVBUF] = XLAT(NET_TCP_MODERATE_RCVBUF),
 #define XLAT_VAL_80 ((unsigned) (NET_TCP_MODERATE_RCVBUF))
 #define XLAT_STR_80 STRINGIFY(NET_TCP_MODERATE_RCVBUF)

 [NET_TCP_TSO_WIN_DIVISOR] = XLAT(NET_TCP_TSO_WIN_DIVISOR),
 #define XLAT_VAL_81 ((unsigned) (NET_TCP_TSO_WIN_DIVISOR))
 #define XLAT_STR_81 STRINGIFY(NET_TCP_TSO_WIN_DIVISOR)

 [NET_TCP_BIC_BETA] = XLAT(NET_TCP_BIC_BETA),
 #define XLAT_VAL_82 ((unsigned) (NET_TCP_BIC_BETA))
 #define XLAT_STR_82 STRINGIFY(NET_TCP_BIC_BETA)

 [NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR] = XLAT(NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR),
 #define XLAT_VAL_83 ((unsigned) (NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR))
 #define XLAT_STR_83 STRINGIFY(NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR)

 [NET_TCP_CONG_CONTROL] = XLAT(NET_TCP_CONG_CONTROL),
 #define XLAT_VAL_84 ((unsigned) (NET_TCP_CONG_CONTROL))
 #define XLAT_STR_84 STRINGIFY(NET_TCP_CONG_CONTROL)

 [NET_TCP_ABC] = XLAT(NET_TCP_ABC),
 #define XLAT_VAL_85 ((unsigned) (NET_TCP_ABC))
 #define XLAT_STR_85 STRINGIFY(NET_TCP_ABC)

 [NET_IPV4_IPFRAG_MAX_DIST] = XLAT(NET_IPV4_IPFRAG_MAX_DIST),
 #define XLAT_VAL_86 ((unsigned) (NET_IPV4_IPFRAG_MAX_DIST))
 #define XLAT_STR_86 STRINGIFY(NET_IPV4_IPFRAG_MAX_DIST)

 [NET_TCP_MTU_PROBING] = XLAT(NET_TCP_MTU_PROBING),
 #define XLAT_VAL_87 ((unsigned) (NET_TCP_MTU_PROBING))
 #define XLAT_STR_87 STRINGIFY(NET_TCP_MTU_PROBING)
 [NET_TCP_BASE_MSS] = XLAT(NET_TCP_BASE_MSS),
 #define XLAT_VAL_88 ((unsigned) (NET_TCP_BASE_MSS))
 #define XLAT_STR_88 STRINGIFY(NET_TCP_BASE_MSS)

 [NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS] = XLAT(NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS),
 #define XLAT_VAL_89 ((unsigned) (NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS))
 #define XLAT_STR_89 STRINGIFY(NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS)

 [NET_TCP_DMA_COPYBREAK] = XLAT(NET_TCP_DMA_COPYBREAK),
 #define XLAT_VAL_90 ((unsigned) (NET_TCP_DMA_COPYBREAK))
 #define XLAT_STR_90 STRINGIFY(NET_TCP_DMA_COPYBREAK)

 [NET_TCP_SLOW_START_AFTER_IDLE] = XLAT(NET_TCP_SLOW_START_AFTER_IDLE),
 #define XLAT_VAL_91 ((unsigned) (NET_TCP_SLOW_START_AFTER_IDLE))
 #define XLAT_STR_91 STRINGIFY(NET_TCP_SLOW_START_AFTER_IDLE)

 [NET_CIPSOV4_CACHE_ENABLE] = XLAT(NET_CIPSOV4_CACHE_ENABLE),
 #define XLAT_VAL_92 ((unsigned) (NET_CIPSOV4_CACHE_ENABLE))
 #define XLAT_STR_92 STRINGIFY(NET_CIPSOV4_CACHE_ENABLE)
 [NET_CIPSOV4_CACHE_BUCKET_SIZE] = XLAT(NET_CIPSOV4_CACHE_BUCKET_SIZE),
 #define XLAT_VAL_93 ((unsigned) (NET_CIPSOV4_CACHE_BUCKET_SIZE))
 #define XLAT_STR_93 STRINGIFY(NET_CIPSOV4_CACHE_BUCKET_SIZE)
 [NET_CIPSOV4_RBM_OPTFMT] = XLAT(NET_CIPSOV4_RBM_OPTFMT),
 #define XLAT_VAL_94 ((unsigned) (NET_CIPSOV4_RBM_OPTFMT))
 #define XLAT_STR_94 STRINGIFY(NET_CIPSOV4_RBM_OPTFMT)
 [NET_CIPSOV4_RBM_STRICTVALID] = XLAT(NET_CIPSOV4_RBM_STRICTVALID),
 #define XLAT_VAL_95 ((unsigned) (NET_CIPSOV4_RBM_STRICTVALID))
 #define XLAT_STR_95 STRINGIFY(NET_CIPSOV4_RBM_STRICTVALID)

 [NET_TCP_AVAIL_CONG_CONTROL] = XLAT(NET_TCP_AVAIL_CONG_CONTROL),
 #define XLAT_VAL_96 ((unsigned) (NET_TCP_AVAIL_CONG_CONTROL))
 #define XLAT_STR_96 STRINGIFY(NET_TCP_AVAIL_CONG_CONTROL)

 [NET_TCP_ALLOWED_CONG_CONTROL] = XLAT(NET_TCP_ALLOWED_CONG_CONTROL),
 #define XLAT_VAL_97 ((unsigned) (NET_TCP_ALLOWED_CONG_CONTROL))
 #define XLAT_STR_97 STRINGIFY(NET_TCP_ALLOWED_CONG_CONTROL)

 [NET_TCP_MAX_SSTHRESH] = XLAT(NET_TCP_MAX_SSTHRESH),
 #define XLAT_VAL_98 ((unsigned) (NET_TCP_MAX_SSTHRESH))
 #define XLAT_STR_98 STRINGIFY(NET_TCP_MAX_SSTHRESH)

 [NET_TCP_FRTO_RESPONSE] = XLAT(NET_TCP_FRTO_RESPONSE),
 #define XLAT_VAL_99 ((unsigned) (NET_TCP_FRTO_RESPONSE))
 #define XLAT_STR_99 STRINGIFY(NET_TCP_FRTO_RESPONSE)
};
static
const struct xlat sysctl_net_ipv4[1] = { {
 .data = sysctl_net_ipv4_xdata,
 .size = ARRAY_SIZE(sysctl_net_ipv4_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
#  ifdef XLAT_VAL_79
  | XLAT_VAL_79
#  endif
#  ifdef XLAT_VAL_80
  | XLAT_VAL_80
#  endif
#  ifdef XLAT_VAL_81
  | XLAT_VAL_81
#  endif
#  ifdef XLAT_VAL_82
  | XLAT_VAL_82
#  endif
#  ifdef XLAT_VAL_83
  | XLAT_VAL_83
#  endif
#  ifdef XLAT_VAL_84
  | XLAT_VAL_84
#  endif
#  ifdef XLAT_VAL_85
  | XLAT_VAL_85
#  endif
#  ifdef XLAT_VAL_86
  | XLAT_VAL_86
#  endif
#  ifdef XLAT_VAL_87
  | XLAT_VAL_87
#  endif
#  ifdef XLAT_VAL_88
  | XLAT_VAL_88
#  endif
#  ifdef XLAT_VAL_89
  | XLAT_VAL_89
#  endif
#  ifdef XLAT_VAL_90
  | XLAT_VAL_90
#  endif
#  ifdef XLAT_VAL_91
  | XLAT_VAL_91
#  endif
#  ifdef XLAT_VAL_92
  | XLAT_VAL_92
#  endif
#  ifdef XLAT_VAL_93
  | XLAT_VAL_93
#  endif
#  ifdef XLAT_VAL_94
  | XLAT_VAL_94
#  endif
#  ifdef XLAT_VAL_95
  | XLAT_VAL_95
#  endif
#  ifdef XLAT_VAL_96
  | XLAT_VAL_96
#  endif
#  ifdef XLAT_VAL_97
  | XLAT_VAL_97
#  endif
#  ifdef XLAT_VAL_98
  | XLAT_VAL_98
#  endif
#  ifdef XLAT_VAL_99
  | XLAT_VAL_99
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
#  ifdef XLAT_STR_79
  + sizeof(XLAT_STR_79)
#  endif
#  ifdef XLAT_STR_80
  + sizeof(XLAT_STR_80)
#  endif
#  ifdef XLAT_STR_81
  + sizeof(XLAT_STR_81)
#  endif
#  ifdef XLAT_STR_82
  + sizeof(XLAT_STR_82)
#  endif
#  ifdef XLAT_STR_83
  + sizeof(XLAT_STR_83)
#  endif
#  ifdef XLAT_STR_84
  + sizeof(XLAT_STR_84)
#  endif
#  ifdef XLAT_STR_85
  + sizeof(XLAT_STR_85)
#  endif
#  ifdef XLAT_STR_86
  + sizeof(XLAT_STR_86)
#  endif
#  ifdef XLAT_STR_87
  + sizeof(XLAT_STR_87)
#  endif
#  ifdef XLAT_STR_88
  + sizeof(XLAT_STR_88)
#  endif
#  ifdef XLAT_STR_89
  + sizeof(XLAT_STR_89)
#  endif
#  ifdef XLAT_STR_90
  + sizeof(XLAT_STR_90)
#  endif
#  ifdef XLAT_STR_91
  + sizeof(XLAT_STR_91)
#  endif
#  ifdef XLAT_STR_92
  + sizeof(XLAT_STR_92)
#  endif
#  ifdef XLAT_STR_93
  + sizeof(XLAT_STR_93)
#  endif
#  ifdef XLAT_STR_94
  + sizeof(XLAT_STR_94)
#  endif
#  ifdef XLAT_STR_95
  + sizeof(XLAT_STR_95)
#  endif
#  ifdef XLAT_STR_96
  + sizeof(XLAT_STR_96)
#  endif
#  ifdef XLAT_STR_97
  + sizeof(XLAT_STR_97)
#  endif
#  ifdef XLAT_STR_98
  + sizeof(XLAT_STR_98)
#  endif
#  ifdef XLAT_STR_99
  + sizeof(XLAT_STR_99)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
#  undef XLAT_STR_79
#  undef XLAT_VAL_79
#  undef XLAT_STR_80
#  undef XLAT_VAL_80
#  undef XLAT_STR_81
#  undef XLAT_VAL_81
#  undef XLAT_STR_82
#  undef XLAT_VAL_82
#  undef XLAT_STR_83
#  undef XLAT_VAL_83
#  undef XLAT_STR_84
#  undef XLAT_VAL_84
#  undef XLAT_STR_85
#  undef XLAT_VAL_85
#  undef XLAT_STR_86
#  undef XLAT_VAL_86
#  undef XLAT_STR_87
#  undef XLAT_VAL_87
#  undef XLAT_STR_88
#  undef XLAT_VAL_88
#  undef XLAT_STR_89
#  undef XLAT_VAL_89
#  undef XLAT_STR_90
#  undef XLAT_VAL_90
#  undef XLAT_STR_91
#  undef XLAT_VAL_91
#  undef XLAT_STR_92
#  undef XLAT_VAL_92
#  undef XLAT_STR_93
#  undef XLAT_VAL_93
#  undef XLAT_STR_94
#  undef XLAT_VAL_94
#  undef XLAT_STR_95
#  undef XLAT_VAL_95
#  undef XLAT_STR_96
#  undef XLAT_VAL_96
#  undef XLAT_STR_97
#  undef XLAT_VAL_97
#  undef XLAT_STR_98
#  undef XLAT_VAL_98
#  undef XLAT_STR_99
#  undef XLAT_VAL_99
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
