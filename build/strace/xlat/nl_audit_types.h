/* Generated by ./src/xlat/gen.sh from ./src/xlat/nl_audit_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(AUDIT_GET) || (defined(HAVE_DECL_AUDIT_GET) && HAVE_DECL_AUDIT_GET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_GET) == (1000), "AUDIT_GET != 1000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_GET 1000
#endif
#if defined(AUDIT_GET) || (defined(HAVE_DECL_AUDIT_GET) && HAVE_DECL_AUDIT_GET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_GET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_GET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_GET)
#endif
#if defined(AUDIT_SET) || (defined(HAVE_DECL_AUDIT_SET) && HAVE_DECL_AUDIT_SET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_SET) == (1001), "AUDIT_SET != 1001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_SET 1001
#endif
#if defined(AUDIT_SET) || (defined(HAVE_DECL_AUDIT_SET) && HAVE_DECL_AUDIT_SET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_SET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_SET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_SET)
#endif
#if defined(AUDIT_LIST) || (defined(HAVE_DECL_AUDIT_LIST) && HAVE_DECL_AUDIT_LIST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_LIST) == (1002), "AUDIT_LIST != 1002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_LIST 1002
#endif
#if defined(AUDIT_LIST) || (defined(HAVE_DECL_AUDIT_LIST) && HAVE_DECL_AUDIT_LIST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_LIST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_LIST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_LIST)
#endif
#if defined(AUDIT_ADD) || (defined(HAVE_DECL_AUDIT_ADD) && HAVE_DECL_AUDIT_ADD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ADD) == (1003), "AUDIT_ADD != 1003");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ADD 1003
#endif
#if defined(AUDIT_ADD) || (defined(HAVE_DECL_AUDIT_ADD) && HAVE_DECL_AUDIT_ADD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_ADD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_ADD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_ADD)
#endif
#if defined(AUDIT_DEL) || (defined(HAVE_DECL_AUDIT_DEL) && HAVE_DECL_AUDIT_DEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_DEL) == (1004), "AUDIT_DEL != 1004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_DEL 1004
#endif
#if defined(AUDIT_DEL) || (defined(HAVE_DECL_AUDIT_DEL) && HAVE_DECL_AUDIT_DEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_DEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_DEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_DEL)
#endif
#if defined(AUDIT_USER) || (defined(HAVE_DECL_AUDIT_USER) && HAVE_DECL_AUDIT_USER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_USER) == (1005), "AUDIT_USER != 1005");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_USER 1005
#endif
#if defined(AUDIT_USER) || (defined(HAVE_DECL_AUDIT_USER) && HAVE_DECL_AUDIT_USER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_USER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_USER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_USER)
#endif
#if defined(AUDIT_LOGIN) || (defined(HAVE_DECL_AUDIT_LOGIN) && HAVE_DECL_AUDIT_LOGIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_LOGIN) == (1006), "AUDIT_LOGIN != 1006");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_LOGIN 1006
#endif
#if defined(AUDIT_LOGIN) || (defined(HAVE_DECL_AUDIT_LOGIN) && HAVE_DECL_AUDIT_LOGIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_LOGIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_LOGIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_LOGIN)
#endif
#if defined(AUDIT_WATCH_INS) || (defined(HAVE_DECL_AUDIT_WATCH_INS) && HAVE_DECL_AUDIT_WATCH_INS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_WATCH_INS) == (1007), "AUDIT_WATCH_INS != 1007");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_WATCH_INS 1007
#endif
#if defined(AUDIT_WATCH_INS) || (defined(HAVE_DECL_AUDIT_WATCH_INS) && HAVE_DECL_AUDIT_WATCH_INS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_WATCH_INS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_WATCH_INS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_WATCH_INS)
#endif
#if defined(AUDIT_WATCH_REM) || (defined(HAVE_DECL_AUDIT_WATCH_REM) && HAVE_DECL_AUDIT_WATCH_REM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_WATCH_REM) == (1008), "AUDIT_WATCH_REM != 1008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_WATCH_REM 1008
#endif
#if defined(AUDIT_WATCH_REM) || (defined(HAVE_DECL_AUDIT_WATCH_REM) && HAVE_DECL_AUDIT_WATCH_REM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_WATCH_REM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_WATCH_REM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_WATCH_REM)
#endif
#if defined(AUDIT_WATCH_LIST) || (defined(HAVE_DECL_AUDIT_WATCH_LIST) && HAVE_DECL_AUDIT_WATCH_LIST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_WATCH_LIST) == (1009), "AUDIT_WATCH_LIST != 1009");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_WATCH_LIST 1009
#endif
#if defined(AUDIT_WATCH_LIST) || (defined(HAVE_DECL_AUDIT_WATCH_LIST) && HAVE_DECL_AUDIT_WATCH_LIST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_WATCH_LIST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_WATCH_LIST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_WATCH_LIST)
#endif
#if defined(AUDIT_SIGNAL_INFO) || (defined(HAVE_DECL_AUDIT_SIGNAL_INFO) && HAVE_DECL_AUDIT_SIGNAL_INFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_SIGNAL_INFO) == (1010), "AUDIT_SIGNAL_INFO != 1010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_SIGNAL_INFO 1010
#endif
#if defined(AUDIT_SIGNAL_INFO) || (defined(HAVE_DECL_AUDIT_SIGNAL_INFO) && HAVE_DECL_AUDIT_SIGNAL_INFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_SIGNAL_INFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_SIGNAL_INFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_SIGNAL_INFO)
#endif
#if defined(AUDIT_ADD_RULE) || (defined(HAVE_DECL_AUDIT_ADD_RULE) && HAVE_DECL_AUDIT_ADD_RULE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ADD_RULE) == (1011), "AUDIT_ADD_RULE != 1011");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ADD_RULE 1011
#endif
#if defined(AUDIT_ADD_RULE) || (defined(HAVE_DECL_AUDIT_ADD_RULE) && HAVE_DECL_AUDIT_ADD_RULE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_ADD_RULE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_ADD_RULE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_ADD_RULE)
#endif
#if defined(AUDIT_DEL_RULE) || (defined(HAVE_DECL_AUDIT_DEL_RULE) && HAVE_DECL_AUDIT_DEL_RULE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_DEL_RULE) == (1012), "AUDIT_DEL_RULE != 1012");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_DEL_RULE 1012
#endif
#if defined(AUDIT_DEL_RULE) || (defined(HAVE_DECL_AUDIT_DEL_RULE) && HAVE_DECL_AUDIT_DEL_RULE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_DEL_RULE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_DEL_RULE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_DEL_RULE)
#endif
#if defined(AUDIT_LIST_RULES) || (defined(HAVE_DECL_AUDIT_LIST_RULES) && HAVE_DECL_AUDIT_LIST_RULES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_LIST_RULES) == (1013), "AUDIT_LIST_RULES != 1013");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_LIST_RULES 1013
#endif
#if defined(AUDIT_LIST_RULES) || (defined(HAVE_DECL_AUDIT_LIST_RULES) && HAVE_DECL_AUDIT_LIST_RULES)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_LIST_RULES)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_LIST_RULES"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_LIST_RULES)
#endif
#if defined(AUDIT_TRIM) || (defined(HAVE_DECL_AUDIT_TRIM) && HAVE_DECL_AUDIT_TRIM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_TRIM) == (1014), "AUDIT_TRIM != 1014");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_TRIM 1014
#endif
#if defined(AUDIT_TRIM) || (defined(HAVE_DECL_AUDIT_TRIM) && HAVE_DECL_AUDIT_TRIM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_TRIM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_TRIM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_TRIM)
#endif
#if defined(AUDIT_MAKE_EQUIV) || (defined(HAVE_DECL_AUDIT_MAKE_EQUIV) && HAVE_DECL_AUDIT_MAKE_EQUIV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAKE_EQUIV) == (1015), "AUDIT_MAKE_EQUIV != 1015");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAKE_EQUIV 1015
#endif
#if defined(AUDIT_MAKE_EQUIV) || (defined(HAVE_DECL_AUDIT_MAKE_EQUIV) && HAVE_DECL_AUDIT_MAKE_EQUIV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAKE_EQUIV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAKE_EQUIV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAKE_EQUIV)
#endif
#if defined(AUDIT_TTY_GET) || (defined(HAVE_DECL_AUDIT_TTY_GET) && HAVE_DECL_AUDIT_TTY_GET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_TTY_GET) == (1016), "AUDIT_TTY_GET != 1016");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_TTY_GET 1016
#endif
#if defined(AUDIT_TTY_GET) || (defined(HAVE_DECL_AUDIT_TTY_GET) && HAVE_DECL_AUDIT_TTY_GET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_TTY_GET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_TTY_GET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_TTY_GET)
#endif
#if defined(AUDIT_TTY_SET) || (defined(HAVE_DECL_AUDIT_TTY_SET) && HAVE_DECL_AUDIT_TTY_SET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_TTY_SET) == (1017), "AUDIT_TTY_SET != 1017");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_TTY_SET 1017
#endif
#if defined(AUDIT_TTY_SET) || (defined(HAVE_DECL_AUDIT_TTY_SET) && HAVE_DECL_AUDIT_TTY_SET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_TTY_SET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_TTY_SET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_TTY_SET)
#endif
#if defined(AUDIT_SET_FEATURE) || (defined(HAVE_DECL_AUDIT_SET_FEATURE) && HAVE_DECL_AUDIT_SET_FEATURE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_SET_FEATURE) == (1018), "AUDIT_SET_FEATURE != 1018");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_SET_FEATURE 1018
#endif
#if defined(AUDIT_SET_FEATURE) || (defined(HAVE_DECL_AUDIT_SET_FEATURE) && HAVE_DECL_AUDIT_SET_FEATURE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_SET_FEATURE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_SET_FEATURE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_SET_FEATURE)
#endif
#if defined(AUDIT_GET_FEATURE) || (defined(HAVE_DECL_AUDIT_GET_FEATURE) && HAVE_DECL_AUDIT_GET_FEATURE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_GET_FEATURE) == (1019), "AUDIT_GET_FEATURE != 1019");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_GET_FEATURE 1019
#endif
#if defined(AUDIT_GET_FEATURE) || (defined(HAVE_DECL_AUDIT_GET_FEATURE) && HAVE_DECL_AUDIT_GET_FEATURE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_GET_FEATURE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_GET_FEATURE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_GET_FEATURE)
#endif
#if defined(AUDIT_FIRST_USER_MSG) || (defined(HAVE_DECL_AUDIT_FIRST_USER_MSG) && HAVE_DECL_AUDIT_FIRST_USER_MSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_FIRST_USER_MSG) == (1100), "AUDIT_FIRST_USER_MSG != 1100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_FIRST_USER_MSG 1100
#endif
#if defined(AUDIT_FIRST_USER_MSG) || (defined(HAVE_DECL_AUDIT_FIRST_USER_MSG) && HAVE_DECL_AUDIT_FIRST_USER_MSG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_FIRST_USER_MSG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_FIRST_USER_MSG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_FIRST_USER_MSG)
#endif
#if defined(AUDIT_USER_AVC) || (defined(HAVE_DECL_AUDIT_USER_AVC) && HAVE_DECL_AUDIT_USER_AVC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_USER_AVC) == (1107), "AUDIT_USER_AVC != 1107");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_USER_AVC 1107
#endif
#if defined(AUDIT_USER_AVC) || (defined(HAVE_DECL_AUDIT_USER_AVC) && HAVE_DECL_AUDIT_USER_AVC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_USER_AVC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_USER_AVC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_USER_AVC)
#endif
#if defined(AUDIT_USER_TTY) || (defined(HAVE_DECL_AUDIT_USER_TTY) && HAVE_DECL_AUDIT_USER_TTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_USER_TTY) == (1124), "AUDIT_USER_TTY != 1124");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_USER_TTY 1124
#endif
#if defined(AUDIT_USER_TTY) || (defined(HAVE_DECL_AUDIT_USER_TTY) && HAVE_DECL_AUDIT_USER_TTY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_USER_TTY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_USER_TTY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_USER_TTY)
#endif
#if defined(AUDIT_LAST_USER_MSG) || (defined(HAVE_DECL_AUDIT_LAST_USER_MSG) && HAVE_DECL_AUDIT_LAST_USER_MSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_LAST_USER_MSG) == (1199), "AUDIT_LAST_USER_MSG != 1199");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_LAST_USER_MSG 1199
#endif
#if defined(AUDIT_LAST_USER_MSG) || (defined(HAVE_DECL_AUDIT_LAST_USER_MSG) && HAVE_DECL_AUDIT_LAST_USER_MSG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_LAST_USER_MSG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_LAST_USER_MSG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_LAST_USER_MSG)
#endif
#if defined(AUDIT_DAEMON_START) || (defined(HAVE_DECL_AUDIT_DAEMON_START) && HAVE_DECL_AUDIT_DAEMON_START)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_DAEMON_START) == (1200), "AUDIT_DAEMON_START != 1200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_DAEMON_START 1200
#endif
#if defined(AUDIT_DAEMON_START) || (defined(HAVE_DECL_AUDIT_DAEMON_START) && HAVE_DECL_AUDIT_DAEMON_START)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_DAEMON_START)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_DAEMON_START"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_DAEMON_START)
#endif
#if defined(AUDIT_DAEMON_END) || (defined(HAVE_DECL_AUDIT_DAEMON_END) && HAVE_DECL_AUDIT_DAEMON_END)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_DAEMON_END) == (1201), "AUDIT_DAEMON_END != 1201");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_DAEMON_END 1201
#endif
#if defined(AUDIT_DAEMON_END) || (defined(HAVE_DECL_AUDIT_DAEMON_END) && HAVE_DECL_AUDIT_DAEMON_END)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_DAEMON_END)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_DAEMON_END"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_DAEMON_END)
#endif
#if defined(AUDIT_DAEMON_ABORT) || (defined(HAVE_DECL_AUDIT_DAEMON_ABORT) && HAVE_DECL_AUDIT_DAEMON_ABORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_DAEMON_ABORT) == (1202), "AUDIT_DAEMON_ABORT != 1202");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_DAEMON_ABORT 1202
#endif
#if defined(AUDIT_DAEMON_ABORT) || (defined(HAVE_DECL_AUDIT_DAEMON_ABORT) && HAVE_DECL_AUDIT_DAEMON_ABORT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_DAEMON_ABORT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_DAEMON_ABORT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_DAEMON_ABORT)
#endif
#if defined(AUDIT_DAEMON_CONFIG) || (defined(HAVE_DECL_AUDIT_DAEMON_CONFIG) && HAVE_DECL_AUDIT_DAEMON_CONFIG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_DAEMON_CONFIG) == (1203), "AUDIT_DAEMON_CONFIG != 1203");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_DAEMON_CONFIG 1203
#endif
#if defined(AUDIT_DAEMON_CONFIG) || (defined(HAVE_DECL_AUDIT_DAEMON_CONFIG) && HAVE_DECL_AUDIT_DAEMON_CONFIG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_DAEMON_CONFIG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_DAEMON_CONFIG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_DAEMON_CONFIG)
#endif
#if defined(AUDIT_SYSCALL) || (defined(HAVE_DECL_AUDIT_SYSCALL) && HAVE_DECL_AUDIT_SYSCALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_SYSCALL) == (1300), "AUDIT_SYSCALL != 1300");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_SYSCALL 1300
#endif
#if defined(AUDIT_SYSCALL) || (defined(HAVE_DECL_AUDIT_SYSCALL) && HAVE_DECL_AUDIT_SYSCALL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_SYSCALL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_SYSCALL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_SYSCALL)
#endif
#if defined(AUDIT_FS_WATCH) || (defined(HAVE_DECL_AUDIT_FS_WATCH) && HAVE_DECL_AUDIT_FS_WATCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_FS_WATCH) == (1301), "AUDIT_FS_WATCH != 1301");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_FS_WATCH 1301
#endif
#if defined(AUDIT_FS_WATCH) || (defined(HAVE_DECL_AUDIT_FS_WATCH) && HAVE_DECL_AUDIT_FS_WATCH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_FS_WATCH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_FS_WATCH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_FS_WATCH)
#endif
#if defined(AUDIT_PATH) || (defined(HAVE_DECL_AUDIT_PATH) && HAVE_DECL_AUDIT_PATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_PATH) == (1302), "AUDIT_PATH != 1302");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_PATH 1302
#endif
#if defined(AUDIT_PATH) || (defined(HAVE_DECL_AUDIT_PATH) && HAVE_DECL_AUDIT_PATH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_PATH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_PATH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_PATH)
#endif
#if defined(AUDIT_IPC) || (defined(HAVE_DECL_AUDIT_IPC) && HAVE_DECL_AUDIT_IPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_IPC) == (1303), "AUDIT_IPC != 1303");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_IPC 1303
#endif
#if defined(AUDIT_IPC) || (defined(HAVE_DECL_AUDIT_IPC) && HAVE_DECL_AUDIT_IPC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_IPC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_IPC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_IPC)
#endif
#if defined(AUDIT_SOCKETCALL) || (defined(HAVE_DECL_AUDIT_SOCKETCALL) && HAVE_DECL_AUDIT_SOCKETCALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_SOCKETCALL) == (1304), "AUDIT_SOCKETCALL != 1304");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_SOCKETCALL 1304
#endif
#if defined(AUDIT_SOCKETCALL) || (defined(HAVE_DECL_AUDIT_SOCKETCALL) && HAVE_DECL_AUDIT_SOCKETCALL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_SOCKETCALL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_SOCKETCALL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_SOCKETCALL)
#endif
#if defined(AUDIT_CONFIG_CHANGE) || (defined(HAVE_DECL_AUDIT_CONFIG_CHANGE) && HAVE_DECL_AUDIT_CONFIG_CHANGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_CONFIG_CHANGE) == (1305), "AUDIT_CONFIG_CHANGE != 1305");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_CONFIG_CHANGE 1305
#endif
#if defined(AUDIT_CONFIG_CHANGE) || (defined(HAVE_DECL_AUDIT_CONFIG_CHANGE) && HAVE_DECL_AUDIT_CONFIG_CHANGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_CONFIG_CHANGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_CONFIG_CHANGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_CONFIG_CHANGE)
#endif
#if defined(AUDIT_SOCKADDR) || (defined(HAVE_DECL_AUDIT_SOCKADDR) && HAVE_DECL_AUDIT_SOCKADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_SOCKADDR) == (1306), "AUDIT_SOCKADDR != 1306");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_SOCKADDR 1306
#endif
#if defined(AUDIT_SOCKADDR) || (defined(HAVE_DECL_AUDIT_SOCKADDR) && HAVE_DECL_AUDIT_SOCKADDR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_SOCKADDR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_SOCKADDR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_SOCKADDR)
#endif
#if defined(AUDIT_CWD) || (defined(HAVE_DECL_AUDIT_CWD) && HAVE_DECL_AUDIT_CWD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_CWD) == (1307), "AUDIT_CWD != 1307");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_CWD 1307
#endif
#if defined(AUDIT_CWD) || (defined(HAVE_DECL_AUDIT_CWD) && HAVE_DECL_AUDIT_CWD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_CWD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_CWD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_CWD)
#endif
#if defined(AUDIT_EXECVE) || (defined(HAVE_DECL_AUDIT_EXECVE) && HAVE_DECL_AUDIT_EXECVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_EXECVE) == (1309), "AUDIT_EXECVE != 1309");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_EXECVE 1309
#endif
#if defined(AUDIT_EXECVE) || (defined(HAVE_DECL_AUDIT_EXECVE) && HAVE_DECL_AUDIT_EXECVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_EXECVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_EXECVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_EXECVE)
#endif
#if defined(AUDIT_IPC_SET_PERM) || (defined(HAVE_DECL_AUDIT_IPC_SET_PERM) && HAVE_DECL_AUDIT_IPC_SET_PERM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_IPC_SET_PERM) == (1311), "AUDIT_IPC_SET_PERM != 1311");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_IPC_SET_PERM 1311
#endif
#if defined(AUDIT_IPC_SET_PERM) || (defined(HAVE_DECL_AUDIT_IPC_SET_PERM) && HAVE_DECL_AUDIT_IPC_SET_PERM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_IPC_SET_PERM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_IPC_SET_PERM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_IPC_SET_PERM)
#endif
#if defined(AUDIT_MQ_OPEN) || (defined(HAVE_DECL_AUDIT_MQ_OPEN) && HAVE_DECL_AUDIT_MQ_OPEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MQ_OPEN) == (1312), "AUDIT_MQ_OPEN != 1312");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MQ_OPEN 1312
#endif
#if defined(AUDIT_MQ_OPEN) || (defined(HAVE_DECL_AUDIT_MQ_OPEN) && HAVE_DECL_AUDIT_MQ_OPEN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MQ_OPEN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MQ_OPEN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MQ_OPEN)
#endif
#if defined(AUDIT_MQ_SENDRECV) || (defined(HAVE_DECL_AUDIT_MQ_SENDRECV) && HAVE_DECL_AUDIT_MQ_SENDRECV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MQ_SENDRECV) == (1313), "AUDIT_MQ_SENDRECV != 1313");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MQ_SENDRECV 1313
#endif
#if defined(AUDIT_MQ_SENDRECV) || (defined(HAVE_DECL_AUDIT_MQ_SENDRECV) && HAVE_DECL_AUDIT_MQ_SENDRECV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MQ_SENDRECV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MQ_SENDRECV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MQ_SENDRECV)
#endif
#if defined(AUDIT_MQ_NOTIFY) || (defined(HAVE_DECL_AUDIT_MQ_NOTIFY) && HAVE_DECL_AUDIT_MQ_NOTIFY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MQ_NOTIFY) == (1314), "AUDIT_MQ_NOTIFY != 1314");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MQ_NOTIFY 1314
#endif
#if defined(AUDIT_MQ_NOTIFY) || (defined(HAVE_DECL_AUDIT_MQ_NOTIFY) && HAVE_DECL_AUDIT_MQ_NOTIFY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MQ_NOTIFY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MQ_NOTIFY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MQ_NOTIFY)
#endif
#if defined(AUDIT_MQ_GETSETATTR) || (defined(HAVE_DECL_AUDIT_MQ_GETSETATTR) && HAVE_DECL_AUDIT_MQ_GETSETATTR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MQ_GETSETATTR) == (1315), "AUDIT_MQ_GETSETATTR != 1315");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MQ_GETSETATTR 1315
#endif
#if defined(AUDIT_MQ_GETSETATTR) || (defined(HAVE_DECL_AUDIT_MQ_GETSETATTR) && HAVE_DECL_AUDIT_MQ_GETSETATTR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MQ_GETSETATTR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MQ_GETSETATTR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MQ_GETSETATTR)
#endif
#if defined(AUDIT_KERNEL_OTHER) || (defined(HAVE_DECL_AUDIT_KERNEL_OTHER) && HAVE_DECL_AUDIT_KERNEL_OTHER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_KERNEL_OTHER) == (1316), "AUDIT_KERNEL_OTHER != 1316");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_KERNEL_OTHER 1316
#endif
#if defined(AUDIT_KERNEL_OTHER) || (defined(HAVE_DECL_AUDIT_KERNEL_OTHER) && HAVE_DECL_AUDIT_KERNEL_OTHER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_KERNEL_OTHER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_KERNEL_OTHER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_KERNEL_OTHER)
#endif
#if defined(AUDIT_FD_PAIR) || (defined(HAVE_DECL_AUDIT_FD_PAIR) && HAVE_DECL_AUDIT_FD_PAIR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_FD_PAIR) == (1317), "AUDIT_FD_PAIR != 1317");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_FD_PAIR 1317
#endif
#if defined(AUDIT_FD_PAIR) || (defined(HAVE_DECL_AUDIT_FD_PAIR) && HAVE_DECL_AUDIT_FD_PAIR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_FD_PAIR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_FD_PAIR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_FD_PAIR)
#endif
#if defined(AUDIT_OBJ_PID) || (defined(HAVE_DECL_AUDIT_OBJ_PID) && HAVE_DECL_AUDIT_OBJ_PID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_OBJ_PID) == (1318), "AUDIT_OBJ_PID != 1318");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_OBJ_PID 1318
#endif
#if defined(AUDIT_OBJ_PID) || (defined(HAVE_DECL_AUDIT_OBJ_PID) && HAVE_DECL_AUDIT_OBJ_PID)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_OBJ_PID)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_OBJ_PID"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_OBJ_PID)
#endif
#if defined(AUDIT_TTY) || (defined(HAVE_DECL_AUDIT_TTY) && HAVE_DECL_AUDIT_TTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_TTY) == (1319), "AUDIT_TTY != 1319");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_TTY 1319
#endif
#if defined(AUDIT_TTY) || (defined(HAVE_DECL_AUDIT_TTY) && HAVE_DECL_AUDIT_TTY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_TTY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_TTY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_TTY)
#endif
#if defined(AUDIT_EOE) || (defined(HAVE_DECL_AUDIT_EOE) && HAVE_DECL_AUDIT_EOE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_EOE) == (1320), "AUDIT_EOE != 1320");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_EOE 1320
#endif
#if defined(AUDIT_EOE) || (defined(HAVE_DECL_AUDIT_EOE) && HAVE_DECL_AUDIT_EOE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_EOE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_EOE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_EOE)
#endif
#if defined(AUDIT_BPRM_FCAPS) || (defined(HAVE_DECL_AUDIT_BPRM_FCAPS) && HAVE_DECL_AUDIT_BPRM_FCAPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_BPRM_FCAPS) == (1321), "AUDIT_BPRM_FCAPS != 1321");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_BPRM_FCAPS 1321
#endif
#if defined(AUDIT_BPRM_FCAPS) || (defined(HAVE_DECL_AUDIT_BPRM_FCAPS) && HAVE_DECL_AUDIT_BPRM_FCAPS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_BPRM_FCAPS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_BPRM_FCAPS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_BPRM_FCAPS)
#endif
#if defined(AUDIT_CAPSET) || (defined(HAVE_DECL_AUDIT_CAPSET) && HAVE_DECL_AUDIT_CAPSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_CAPSET) == (1322), "AUDIT_CAPSET != 1322");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_CAPSET 1322
#endif
#if defined(AUDIT_CAPSET) || (defined(HAVE_DECL_AUDIT_CAPSET) && HAVE_DECL_AUDIT_CAPSET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_CAPSET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_CAPSET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_CAPSET)
#endif
#if defined(AUDIT_MMAP) || (defined(HAVE_DECL_AUDIT_MMAP) && HAVE_DECL_AUDIT_MMAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MMAP) == (1323), "AUDIT_MMAP != 1323");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MMAP 1323
#endif
#if defined(AUDIT_MMAP) || (defined(HAVE_DECL_AUDIT_MMAP) && HAVE_DECL_AUDIT_MMAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MMAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MMAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MMAP)
#endif
#if defined(AUDIT_NETFILTER_PKT) || (defined(HAVE_DECL_AUDIT_NETFILTER_PKT) && HAVE_DECL_AUDIT_NETFILTER_PKT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_NETFILTER_PKT) == (1324), "AUDIT_NETFILTER_PKT != 1324");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_NETFILTER_PKT 1324
#endif
#if defined(AUDIT_NETFILTER_PKT) || (defined(HAVE_DECL_AUDIT_NETFILTER_PKT) && HAVE_DECL_AUDIT_NETFILTER_PKT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_NETFILTER_PKT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_NETFILTER_PKT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_NETFILTER_PKT)
#endif
#if defined(AUDIT_NETFILTER_CFG) || (defined(HAVE_DECL_AUDIT_NETFILTER_CFG) && HAVE_DECL_AUDIT_NETFILTER_CFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_NETFILTER_CFG) == (1325), "AUDIT_NETFILTER_CFG != 1325");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_NETFILTER_CFG 1325
#endif
#if defined(AUDIT_NETFILTER_CFG) || (defined(HAVE_DECL_AUDIT_NETFILTER_CFG) && HAVE_DECL_AUDIT_NETFILTER_CFG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_NETFILTER_CFG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_NETFILTER_CFG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_NETFILTER_CFG)
#endif
#if defined(AUDIT_SECCOMP) || (defined(HAVE_DECL_AUDIT_SECCOMP) && HAVE_DECL_AUDIT_SECCOMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_SECCOMP) == (1326), "AUDIT_SECCOMP != 1326");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_SECCOMP 1326
#endif
#if defined(AUDIT_SECCOMP) || (defined(HAVE_DECL_AUDIT_SECCOMP) && HAVE_DECL_AUDIT_SECCOMP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_SECCOMP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_SECCOMP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_SECCOMP)
#endif
#if defined(AUDIT_PROCTITLE) || (defined(HAVE_DECL_AUDIT_PROCTITLE) && HAVE_DECL_AUDIT_PROCTITLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_PROCTITLE) == (1327), "AUDIT_PROCTITLE != 1327");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_PROCTITLE 1327
#endif
#if defined(AUDIT_PROCTITLE) || (defined(HAVE_DECL_AUDIT_PROCTITLE) && HAVE_DECL_AUDIT_PROCTITLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_PROCTITLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_PROCTITLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_PROCTITLE)
#endif
#ifndef STRACE_WORKAROUND_FOR_AUDIT_FEATURE_CHANGE
# define STRACE_WORKAROUND_FOR_AUDIT_FEATURE_CHANGE
# undef AUDIT_FEATURE_CHANGE
#endif
#if defined(AUDIT_FEATURE_CHANGE) || (defined(HAVE_DECL_AUDIT_FEATURE_CHANGE) && HAVE_DECL_AUDIT_FEATURE_CHANGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_FEATURE_CHANGE) == (1328), "AUDIT_FEATURE_CHANGE != 1328");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_FEATURE_CHANGE 1328
#endif
#if defined(AUDIT_FEATURE_CHANGE) || (defined(HAVE_DECL_AUDIT_FEATURE_CHANGE) && HAVE_DECL_AUDIT_FEATURE_CHANGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_FEATURE_CHANGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_FEATURE_CHANGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_FEATURE_CHANGE)
#endif
#if defined(AUDIT_REPLACE) || (defined(HAVE_DECL_AUDIT_REPLACE) && HAVE_DECL_AUDIT_REPLACE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_REPLACE) == (1329), "AUDIT_REPLACE != 1329");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_REPLACE 1329
#endif
#if defined(AUDIT_REPLACE) || (defined(HAVE_DECL_AUDIT_REPLACE) && HAVE_DECL_AUDIT_REPLACE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_REPLACE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_REPLACE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_REPLACE)
#endif
#if defined(AUDIT_KERN_MODULE) || (defined(HAVE_DECL_AUDIT_KERN_MODULE) && HAVE_DECL_AUDIT_KERN_MODULE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_KERN_MODULE) == (1330), "AUDIT_KERN_MODULE != 1330");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_KERN_MODULE 1330
#endif
#if defined(AUDIT_KERN_MODULE) || (defined(HAVE_DECL_AUDIT_KERN_MODULE) && HAVE_DECL_AUDIT_KERN_MODULE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_KERN_MODULE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_KERN_MODULE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_KERN_MODULE)
#endif
#if defined(AUDIT_FANOTIFY) || (defined(HAVE_DECL_AUDIT_FANOTIFY) && HAVE_DECL_AUDIT_FANOTIFY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_FANOTIFY) == (1331), "AUDIT_FANOTIFY != 1331");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_FANOTIFY 1331
#endif
#if defined(AUDIT_FANOTIFY) || (defined(HAVE_DECL_AUDIT_FANOTIFY) && HAVE_DECL_AUDIT_FANOTIFY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_FANOTIFY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_FANOTIFY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_FANOTIFY)
#endif
#if defined(AUDIT_TIME_INJOFFSET) || (defined(HAVE_DECL_AUDIT_TIME_INJOFFSET) && HAVE_DECL_AUDIT_TIME_INJOFFSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_TIME_INJOFFSET) == (1332), "AUDIT_TIME_INJOFFSET != 1332");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_TIME_INJOFFSET 1332
#endif
#if defined(AUDIT_TIME_INJOFFSET) || (defined(HAVE_DECL_AUDIT_TIME_INJOFFSET) && HAVE_DECL_AUDIT_TIME_INJOFFSET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_TIME_INJOFFSET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_TIME_INJOFFSET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_TIME_INJOFFSET)
#endif
#if defined(AUDIT_TIME_ADJNTPVAL) || (defined(HAVE_DECL_AUDIT_TIME_ADJNTPVAL) && HAVE_DECL_AUDIT_TIME_ADJNTPVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_TIME_ADJNTPVAL) == (1333), "AUDIT_TIME_ADJNTPVAL != 1333");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_TIME_ADJNTPVAL 1333
#endif
#if defined(AUDIT_TIME_ADJNTPVAL) || (defined(HAVE_DECL_AUDIT_TIME_ADJNTPVAL) && HAVE_DECL_AUDIT_TIME_ADJNTPVAL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_TIME_ADJNTPVAL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_TIME_ADJNTPVAL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_TIME_ADJNTPVAL)
#endif
#if defined(AUDIT_BPF) || (defined(HAVE_DECL_AUDIT_BPF) && HAVE_DECL_AUDIT_BPF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_BPF) == (1334), "AUDIT_BPF != 1334");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_BPF 1334
#endif
#if defined(AUDIT_BPF) || (defined(HAVE_DECL_AUDIT_BPF) && HAVE_DECL_AUDIT_BPF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_BPF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_BPF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_BPF)
#endif
#if defined(AUDIT_EVENT_LISTENER) || (defined(HAVE_DECL_AUDIT_EVENT_LISTENER) && HAVE_DECL_AUDIT_EVENT_LISTENER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_EVENT_LISTENER) == (1335), "AUDIT_EVENT_LISTENER != 1335");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_EVENT_LISTENER 1335
#endif
#if defined(AUDIT_EVENT_LISTENER) || (defined(HAVE_DECL_AUDIT_EVENT_LISTENER) && HAVE_DECL_AUDIT_EVENT_LISTENER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_EVENT_LISTENER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_EVENT_LISTENER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_EVENT_LISTENER)
#endif
#if defined(AUDIT_URINGOP) || (defined(HAVE_DECL_AUDIT_URINGOP) && HAVE_DECL_AUDIT_URINGOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_URINGOP) == (1336), "AUDIT_URINGOP != 1336");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_URINGOP 1336
#endif
#if defined(AUDIT_URINGOP) || (defined(HAVE_DECL_AUDIT_URINGOP) && HAVE_DECL_AUDIT_URINGOP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_URINGOP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_URINGOP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_URINGOP)
#endif
#if defined(AUDIT_OPENAT2) || (defined(HAVE_DECL_AUDIT_OPENAT2) && HAVE_DECL_AUDIT_OPENAT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_OPENAT2) == (1337), "AUDIT_OPENAT2 != 1337");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_OPENAT2 1337
#endif
#if defined(AUDIT_OPENAT2) || (defined(HAVE_DECL_AUDIT_OPENAT2) && HAVE_DECL_AUDIT_OPENAT2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_OPENAT2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_OPENAT2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_OPENAT2)
#endif
#if defined(AUDIT_DM_CTRL) || (defined(HAVE_DECL_AUDIT_DM_CTRL) && HAVE_DECL_AUDIT_DM_CTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_DM_CTRL) == (1338), "AUDIT_DM_CTRL != 1338");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_DM_CTRL 1338
#endif
#if defined(AUDIT_DM_CTRL) || (defined(HAVE_DECL_AUDIT_DM_CTRL) && HAVE_DECL_AUDIT_DM_CTRL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_DM_CTRL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_DM_CTRL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_DM_CTRL)
#endif
#if defined(AUDIT_DM_EVENT) || (defined(HAVE_DECL_AUDIT_DM_EVENT) && HAVE_DECL_AUDIT_DM_EVENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_DM_EVENT) == (1339), "AUDIT_DM_EVENT != 1339");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_DM_EVENT 1339
#endif
#if defined(AUDIT_DM_EVENT) || (defined(HAVE_DECL_AUDIT_DM_EVENT) && HAVE_DECL_AUDIT_DM_EVENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_DM_EVENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_DM_EVENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_DM_EVENT)
#endif
#if defined(AUDIT_AVC) || (defined(HAVE_DECL_AUDIT_AVC) && HAVE_DECL_AUDIT_AVC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_AVC) == (1400), "AUDIT_AVC != 1400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_AVC 1400
#endif
#if defined(AUDIT_AVC) || (defined(HAVE_DECL_AUDIT_AVC) && HAVE_DECL_AUDIT_AVC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_AVC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_AVC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_AVC)
#endif
#if defined(AUDIT_SELINUX_ERR) || (defined(HAVE_DECL_AUDIT_SELINUX_ERR) && HAVE_DECL_AUDIT_SELINUX_ERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_SELINUX_ERR) == (1401), "AUDIT_SELINUX_ERR != 1401");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_SELINUX_ERR 1401
#endif
#if defined(AUDIT_SELINUX_ERR) || (defined(HAVE_DECL_AUDIT_SELINUX_ERR) && HAVE_DECL_AUDIT_SELINUX_ERR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_SELINUX_ERR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_SELINUX_ERR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_SELINUX_ERR)
#endif
#if defined(AUDIT_AVC_PATH) || (defined(HAVE_DECL_AUDIT_AVC_PATH) && HAVE_DECL_AUDIT_AVC_PATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_AVC_PATH) == (1402), "AUDIT_AVC_PATH != 1402");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_AVC_PATH 1402
#endif
#if defined(AUDIT_AVC_PATH) || (defined(HAVE_DECL_AUDIT_AVC_PATH) && HAVE_DECL_AUDIT_AVC_PATH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_AVC_PATH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_AVC_PATH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_AVC_PATH)
#endif
#if defined(AUDIT_MAC_POLICY_LOAD) || (defined(HAVE_DECL_AUDIT_MAC_POLICY_LOAD) && HAVE_DECL_AUDIT_MAC_POLICY_LOAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_POLICY_LOAD) == (1403), "AUDIT_MAC_POLICY_LOAD != 1403");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_POLICY_LOAD 1403
#endif
#if defined(AUDIT_MAC_POLICY_LOAD) || (defined(HAVE_DECL_AUDIT_MAC_POLICY_LOAD) && HAVE_DECL_AUDIT_MAC_POLICY_LOAD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_POLICY_LOAD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_POLICY_LOAD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_POLICY_LOAD)
#endif
#if defined(AUDIT_MAC_STATUS) || (defined(HAVE_DECL_AUDIT_MAC_STATUS) && HAVE_DECL_AUDIT_MAC_STATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_STATUS) == (1404), "AUDIT_MAC_STATUS != 1404");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_STATUS 1404
#endif
#if defined(AUDIT_MAC_STATUS) || (defined(HAVE_DECL_AUDIT_MAC_STATUS) && HAVE_DECL_AUDIT_MAC_STATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_STATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_STATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_STATUS)
#endif
#if defined(AUDIT_MAC_CONFIG_CHANGE) || (defined(HAVE_DECL_AUDIT_MAC_CONFIG_CHANGE) && HAVE_DECL_AUDIT_MAC_CONFIG_CHANGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_CONFIG_CHANGE) == (1405), "AUDIT_MAC_CONFIG_CHANGE != 1405");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_CONFIG_CHANGE 1405
#endif
#if defined(AUDIT_MAC_CONFIG_CHANGE) || (defined(HAVE_DECL_AUDIT_MAC_CONFIG_CHANGE) && HAVE_DECL_AUDIT_MAC_CONFIG_CHANGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_CONFIG_CHANGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_CONFIG_CHANGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_CONFIG_CHANGE)
#endif
#if defined(AUDIT_MAC_UNLBL_ALLOW) || (defined(HAVE_DECL_AUDIT_MAC_UNLBL_ALLOW) && HAVE_DECL_AUDIT_MAC_UNLBL_ALLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_UNLBL_ALLOW) == (1406), "AUDIT_MAC_UNLBL_ALLOW != 1406");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_UNLBL_ALLOW 1406
#endif
#if defined(AUDIT_MAC_UNLBL_ALLOW) || (defined(HAVE_DECL_AUDIT_MAC_UNLBL_ALLOW) && HAVE_DECL_AUDIT_MAC_UNLBL_ALLOW)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_UNLBL_ALLOW)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_UNLBL_ALLOW"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_UNLBL_ALLOW)
#endif
#if defined(AUDIT_MAC_CIPSOV4_ADD) || (defined(HAVE_DECL_AUDIT_MAC_CIPSOV4_ADD) && HAVE_DECL_AUDIT_MAC_CIPSOV4_ADD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_CIPSOV4_ADD) == (1407), "AUDIT_MAC_CIPSOV4_ADD != 1407");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_CIPSOV4_ADD 1407
#endif
#if defined(AUDIT_MAC_CIPSOV4_ADD) || (defined(HAVE_DECL_AUDIT_MAC_CIPSOV4_ADD) && HAVE_DECL_AUDIT_MAC_CIPSOV4_ADD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_CIPSOV4_ADD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_CIPSOV4_ADD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_CIPSOV4_ADD)
#endif
#if defined(AUDIT_MAC_CIPSOV4_DEL) || (defined(HAVE_DECL_AUDIT_MAC_CIPSOV4_DEL) && HAVE_DECL_AUDIT_MAC_CIPSOV4_DEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_CIPSOV4_DEL) == (1408), "AUDIT_MAC_CIPSOV4_DEL != 1408");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_CIPSOV4_DEL 1408
#endif
#if defined(AUDIT_MAC_CIPSOV4_DEL) || (defined(HAVE_DECL_AUDIT_MAC_CIPSOV4_DEL) && HAVE_DECL_AUDIT_MAC_CIPSOV4_DEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_CIPSOV4_DEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_CIPSOV4_DEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_CIPSOV4_DEL)
#endif
#if defined(AUDIT_MAC_MAP_ADD) || (defined(HAVE_DECL_AUDIT_MAC_MAP_ADD) && HAVE_DECL_AUDIT_MAC_MAP_ADD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_MAP_ADD) == (1409), "AUDIT_MAC_MAP_ADD != 1409");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_MAP_ADD 1409
#endif
#if defined(AUDIT_MAC_MAP_ADD) || (defined(HAVE_DECL_AUDIT_MAC_MAP_ADD) && HAVE_DECL_AUDIT_MAC_MAP_ADD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_MAP_ADD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_MAP_ADD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_MAP_ADD)
#endif
#if defined(AUDIT_MAC_MAP_DEL) || (defined(HAVE_DECL_AUDIT_MAC_MAP_DEL) && HAVE_DECL_AUDIT_MAC_MAP_DEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_MAP_DEL) == (1410), "AUDIT_MAC_MAP_DEL != 1410");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_MAP_DEL 1410
#endif
#if defined(AUDIT_MAC_MAP_DEL) || (defined(HAVE_DECL_AUDIT_MAC_MAP_DEL) && HAVE_DECL_AUDIT_MAC_MAP_DEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_MAP_DEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_MAP_DEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_MAP_DEL)
#endif
#if defined(AUDIT_MAC_IPSEC_ADDSA) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_ADDSA) && HAVE_DECL_AUDIT_MAC_IPSEC_ADDSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_IPSEC_ADDSA) == (1411), "AUDIT_MAC_IPSEC_ADDSA != 1411");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_IPSEC_ADDSA 1411
#endif
#if defined(AUDIT_MAC_IPSEC_ADDSA) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_ADDSA) && HAVE_DECL_AUDIT_MAC_IPSEC_ADDSA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_IPSEC_ADDSA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_IPSEC_ADDSA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_IPSEC_ADDSA)
#endif
#if defined(AUDIT_MAC_IPSEC_DELSA) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_DELSA) && HAVE_DECL_AUDIT_MAC_IPSEC_DELSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_IPSEC_DELSA) == (1412), "AUDIT_MAC_IPSEC_DELSA != 1412");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_IPSEC_DELSA 1412
#endif
#if defined(AUDIT_MAC_IPSEC_DELSA) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_DELSA) && HAVE_DECL_AUDIT_MAC_IPSEC_DELSA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_IPSEC_DELSA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_IPSEC_DELSA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_IPSEC_DELSA)
#endif
#if defined(AUDIT_MAC_IPSEC_ADDSPD) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_ADDSPD) && HAVE_DECL_AUDIT_MAC_IPSEC_ADDSPD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_IPSEC_ADDSPD) == (1413), "AUDIT_MAC_IPSEC_ADDSPD != 1413");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_IPSEC_ADDSPD 1413
#endif
#if defined(AUDIT_MAC_IPSEC_ADDSPD) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_ADDSPD) && HAVE_DECL_AUDIT_MAC_IPSEC_ADDSPD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_IPSEC_ADDSPD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_IPSEC_ADDSPD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_IPSEC_ADDSPD)
#endif
#if defined(AUDIT_MAC_IPSEC_DELSPD) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_DELSPD) && HAVE_DECL_AUDIT_MAC_IPSEC_DELSPD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_IPSEC_DELSPD) == (1414), "AUDIT_MAC_IPSEC_DELSPD != 1414");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_IPSEC_DELSPD 1414
#endif
#if defined(AUDIT_MAC_IPSEC_DELSPD) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_DELSPD) && HAVE_DECL_AUDIT_MAC_IPSEC_DELSPD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_IPSEC_DELSPD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_IPSEC_DELSPD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_IPSEC_DELSPD)
#endif
#if defined(AUDIT_MAC_IPSEC_EVENT) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_EVENT) && HAVE_DECL_AUDIT_MAC_IPSEC_EVENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_IPSEC_EVENT) == (1415), "AUDIT_MAC_IPSEC_EVENT != 1415");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_IPSEC_EVENT 1415
#endif
#if defined(AUDIT_MAC_IPSEC_EVENT) || (defined(HAVE_DECL_AUDIT_MAC_IPSEC_EVENT) && HAVE_DECL_AUDIT_MAC_IPSEC_EVENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_IPSEC_EVENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_IPSEC_EVENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_IPSEC_EVENT)
#endif
#if defined(AUDIT_MAC_UNLBL_STCADD) || (defined(HAVE_DECL_AUDIT_MAC_UNLBL_STCADD) && HAVE_DECL_AUDIT_MAC_UNLBL_STCADD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_UNLBL_STCADD) == (1416), "AUDIT_MAC_UNLBL_STCADD != 1416");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_UNLBL_STCADD 1416
#endif
#if defined(AUDIT_MAC_UNLBL_STCADD) || (defined(HAVE_DECL_AUDIT_MAC_UNLBL_STCADD) && HAVE_DECL_AUDIT_MAC_UNLBL_STCADD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_UNLBL_STCADD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_UNLBL_STCADD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_UNLBL_STCADD)
#endif
#if defined(AUDIT_MAC_UNLBL_STCDEL) || (defined(HAVE_DECL_AUDIT_MAC_UNLBL_STCDEL) && HAVE_DECL_AUDIT_MAC_UNLBL_STCDEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_UNLBL_STCDEL) == (1417), "AUDIT_MAC_UNLBL_STCDEL != 1417");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_UNLBL_STCDEL 1417
#endif
#if defined(AUDIT_MAC_UNLBL_STCDEL) || (defined(HAVE_DECL_AUDIT_MAC_UNLBL_STCDEL) && HAVE_DECL_AUDIT_MAC_UNLBL_STCDEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_UNLBL_STCDEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_UNLBL_STCDEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_UNLBL_STCDEL)
#endif
#if defined(AUDIT_MAC_CALIPSO_ADD) || (defined(HAVE_DECL_AUDIT_MAC_CALIPSO_ADD) && HAVE_DECL_AUDIT_MAC_CALIPSO_ADD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_CALIPSO_ADD) == (1418), "AUDIT_MAC_CALIPSO_ADD != 1418");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_CALIPSO_ADD 1418
#endif
#if defined(AUDIT_MAC_CALIPSO_ADD) || (defined(HAVE_DECL_AUDIT_MAC_CALIPSO_ADD) && HAVE_DECL_AUDIT_MAC_CALIPSO_ADD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_CALIPSO_ADD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_CALIPSO_ADD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_CALIPSO_ADD)
#endif
#if defined(AUDIT_MAC_CALIPSO_DEL) || (defined(HAVE_DECL_AUDIT_MAC_CALIPSO_DEL) && HAVE_DECL_AUDIT_MAC_CALIPSO_DEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_MAC_CALIPSO_DEL) == (1419), "AUDIT_MAC_CALIPSO_DEL != 1419");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_MAC_CALIPSO_DEL 1419
#endif
#if defined(AUDIT_MAC_CALIPSO_DEL) || (defined(HAVE_DECL_AUDIT_MAC_CALIPSO_DEL) && HAVE_DECL_AUDIT_MAC_CALIPSO_DEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_MAC_CALIPSO_DEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_MAC_CALIPSO_DEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_MAC_CALIPSO_DEL)
#endif
#if defined(AUDIT_ANOM_PROMISCUOUS) || (defined(HAVE_DECL_AUDIT_ANOM_PROMISCUOUS) && HAVE_DECL_AUDIT_ANOM_PROMISCUOUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ANOM_PROMISCUOUS) == (1700), "AUDIT_ANOM_PROMISCUOUS != 1700");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ANOM_PROMISCUOUS 1700
#endif
#if defined(AUDIT_ANOM_PROMISCUOUS) || (defined(HAVE_DECL_AUDIT_ANOM_PROMISCUOUS) && HAVE_DECL_AUDIT_ANOM_PROMISCUOUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_ANOM_PROMISCUOUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_ANOM_PROMISCUOUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_ANOM_PROMISCUOUS)
#endif
#if defined(AUDIT_ANOM_ABEND) || (defined(HAVE_DECL_AUDIT_ANOM_ABEND) && HAVE_DECL_AUDIT_ANOM_ABEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ANOM_ABEND) == (1701), "AUDIT_ANOM_ABEND != 1701");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ANOM_ABEND 1701
#endif
#if defined(AUDIT_ANOM_ABEND) || (defined(HAVE_DECL_AUDIT_ANOM_ABEND) && HAVE_DECL_AUDIT_ANOM_ABEND)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_ANOM_ABEND)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_ANOM_ABEND"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_ANOM_ABEND)
#endif
#if defined(AUDIT_ANOM_LINK) || (defined(HAVE_DECL_AUDIT_ANOM_LINK) && HAVE_DECL_AUDIT_ANOM_LINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ANOM_LINK) == (1702), "AUDIT_ANOM_LINK != 1702");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ANOM_LINK 1702
#endif
#if defined(AUDIT_ANOM_LINK) || (defined(HAVE_DECL_AUDIT_ANOM_LINK) && HAVE_DECL_AUDIT_ANOM_LINK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_ANOM_LINK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_ANOM_LINK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_ANOM_LINK)
#endif
#if defined(AUDIT_ANOM_CREAT) || (defined(HAVE_DECL_AUDIT_ANOM_CREAT) && HAVE_DECL_AUDIT_ANOM_CREAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ANOM_CREAT) == (1703), "AUDIT_ANOM_CREAT != 1703");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ANOM_CREAT 1703
#endif
#if defined(AUDIT_ANOM_CREAT) || (defined(HAVE_DECL_AUDIT_ANOM_CREAT) && HAVE_DECL_AUDIT_ANOM_CREAT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_ANOM_CREAT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_ANOM_CREAT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_ANOM_CREAT)
#endif
#if defined(AUDIT_LAST_KERN_ANOM_MSG) || (defined(HAVE_DECL_AUDIT_LAST_KERN_ANOM_MSG) && HAVE_DECL_AUDIT_LAST_KERN_ANOM_MSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_LAST_KERN_ANOM_MSG) == (1799), "AUDIT_LAST_KERN_ANOM_MSG != 1799");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_LAST_KERN_ANOM_MSG 1799
#endif
#if defined(AUDIT_LAST_KERN_ANOM_MSG) || (defined(HAVE_DECL_AUDIT_LAST_KERN_ANOM_MSG) && HAVE_DECL_AUDIT_LAST_KERN_ANOM_MSG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_LAST_KERN_ANOM_MSG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_LAST_KERN_ANOM_MSG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_LAST_KERN_ANOM_MSG)
#endif
#if defined(AUDIT_INTEGRITY_DATA) || (defined(HAVE_DECL_AUDIT_INTEGRITY_DATA) && HAVE_DECL_AUDIT_INTEGRITY_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_INTEGRITY_DATA) == (1800), "AUDIT_INTEGRITY_DATA != 1800");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_INTEGRITY_DATA 1800
#endif
#if defined(AUDIT_INTEGRITY_DATA) || (defined(HAVE_DECL_AUDIT_INTEGRITY_DATA) && HAVE_DECL_AUDIT_INTEGRITY_DATA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_INTEGRITY_DATA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_INTEGRITY_DATA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_INTEGRITY_DATA)
#endif
#if defined(AUDIT_INTEGRITY_METADATA) || (defined(HAVE_DECL_AUDIT_INTEGRITY_METADATA) && HAVE_DECL_AUDIT_INTEGRITY_METADATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_INTEGRITY_METADATA) == (1801), "AUDIT_INTEGRITY_METADATA != 1801");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_INTEGRITY_METADATA 1801
#endif
#if defined(AUDIT_INTEGRITY_METADATA) || (defined(HAVE_DECL_AUDIT_INTEGRITY_METADATA) && HAVE_DECL_AUDIT_INTEGRITY_METADATA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_INTEGRITY_METADATA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_INTEGRITY_METADATA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_INTEGRITY_METADATA)
#endif
#if defined(AUDIT_INTEGRITY_STATUS) || (defined(HAVE_DECL_AUDIT_INTEGRITY_STATUS) && HAVE_DECL_AUDIT_INTEGRITY_STATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_INTEGRITY_STATUS) == (1802), "AUDIT_INTEGRITY_STATUS != 1802");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_INTEGRITY_STATUS 1802
#endif
#if defined(AUDIT_INTEGRITY_STATUS) || (defined(HAVE_DECL_AUDIT_INTEGRITY_STATUS) && HAVE_DECL_AUDIT_INTEGRITY_STATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_INTEGRITY_STATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_INTEGRITY_STATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_INTEGRITY_STATUS)
#endif
#if defined(AUDIT_INTEGRITY_HASH) || (defined(HAVE_DECL_AUDIT_INTEGRITY_HASH) && HAVE_DECL_AUDIT_INTEGRITY_HASH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_INTEGRITY_HASH) == (1803), "AUDIT_INTEGRITY_HASH != 1803");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_INTEGRITY_HASH 1803
#endif
#if defined(AUDIT_INTEGRITY_HASH) || (defined(HAVE_DECL_AUDIT_INTEGRITY_HASH) && HAVE_DECL_AUDIT_INTEGRITY_HASH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_INTEGRITY_HASH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_INTEGRITY_HASH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_INTEGRITY_HASH)
#endif
#if defined(AUDIT_INTEGRITY_PCR) || (defined(HAVE_DECL_AUDIT_INTEGRITY_PCR) && HAVE_DECL_AUDIT_INTEGRITY_PCR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_INTEGRITY_PCR) == (1804), "AUDIT_INTEGRITY_PCR != 1804");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_INTEGRITY_PCR 1804
#endif
#if defined(AUDIT_INTEGRITY_PCR) || (defined(HAVE_DECL_AUDIT_INTEGRITY_PCR) && HAVE_DECL_AUDIT_INTEGRITY_PCR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_INTEGRITY_PCR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_INTEGRITY_PCR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_INTEGRITY_PCR)
#endif
#if defined(AUDIT_INTEGRITY_RULE) || (defined(HAVE_DECL_AUDIT_INTEGRITY_RULE) && HAVE_DECL_AUDIT_INTEGRITY_RULE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_INTEGRITY_RULE) == (1805), "AUDIT_INTEGRITY_RULE != 1805");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_INTEGRITY_RULE 1805
#endif
#if defined(AUDIT_INTEGRITY_RULE) || (defined(HAVE_DECL_AUDIT_INTEGRITY_RULE) && HAVE_DECL_AUDIT_INTEGRITY_RULE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_INTEGRITY_RULE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_INTEGRITY_RULE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_INTEGRITY_RULE)
#endif
#if defined(AUDIT_INTEGRITY_EVM_XATTR) || (defined(HAVE_DECL_AUDIT_INTEGRITY_EVM_XATTR) && HAVE_DECL_AUDIT_INTEGRITY_EVM_XATTR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_INTEGRITY_EVM_XATTR) == (1806), "AUDIT_INTEGRITY_EVM_XATTR != 1806");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_INTEGRITY_EVM_XATTR 1806
#endif
#if defined(AUDIT_INTEGRITY_EVM_XATTR) || (defined(HAVE_DECL_AUDIT_INTEGRITY_EVM_XATTR) && HAVE_DECL_AUDIT_INTEGRITY_EVM_XATTR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_INTEGRITY_EVM_XATTR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_INTEGRITY_EVM_XATTR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_INTEGRITY_EVM_XATTR)
#endif
#if defined(AUDIT_INTEGRITY_POLICY_RULE) || (defined(HAVE_DECL_AUDIT_INTEGRITY_POLICY_RULE) && HAVE_DECL_AUDIT_INTEGRITY_POLICY_RULE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_INTEGRITY_POLICY_RULE) == (1807), "AUDIT_INTEGRITY_POLICY_RULE != 1807");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_INTEGRITY_POLICY_RULE 1807
#endif
#if defined(AUDIT_INTEGRITY_POLICY_RULE) || (defined(HAVE_DECL_AUDIT_INTEGRITY_POLICY_RULE) && HAVE_DECL_AUDIT_INTEGRITY_POLICY_RULE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_INTEGRITY_POLICY_RULE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_INTEGRITY_POLICY_RULE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_INTEGRITY_POLICY_RULE)
#endif
#if defined(AUDIT_KERNEL) || (defined(HAVE_DECL_AUDIT_KERNEL) && HAVE_DECL_AUDIT_KERNEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_KERNEL) == (2000), "AUDIT_KERNEL != 2000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_KERNEL 2000
#endif
#if defined(AUDIT_KERNEL) || (defined(HAVE_DECL_AUDIT_KERNEL) && HAVE_DECL_AUDIT_KERNEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_KERNEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_KERNEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_KERNEL)
#endif
#if defined(AUDIT_FIRST_USER_MSG2) || (defined(HAVE_DECL_AUDIT_FIRST_USER_MSG2) && HAVE_DECL_AUDIT_FIRST_USER_MSG2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_FIRST_USER_MSG2) == (2100), "AUDIT_FIRST_USER_MSG2 != 2100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_FIRST_USER_MSG2 2100
#endif
#if defined(AUDIT_FIRST_USER_MSG2) || (defined(HAVE_DECL_AUDIT_FIRST_USER_MSG2) && HAVE_DECL_AUDIT_FIRST_USER_MSG2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_FIRST_USER_MSG2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_FIRST_USER_MSG2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_FIRST_USER_MSG2)
#endif
#if defined(AUDIT_LAST_USER_MSG2) || (defined(HAVE_DECL_AUDIT_LAST_USER_MSG2) && HAVE_DECL_AUDIT_LAST_USER_MSG2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_LAST_USER_MSG2) == (2999), "AUDIT_LAST_USER_MSG2 != 2999");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_LAST_USER_MSG2 2999
#endif
#if defined(AUDIT_LAST_USER_MSG2) || (defined(HAVE_DECL_AUDIT_LAST_USER_MSG2) && HAVE_DECL_AUDIT_LAST_USER_MSG2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (AUDIT_LAST_USER_MSG2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: AUDIT_LAST_USER_MSG2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (AUDIT_LAST_USER_MSG2)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat nl_audit_types in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data nl_audit_types_xdata[] = {
 XLAT(AUDIT_GET),
 #define XLAT_VAL_0 ((unsigned) (AUDIT_GET))
 #define XLAT_STR_0 STRINGIFY(AUDIT_GET)
 XLAT(AUDIT_SET),
 #define XLAT_VAL_1 ((unsigned) (AUDIT_SET))
 #define XLAT_STR_1 STRINGIFY(AUDIT_SET)
 XLAT(AUDIT_LIST),
 #define XLAT_VAL_2 ((unsigned) (AUDIT_LIST))
 #define XLAT_STR_2 STRINGIFY(AUDIT_LIST)
 XLAT(AUDIT_ADD),
 #define XLAT_VAL_3 ((unsigned) (AUDIT_ADD))
 #define XLAT_STR_3 STRINGIFY(AUDIT_ADD)
 XLAT(AUDIT_DEL),
 #define XLAT_VAL_4 ((unsigned) (AUDIT_DEL))
 #define XLAT_STR_4 STRINGIFY(AUDIT_DEL)
 XLAT(AUDIT_USER),
 #define XLAT_VAL_5 ((unsigned) (AUDIT_USER))
 #define XLAT_STR_5 STRINGIFY(AUDIT_USER)
 XLAT(AUDIT_LOGIN),
 #define XLAT_VAL_6 ((unsigned) (AUDIT_LOGIN))
 #define XLAT_STR_6 STRINGIFY(AUDIT_LOGIN)
 XLAT(AUDIT_WATCH_INS),
 #define XLAT_VAL_7 ((unsigned) (AUDIT_WATCH_INS))
 #define XLAT_STR_7 STRINGIFY(AUDIT_WATCH_INS)
 XLAT(AUDIT_WATCH_REM),
 #define XLAT_VAL_8 ((unsigned) (AUDIT_WATCH_REM))
 #define XLAT_STR_8 STRINGIFY(AUDIT_WATCH_REM)
 XLAT(AUDIT_WATCH_LIST),
 #define XLAT_VAL_9 ((unsigned) (AUDIT_WATCH_LIST))
 #define XLAT_STR_9 STRINGIFY(AUDIT_WATCH_LIST)
 XLAT(AUDIT_SIGNAL_INFO),
 #define XLAT_VAL_10 ((unsigned) (AUDIT_SIGNAL_INFO))
 #define XLAT_STR_10 STRINGIFY(AUDIT_SIGNAL_INFO)
 XLAT(AUDIT_ADD_RULE),
 #define XLAT_VAL_11 ((unsigned) (AUDIT_ADD_RULE))
 #define XLAT_STR_11 STRINGIFY(AUDIT_ADD_RULE)
 XLAT(AUDIT_DEL_RULE),
 #define XLAT_VAL_12 ((unsigned) (AUDIT_DEL_RULE))
 #define XLAT_STR_12 STRINGIFY(AUDIT_DEL_RULE)
 XLAT(AUDIT_LIST_RULES),
 #define XLAT_VAL_13 ((unsigned) (AUDIT_LIST_RULES))
 #define XLAT_STR_13 STRINGIFY(AUDIT_LIST_RULES)
 XLAT(AUDIT_TRIM),
 #define XLAT_VAL_14 ((unsigned) (AUDIT_TRIM))
 #define XLAT_STR_14 STRINGIFY(AUDIT_TRIM)
 XLAT(AUDIT_MAKE_EQUIV),
 #define XLAT_VAL_15 ((unsigned) (AUDIT_MAKE_EQUIV))
 #define XLAT_STR_15 STRINGIFY(AUDIT_MAKE_EQUIV)
 XLAT(AUDIT_TTY_GET),
 #define XLAT_VAL_16 ((unsigned) (AUDIT_TTY_GET))
 #define XLAT_STR_16 STRINGIFY(AUDIT_TTY_GET)
 XLAT(AUDIT_TTY_SET),
 #define XLAT_VAL_17 ((unsigned) (AUDIT_TTY_SET))
 #define XLAT_STR_17 STRINGIFY(AUDIT_TTY_SET)
 XLAT(AUDIT_SET_FEATURE),
 #define XLAT_VAL_18 ((unsigned) (AUDIT_SET_FEATURE))
 #define XLAT_STR_18 STRINGIFY(AUDIT_SET_FEATURE)
 XLAT(AUDIT_GET_FEATURE),
 #define XLAT_VAL_19 ((unsigned) (AUDIT_GET_FEATURE))
 #define XLAT_STR_19 STRINGIFY(AUDIT_GET_FEATURE)

 XLAT(AUDIT_FIRST_USER_MSG),
 #define XLAT_VAL_20 ((unsigned) (AUDIT_FIRST_USER_MSG))
 #define XLAT_STR_20 STRINGIFY(AUDIT_FIRST_USER_MSG)
 XLAT(AUDIT_USER_AVC),
 #define XLAT_VAL_21 ((unsigned) (AUDIT_USER_AVC))
 #define XLAT_STR_21 STRINGIFY(AUDIT_USER_AVC)
 XLAT(AUDIT_USER_TTY),
 #define XLAT_VAL_22 ((unsigned) (AUDIT_USER_TTY))
 #define XLAT_STR_22 STRINGIFY(AUDIT_USER_TTY)
 XLAT(AUDIT_LAST_USER_MSG),
 #define XLAT_VAL_23 ((unsigned) (AUDIT_LAST_USER_MSG))
 #define XLAT_STR_23 STRINGIFY(AUDIT_LAST_USER_MSG)

 XLAT(AUDIT_DAEMON_START),
 #define XLAT_VAL_24 ((unsigned) (AUDIT_DAEMON_START))
 #define XLAT_STR_24 STRINGIFY(AUDIT_DAEMON_START)
 XLAT(AUDIT_DAEMON_END),
 #define XLAT_VAL_25 ((unsigned) (AUDIT_DAEMON_END))
 #define XLAT_STR_25 STRINGIFY(AUDIT_DAEMON_END)
 XLAT(AUDIT_DAEMON_ABORT),
 #define XLAT_VAL_26 ((unsigned) (AUDIT_DAEMON_ABORT))
 #define XLAT_STR_26 STRINGIFY(AUDIT_DAEMON_ABORT)
 XLAT(AUDIT_DAEMON_CONFIG),
 #define XLAT_VAL_27 ((unsigned) (AUDIT_DAEMON_CONFIG))
 #define XLAT_STR_27 STRINGIFY(AUDIT_DAEMON_CONFIG)

 XLAT(AUDIT_SYSCALL),
 #define XLAT_VAL_28 ((unsigned) (AUDIT_SYSCALL))
 #define XLAT_STR_28 STRINGIFY(AUDIT_SYSCALL)
 XLAT(AUDIT_FS_WATCH),
 #define XLAT_VAL_29 ((unsigned) (AUDIT_FS_WATCH))
 #define XLAT_STR_29 STRINGIFY(AUDIT_FS_WATCH)
 XLAT(AUDIT_PATH),
 #define XLAT_VAL_30 ((unsigned) (AUDIT_PATH))
 #define XLAT_STR_30 STRINGIFY(AUDIT_PATH)
 XLAT(AUDIT_IPC),
 #define XLAT_VAL_31 ((unsigned) (AUDIT_IPC))
 #define XLAT_STR_31 STRINGIFY(AUDIT_IPC)
 XLAT(AUDIT_SOCKETCALL),
 #define XLAT_VAL_32 ((unsigned) (AUDIT_SOCKETCALL))
 #define XLAT_STR_32 STRINGIFY(AUDIT_SOCKETCALL)
 XLAT(AUDIT_CONFIG_CHANGE),
 #define XLAT_VAL_33 ((unsigned) (AUDIT_CONFIG_CHANGE))
 #define XLAT_STR_33 STRINGIFY(AUDIT_CONFIG_CHANGE)
 XLAT(AUDIT_SOCKADDR),
 #define XLAT_VAL_34 ((unsigned) (AUDIT_SOCKADDR))
 #define XLAT_STR_34 STRINGIFY(AUDIT_SOCKADDR)
 XLAT(AUDIT_CWD),
 #define XLAT_VAL_35 ((unsigned) (AUDIT_CWD))
 #define XLAT_STR_35 STRINGIFY(AUDIT_CWD)
 XLAT(AUDIT_EXECVE),
 #define XLAT_VAL_36 ((unsigned) (AUDIT_EXECVE))
 #define XLAT_STR_36 STRINGIFY(AUDIT_EXECVE)
 XLAT(AUDIT_IPC_SET_PERM),
 #define XLAT_VAL_37 ((unsigned) (AUDIT_IPC_SET_PERM))
 #define XLAT_STR_37 STRINGIFY(AUDIT_IPC_SET_PERM)
 XLAT(AUDIT_MQ_OPEN),
 #define XLAT_VAL_38 ((unsigned) (AUDIT_MQ_OPEN))
 #define XLAT_STR_38 STRINGIFY(AUDIT_MQ_OPEN)
 XLAT(AUDIT_MQ_SENDRECV),
 #define XLAT_VAL_39 ((unsigned) (AUDIT_MQ_SENDRECV))
 #define XLAT_STR_39 STRINGIFY(AUDIT_MQ_SENDRECV)
 XLAT(AUDIT_MQ_NOTIFY),
 #define XLAT_VAL_40 ((unsigned) (AUDIT_MQ_NOTIFY))
 #define XLAT_STR_40 STRINGIFY(AUDIT_MQ_NOTIFY)
 XLAT(AUDIT_MQ_GETSETATTR),
 #define XLAT_VAL_41 ((unsigned) (AUDIT_MQ_GETSETATTR))
 #define XLAT_STR_41 STRINGIFY(AUDIT_MQ_GETSETATTR)
 XLAT(AUDIT_KERNEL_OTHER),
 #define XLAT_VAL_42 ((unsigned) (AUDIT_KERNEL_OTHER))
 #define XLAT_STR_42 STRINGIFY(AUDIT_KERNEL_OTHER)
 XLAT(AUDIT_FD_PAIR),
 #define XLAT_VAL_43 ((unsigned) (AUDIT_FD_PAIR))
 #define XLAT_STR_43 STRINGIFY(AUDIT_FD_PAIR)
 XLAT(AUDIT_OBJ_PID),
 #define XLAT_VAL_44 ((unsigned) (AUDIT_OBJ_PID))
 #define XLAT_STR_44 STRINGIFY(AUDIT_OBJ_PID)
 XLAT(AUDIT_TTY),
 #define XLAT_VAL_45 ((unsigned) (AUDIT_TTY))
 #define XLAT_STR_45 STRINGIFY(AUDIT_TTY)
 XLAT(AUDIT_EOE),
 #define XLAT_VAL_46 ((unsigned) (AUDIT_EOE))
 #define XLAT_STR_46 STRINGIFY(AUDIT_EOE)
 XLAT(AUDIT_BPRM_FCAPS),
 #define XLAT_VAL_47 ((unsigned) (AUDIT_BPRM_FCAPS))
 #define XLAT_STR_47 STRINGIFY(AUDIT_BPRM_FCAPS)
 XLAT(AUDIT_CAPSET),
 #define XLAT_VAL_48 ((unsigned) (AUDIT_CAPSET))
 #define XLAT_STR_48 STRINGIFY(AUDIT_CAPSET)
 XLAT(AUDIT_MMAP),
 #define XLAT_VAL_49 ((unsigned) (AUDIT_MMAP))
 #define XLAT_STR_49 STRINGIFY(AUDIT_MMAP)
 XLAT(AUDIT_NETFILTER_PKT),
 #define XLAT_VAL_50 ((unsigned) (AUDIT_NETFILTER_PKT))
 #define XLAT_STR_50 STRINGIFY(AUDIT_NETFILTER_PKT)
 XLAT(AUDIT_NETFILTER_CFG),
 #define XLAT_VAL_51 ((unsigned) (AUDIT_NETFILTER_CFG))
 #define XLAT_STR_51 STRINGIFY(AUDIT_NETFILTER_CFG)
 XLAT(AUDIT_SECCOMP),
 #define XLAT_VAL_52 ((unsigned) (AUDIT_SECCOMP))
 #define XLAT_STR_52 STRINGIFY(AUDIT_SECCOMP)
 XLAT(AUDIT_PROCTITLE),
 #define XLAT_VAL_53 ((unsigned) (AUDIT_PROCTITLE))
 #define XLAT_STR_53 STRINGIFY(AUDIT_PROCTITLE)

#ifndef STRACE_WORKAROUND_FOR_AUDIT_FEATURE_CHANGE
# define STRACE_WORKAROUND_FOR_AUDIT_FEATURE_CHANGE
/*
* Linux kernel commit v3.15-rc1~18^2~1 has changed the value
* of AUDIT_FEATURE_CHANGE constant introduced by commit v3.13-rc1~19^2~20
* which is of course an ABI breakage that affected 3.13 and 3.14 kernel
* releases as well as their LTS derivatives.
* Linux kernel commit v3.15-rc1~18^2~1 also claims that the old value
* of AUDIT_FEATURE_CHANGE was ignored by userspace because of the established
* convention how netlink messages for the audit system are divided into blocks.
* Looks like the best way to handle this situation is to pretend that
* the old value of AUDIT_FEATURE_CHANGE didn't exist.
*/
# undef AUDIT_FEATURE_CHANGE
#endif
 XLAT(AUDIT_FEATURE_CHANGE),
 #define XLAT_VAL_54 ((unsigned) (AUDIT_FEATURE_CHANGE))
 #define XLAT_STR_54 STRINGIFY(AUDIT_FEATURE_CHANGE)

 XLAT(AUDIT_REPLACE),
 #define XLAT_VAL_55 ((unsigned) (AUDIT_REPLACE))
 #define XLAT_STR_55 STRINGIFY(AUDIT_REPLACE)
 XLAT(AUDIT_KERN_MODULE),
 #define XLAT_VAL_56 ((unsigned) (AUDIT_KERN_MODULE))
 #define XLAT_STR_56 STRINGIFY(AUDIT_KERN_MODULE)
 XLAT(AUDIT_FANOTIFY),
 #define XLAT_VAL_57 ((unsigned) (AUDIT_FANOTIFY))
 #define XLAT_STR_57 STRINGIFY(AUDIT_FANOTIFY)
 XLAT(AUDIT_TIME_INJOFFSET),
 #define XLAT_VAL_58 ((unsigned) (AUDIT_TIME_INJOFFSET))
 #define XLAT_STR_58 STRINGIFY(AUDIT_TIME_INJOFFSET)
 XLAT(AUDIT_TIME_ADJNTPVAL),
 #define XLAT_VAL_59 ((unsigned) (AUDIT_TIME_ADJNTPVAL))
 #define XLAT_STR_59 STRINGIFY(AUDIT_TIME_ADJNTPVAL)
 XLAT(AUDIT_BPF),
 #define XLAT_VAL_60 ((unsigned) (AUDIT_BPF))
 #define XLAT_STR_60 STRINGIFY(AUDIT_BPF)
 XLAT(AUDIT_EVENT_LISTENER),
 #define XLAT_VAL_61 ((unsigned) (AUDIT_EVENT_LISTENER))
 #define XLAT_STR_61 STRINGIFY(AUDIT_EVENT_LISTENER)
 XLAT(AUDIT_URINGOP),
 #define XLAT_VAL_62 ((unsigned) (AUDIT_URINGOP))
 #define XLAT_STR_62 STRINGIFY(AUDIT_URINGOP)
 XLAT(AUDIT_OPENAT2),
 #define XLAT_VAL_63 ((unsigned) (AUDIT_OPENAT2))
 #define XLAT_STR_63 STRINGIFY(AUDIT_OPENAT2)
 XLAT(AUDIT_DM_CTRL),
 #define XLAT_VAL_64 ((unsigned) (AUDIT_DM_CTRL))
 #define XLAT_STR_64 STRINGIFY(AUDIT_DM_CTRL)
 XLAT(AUDIT_DM_EVENT),
 #define XLAT_VAL_65 ((unsigned) (AUDIT_DM_EVENT))
 #define XLAT_STR_65 STRINGIFY(AUDIT_DM_EVENT)

 XLAT(AUDIT_AVC),
 #define XLAT_VAL_66 ((unsigned) (AUDIT_AVC))
 #define XLAT_STR_66 STRINGIFY(AUDIT_AVC)
 XLAT(AUDIT_SELINUX_ERR),
 #define XLAT_VAL_67 ((unsigned) (AUDIT_SELINUX_ERR))
 #define XLAT_STR_67 STRINGIFY(AUDIT_SELINUX_ERR)
 XLAT(AUDIT_AVC_PATH),
 #define XLAT_VAL_68 ((unsigned) (AUDIT_AVC_PATH))
 #define XLAT_STR_68 STRINGIFY(AUDIT_AVC_PATH)
 XLAT(AUDIT_MAC_POLICY_LOAD),
 #define XLAT_VAL_69 ((unsigned) (AUDIT_MAC_POLICY_LOAD))
 #define XLAT_STR_69 STRINGIFY(AUDIT_MAC_POLICY_LOAD)
 XLAT(AUDIT_MAC_STATUS),
 #define XLAT_VAL_70 ((unsigned) (AUDIT_MAC_STATUS))
 #define XLAT_STR_70 STRINGIFY(AUDIT_MAC_STATUS)
 XLAT(AUDIT_MAC_CONFIG_CHANGE),
 #define XLAT_VAL_71 ((unsigned) (AUDIT_MAC_CONFIG_CHANGE))
 #define XLAT_STR_71 STRINGIFY(AUDIT_MAC_CONFIG_CHANGE)
 XLAT(AUDIT_MAC_UNLBL_ALLOW),
 #define XLAT_VAL_72 ((unsigned) (AUDIT_MAC_UNLBL_ALLOW))
 #define XLAT_STR_72 STRINGIFY(AUDIT_MAC_UNLBL_ALLOW)
 XLAT(AUDIT_MAC_CIPSOV4_ADD),
 #define XLAT_VAL_73 ((unsigned) (AUDIT_MAC_CIPSOV4_ADD))
 #define XLAT_STR_73 STRINGIFY(AUDIT_MAC_CIPSOV4_ADD)
 XLAT(AUDIT_MAC_CIPSOV4_DEL),
 #define XLAT_VAL_74 ((unsigned) (AUDIT_MAC_CIPSOV4_DEL))
 #define XLAT_STR_74 STRINGIFY(AUDIT_MAC_CIPSOV4_DEL)
 XLAT(AUDIT_MAC_MAP_ADD),
 #define XLAT_VAL_75 ((unsigned) (AUDIT_MAC_MAP_ADD))
 #define XLAT_STR_75 STRINGIFY(AUDIT_MAC_MAP_ADD)
 XLAT(AUDIT_MAC_MAP_DEL),
 #define XLAT_VAL_76 ((unsigned) (AUDIT_MAC_MAP_DEL))
 #define XLAT_STR_76 STRINGIFY(AUDIT_MAC_MAP_DEL)
 XLAT(AUDIT_MAC_IPSEC_ADDSA),
 #define XLAT_VAL_77 ((unsigned) (AUDIT_MAC_IPSEC_ADDSA))
 #define XLAT_STR_77 STRINGIFY(AUDIT_MAC_IPSEC_ADDSA)
 XLAT(AUDIT_MAC_IPSEC_DELSA),
 #define XLAT_VAL_78 ((unsigned) (AUDIT_MAC_IPSEC_DELSA))
 #define XLAT_STR_78 STRINGIFY(AUDIT_MAC_IPSEC_DELSA)
 XLAT(AUDIT_MAC_IPSEC_ADDSPD),
 #define XLAT_VAL_79 ((unsigned) (AUDIT_MAC_IPSEC_ADDSPD))
 #define XLAT_STR_79 STRINGIFY(AUDIT_MAC_IPSEC_ADDSPD)
 XLAT(AUDIT_MAC_IPSEC_DELSPD),
 #define XLAT_VAL_80 ((unsigned) (AUDIT_MAC_IPSEC_DELSPD))
 #define XLAT_STR_80 STRINGIFY(AUDIT_MAC_IPSEC_DELSPD)
 XLAT(AUDIT_MAC_IPSEC_EVENT),
 #define XLAT_VAL_81 ((unsigned) (AUDIT_MAC_IPSEC_EVENT))
 #define XLAT_STR_81 STRINGIFY(AUDIT_MAC_IPSEC_EVENT)
 XLAT(AUDIT_MAC_UNLBL_STCADD),
 #define XLAT_VAL_82 ((unsigned) (AUDIT_MAC_UNLBL_STCADD))
 #define XLAT_STR_82 STRINGIFY(AUDIT_MAC_UNLBL_STCADD)
 XLAT(AUDIT_MAC_UNLBL_STCDEL),
 #define XLAT_VAL_83 ((unsigned) (AUDIT_MAC_UNLBL_STCDEL))
 #define XLAT_STR_83 STRINGIFY(AUDIT_MAC_UNLBL_STCDEL)
 XLAT(AUDIT_MAC_CALIPSO_ADD),
 #define XLAT_VAL_84 ((unsigned) (AUDIT_MAC_CALIPSO_ADD))
 #define XLAT_STR_84 STRINGIFY(AUDIT_MAC_CALIPSO_ADD)
 XLAT(AUDIT_MAC_CALIPSO_DEL),
 #define XLAT_VAL_85 ((unsigned) (AUDIT_MAC_CALIPSO_DEL))
 #define XLAT_STR_85 STRINGIFY(AUDIT_MAC_CALIPSO_DEL)

 XLAT(AUDIT_ANOM_PROMISCUOUS),
 #define XLAT_VAL_86 ((unsigned) (AUDIT_ANOM_PROMISCUOUS))
 #define XLAT_STR_86 STRINGIFY(AUDIT_ANOM_PROMISCUOUS)
 XLAT(AUDIT_ANOM_ABEND),
 #define XLAT_VAL_87 ((unsigned) (AUDIT_ANOM_ABEND))
 #define XLAT_STR_87 STRINGIFY(AUDIT_ANOM_ABEND)
 XLAT(AUDIT_ANOM_LINK),
 #define XLAT_VAL_88 ((unsigned) (AUDIT_ANOM_LINK))
 #define XLAT_STR_88 STRINGIFY(AUDIT_ANOM_LINK)
 XLAT(AUDIT_ANOM_CREAT),
 #define XLAT_VAL_89 ((unsigned) (AUDIT_ANOM_CREAT))
 #define XLAT_STR_89 STRINGIFY(AUDIT_ANOM_CREAT)
 XLAT(AUDIT_LAST_KERN_ANOM_MSG),
 #define XLAT_VAL_90 ((unsigned) (AUDIT_LAST_KERN_ANOM_MSG))
 #define XLAT_STR_90 STRINGIFY(AUDIT_LAST_KERN_ANOM_MSG)

 XLAT(AUDIT_INTEGRITY_DATA),
 #define XLAT_VAL_91 ((unsigned) (AUDIT_INTEGRITY_DATA))
 #define XLAT_STR_91 STRINGIFY(AUDIT_INTEGRITY_DATA)
 XLAT(AUDIT_INTEGRITY_METADATA),
 #define XLAT_VAL_92 ((unsigned) (AUDIT_INTEGRITY_METADATA))
 #define XLAT_STR_92 STRINGIFY(AUDIT_INTEGRITY_METADATA)
 XLAT(AUDIT_INTEGRITY_STATUS),
 #define XLAT_VAL_93 ((unsigned) (AUDIT_INTEGRITY_STATUS))
 #define XLAT_STR_93 STRINGIFY(AUDIT_INTEGRITY_STATUS)
 XLAT(AUDIT_INTEGRITY_HASH),
 #define XLAT_VAL_94 ((unsigned) (AUDIT_INTEGRITY_HASH))
 #define XLAT_STR_94 STRINGIFY(AUDIT_INTEGRITY_HASH)
 XLAT(AUDIT_INTEGRITY_PCR),
 #define XLAT_VAL_95 ((unsigned) (AUDIT_INTEGRITY_PCR))
 #define XLAT_STR_95 STRINGIFY(AUDIT_INTEGRITY_PCR)
 XLAT(AUDIT_INTEGRITY_RULE),
 #define XLAT_VAL_96 ((unsigned) (AUDIT_INTEGRITY_RULE))
 #define XLAT_STR_96 STRINGIFY(AUDIT_INTEGRITY_RULE)
 XLAT(AUDIT_INTEGRITY_EVM_XATTR),
 #define XLAT_VAL_97 ((unsigned) (AUDIT_INTEGRITY_EVM_XATTR))
 #define XLAT_STR_97 STRINGIFY(AUDIT_INTEGRITY_EVM_XATTR)
 XLAT(AUDIT_INTEGRITY_POLICY_RULE),
 #define XLAT_VAL_98 ((unsigned) (AUDIT_INTEGRITY_POLICY_RULE))
 #define XLAT_STR_98 STRINGIFY(AUDIT_INTEGRITY_POLICY_RULE)

 XLAT(AUDIT_KERNEL),
 #define XLAT_VAL_99 ((unsigned) (AUDIT_KERNEL))
 #define XLAT_STR_99 STRINGIFY(AUDIT_KERNEL)

 XLAT(AUDIT_FIRST_USER_MSG2),
 #define XLAT_VAL_100 ((unsigned) (AUDIT_FIRST_USER_MSG2))
 #define XLAT_STR_100 STRINGIFY(AUDIT_FIRST_USER_MSG2)
 XLAT(AUDIT_LAST_USER_MSG2),
 #define XLAT_VAL_101 ((unsigned) (AUDIT_LAST_USER_MSG2))
 #define XLAT_STR_101 STRINGIFY(AUDIT_LAST_USER_MSG2)
};
static
const struct xlat nl_audit_types[1] = { {
 .data = nl_audit_types_xdata,
 .size = ARRAY_SIZE(nl_audit_types_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
#  ifdef XLAT_VAL_79
  | XLAT_VAL_79
#  endif
#  ifdef XLAT_VAL_80
  | XLAT_VAL_80
#  endif
#  ifdef XLAT_VAL_81
  | XLAT_VAL_81
#  endif
#  ifdef XLAT_VAL_82
  | XLAT_VAL_82
#  endif
#  ifdef XLAT_VAL_83
  | XLAT_VAL_83
#  endif
#  ifdef XLAT_VAL_84
  | XLAT_VAL_84
#  endif
#  ifdef XLAT_VAL_85
  | XLAT_VAL_85
#  endif
#  ifdef XLAT_VAL_86
  | XLAT_VAL_86
#  endif
#  ifdef XLAT_VAL_87
  | XLAT_VAL_87
#  endif
#  ifdef XLAT_VAL_88
  | XLAT_VAL_88
#  endif
#  ifdef XLAT_VAL_89
  | XLAT_VAL_89
#  endif
#  ifdef XLAT_VAL_90
  | XLAT_VAL_90
#  endif
#  ifdef XLAT_VAL_91
  | XLAT_VAL_91
#  endif
#  ifdef XLAT_VAL_92
  | XLAT_VAL_92
#  endif
#  ifdef XLAT_VAL_93
  | XLAT_VAL_93
#  endif
#  ifdef XLAT_VAL_94
  | XLAT_VAL_94
#  endif
#  ifdef XLAT_VAL_95
  | XLAT_VAL_95
#  endif
#  ifdef XLAT_VAL_96
  | XLAT_VAL_96
#  endif
#  ifdef XLAT_VAL_97
  | XLAT_VAL_97
#  endif
#  ifdef XLAT_VAL_98
  | XLAT_VAL_98
#  endif
#  ifdef XLAT_VAL_99
  | XLAT_VAL_99
#  endif
#  ifdef XLAT_VAL_100
  | XLAT_VAL_100
#  endif
#  ifdef XLAT_VAL_101
  | XLAT_VAL_101
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
#  ifdef XLAT_STR_79
  + sizeof(XLAT_STR_79)
#  endif
#  ifdef XLAT_STR_80
  + sizeof(XLAT_STR_80)
#  endif
#  ifdef XLAT_STR_81
  + sizeof(XLAT_STR_81)
#  endif
#  ifdef XLAT_STR_82
  + sizeof(XLAT_STR_82)
#  endif
#  ifdef XLAT_STR_83
  + sizeof(XLAT_STR_83)
#  endif
#  ifdef XLAT_STR_84
  + sizeof(XLAT_STR_84)
#  endif
#  ifdef XLAT_STR_85
  + sizeof(XLAT_STR_85)
#  endif
#  ifdef XLAT_STR_86
  + sizeof(XLAT_STR_86)
#  endif
#  ifdef XLAT_STR_87
  + sizeof(XLAT_STR_87)
#  endif
#  ifdef XLAT_STR_88
  + sizeof(XLAT_STR_88)
#  endif
#  ifdef XLAT_STR_89
  + sizeof(XLAT_STR_89)
#  endif
#  ifdef XLAT_STR_90
  + sizeof(XLAT_STR_90)
#  endif
#  ifdef XLAT_STR_91
  + sizeof(XLAT_STR_91)
#  endif
#  ifdef XLAT_STR_92
  + sizeof(XLAT_STR_92)
#  endif
#  ifdef XLAT_STR_93
  + sizeof(XLAT_STR_93)
#  endif
#  ifdef XLAT_STR_94
  + sizeof(XLAT_STR_94)
#  endif
#  ifdef XLAT_STR_95
  + sizeof(XLAT_STR_95)
#  endif
#  ifdef XLAT_STR_96
  + sizeof(XLAT_STR_96)
#  endif
#  ifdef XLAT_STR_97
  + sizeof(XLAT_STR_97)
#  endif
#  ifdef XLAT_STR_98
  + sizeof(XLAT_STR_98)
#  endif
#  ifdef XLAT_STR_99
  + sizeof(XLAT_STR_99)
#  endif
#  ifdef XLAT_STR_100
  + sizeof(XLAT_STR_100)
#  endif
#  ifdef XLAT_STR_101
  + sizeof(XLAT_STR_101)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
#  undef XLAT_STR_79
#  undef XLAT_VAL_79
#  undef XLAT_STR_80
#  undef XLAT_VAL_80
#  undef XLAT_STR_81
#  undef XLAT_VAL_81
#  undef XLAT_STR_82
#  undef XLAT_VAL_82
#  undef XLAT_STR_83
#  undef XLAT_VAL_83
#  undef XLAT_STR_84
#  undef XLAT_VAL_84
#  undef XLAT_STR_85
#  undef XLAT_VAL_85
#  undef XLAT_STR_86
#  undef XLAT_VAL_86
#  undef XLAT_STR_87
#  undef XLAT_VAL_87
#  undef XLAT_STR_88
#  undef XLAT_VAL_88
#  undef XLAT_STR_89
#  undef XLAT_VAL_89
#  undef XLAT_STR_90
#  undef XLAT_VAL_90
#  undef XLAT_STR_91
#  undef XLAT_VAL_91
#  undef XLAT_STR_92
#  undef XLAT_VAL_92
#  undef XLAT_STR_93
#  undef XLAT_VAL_93
#  undef XLAT_STR_94
#  undef XLAT_VAL_94
#  undef XLAT_STR_95
#  undef XLAT_VAL_95
#  undef XLAT_STR_96
#  undef XLAT_VAL_96
#  undef XLAT_STR_97
#  undef XLAT_VAL_97
#  undef XLAT_STR_98
#  undef XLAT_VAL_98
#  undef XLAT_STR_99
#  undef XLAT_VAL_99
#  undef XLAT_STR_100
#  undef XLAT_VAL_100
#  undef XLAT_STR_101
#  undef XLAT_VAL_101
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
