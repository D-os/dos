/* Generated by ./src/xlat/gen.sh from ./src/xlat/scsi_sg_commands.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SG_SET_TIMEOUT) || (defined(HAVE_DECL_SG_SET_TIMEOUT) && HAVE_DECL_SG_SET_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_SET_TIMEOUT) == (0x2201), "SG_SET_TIMEOUT != 0x2201");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_SET_TIMEOUT 0x2201
#endif
#if defined(SG_GET_TIMEOUT) || (defined(HAVE_DECL_SG_GET_TIMEOUT) && HAVE_DECL_SG_GET_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_TIMEOUT) == (0x2202), "SG_GET_TIMEOUT != 0x2202");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_TIMEOUT 0x2202
#endif
#if defined(SG_EMULATED_HOST) || (defined(HAVE_DECL_SG_EMULATED_HOST) && HAVE_DECL_SG_EMULATED_HOST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_EMULATED_HOST) == (0x2203), "SG_EMULATED_HOST != 0x2203");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_EMULATED_HOST 0x2203
#endif
#if defined(SG_SET_TRANSFORM) || (defined(HAVE_DECL_SG_SET_TRANSFORM) && HAVE_DECL_SG_SET_TRANSFORM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_SET_TRANSFORM) == (0x2204), "SG_SET_TRANSFORM != 0x2204");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_SET_TRANSFORM 0x2204
#endif
#if defined(SG_GET_TRANSFORM) || (defined(HAVE_DECL_SG_GET_TRANSFORM) && HAVE_DECL_SG_GET_TRANSFORM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_TRANSFORM) == (0x2205), "SG_GET_TRANSFORM != 0x2205");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_TRANSFORM 0x2205
#endif
#if defined(SG_GET_COMMAND_Q) || (defined(HAVE_DECL_SG_GET_COMMAND_Q) && HAVE_DECL_SG_GET_COMMAND_Q)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_COMMAND_Q) == (0x2270), "SG_GET_COMMAND_Q != 0x2270");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_COMMAND_Q 0x2270
#endif
#if defined(SG_SET_COMMAND_Q) || (defined(HAVE_DECL_SG_SET_COMMAND_Q) && HAVE_DECL_SG_SET_COMMAND_Q)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_SET_COMMAND_Q) == (0x2271), "SG_SET_COMMAND_Q != 0x2271");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_SET_COMMAND_Q 0x2271
#endif
#if defined(SG_GET_RESERVED_SIZE) || (defined(HAVE_DECL_SG_GET_RESERVED_SIZE) && HAVE_DECL_SG_GET_RESERVED_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_RESERVED_SIZE) == (0x2272), "SG_GET_RESERVED_SIZE != 0x2272");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_RESERVED_SIZE 0x2272
#endif
#if defined(SG_SET_RESERVED_SIZE) || (defined(HAVE_DECL_SG_SET_RESERVED_SIZE) && HAVE_DECL_SG_SET_RESERVED_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_SET_RESERVED_SIZE) == (0x2275), "SG_SET_RESERVED_SIZE != 0x2275");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_SET_RESERVED_SIZE 0x2275
#endif
#if defined(SG_GET_SCSI_ID) || (defined(HAVE_DECL_SG_GET_SCSI_ID) && HAVE_DECL_SG_GET_SCSI_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_SCSI_ID) == (0x2276), "SG_GET_SCSI_ID != 0x2276");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_SCSI_ID 0x2276
#endif
#if defined(SG_SET_FORCE_LOW_DMA) || (defined(HAVE_DECL_SG_SET_FORCE_LOW_DMA) && HAVE_DECL_SG_SET_FORCE_LOW_DMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_SET_FORCE_LOW_DMA) == (0x2279), "SG_SET_FORCE_LOW_DMA != 0x2279");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_SET_FORCE_LOW_DMA 0x2279
#endif
#if defined(SG_GET_LOW_DMA) || (defined(HAVE_DECL_SG_GET_LOW_DMA) && HAVE_DECL_SG_GET_LOW_DMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_LOW_DMA) == (0x227a), "SG_GET_LOW_DMA != 0x227a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_LOW_DMA 0x227a
#endif
#if defined(SG_SET_FORCE_PACK_ID) || (defined(HAVE_DECL_SG_SET_FORCE_PACK_ID) && HAVE_DECL_SG_SET_FORCE_PACK_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_SET_FORCE_PACK_ID) == (0x227b), "SG_SET_FORCE_PACK_ID != 0x227b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_SET_FORCE_PACK_ID 0x227b
#endif
#if defined(SG_GET_PACK_ID) || (defined(HAVE_DECL_SG_GET_PACK_ID) && HAVE_DECL_SG_GET_PACK_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_PACK_ID) == (0x227c), "SG_GET_PACK_ID != 0x227c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_PACK_ID 0x227c
#endif
#if defined(SG_GET_NUM_WAITING) || (defined(HAVE_DECL_SG_GET_NUM_WAITING) && HAVE_DECL_SG_GET_NUM_WAITING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_NUM_WAITING) == (0x227d), "SG_GET_NUM_WAITING != 0x227d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_NUM_WAITING 0x227d
#endif
#if defined(SG_SET_DEBUG) || (defined(HAVE_DECL_SG_SET_DEBUG) && HAVE_DECL_SG_SET_DEBUG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_SET_DEBUG) == (0x227e), "SG_SET_DEBUG != 0x227e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_SET_DEBUG 0x227e
#endif
#if defined(SG_GET_SG_TABLESIZE) || (defined(HAVE_DECL_SG_GET_SG_TABLESIZE) && HAVE_DECL_SG_GET_SG_TABLESIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_SG_TABLESIZE) == (0x227F), "SG_GET_SG_TABLESIZE != 0x227F");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_SG_TABLESIZE 0x227F
#endif
#if defined(SG_GET_VERSION_NUM) || (defined(HAVE_DECL_SG_GET_VERSION_NUM) && HAVE_DECL_SG_GET_VERSION_NUM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_VERSION_NUM) == (0x2282), "SG_GET_VERSION_NUM != 0x2282");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_VERSION_NUM 0x2282
#endif
#if defined(SG_NEXT_CMD_LEN) || (defined(HAVE_DECL_SG_NEXT_CMD_LEN) && HAVE_DECL_SG_NEXT_CMD_LEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_NEXT_CMD_LEN) == (0x2283), "SG_NEXT_CMD_LEN != 0x2283");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_NEXT_CMD_LEN 0x2283
#endif
#if defined(SG_SCSI_RESET) || (defined(HAVE_DECL_SG_SCSI_RESET) && HAVE_DECL_SG_SCSI_RESET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_SCSI_RESET) == (0x2284), "SG_SCSI_RESET != 0x2284");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_SCSI_RESET 0x2284
#endif
#if defined(SG_IO) || (defined(HAVE_DECL_SG_IO) && HAVE_DECL_SG_IO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_IO) == (0x2285), "SG_IO != 0x2285");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_IO 0x2285
#endif
#if defined(SG_GET_REQUEST_TABLE) || (defined(HAVE_DECL_SG_GET_REQUEST_TABLE) && HAVE_DECL_SG_GET_REQUEST_TABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_REQUEST_TABLE) == (0x2286), "SG_GET_REQUEST_TABLE != 0x2286");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_REQUEST_TABLE 0x2286
#endif
#if defined(SG_SET_KEEP_ORPHAN) || (defined(HAVE_DECL_SG_SET_KEEP_ORPHAN) && HAVE_DECL_SG_SET_KEEP_ORPHAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_SET_KEEP_ORPHAN) == (0x2287), "SG_SET_KEEP_ORPHAN != 0x2287");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_SET_KEEP_ORPHAN 0x2287
#endif
#if defined(SG_GET_KEEP_ORPHAN) || (defined(HAVE_DECL_SG_GET_KEEP_ORPHAN) && HAVE_DECL_SG_GET_KEEP_ORPHAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_KEEP_ORPHAN) == (0x2288), "SG_GET_KEEP_ORPHAN != 0x2288");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_KEEP_ORPHAN 0x2288
#endif
#if defined(SG_GET_ACCESS_COUNT) || (defined(HAVE_DECL_SG_GET_ACCESS_COUNT) && HAVE_DECL_SG_GET_ACCESS_COUNT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SG_GET_ACCESS_COUNT) == (0x2289), "SG_GET_ACCESS_COUNT != 0x2289");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SG_GET_ACCESS_COUNT 0x2289
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat scsi_sg_commands in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data scsi_sg_commands_xdata[] = {
 XLAT(SG_SET_TIMEOUT),
 #define XLAT_VAL_0 ((unsigned) (SG_SET_TIMEOUT))
 #define XLAT_STR_0 STRINGIFY(SG_SET_TIMEOUT)
 XLAT(SG_GET_TIMEOUT),
 #define XLAT_VAL_1 ((unsigned) (SG_GET_TIMEOUT))
 #define XLAT_STR_1 STRINGIFY(SG_GET_TIMEOUT)
 XLAT(SG_EMULATED_HOST),
 #define XLAT_VAL_2 ((unsigned) (SG_EMULATED_HOST))
 #define XLAT_STR_2 STRINGIFY(SG_EMULATED_HOST)
 XLAT(SG_SET_TRANSFORM),
 #define XLAT_VAL_3 ((unsigned) (SG_SET_TRANSFORM))
 #define XLAT_STR_3 STRINGIFY(SG_SET_TRANSFORM)
 XLAT(SG_GET_TRANSFORM),
 #define XLAT_VAL_4 ((unsigned) (SG_GET_TRANSFORM))
 #define XLAT_STR_4 STRINGIFY(SG_GET_TRANSFORM)
 XLAT(SG_GET_COMMAND_Q),
 #define XLAT_VAL_5 ((unsigned) (SG_GET_COMMAND_Q))
 #define XLAT_STR_5 STRINGIFY(SG_GET_COMMAND_Q)
 XLAT(SG_SET_COMMAND_Q),
 #define XLAT_VAL_6 ((unsigned) (SG_SET_COMMAND_Q))
 #define XLAT_STR_6 STRINGIFY(SG_SET_COMMAND_Q)
 XLAT(SG_GET_RESERVED_SIZE),
 #define XLAT_VAL_7 ((unsigned) (SG_GET_RESERVED_SIZE))
 #define XLAT_STR_7 STRINGIFY(SG_GET_RESERVED_SIZE)
 XLAT(SG_SET_RESERVED_SIZE),
 #define XLAT_VAL_8 ((unsigned) (SG_SET_RESERVED_SIZE))
 #define XLAT_STR_8 STRINGIFY(SG_SET_RESERVED_SIZE)
 XLAT(SG_GET_SCSI_ID),
 #define XLAT_VAL_9 ((unsigned) (SG_GET_SCSI_ID))
 #define XLAT_STR_9 STRINGIFY(SG_GET_SCSI_ID)
 XLAT(SG_SET_FORCE_LOW_DMA),
 #define XLAT_VAL_10 ((unsigned) (SG_SET_FORCE_LOW_DMA))
 #define XLAT_STR_10 STRINGIFY(SG_SET_FORCE_LOW_DMA)
 XLAT(SG_GET_LOW_DMA),
 #define XLAT_VAL_11 ((unsigned) (SG_GET_LOW_DMA))
 #define XLAT_STR_11 STRINGIFY(SG_GET_LOW_DMA)
 XLAT(SG_SET_FORCE_PACK_ID),
 #define XLAT_VAL_12 ((unsigned) (SG_SET_FORCE_PACK_ID))
 #define XLAT_STR_12 STRINGIFY(SG_SET_FORCE_PACK_ID)
 XLAT(SG_GET_PACK_ID),
 #define XLAT_VAL_13 ((unsigned) (SG_GET_PACK_ID))
 #define XLAT_STR_13 STRINGIFY(SG_GET_PACK_ID)
 XLAT(SG_GET_NUM_WAITING),
 #define XLAT_VAL_14 ((unsigned) (SG_GET_NUM_WAITING))
 #define XLAT_STR_14 STRINGIFY(SG_GET_NUM_WAITING)
 XLAT(SG_SET_DEBUG),
 #define XLAT_VAL_15 ((unsigned) (SG_SET_DEBUG))
 #define XLAT_STR_15 STRINGIFY(SG_SET_DEBUG)
 XLAT(SG_GET_SG_TABLESIZE),
 #define XLAT_VAL_16 ((unsigned) (SG_GET_SG_TABLESIZE))
 #define XLAT_STR_16 STRINGIFY(SG_GET_SG_TABLESIZE)
 XLAT(SG_GET_VERSION_NUM),
 #define XLAT_VAL_17 ((unsigned) (SG_GET_VERSION_NUM))
 #define XLAT_STR_17 STRINGIFY(SG_GET_VERSION_NUM)
 XLAT(SG_NEXT_CMD_LEN),
 #define XLAT_VAL_18 ((unsigned) (SG_NEXT_CMD_LEN))
 #define XLAT_STR_18 STRINGIFY(SG_NEXT_CMD_LEN)
 XLAT(SG_SCSI_RESET),
 #define XLAT_VAL_19 ((unsigned) (SG_SCSI_RESET))
 #define XLAT_STR_19 STRINGIFY(SG_SCSI_RESET)
 XLAT(SG_IO),
 #define XLAT_VAL_20 ((unsigned) (SG_IO))
 #define XLAT_STR_20 STRINGIFY(SG_IO)
 XLAT(SG_GET_REQUEST_TABLE),
 #define XLAT_VAL_21 ((unsigned) (SG_GET_REQUEST_TABLE))
 #define XLAT_STR_21 STRINGIFY(SG_GET_REQUEST_TABLE)
 XLAT(SG_SET_KEEP_ORPHAN),
 #define XLAT_VAL_22 ((unsigned) (SG_SET_KEEP_ORPHAN))
 #define XLAT_STR_22 STRINGIFY(SG_SET_KEEP_ORPHAN)
 XLAT(SG_GET_KEEP_ORPHAN),
 #define XLAT_VAL_23 ((unsigned) (SG_GET_KEEP_ORPHAN))
 #define XLAT_STR_23 STRINGIFY(SG_GET_KEEP_ORPHAN)
 XLAT(SG_GET_ACCESS_COUNT),
 #define XLAT_VAL_24 ((unsigned) (SG_GET_ACCESS_COUNT))
 #define XLAT_STR_24 STRINGIFY(SG_GET_ACCESS_COUNT)
};
static
const struct xlat scsi_sg_commands[1] = { {
 .data = scsi_sg_commands_xdata,
 .size = ARRAY_SIZE(scsi_sg_commands_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
