/* Generated by ./src/xlat/gen.sh from ./src/xlat/perf_event_sample_format.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PERF_SAMPLE_IP) || (defined(HAVE_DECL_PERF_SAMPLE_IP) && HAVE_DECL_PERF_SAMPLE_IP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_IP) == (1 << 0), "PERF_SAMPLE_IP != 1 << 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_IP 1 << 0
#endif
#if defined(PERF_SAMPLE_TID) || (defined(HAVE_DECL_PERF_SAMPLE_TID) && HAVE_DECL_PERF_SAMPLE_TID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_TID) == (1 << 1), "PERF_SAMPLE_TID != 1 << 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_TID 1 << 1
#endif
#if defined(PERF_SAMPLE_TIME) || (defined(HAVE_DECL_PERF_SAMPLE_TIME) && HAVE_DECL_PERF_SAMPLE_TIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_TIME) == (1 << 2), "PERF_SAMPLE_TIME != 1 << 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_TIME 1 << 2
#endif
#if defined(PERF_SAMPLE_ADDR) || (defined(HAVE_DECL_PERF_SAMPLE_ADDR) && HAVE_DECL_PERF_SAMPLE_ADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_ADDR) == (1 << 3), "PERF_SAMPLE_ADDR != 1 << 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_ADDR 1 << 3
#endif
#if defined(PERF_SAMPLE_READ) || (defined(HAVE_DECL_PERF_SAMPLE_READ) && HAVE_DECL_PERF_SAMPLE_READ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_READ) == (1 << 4), "PERF_SAMPLE_READ != 1 << 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_READ 1 << 4
#endif
#if defined(PERF_SAMPLE_CALLCHAIN) || (defined(HAVE_DECL_PERF_SAMPLE_CALLCHAIN) && HAVE_DECL_PERF_SAMPLE_CALLCHAIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_CALLCHAIN) == (1 << 5), "PERF_SAMPLE_CALLCHAIN != 1 << 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_CALLCHAIN 1 << 5
#endif
#if defined(PERF_SAMPLE_ID) || (defined(HAVE_DECL_PERF_SAMPLE_ID) && HAVE_DECL_PERF_SAMPLE_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_ID) == (1 << 6), "PERF_SAMPLE_ID != 1 << 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_ID 1 << 6
#endif
#if defined(PERF_SAMPLE_CPU) || (defined(HAVE_DECL_PERF_SAMPLE_CPU) && HAVE_DECL_PERF_SAMPLE_CPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_CPU) == (1 << 7), "PERF_SAMPLE_CPU != 1 << 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_CPU 1 << 7
#endif
#if defined(PERF_SAMPLE_PERIOD) || (defined(HAVE_DECL_PERF_SAMPLE_PERIOD) && HAVE_DECL_PERF_SAMPLE_PERIOD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_PERIOD) == (1 << 8), "PERF_SAMPLE_PERIOD != 1 << 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_PERIOD 1 << 8
#endif
#if defined(PERF_SAMPLE_STREAM_ID) || (defined(HAVE_DECL_PERF_SAMPLE_STREAM_ID) && HAVE_DECL_PERF_SAMPLE_STREAM_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_STREAM_ID) == (1 << 9), "PERF_SAMPLE_STREAM_ID != 1 << 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_STREAM_ID 1 << 9
#endif
#if defined(PERF_SAMPLE_RAW) || (defined(HAVE_DECL_PERF_SAMPLE_RAW) && HAVE_DECL_PERF_SAMPLE_RAW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_RAW) == (1 << 10), "PERF_SAMPLE_RAW != 1 << 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_RAW 1 << 10
#endif
#if defined(PERF_SAMPLE_BRANCH_STACK) || (defined(HAVE_DECL_PERF_SAMPLE_BRANCH_STACK) && HAVE_DECL_PERF_SAMPLE_BRANCH_STACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_BRANCH_STACK) == (1 << 11), "PERF_SAMPLE_BRANCH_STACK != 1 << 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_BRANCH_STACK 1 << 11
#endif
#if defined(PERF_SAMPLE_REGS_USER) || (defined(HAVE_DECL_PERF_SAMPLE_REGS_USER) && HAVE_DECL_PERF_SAMPLE_REGS_USER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_REGS_USER) == (1 << 12), "PERF_SAMPLE_REGS_USER != 1 << 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_REGS_USER 1 << 12
#endif
#if defined(PERF_SAMPLE_STACK_USER) || (defined(HAVE_DECL_PERF_SAMPLE_STACK_USER) && HAVE_DECL_PERF_SAMPLE_STACK_USER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_STACK_USER) == (1 << 13), "PERF_SAMPLE_STACK_USER != 1 << 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_STACK_USER 1 << 13
#endif
#if defined(PERF_SAMPLE_WEIGHT) || (defined(HAVE_DECL_PERF_SAMPLE_WEIGHT) && HAVE_DECL_PERF_SAMPLE_WEIGHT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_WEIGHT) == (1 << 14), "PERF_SAMPLE_WEIGHT != 1 << 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_WEIGHT 1 << 14
#endif
#if defined(PERF_SAMPLE_DATA_SRC) || (defined(HAVE_DECL_PERF_SAMPLE_DATA_SRC) && HAVE_DECL_PERF_SAMPLE_DATA_SRC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_DATA_SRC) == (1 << 15), "PERF_SAMPLE_DATA_SRC != 1 << 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_DATA_SRC 1 << 15
#endif
#if defined(PERF_SAMPLE_IDENTIFIER) || (defined(HAVE_DECL_PERF_SAMPLE_IDENTIFIER) && HAVE_DECL_PERF_SAMPLE_IDENTIFIER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_IDENTIFIER) == (1 << 16), "PERF_SAMPLE_IDENTIFIER != 1 << 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_IDENTIFIER 1 << 16
#endif
#if defined(PERF_SAMPLE_TRANSACTION) || (defined(HAVE_DECL_PERF_SAMPLE_TRANSACTION) && HAVE_DECL_PERF_SAMPLE_TRANSACTION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_TRANSACTION) == (1 << 17), "PERF_SAMPLE_TRANSACTION != 1 << 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_TRANSACTION 1 << 17
#endif
#if defined(PERF_SAMPLE_REGS_INTR) || (defined(HAVE_DECL_PERF_SAMPLE_REGS_INTR) && HAVE_DECL_PERF_SAMPLE_REGS_INTR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_REGS_INTR) == (1 << 18), "PERF_SAMPLE_REGS_INTR != 1 << 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_REGS_INTR 1 << 18
#endif
#if defined(PERF_SAMPLE_PHYS_ADDR) || (defined(HAVE_DECL_PERF_SAMPLE_PHYS_ADDR) && HAVE_DECL_PERF_SAMPLE_PHYS_ADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_PHYS_ADDR) == (1 << 19), "PERF_SAMPLE_PHYS_ADDR != 1 << 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_PHYS_ADDR 1 << 19
#endif
#if defined(PERF_SAMPLE_AUX) || (defined(HAVE_DECL_PERF_SAMPLE_AUX) && HAVE_DECL_PERF_SAMPLE_AUX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_AUX) == (1 << 20), "PERF_SAMPLE_AUX != 1 << 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_AUX 1 << 20
#endif
#if defined(PERF_SAMPLE_CGROUP) || (defined(HAVE_DECL_PERF_SAMPLE_CGROUP) && HAVE_DECL_PERF_SAMPLE_CGROUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_CGROUP) == (1 << 21), "PERF_SAMPLE_CGROUP != 1 << 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_CGROUP 1 << 21
#endif
#if defined(PERF_SAMPLE_DATA_PAGE_SIZE) || (defined(HAVE_DECL_PERF_SAMPLE_DATA_PAGE_SIZE) && HAVE_DECL_PERF_SAMPLE_DATA_PAGE_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_DATA_PAGE_SIZE) == (1 << 22), "PERF_SAMPLE_DATA_PAGE_SIZE != 1 << 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_DATA_PAGE_SIZE 1 << 22
#endif
#if defined(PERF_SAMPLE_CODE_PAGE_SIZE) || (defined(HAVE_DECL_PERF_SAMPLE_CODE_PAGE_SIZE) && HAVE_DECL_PERF_SAMPLE_CODE_PAGE_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_CODE_PAGE_SIZE) == (1 << 23), "PERF_SAMPLE_CODE_PAGE_SIZE != 1 << 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_CODE_PAGE_SIZE 1 << 23
#endif
#if defined(PERF_SAMPLE_WEIGHT_STRUCT) || (defined(HAVE_DECL_PERF_SAMPLE_WEIGHT_STRUCT) && HAVE_DECL_PERF_SAMPLE_WEIGHT_STRUCT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PERF_SAMPLE_WEIGHT_STRUCT) == (1 << 24), "PERF_SAMPLE_WEIGHT_STRUCT != 1 << 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PERF_SAMPLE_WEIGHT_STRUCT 1 << 24
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat perf_event_sample_format in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data perf_event_sample_format_xdata[] = {
 XLAT(PERF_SAMPLE_IP),
 #define XLAT_VAL_0 ((unsigned) (PERF_SAMPLE_IP))
 #define XLAT_STR_0 STRINGIFY(PERF_SAMPLE_IP)
 XLAT(PERF_SAMPLE_TID),
 #define XLAT_VAL_1 ((unsigned) (PERF_SAMPLE_TID))
 #define XLAT_STR_1 STRINGIFY(PERF_SAMPLE_TID)
 XLAT(PERF_SAMPLE_TIME),
 #define XLAT_VAL_2 ((unsigned) (PERF_SAMPLE_TIME))
 #define XLAT_STR_2 STRINGIFY(PERF_SAMPLE_TIME)
 XLAT(PERF_SAMPLE_ADDR),
 #define XLAT_VAL_3 ((unsigned) (PERF_SAMPLE_ADDR))
 #define XLAT_STR_3 STRINGIFY(PERF_SAMPLE_ADDR)
 XLAT(PERF_SAMPLE_READ),
 #define XLAT_VAL_4 ((unsigned) (PERF_SAMPLE_READ))
 #define XLAT_STR_4 STRINGIFY(PERF_SAMPLE_READ)
 XLAT(PERF_SAMPLE_CALLCHAIN),
 #define XLAT_VAL_5 ((unsigned) (PERF_SAMPLE_CALLCHAIN))
 #define XLAT_STR_5 STRINGIFY(PERF_SAMPLE_CALLCHAIN)
 XLAT(PERF_SAMPLE_ID),
 #define XLAT_VAL_6 ((unsigned) (PERF_SAMPLE_ID))
 #define XLAT_STR_6 STRINGIFY(PERF_SAMPLE_ID)
 XLAT(PERF_SAMPLE_CPU),
 #define XLAT_VAL_7 ((unsigned) (PERF_SAMPLE_CPU))
 #define XLAT_STR_7 STRINGIFY(PERF_SAMPLE_CPU)
 XLAT(PERF_SAMPLE_PERIOD),
 #define XLAT_VAL_8 ((unsigned) (PERF_SAMPLE_PERIOD))
 #define XLAT_STR_8 STRINGIFY(PERF_SAMPLE_PERIOD)
 XLAT(PERF_SAMPLE_STREAM_ID),
 #define XLAT_VAL_9 ((unsigned) (PERF_SAMPLE_STREAM_ID))
 #define XLAT_STR_9 STRINGIFY(PERF_SAMPLE_STREAM_ID)
 XLAT(PERF_SAMPLE_RAW),
 #define XLAT_VAL_10 ((unsigned) (PERF_SAMPLE_RAW))
 #define XLAT_STR_10 STRINGIFY(PERF_SAMPLE_RAW)
 XLAT(PERF_SAMPLE_BRANCH_STACK),
 #define XLAT_VAL_11 ((unsigned) (PERF_SAMPLE_BRANCH_STACK))
 #define XLAT_STR_11 STRINGIFY(PERF_SAMPLE_BRANCH_STACK)
 XLAT(PERF_SAMPLE_REGS_USER),
 #define XLAT_VAL_12 ((unsigned) (PERF_SAMPLE_REGS_USER))
 #define XLAT_STR_12 STRINGIFY(PERF_SAMPLE_REGS_USER)
 XLAT(PERF_SAMPLE_STACK_USER),
 #define XLAT_VAL_13 ((unsigned) (PERF_SAMPLE_STACK_USER))
 #define XLAT_STR_13 STRINGIFY(PERF_SAMPLE_STACK_USER)
 XLAT(PERF_SAMPLE_WEIGHT),
 #define XLAT_VAL_14 ((unsigned) (PERF_SAMPLE_WEIGHT))
 #define XLAT_STR_14 STRINGIFY(PERF_SAMPLE_WEIGHT)
 XLAT(PERF_SAMPLE_DATA_SRC),
 #define XLAT_VAL_15 ((unsigned) (PERF_SAMPLE_DATA_SRC))
 #define XLAT_STR_15 STRINGIFY(PERF_SAMPLE_DATA_SRC)
 XLAT(PERF_SAMPLE_IDENTIFIER),
 #define XLAT_VAL_16 ((unsigned) (PERF_SAMPLE_IDENTIFIER))
 #define XLAT_STR_16 STRINGIFY(PERF_SAMPLE_IDENTIFIER)
 XLAT(PERF_SAMPLE_TRANSACTION),
 #define XLAT_VAL_17 ((unsigned) (PERF_SAMPLE_TRANSACTION))
 #define XLAT_STR_17 STRINGIFY(PERF_SAMPLE_TRANSACTION)
 XLAT(PERF_SAMPLE_REGS_INTR),
 #define XLAT_VAL_18 ((unsigned) (PERF_SAMPLE_REGS_INTR))
 #define XLAT_STR_18 STRINGIFY(PERF_SAMPLE_REGS_INTR)
 XLAT(PERF_SAMPLE_PHYS_ADDR),
 #define XLAT_VAL_19 ((unsigned) (PERF_SAMPLE_PHYS_ADDR))
 #define XLAT_STR_19 STRINGIFY(PERF_SAMPLE_PHYS_ADDR)
 XLAT(PERF_SAMPLE_AUX),
 #define XLAT_VAL_20 ((unsigned) (PERF_SAMPLE_AUX))
 #define XLAT_STR_20 STRINGIFY(PERF_SAMPLE_AUX)
 XLAT(PERF_SAMPLE_CGROUP),
 #define XLAT_VAL_21 ((unsigned) (PERF_SAMPLE_CGROUP))
 #define XLAT_STR_21 STRINGIFY(PERF_SAMPLE_CGROUP)
 XLAT(PERF_SAMPLE_DATA_PAGE_SIZE),
 #define XLAT_VAL_22 ((unsigned) (PERF_SAMPLE_DATA_PAGE_SIZE))
 #define XLAT_STR_22 STRINGIFY(PERF_SAMPLE_DATA_PAGE_SIZE)
 XLAT(PERF_SAMPLE_CODE_PAGE_SIZE),
 #define XLAT_VAL_23 ((unsigned) (PERF_SAMPLE_CODE_PAGE_SIZE))
 #define XLAT_STR_23 STRINGIFY(PERF_SAMPLE_CODE_PAGE_SIZE)
 XLAT(PERF_SAMPLE_WEIGHT_STRUCT),
 #define XLAT_VAL_24 ((unsigned) (PERF_SAMPLE_WEIGHT_STRUCT))
 #define XLAT_STR_24 STRINGIFY(PERF_SAMPLE_WEIGHT_STRUCT)
};
static
const struct xlat perf_event_sample_format[1] = { {
 .data = perf_event_sample_format_xdata,
 .size = ARRAY_SIZE(perf_event_sample_format_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
