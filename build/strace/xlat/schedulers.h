/* Generated by ./src/xlat/gen.sh from ./src/xlat/schedulers.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat schedulers in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data schedulers_xdata[] = {
#if defined(SCHED_OTHER) || (defined(HAVE_DECL_SCHED_OTHER) && HAVE_DECL_SCHED_OTHER)
  XLAT(SCHED_OTHER),
 #define XLAT_VAL_0 ((unsigned) (SCHED_OTHER))
 #define XLAT_STR_0 STRINGIFY(SCHED_OTHER)
#endif
#if defined(SCHED_FIFO) || (defined(HAVE_DECL_SCHED_FIFO) && HAVE_DECL_SCHED_FIFO)
  XLAT(SCHED_FIFO),
 #define XLAT_VAL_1 ((unsigned) (SCHED_FIFO))
 #define XLAT_STR_1 STRINGIFY(SCHED_FIFO)
#endif
#if defined(SCHED_RR) || (defined(HAVE_DECL_SCHED_RR) && HAVE_DECL_SCHED_RR)
  XLAT(SCHED_RR),
 #define XLAT_VAL_2 ((unsigned) (SCHED_RR))
 #define XLAT_STR_2 STRINGIFY(SCHED_RR)
#endif
#if defined(SCHED_BATCH) || (defined(HAVE_DECL_SCHED_BATCH) && HAVE_DECL_SCHED_BATCH)
  XLAT(SCHED_BATCH),
 #define XLAT_VAL_3 ((unsigned) (SCHED_BATCH))
 #define XLAT_STR_3 STRINGIFY(SCHED_BATCH)
#endif
#if defined(SCHED_ISO) || (defined(HAVE_DECL_SCHED_ISO) && HAVE_DECL_SCHED_ISO)
  XLAT(SCHED_ISO),
 #define XLAT_VAL_4 ((unsigned) (SCHED_ISO))
 #define XLAT_STR_4 STRINGIFY(SCHED_ISO)
#endif
#if defined(SCHED_IDLE) || (defined(HAVE_DECL_SCHED_IDLE) && HAVE_DECL_SCHED_IDLE)
  XLAT(SCHED_IDLE),
 #define XLAT_VAL_5 ((unsigned) (SCHED_IDLE))
 #define XLAT_STR_5 STRINGIFY(SCHED_IDLE)
#endif
#if defined(SCHED_DEADLINE) || (defined(HAVE_DECL_SCHED_DEADLINE) && HAVE_DECL_SCHED_DEADLINE)
  XLAT(SCHED_DEADLINE),
 #define XLAT_VAL_6 ((unsigned) (SCHED_DEADLINE))
 #define XLAT_STR_6 STRINGIFY(SCHED_DEADLINE)
#endif
};
static
const struct xlat schedulers[1] = { {
 .data = schedulers_xdata,
 .size = ARRAY_SIZE(schedulers_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
