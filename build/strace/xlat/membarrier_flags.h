/* Generated by ./src/xlat/gen.sh from ./src/xlat/membarrier_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(MEMBARRIER_CMD_FLAG_CPU) || (defined(HAVE_DECL_MEMBARRIER_CMD_FLAG_CPU) && HAVE_DECL_MEMBARRIER_CMD_FLAG_CPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MEMBARRIER_CMD_FLAG_CPU) == ((1 << 0)), "MEMBARRIER_CMD_FLAG_CPU != (1 << 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MEMBARRIER_CMD_FLAG_CPU (1 << 0)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat membarrier_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data membarrier_flags_xdata[] = {
 XLAT(MEMBARRIER_CMD_FLAG_CPU),
 #define XLAT_VAL_0 ((unsigned) (MEMBARRIER_CMD_FLAG_CPU))
 #define XLAT_STR_0 STRINGIFY(MEMBARRIER_CMD_FLAG_CPU)
};
static
const struct xlat membarrier_flags[1] = { {
 .data = membarrier_flags_xdata,
 .size = ARRAY_SIZE(membarrier_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
