/* Generated by ./src/xlat/gen.sh from ./src/xlat/statfs_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ST_VALID) || (defined(HAVE_DECL_ST_VALID) && HAVE_DECL_ST_VALID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_VALID) == (0x0020), "ST_VALID != 0x0020");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_VALID 0x0020
#endif
#if defined(ST_RDONLY) || (defined(HAVE_DECL_ST_RDONLY) && HAVE_DECL_ST_RDONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_RDONLY) == (0x0001), "ST_RDONLY != 0x0001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_RDONLY 0x0001
#endif
#if defined(ST_NOSUID) || (defined(HAVE_DECL_ST_NOSUID) && HAVE_DECL_ST_NOSUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_NOSUID) == (0x0002), "ST_NOSUID != 0x0002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_NOSUID 0x0002
#endif
#if defined(ST_NODEV) || (defined(HAVE_DECL_ST_NODEV) && HAVE_DECL_ST_NODEV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_NODEV) == (0x0004), "ST_NODEV != 0x0004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_NODEV 0x0004
#endif
#if defined(ST_NOEXEC) || (defined(HAVE_DECL_ST_NOEXEC) && HAVE_DECL_ST_NOEXEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_NOEXEC) == (0x0008), "ST_NOEXEC != 0x0008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_NOEXEC 0x0008
#endif
#if defined(ST_SYNCHRONOUS) || (defined(HAVE_DECL_ST_SYNCHRONOUS) && HAVE_DECL_ST_SYNCHRONOUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_SYNCHRONOUS) == (0x0010), "ST_SYNCHRONOUS != 0x0010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_SYNCHRONOUS 0x0010
#endif
#if defined(ST_MANDLOCK) || (defined(HAVE_DECL_ST_MANDLOCK) && HAVE_DECL_ST_MANDLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_MANDLOCK) == (0x0040), "ST_MANDLOCK != 0x0040");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_MANDLOCK 0x0040
#endif
#if defined(ST_NOATIME) || (defined(HAVE_DECL_ST_NOATIME) && HAVE_DECL_ST_NOATIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_NOATIME) == (0x0400), "ST_NOATIME != 0x0400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_NOATIME 0x0400
#endif
#if defined(ST_NODIRATIME) || (defined(HAVE_DECL_ST_NODIRATIME) && HAVE_DECL_ST_NODIRATIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_NODIRATIME) == (0x0800), "ST_NODIRATIME != 0x0800");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_NODIRATIME 0x0800
#endif
#if defined(ST_RELATIME) || (defined(HAVE_DECL_ST_RELATIME) && HAVE_DECL_ST_RELATIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_RELATIME) == (0x1000), "ST_RELATIME != 0x1000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_RELATIME 0x1000
#endif
#if defined(ST_NOSYMFOLLOW) || (defined(HAVE_DECL_ST_NOSYMFOLLOW) && HAVE_DECL_ST_NOSYMFOLLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ST_NOSYMFOLLOW) == (0x2000), "ST_NOSYMFOLLOW != 0x2000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ST_NOSYMFOLLOW 0x2000
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat statfs_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data statfs_flags_xdata[] = {
 XLAT(ST_VALID),
 #define XLAT_VAL_0 ((unsigned) (ST_VALID))
 #define XLAT_STR_0 STRINGIFY(ST_VALID)
 XLAT(ST_RDONLY),
 #define XLAT_VAL_1 ((unsigned) (ST_RDONLY))
 #define XLAT_STR_1 STRINGIFY(ST_RDONLY)
 XLAT(ST_NOSUID),
 #define XLAT_VAL_2 ((unsigned) (ST_NOSUID))
 #define XLAT_STR_2 STRINGIFY(ST_NOSUID)
 XLAT(ST_NODEV),
 #define XLAT_VAL_3 ((unsigned) (ST_NODEV))
 #define XLAT_STR_3 STRINGIFY(ST_NODEV)
 XLAT(ST_NOEXEC),
 #define XLAT_VAL_4 ((unsigned) (ST_NOEXEC))
 #define XLAT_STR_4 STRINGIFY(ST_NOEXEC)
 XLAT(ST_SYNCHRONOUS),
 #define XLAT_VAL_5 ((unsigned) (ST_SYNCHRONOUS))
 #define XLAT_STR_5 STRINGIFY(ST_SYNCHRONOUS)
 XLAT(ST_MANDLOCK),
 #define XLAT_VAL_6 ((unsigned) (ST_MANDLOCK))
 #define XLAT_STR_6 STRINGIFY(ST_MANDLOCK)
 XLAT(ST_NOATIME),
 #define XLAT_VAL_7 ((unsigned) (ST_NOATIME))
 #define XLAT_STR_7 STRINGIFY(ST_NOATIME)
 XLAT(ST_NODIRATIME),
 #define XLAT_VAL_8 ((unsigned) (ST_NODIRATIME))
 #define XLAT_STR_8 STRINGIFY(ST_NODIRATIME)
 XLAT(ST_RELATIME),
 #define XLAT_VAL_9 ((unsigned) (ST_RELATIME))
 #define XLAT_STR_9 STRINGIFY(ST_RELATIME)
 XLAT(ST_NOSYMFOLLOW),
 #define XLAT_VAL_10 ((unsigned) (ST_NOSYMFOLLOW))
 #define XLAT_STR_10 STRINGIFY(ST_NOSYMFOLLOW)
};
static
const struct xlat statfs_flags[1] = { {
 .data = statfs_flags_xdata,
 .size = ARRAY_SIZE(statfs_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
