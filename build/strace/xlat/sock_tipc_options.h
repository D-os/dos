/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_tipc_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(TIPC_IMPORTANCE) || (defined(HAVE_DECL_TIPC_IMPORTANCE) && HAVE_DECL_TIPC_IMPORTANCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_IMPORTANCE) == (127), "TIPC_IMPORTANCE != 127");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_IMPORTANCE 127
#endif
#if defined(TIPC_IMPORTANCE) || (defined(HAVE_DECL_TIPC_IMPORTANCE) && HAVE_DECL_TIPC_IMPORTANCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_IMPORTANCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_IMPORTANCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_IMPORTANCE)
#endif
#if defined(TIPC_SRC_DROPPABLE) || (defined(HAVE_DECL_TIPC_SRC_DROPPABLE) && HAVE_DECL_TIPC_SRC_DROPPABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_SRC_DROPPABLE) == (128), "TIPC_SRC_DROPPABLE != 128");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_SRC_DROPPABLE 128
#endif
#if defined(TIPC_SRC_DROPPABLE) || (defined(HAVE_DECL_TIPC_SRC_DROPPABLE) && HAVE_DECL_TIPC_SRC_DROPPABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_SRC_DROPPABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_SRC_DROPPABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_SRC_DROPPABLE)
#endif
#if defined(TIPC_DEST_DROPPABLE) || (defined(HAVE_DECL_TIPC_DEST_DROPPABLE) && HAVE_DECL_TIPC_DEST_DROPPABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_DEST_DROPPABLE) == (129), "TIPC_DEST_DROPPABLE != 129");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_DEST_DROPPABLE 129
#endif
#if defined(TIPC_DEST_DROPPABLE) || (defined(HAVE_DECL_TIPC_DEST_DROPPABLE) && HAVE_DECL_TIPC_DEST_DROPPABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_DEST_DROPPABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_DEST_DROPPABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_DEST_DROPPABLE)
#endif
#if defined(TIPC_CONN_TIMEOUT) || (defined(HAVE_DECL_TIPC_CONN_TIMEOUT) && HAVE_DECL_TIPC_CONN_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_CONN_TIMEOUT) == (130), "TIPC_CONN_TIMEOUT != 130");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_CONN_TIMEOUT 130
#endif
#if defined(TIPC_CONN_TIMEOUT) || (defined(HAVE_DECL_TIPC_CONN_TIMEOUT) && HAVE_DECL_TIPC_CONN_TIMEOUT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_CONN_TIMEOUT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_CONN_TIMEOUT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_CONN_TIMEOUT)
#endif
#if defined(TIPC_NODE_RECVQ_DEPTH) || (defined(HAVE_DECL_TIPC_NODE_RECVQ_DEPTH) && HAVE_DECL_TIPC_NODE_RECVQ_DEPTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_NODE_RECVQ_DEPTH) == (131), "TIPC_NODE_RECVQ_DEPTH != 131");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_NODE_RECVQ_DEPTH 131
#endif
#if defined(TIPC_NODE_RECVQ_DEPTH) || (defined(HAVE_DECL_TIPC_NODE_RECVQ_DEPTH) && HAVE_DECL_TIPC_NODE_RECVQ_DEPTH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_NODE_RECVQ_DEPTH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_NODE_RECVQ_DEPTH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_NODE_RECVQ_DEPTH)
#endif
#if defined(TIPC_SOCK_RECVQ_DEPTH) || (defined(HAVE_DECL_TIPC_SOCK_RECVQ_DEPTH) && HAVE_DECL_TIPC_SOCK_RECVQ_DEPTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_SOCK_RECVQ_DEPTH) == (132), "TIPC_SOCK_RECVQ_DEPTH != 132");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_SOCK_RECVQ_DEPTH 132
#endif
#if defined(TIPC_SOCK_RECVQ_DEPTH) || (defined(HAVE_DECL_TIPC_SOCK_RECVQ_DEPTH) && HAVE_DECL_TIPC_SOCK_RECVQ_DEPTH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_SOCK_RECVQ_DEPTH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_SOCK_RECVQ_DEPTH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_SOCK_RECVQ_DEPTH)
#endif
#if defined(TIPC_MCAST_BROADCAST) || (defined(HAVE_DECL_TIPC_MCAST_BROADCAST) && HAVE_DECL_TIPC_MCAST_BROADCAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_MCAST_BROADCAST) == (133), "TIPC_MCAST_BROADCAST != 133");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_MCAST_BROADCAST 133
#endif
#if defined(TIPC_MCAST_BROADCAST) || (defined(HAVE_DECL_TIPC_MCAST_BROADCAST) && HAVE_DECL_TIPC_MCAST_BROADCAST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_MCAST_BROADCAST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_MCAST_BROADCAST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_MCAST_BROADCAST)
#endif
#if defined(TIPC_MCAST_REPLICAST) || (defined(HAVE_DECL_TIPC_MCAST_REPLICAST) && HAVE_DECL_TIPC_MCAST_REPLICAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_MCAST_REPLICAST) == (134), "TIPC_MCAST_REPLICAST != 134");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_MCAST_REPLICAST 134
#endif
#if defined(TIPC_MCAST_REPLICAST) || (defined(HAVE_DECL_TIPC_MCAST_REPLICAST) && HAVE_DECL_TIPC_MCAST_REPLICAST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_MCAST_REPLICAST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_MCAST_REPLICAST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_MCAST_REPLICAST)
#endif
#if defined(TIPC_GROUP_JOIN) || (defined(HAVE_DECL_TIPC_GROUP_JOIN) && HAVE_DECL_TIPC_GROUP_JOIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_GROUP_JOIN) == (135), "TIPC_GROUP_JOIN != 135");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_GROUP_JOIN 135
#endif
#if defined(TIPC_GROUP_JOIN) || (defined(HAVE_DECL_TIPC_GROUP_JOIN) && HAVE_DECL_TIPC_GROUP_JOIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_GROUP_JOIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_GROUP_JOIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_GROUP_JOIN)
#endif
#if defined(TIPC_GROUP_LEAVE) || (defined(HAVE_DECL_TIPC_GROUP_LEAVE) && HAVE_DECL_TIPC_GROUP_LEAVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_GROUP_LEAVE) == (136), "TIPC_GROUP_LEAVE != 136");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_GROUP_LEAVE 136
#endif
#if defined(TIPC_GROUP_LEAVE) || (defined(HAVE_DECL_TIPC_GROUP_LEAVE) && HAVE_DECL_TIPC_GROUP_LEAVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_GROUP_LEAVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_GROUP_LEAVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_GROUP_LEAVE)
#endif
#if defined(TIPC_SOCK_RECVQ_USED) || (defined(HAVE_DECL_TIPC_SOCK_RECVQ_USED) && HAVE_DECL_TIPC_SOCK_RECVQ_USED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_SOCK_RECVQ_USED) == (137), "TIPC_SOCK_RECVQ_USED != 137");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_SOCK_RECVQ_USED 137
#endif
#if defined(TIPC_SOCK_RECVQ_USED) || (defined(HAVE_DECL_TIPC_SOCK_RECVQ_USED) && HAVE_DECL_TIPC_SOCK_RECVQ_USED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_SOCK_RECVQ_USED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_SOCK_RECVQ_USED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_SOCK_RECVQ_USED)
#endif
#if defined(TIPC_NODELAY) || (defined(HAVE_DECL_TIPC_NODELAY) && HAVE_DECL_TIPC_NODELAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TIPC_NODELAY) == (138), "TIPC_NODELAY != 138");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TIPC_NODELAY 138
#endif
#if defined(TIPC_NODELAY) || (defined(HAVE_DECL_TIPC_NODELAY) && HAVE_DECL_TIPC_NODELAY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (TIPC_NODELAY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: TIPC_NODELAY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (TIPC_NODELAY)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_tipc_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_tipc_options_xdata[] = {
 XLAT(TIPC_IMPORTANCE),
 #define XLAT_VAL_0 ((unsigned) (TIPC_IMPORTANCE))
 #define XLAT_STR_0 STRINGIFY(TIPC_IMPORTANCE)
 XLAT(TIPC_SRC_DROPPABLE),
 #define XLAT_VAL_1 ((unsigned) (TIPC_SRC_DROPPABLE))
 #define XLAT_STR_1 STRINGIFY(TIPC_SRC_DROPPABLE)
 XLAT(TIPC_DEST_DROPPABLE),
 #define XLAT_VAL_2 ((unsigned) (TIPC_DEST_DROPPABLE))
 #define XLAT_STR_2 STRINGIFY(TIPC_DEST_DROPPABLE)
 XLAT(TIPC_CONN_TIMEOUT),
 #define XLAT_VAL_3 ((unsigned) (TIPC_CONN_TIMEOUT))
 #define XLAT_STR_3 STRINGIFY(TIPC_CONN_TIMEOUT)
 XLAT(TIPC_NODE_RECVQ_DEPTH),
 #define XLAT_VAL_4 ((unsigned) (TIPC_NODE_RECVQ_DEPTH))
 #define XLAT_STR_4 STRINGIFY(TIPC_NODE_RECVQ_DEPTH)
 XLAT(TIPC_SOCK_RECVQ_DEPTH),
 #define XLAT_VAL_5 ((unsigned) (TIPC_SOCK_RECVQ_DEPTH))
 #define XLAT_STR_5 STRINGIFY(TIPC_SOCK_RECVQ_DEPTH)
 XLAT(TIPC_MCAST_BROADCAST),
 #define XLAT_VAL_6 ((unsigned) (TIPC_MCAST_BROADCAST))
 #define XLAT_STR_6 STRINGIFY(TIPC_MCAST_BROADCAST)
 XLAT(TIPC_MCAST_REPLICAST),
 #define XLAT_VAL_7 ((unsigned) (TIPC_MCAST_REPLICAST))
 #define XLAT_STR_7 STRINGIFY(TIPC_MCAST_REPLICAST)
 XLAT(TIPC_GROUP_JOIN),
 #define XLAT_VAL_8 ((unsigned) (TIPC_GROUP_JOIN))
 #define XLAT_STR_8 STRINGIFY(TIPC_GROUP_JOIN)
 XLAT(TIPC_GROUP_LEAVE),
 #define XLAT_VAL_9 ((unsigned) (TIPC_GROUP_LEAVE))
 #define XLAT_STR_9 STRINGIFY(TIPC_GROUP_LEAVE)
 XLAT(TIPC_SOCK_RECVQ_USED),
 #define XLAT_VAL_10 ((unsigned) (TIPC_SOCK_RECVQ_USED))
 #define XLAT_STR_10 STRINGIFY(TIPC_SOCK_RECVQ_USED)
 XLAT(TIPC_NODELAY),
 #define XLAT_VAL_11 ((unsigned) (TIPC_NODELAY))
 #define XLAT_STR_11 STRINGIFY(TIPC_NODELAY)
};
static
const struct xlat sock_tipc_options[1] = { {
 .data = sock_tipc_options_xdata,
 .size = ARRAY_SIZE(sock_tipc_options_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
