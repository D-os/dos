/* Generated by ./src/xlat/gen.sh from ./src/xlat/bluetooth_l2_cid.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(L2CAP_CID_SIGNALING) || (defined(HAVE_DECL_L2CAP_CID_SIGNALING) && HAVE_DECL_L2CAP_CID_SIGNALING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_SIGNALING) == (0x0001), "L2CAP_CID_SIGNALING != 0x0001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_SIGNALING 0x0001
#endif
#if defined(L2CAP_CID_SIGNALING) || (defined(HAVE_DECL_L2CAP_CID_SIGNALING) && HAVE_DECL_L2CAP_CID_SIGNALING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_SIGNALING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_SIGNALING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_SIGNALING)
#endif
#if defined(L2CAP_CID_CONN_LESS) || (defined(HAVE_DECL_L2CAP_CID_CONN_LESS) && HAVE_DECL_L2CAP_CID_CONN_LESS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_CONN_LESS) == (0x0002), "L2CAP_CID_CONN_LESS != 0x0002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_CONN_LESS 0x0002
#endif
#if defined(L2CAP_CID_CONN_LESS) || (defined(HAVE_DECL_L2CAP_CID_CONN_LESS) && HAVE_DECL_L2CAP_CID_CONN_LESS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_CONN_LESS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_CONN_LESS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_CONN_LESS)
#endif
#if defined(L2CAP_CID_A2MP) || (defined(HAVE_DECL_L2CAP_CID_A2MP) && HAVE_DECL_L2CAP_CID_A2MP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_A2MP) == (0x0003), "L2CAP_CID_A2MP != 0x0003");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_A2MP 0x0003
#endif
#if defined(L2CAP_CID_A2MP) || (defined(HAVE_DECL_L2CAP_CID_A2MP) && HAVE_DECL_L2CAP_CID_A2MP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_A2MP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_A2MP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_A2MP)
#endif
#if defined(L2CAP_CID_ATT) || (defined(HAVE_DECL_L2CAP_CID_ATT) && HAVE_DECL_L2CAP_CID_ATT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_ATT) == (0x0004), "L2CAP_CID_ATT != 0x0004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_ATT 0x0004
#endif
#if defined(L2CAP_CID_ATT) || (defined(HAVE_DECL_L2CAP_CID_ATT) && HAVE_DECL_L2CAP_CID_ATT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_ATT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_ATT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_ATT)
#endif
#if defined(L2CAP_CID_LE_SIGNALING) || (defined(HAVE_DECL_L2CAP_CID_LE_SIGNALING) && HAVE_DECL_L2CAP_CID_LE_SIGNALING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_LE_SIGNALING) == (0x0005), "L2CAP_CID_LE_SIGNALING != 0x0005");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_LE_SIGNALING 0x0005
#endif
#if defined(L2CAP_CID_LE_SIGNALING) || (defined(HAVE_DECL_L2CAP_CID_LE_SIGNALING) && HAVE_DECL_L2CAP_CID_LE_SIGNALING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_LE_SIGNALING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_LE_SIGNALING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_LE_SIGNALING)
#endif
#if defined(L2CAP_CID_SMP) || (defined(HAVE_DECL_L2CAP_CID_SMP) && HAVE_DECL_L2CAP_CID_SMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_SMP) == (0x0006), "L2CAP_CID_SMP != 0x0006");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_SMP 0x0006
#endif
#if defined(L2CAP_CID_SMP) || (defined(HAVE_DECL_L2CAP_CID_SMP) && HAVE_DECL_L2CAP_CID_SMP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_SMP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_SMP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_SMP)
#endif
#if defined(L2CAP_CID_SMP_BREDR) || (defined(HAVE_DECL_L2CAP_CID_SMP_BREDR) && HAVE_DECL_L2CAP_CID_SMP_BREDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_SMP_BREDR) == (0x0007), "L2CAP_CID_SMP_BREDR != 0x0007");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_SMP_BREDR 0x0007
#endif
#if defined(L2CAP_CID_SMP_BREDR) || (defined(HAVE_DECL_L2CAP_CID_SMP_BREDR) && HAVE_DECL_L2CAP_CID_SMP_BREDR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_SMP_BREDR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_SMP_BREDR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_SMP_BREDR)
#endif
#if defined(L2CAP_CID_DYN_START) || (defined(HAVE_DECL_L2CAP_CID_DYN_START) && HAVE_DECL_L2CAP_CID_DYN_START)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_DYN_START) == (0x0040), "L2CAP_CID_DYN_START != 0x0040");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_DYN_START 0x0040
#endif
#if defined(L2CAP_CID_DYN_START) || (defined(HAVE_DECL_L2CAP_CID_DYN_START) && HAVE_DECL_L2CAP_CID_DYN_START)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_DYN_START)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_DYN_START"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_DYN_START)
#endif
#if defined(L2CAP_CID_LE_DYN_END) || (defined(HAVE_DECL_L2CAP_CID_LE_DYN_END) && HAVE_DECL_L2CAP_CID_LE_DYN_END)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_LE_DYN_END) == (0x007f), "L2CAP_CID_LE_DYN_END != 0x007f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_LE_DYN_END 0x007f
#endif
#if defined(L2CAP_CID_LE_DYN_END) || (defined(HAVE_DECL_L2CAP_CID_LE_DYN_END) && HAVE_DECL_L2CAP_CID_LE_DYN_END)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_LE_DYN_END)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_LE_DYN_END"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_LE_DYN_END)
#endif
#if defined(L2CAP_CID_DYN_END) || (defined(HAVE_DECL_L2CAP_CID_DYN_END) && HAVE_DECL_L2CAP_CID_DYN_END)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((L2CAP_CID_DYN_END) == (0xffff), "L2CAP_CID_DYN_END != 0xffff");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define L2CAP_CID_DYN_END 0xffff
#endif
#if defined(L2CAP_CID_DYN_END) || (defined(HAVE_DECL_L2CAP_CID_DYN_END) && HAVE_DECL_L2CAP_CID_DYN_END)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (L2CAP_CID_DYN_END)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: L2CAP_CID_DYN_END"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (L2CAP_CID_DYN_END)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat bluetooth_l2_cid in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data bluetooth_l2_cid_xdata[] = {
 XLAT(L2CAP_CID_SIGNALING),
 #define XLAT_VAL_0 ((unsigned) (L2CAP_CID_SIGNALING))
 #define XLAT_STR_0 STRINGIFY(L2CAP_CID_SIGNALING)
 XLAT(L2CAP_CID_CONN_LESS),
 #define XLAT_VAL_1 ((unsigned) (L2CAP_CID_CONN_LESS))
 #define XLAT_STR_1 STRINGIFY(L2CAP_CID_CONN_LESS)
 XLAT(L2CAP_CID_A2MP),
 #define XLAT_VAL_2 ((unsigned) (L2CAP_CID_A2MP))
 #define XLAT_STR_2 STRINGIFY(L2CAP_CID_A2MP)
 XLAT(L2CAP_CID_ATT),
 #define XLAT_VAL_3 ((unsigned) (L2CAP_CID_ATT))
 #define XLAT_STR_3 STRINGIFY(L2CAP_CID_ATT)
 XLAT(L2CAP_CID_LE_SIGNALING),
 #define XLAT_VAL_4 ((unsigned) (L2CAP_CID_LE_SIGNALING))
 #define XLAT_STR_4 STRINGIFY(L2CAP_CID_LE_SIGNALING)
 XLAT(L2CAP_CID_SMP),
 #define XLAT_VAL_5 ((unsigned) (L2CAP_CID_SMP))
 #define XLAT_STR_5 STRINGIFY(L2CAP_CID_SMP)
 XLAT(L2CAP_CID_SMP_BREDR),
 #define XLAT_VAL_6 ((unsigned) (L2CAP_CID_SMP_BREDR))
 #define XLAT_STR_6 STRINGIFY(L2CAP_CID_SMP_BREDR)
 XLAT(L2CAP_CID_DYN_START),
 #define XLAT_VAL_7 ((unsigned) (L2CAP_CID_DYN_START))
 #define XLAT_STR_7 STRINGIFY(L2CAP_CID_DYN_START)
 XLAT(L2CAP_CID_LE_DYN_END),
 #define XLAT_VAL_8 ((unsigned) (L2CAP_CID_LE_DYN_END))
 #define XLAT_STR_8 STRINGIFY(L2CAP_CID_LE_DYN_END)
 XLAT(L2CAP_CID_DYN_END),
 #define XLAT_VAL_9 ((unsigned) (L2CAP_CID_DYN_END))
 #define XLAT_STR_9 STRINGIFY(L2CAP_CID_DYN_END)
};
static
const struct xlat bluetooth_l2_cid[1] = { {
 .data = bluetooth_l2_cid_xdata,
 .size = ARRAY_SIZE(bluetooth_l2_cid_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
