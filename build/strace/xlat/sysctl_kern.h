/* Generated by ./src/xlat/gen.sh from ./src/xlat/sysctl_kern.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(KERN_OSTYPE) || (defined(HAVE_DECL_KERN_OSTYPE) && HAVE_DECL_KERN_OSTYPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_OSTYPE) == (1), "KERN_OSTYPE != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_OSTYPE 1
#endif
#if defined(KERN_OSRELEASE) || (defined(HAVE_DECL_KERN_OSRELEASE) && HAVE_DECL_KERN_OSRELEASE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_OSRELEASE) == (2), "KERN_OSRELEASE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_OSRELEASE 2
#endif
#if defined(KERN_OSREV) || (defined(HAVE_DECL_KERN_OSREV) && HAVE_DECL_KERN_OSREV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_OSREV) == (3), "KERN_OSREV != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_OSREV 3
#endif
#if defined(KERN_VERSION) || (defined(HAVE_DECL_KERN_VERSION) && HAVE_DECL_KERN_VERSION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_VERSION) == (4), "KERN_VERSION != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_VERSION 4
#endif
#if defined(KERN_SECUREMASK) || (defined(HAVE_DECL_KERN_SECUREMASK) && HAVE_DECL_KERN_SECUREMASK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SECUREMASK) == (5), "KERN_SECUREMASK != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SECUREMASK 5
#endif
#if defined(KERN_PROF) || (defined(HAVE_DECL_KERN_PROF) && HAVE_DECL_KERN_PROF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PROF) == (6), "KERN_PROF != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PROF 6
#endif
#if defined(KERN_NODENAME) || (defined(HAVE_DECL_KERN_NODENAME) && HAVE_DECL_KERN_NODENAME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_NODENAME) == (7), "KERN_NODENAME != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_NODENAME 7
#endif
#if defined(KERN_DOMAINNAME) || (defined(HAVE_DECL_KERN_DOMAINNAME) && HAVE_DECL_KERN_DOMAINNAME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_DOMAINNAME) == (8), "KERN_DOMAINNAME != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_DOMAINNAME 8
#endif
#if defined(KERN_NRINODE) || (defined(HAVE_DECL_KERN_NRINODE) && HAVE_DECL_KERN_NRINODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_NRINODE) == (9), "KERN_NRINODE != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_NRINODE 9
#endif
#if defined(KERN_MAXINODE) || (defined(HAVE_DECL_KERN_MAXINODE) && HAVE_DECL_KERN_MAXINODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MAXINODE) == (10), "KERN_MAXINODE != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MAXINODE 10
#endif
#if defined(KERN_NRFILE) || (defined(HAVE_DECL_KERN_NRFILE) && HAVE_DECL_KERN_NRFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_NRFILE) == (11), "KERN_NRFILE != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_NRFILE 11
#endif
#if defined(KERN_MAXFILE) || (defined(HAVE_DECL_KERN_MAXFILE) && HAVE_DECL_KERN_MAXFILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MAXFILE) == (12), "KERN_MAXFILE != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MAXFILE 12
#endif
#if defined(KERN_MAXID) || (defined(HAVE_DECL_KERN_MAXID) && HAVE_DECL_KERN_MAXID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MAXID) == (13), "KERN_MAXID != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MAXID 13
#endif
#if defined(KERN_CAP_BSET) || (defined(HAVE_DECL_KERN_CAP_BSET) && HAVE_DECL_KERN_CAP_BSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_CAP_BSET) == (14), "KERN_CAP_BSET != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_CAP_BSET 14
#endif
#if defined(KERN_PANIC) || (defined(HAVE_DECL_KERN_PANIC) && HAVE_DECL_KERN_PANIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PANIC) == (15), "KERN_PANIC != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PANIC 15
#endif
#if defined(KERN_REALROOTDEV) || (defined(HAVE_DECL_KERN_REALROOTDEV) && HAVE_DECL_KERN_REALROOTDEV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_REALROOTDEV) == (16), "KERN_REALROOTDEV != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_REALROOTDEV 16
#endif
#if defined(KERN_NFSRNAME) || (defined(HAVE_DECL_KERN_NFSRNAME) && HAVE_DECL_KERN_NFSRNAME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_NFSRNAME) == (17), "KERN_NFSRNAME != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_NFSRNAME 17
#endif
#if defined(KERN_NFSRADDRS) || (defined(HAVE_DECL_KERN_NFSRADDRS) && HAVE_DECL_KERN_NFSRADDRS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_NFSRADDRS) == (18), "KERN_NFSRADDRS != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_NFSRADDRS 18
#endif
#if defined(KERN_JAVA_INTERPRETER) || (defined(HAVE_DECL_KERN_JAVA_INTERPRETER) && HAVE_DECL_KERN_JAVA_INTERPRETER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_JAVA_INTERPRETER) == (19), "KERN_JAVA_INTERPRETER != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_JAVA_INTERPRETER 19
#endif
#if defined(KERN_JAVA_APPLETVIEWER) || (defined(HAVE_DECL_KERN_JAVA_APPLETVIEWER) && HAVE_DECL_KERN_JAVA_APPLETVIEWER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_JAVA_APPLETVIEWER) == (20), "KERN_JAVA_APPLETVIEWER != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_JAVA_APPLETVIEWER 20
#endif
#if defined(KERN_SPARC_REBOOT) || (defined(HAVE_DECL_KERN_SPARC_REBOOT) && HAVE_DECL_KERN_SPARC_REBOOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SPARC_REBOOT) == (21), "KERN_SPARC_REBOOT != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SPARC_REBOOT 21
#endif
#if defined(KERN_CTLALTDEL) || (defined(HAVE_DECL_KERN_CTLALTDEL) && HAVE_DECL_KERN_CTLALTDEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_CTLALTDEL) == (22), "KERN_CTLALTDEL != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_CTLALTDEL 22
#endif
#if defined(KERN_PRINTK) || (defined(HAVE_DECL_KERN_PRINTK) && HAVE_DECL_KERN_PRINTK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PRINTK) == (23), "KERN_PRINTK != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PRINTK 23
#endif
#if defined(KERN_NAMETRANS) || (defined(HAVE_DECL_KERN_NAMETRANS) && HAVE_DECL_KERN_NAMETRANS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_NAMETRANS) == (24), "KERN_NAMETRANS != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_NAMETRANS 24
#endif
#if defined(KERN_PPC_HTABRECLAIM) || (defined(HAVE_DECL_KERN_PPC_HTABRECLAIM) && HAVE_DECL_KERN_PPC_HTABRECLAIM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PPC_HTABRECLAIM) == (25), "KERN_PPC_HTABRECLAIM != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PPC_HTABRECLAIM 25
#endif
#if defined(KERN_PPC_ZEROPAGED) || (defined(HAVE_DECL_KERN_PPC_ZEROPAGED) && HAVE_DECL_KERN_PPC_ZEROPAGED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PPC_ZEROPAGED) == (26), "KERN_PPC_ZEROPAGED != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PPC_ZEROPAGED 26
#endif
#if defined(KERN_PPC_POWERSAVE_NAP) || (defined(HAVE_DECL_KERN_PPC_POWERSAVE_NAP) && HAVE_DECL_KERN_PPC_POWERSAVE_NAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PPC_POWERSAVE_NAP) == (27), "KERN_PPC_POWERSAVE_NAP != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PPC_POWERSAVE_NAP 27
#endif
#if defined(KERN_MODPROBE) || (defined(HAVE_DECL_KERN_MODPROBE) && HAVE_DECL_KERN_MODPROBE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MODPROBE) == (28), "KERN_MODPROBE != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MODPROBE 28
#endif
#if defined(KERN_SG_BIG_BUFF) || (defined(HAVE_DECL_KERN_SG_BIG_BUFF) && HAVE_DECL_KERN_SG_BIG_BUFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SG_BIG_BUFF) == (29), "KERN_SG_BIG_BUFF != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SG_BIG_BUFF 29
#endif
#if defined(KERN_ACCT) || (defined(HAVE_DECL_KERN_ACCT) && HAVE_DECL_KERN_ACCT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_ACCT) == (30), "KERN_ACCT != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_ACCT 30
#endif
#if defined(KERN_PPC_L2CR) || (defined(HAVE_DECL_KERN_PPC_L2CR) && HAVE_DECL_KERN_PPC_L2CR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PPC_L2CR) == (31), "KERN_PPC_L2CR != 31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PPC_L2CR 31
#endif
#if defined(KERN_RTSIGNR) || (defined(HAVE_DECL_KERN_RTSIGNR) && HAVE_DECL_KERN_RTSIGNR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_RTSIGNR) == (32), "KERN_RTSIGNR != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_RTSIGNR 32
#endif
#if defined(KERN_RTSIGMAX) || (defined(HAVE_DECL_KERN_RTSIGMAX) && HAVE_DECL_KERN_RTSIGMAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_RTSIGMAX) == (33), "KERN_RTSIGMAX != 33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_RTSIGMAX 33
#endif
#if defined(KERN_SHMMAX) || (defined(HAVE_DECL_KERN_SHMMAX) && HAVE_DECL_KERN_SHMMAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SHMMAX) == (34), "KERN_SHMMAX != 34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SHMMAX 34
#endif
#if defined(KERN_MSGMAX) || (defined(HAVE_DECL_KERN_MSGMAX) && HAVE_DECL_KERN_MSGMAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MSGMAX) == (35), "KERN_MSGMAX != 35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MSGMAX 35
#endif
#if defined(KERN_MSGMNB) || (defined(HAVE_DECL_KERN_MSGMNB) && HAVE_DECL_KERN_MSGMNB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MSGMNB) == (36), "KERN_MSGMNB != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MSGMNB 36
#endif
#if defined(KERN_MSGPOOL) || (defined(HAVE_DECL_KERN_MSGPOOL) && HAVE_DECL_KERN_MSGPOOL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MSGPOOL) == (37), "KERN_MSGPOOL != 37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MSGPOOL 37
#endif
#if defined(KERN_SYSRQ) || (defined(HAVE_DECL_KERN_SYSRQ) && HAVE_DECL_KERN_SYSRQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SYSRQ) == (38), "KERN_SYSRQ != 38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SYSRQ 38
#endif
#if defined(KERN_MAX_THREADS) || (defined(HAVE_DECL_KERN_MAX_THREADS) && HAVE_DECL_KERN_MAX_THREADS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MAX_THREADS) == (39), "KERN_MAX_THREADS != 39");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MAX_THREADS 39
#endif
#if defined(KERN_RANDOM) || (defined(HAVE_DECL_KERN_RANDOM) && HAVE_DECL_KERN_RANDOM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_RANDOM) == (40), "KERN_RANDOM != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_RANDOM 40
#endif
#if defined(KERN_SHMALL) || (defined(HAVE_DECL_KERN_SHMALL) && HAVE_DECL_KERN_SHMALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SHMALL) == (41), "KERN_SHMALL != 41");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SHMALL 41
#endif
#if defined(KERN_MSGMNI) || (defined(HAVE_DECL_KERN_MSGMNI) && HAVE_DECL_KERN_MSGMNI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MSGMNI) == (42), "KERN_MSGMNI != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MSGMNI 42
#endif
#if defined(KERN_SEM) || (defined(HAVE_DECL_KERN_SEM) && HAVE_DECL_KERN_SEM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SEM) == (43), "KERN_SEM != 43");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SEM 43
#endif
#if defined(KERN_SPARC_STOP_A) || (defined(HAVE_DECL_KERN_SPARC_STOP_A) && HAVE_DECL_KERN_SPARC_STOP_A)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SPARC_STOP_A) == (44), "KERN_SPARC_STOP_A != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SPARC_STOP_A 44
#endif
#if defined(KERN_SHMMNI) || (defined(HAVE_DECL_KERN_SHMMNI) && HAVE_DECL_KERN_SHMMNI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SHMMNI) == (45), "KERN_SHMMNI != 45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SHMMNI 45
#endif
#if defined(KERN_OVERFLOWUID) || (defined(HAVE_DECL_KERN_OVERFLOWUID) && HAVE_DECL_KERN_OVERFLOWUID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_OVERFLOWUID) == (46), "KERN_OVERFLOWUID != 46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_OVERFLOWUID 46
#endif
#if defined(KERN_OVERFLOWGID) || (defined(HAVE_DECL_KERN_OVERFLOWGID) && HAVE_DECL_KERN_OVERFLOWGID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_OVERFLOWGID) == (47), "KERN_OVERFLOWGID != 47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_OVERFLOWGID 47
#endif
#if defined(KERN_SHMPATH) || (defined(HAVE_DECL_KERN_SHMPATH) && HAVE_DECL_KERN_SHMPATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SHMPATH) == (48), "KERN_SHMPATH != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SHMPATH 48
#endif
#if defined(KERN_HOTPLUG) || (defined(HAVE_DECL_KERN_HOTPLUG) && HAVE_DECL_KERN_HOTPLUG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_HOTPLUG) == (49), "KERN_HOTPLUG != 49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_HOTPLUG 49
#endif
#if defined(KERN_IEEE_EMULATION_WARNINGS) || (defined(HAVE_DECL_KERN_IEEE_EMULATION_WARNINGS) && HAVE_DECL_KERN_IEEE_EMULATION_WARNINGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_IEEE_EMULATION_WARNINGS) == (50), "KERN_IEEE_EMULATION_WARNINGS != 50");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_IEEE_EMULATION_WARNINGS 50
#endif
#if defined(KERN_S390_USER_DEBUG_LOGGING) || (defined(HAVE_DECL_KERN_S390_USER_DEBUG_LOGGING) && HAVE_DECL_KERN_S390_USER_DEBUG_LOGGING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_S390_USER_DEBUG_LOGGING) == (51), "KERN_S390_USER_DEBUG_LOGGING != 51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_S390_USER_DEBUG_LOGGING 51
#endif
#if defined(KERN_CORE_USES_PID) || (defined(HAVE_DECL_KERN_CORE_USES_PID) && HAVE_DECL_KERN_CORE_USES_PID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_CORE_USES_PID) == (52), "KERN_CORE_USES_PID != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_CORE_USES_PID 52
#endif
#if defined(KERN_TAINTED) || (defined(HAVE_DECL_KERN_TAINTED) && HAVE_DECL_KERN_TAINTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_TAINTED) == (53), "KERN_TAINTED != 53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_TAINTED 53
#endif
#if defined(KERN_CADPID) || (defined(HAVE_DECL_KERN_CADPID) && HAVE_DECL_KERN_CADPID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_CADPID) == (54), "KERN_CADPID != 54");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_CADPID 54
#endif
#if defined(KERN_PIDMAX) || (defined(HAVE_DECL_KERN_PIDMAX) && HAVE_DECL_KERN_PIDMAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PIDMAX) == (55), "KERN_PIDMAX != 55");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PIDMAX 55
#endif
#if defined(KERN_CORE_PATTERN) || (defined(HAVE_DECL_KERN_CORE_PATTERN) && HAVE_DECL_KERN_CORE_PATTERN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_CORE_PATTERN) == (56), "KERN_CORE_PATTERN != 56");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_CORE_PATTERN 56
#endif
#if defined(KERN_PANIC_ON_OOPS) || (defined(HAVE_DECL_KERN_PANIC_ON_OOPS) && HAVE_DECL_KERN_PANIC_ON_OOPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PANIC_ON_OOPS) == (57), "KERN_PANIC_ON_OOPS != 57");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PANIC_ON_OOPS 57
#endif
#if defined(KERN_HPPA_PWRSW) || (defined(HAVE_DECL_KERN_HPPA_PWRSW) && HAVE_DECL_KERN_HPPA_PWRSW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_HPPA_PWRSW) == (58), "KERN_HPPA_PWRSW != 58");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_HPPA_PWRSW 58
#endif
#if defined(KERN_HPPA_UNALIGNED) || (defined(HAVE_DECL_KERN_HPPA_UNALIGNED) && HAVE_DECL_KERN_HPPA_UNALIGNED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_HPPA_UNALIGNED) == (59), "KERN_HPPA_UNALIGNED != 59");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_HPPA_UNALIGNED 59
#endif
#if defined(KERN_PRINTK_RATELIMIT) || (defined(HAVE_DECL_KERN_PRINTK_RATELIMIT) && HAVE_DECL_KERN_PRINTK_RATELIMIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PRINTK_RATELIMIT) == (60), "KERN_PRINTK_RATELIMIT != 60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PRINTK_RATELIMIT 60
#endif
#if defined(KERN_PRINTK_RATELIMIT_BURST) || (defined(HAVE_DECL_KERN_PRINTK_RATELIMIT_BURST) && HAVE_DECL_KERN_PRINTK_RATELIMIT_BURST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PRINTK_RATELIMIT_BURST) == (61), "KERN_PRINTK_RATELIMIT_BURST != 61");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PRINTK_RATELIMIT_BURST 61
#endif
#if defined(KERN_PTY) || (defined(HAVE_DECL_KERN_PTY) && HAVE_DECL_KERN_PTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PTY) == (62), "KERN_PTY != 62");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PTY 62
#endif
#if defined(KERN_NGROUPS_MAX) || (defined(HAVE_DECL_KERN_NGROUPS_MAX) && HAVE_DECL_KERN_NGROUPS_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_NGROUPS_MAX) == (63), "KERN_NGROUPS_MAX != 63");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_NGROUPS_MAX 63
#endif
#if defined(KERN_SPARC_SCONS_PWROFF) || (defined(HAVE_DECL_KERN_SPARC_SCONS_PWROFF) && HAVE_DECL_KERN_SPARC_SCONS_PWROFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SPARC_SCONS_PWROFF) == (64), "KERN_SPARC_SCONS_PWROFF != 64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SPARC_SCONS_PWROFF 64
#endif
#if defined(KERN_HZ_TIMER) || (defined(HAVE_DECL_KERN_HZ_TIMER) && HAVE_DECL_KERN_HZ_TIMER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_HZ_TIMER) == (65), "KERN_HZ_TIMER != 65");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_HZ_TIMER 65
#endif
#if defined(KERN_UNKNOWN_NMI_PANIC) || (defined(HAVE_DECL_KERN_UNKNOWN_NMI_PANIC) && HAVE_DECL_KERN_UNKNOWN_NMI_PANIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_UNKNOWN_NMI_PANIC) == (66), "KERN_UNKNOWN_NMI_PANIC != 66");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_UNKNOWN_NMI_PANIC 66
#endif
#if defined(KERN_BOOTLOADER_TYPE) || (defined(HAVE_DECL_KERN_BOOTLOADER_TYPE) && HAVE_DECL_KERN_BOOTLOADER_TYPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_BOOTLOADER_TYPE) == (67), "KERN_BOOTLOADER_TYPE != 67");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_BOOTLOADER_TYPE 67
#endif
#if defined(KERN_RANDOMIZE) || (defined(HAVE_DECL_KERN_RANDOMIZE) && HAVE_DECL_KERN_RANDOMIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_RANDOMIZE) == (68), "KERN_RANDOMIZE != 68");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_RANDOMIZE 68
#endif
#if defined(KERN_SETUID_DUMPABLE) || (defined(HAVE_DECL_KERN_SETUID_DUMPABLE) && HAVE_DECL_KERN_SETUID_DUMPABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SETUID_DUMPABLE) == (69), "KERN_SETUID_DUMPABLE != 69");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SETUID_DUMPABLE 69
#endif
#if defined(KERN_SPIN_RETRY) || (defined(HAVE_DECL_KERN_SPIN_RETRY) && HAVE_DECL_KERN_SPIN_RETRY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_SPIN_RETRY) == (70), "KERN_SPIN_RETRY != 70");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_SPIN_RETRY 70
#endif
#if defined(KERN_ACPI_VIDEO_FLAGS) || (defined(HAVE_DECL_KERN_ACPI_VIDEO_FLAGS) && HAVE_DECL_KERN_ACPI_VIDEO_FLAGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_ACPI_VIDEO_FLAGS) == (71), "KERN_ACPI_VIDEO_FLAGS != 71");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_ACPI_VIDEO_FLAGS 71
#endif
#if defined(KERN_IA64_UNALIGNED) || (defined(HAVE_DECL_KERN_IA64_UNALIGNED) && HAVE_DECL_KERN_IA64_UNALIGNED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_IA64_UNALIGNED) == (72), "KERN_IA64_UNALIGNED != 72");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_IA64_UNALIGNED 72
#endif
#if defined(KERN_COMPAT_LOG) || (defined(HAVE_DECL_KERN_COMPAT_LOG) && HAVE_DECL_KERN_COMPAT_LOG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_COMPAT_LOG) == (73), "KERN_COMPAT_LOG != 73");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_COMPAT_LOG 73
#endif
#if defined(KERN_MAX_LOCK_DEPTH) || (defined(HAVE_DECL_KERN_MAX_LOCK_DEPTH) && HAVE_DECL_KERN_MAX_LOCK_DEPTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_MAX_LOCK_DEPTH) == (74), "KERN_MAX_LOCK_DEPTH != 74");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_MAX_LOCK_DEPTH 74
#endif
#if defined(KERN_NMI_WATCHDOG) || (defined(HAVE_DECL_KERN_NMI_WATCHDOG) && HAVE_DECL_KERN_NMI_WATCHDOG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_NMI_WATCHDOG) == (75), "KERN_NMI_WATCHDOG != 75");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_NMI_WATCHDOG 75
#endif
#if defined(KERN_PANIC_ON_NMI) || (defined(HAVE_DECL_KERN_PANIC_ON_NMI) && HAVE_DECL_KERN_PANIC_ON_NMI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PANIC_ON_NMI) == (76), "KERN_PANIC_ON_NMI != 76");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PANIC_ON_NMI 76
#endif
#if defined(KERN_PANIC_ON_WARN) || (defined(HAVE_DECL_KERN_PANIC_ON_WARN) && HAVE_DECL_KERN_PANIC_ON_WARN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PANIC_ON_WARN) == (77), "KERN_PANIC_ON_WARN != 77");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PANIC_ON_WARN 77
#endif
#if defined(KERN_PANIC_PRINT) || (defined(HAVE_DECL_KERN_PANIC_PRINT) && HAVE_DECL_KERN_PANIC_PRINT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KERN_PANIC_PRINT) == (78), "KERN_PANIC_PRINT != 78");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KERN_PANIC_PRINT 78
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sysctl_kern in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sysctl_kern_xdata[] = {

 [KERN_OSTYPE] = XLAT(KERN_OSTYPE),
 #define XLAT_VAL_0 ((unsigned) (KERN_OSTYPE))
 #define XLAT_STR_0 STRINGIFY(KERN_OSTYPE)
 [KERN_OSRELEASE] = XLAT(KERN_OSRELEASE),
 #define XLAT_VAL_1 ((unsigned) (KERN_OSRELEASE))
 #define XLAT_STR_1 STRINGIFY(KERN_OSRELEASE)
 [KERN_OSREV] = XLAT(KERN_OSREV),
 #define XLAT_VAL_2 ((unsigned) (KERN_OSREV))
 #define XLAT_STR_2 STRINGIFY(KERN_OSREV)
 [KERN_VERSION] = XLAT(KERN_VERSION),
 #define XLAT_VAL_3 ((unsigned) (KERN_VERSION))
 #define XLAT_STR_3 STRINGIFY(KERN_VERSION)
 [KERN_SECUREMASK] = XLAT(KERN_SECUREMASK),
 #define XLAT_VAL_4 ((unsigned) (KERN_SECUREMASK))
 #define XLAT_STR_4 STRINGIFY(KERN_SECUREMASK)
 [KERN_PROF] = XLAT(KERN_PROF),
 #define XLAT_VAL_5 ((unsigned) (KERN_PROF))
 #define XLAT_STR_5 STRINGIFY(KERN_PROF)
 [KERN_NODENAME] = XLAT(KERN_NODENAME),
 #define XLAT_VAL_6 ((unsigned) (KERN_NODENAME))
 #define XLAT_STR_6 STRINGIFY(KERN_NODENAME)
 [KERN_DOMAINNAME] = XLAT(KERN_DOMAINNAME),
 #define XLAT_VAL_7 ((unsigned) (KERN_DOMAINNAME))
 #define XLAT_STR_7 STRINGIFY(KERN_DOMAINNAME)
 [KERN_NRINODE] = XLAT(KERN_NRINODE),
 #define XLAT_VAL_8 ((unsigned) (KERN_NRINODE))
 #define XLAT_STR_8 STRINGIFY(KERN_NRINODE)
 [KERN_MAXINODE] = XLAT(KERN_MAXINODE),
 #define XLAT_VAL_9 ((unsigned) (KERN_MAXINODE))
 #define XLAT_STR_9 STRINGIFY(KERN_MAXINODE)
 [KERN_NRFILE] = XLAT(KERN_NRFILE),
 #define XLAT_VAL_10 ((unsigned) (KERN_NRFILE))
 #define XLAT_STR_10 STRINGIFY(KERN_NRFILE)
 [KERN_MAXFILE] = XLAT(KERN_MAXFILE),
 #define XLAT_VAL_11 ((unsigned) (KERN_MAXFILE))
 #define XLAT_STR_11 STRINGIFY(KERN_MAXFILE)
 [KERN_MAXID] = XLAT(KERN_MAXID),
 #define XLAT_VAL_12 ((unsigned) (KERN_MAXID))
 #define XLAT_STR_12 STRINGIFY(KERN_MAXID)


 [KERN_CAP_BSET] = XLAT(KERN_CAP_BSET),
 #define XLAT_VAL_13 ((unsigned) (KERN_CAP_BSET))
 #define XLAT_STR_13 STRINGIFY(KERN_CAP_BSET)

 [KERN_PANIC] = XLAT(KERN_PANIC),
 #define XLAT_VAL_14 ((unsigned) (KERN_PANIC))
 #define XLAT_STR_14 STRINGIFY(KERN_PANIC)

 [KERN_REALROOTDEV] = XLAT(KERN_REALROOTDEV),
 #define XLAT_VAL_15 ((unsigned) (KERN_REALROOTDEV))
 #define XLAT_STR_15 STRINGIFY(KERN_REALROOTDEV)
 [KERN_NFSRNAME] = XLAT(KERN_NFSRNAME),
 #define XLAT_VAL_16 ((unsigned) (KERN_NFSRNAME))
 #define XLAT_STR_16 STRINGIFY(KERN_NFSRNAME)
 [KERN_NFSRADDRS] = XLAT(KERN_NFSRADDRS),
 #define XLAT_VAL_17 ((unsigned) (KERN_NFSRADDRS))
 #define XLAT_STR_17 STRINGIFY(KERN_NFSRADDRS)

 [KERN_JAVA_INTERPRETER] = XLAT(KERN_JAVA_INTERPRETER),
 #define XLAT_VAL_18 ((unsigned) (KERN_JAVA_INTERPRETER))
 #define XLAT_STR_18 STRINGIFY(KERN_JAVA_INTERPRETER)
 [KERN_JAVA_APPLETVIEWER] = XLAT(KERN_JAVA_APPLETVIEWER),
 #define XLAT_VAL_19 ((unsigned) (KERN_JAVA_APPLETVIEWER))
 #define XLAT_STR_19 STRINGIFY(KERN_JAVA_APPLETVIEWER)

 [KERN_SPARC_REBOOT] = XLAT(KERN_SPARC_REBOOT),
 #define XLAT_VAL_20 ((unsigned) (KERN_SPARC_REBOOT))
 #define XLAT_STR_20 STRINGIFY(KERN_SPARC_REBOOT)

 [KERN_CTLALTDEL] = XLAT(KERN_CTLALTDEL),
 #define XLAT_VAL_21 ((unsigned) (KERN_CTLALTDEL))
 #define XLAT_STR_21 STRINGIFY(KERN_CTLALTDEL)
 [KERN_PRINTK] = XLAT(KERN_PRINTK),
 #define XLAT_VAL_22 ((unsigned) (KERN_PRINTK))
 #define XLAT_STR_22 STRINGIFY(KERN_PRINTK)

 [KERN_NAMETRANS] = XLAT(KERN_NAMETRANS),
 #define XLAT_VAL_23 ((unsigned) (KERN_NAMETRANS))
 #define XLAT_STR_23 STRINGIFY(KERN_NAMETRANS)







 [KERN_PPC_HTABRECLAIM] = XLAT(KERN_PPC_HTABRECLAIM),
 #define XLAT_VAL_24 ((unsigned) (KERN_PPC_HTABRECLAIM))
 #define XLAT_STR_24 STRINGIFY(KERN_PPC_HTABRECLAIM)
 [KERN_PPC_ZEROPAGED] = XLAT(KERN_PPC_ZEROPAGED),
 #define XLAT_VAL_25 ((unsigned) (KERN_PPC_ZEROPAGED))
 #define XLAT_STR_25 STRINGIFY(KERN_PPC_ZEROPAGED)

 [KERN_PPC_POWERSAVE_NAP] = XLAT(KERN_PPC_POWERSAVE_NAP),
 #define XLAT_VAL_26 ((unsigned) (KERN_PPC_POWERSAVE_NAP))
 #define XLAT_STR_26 STRINGIFY(KERN_PPC_POWERSAVE_NAP)

 [KERN_MODPROBE] = XLAT(KERN_MODPROBE),
 #define XLAT_VAL_27 ((unsigned) (KERN_MODPROBE))
 #define XLAT_STR_27 STRINGIFY(KERN_MODPROBE)
 [KERN_SG_BIG_BUFF] = XLAT(KERN_SG_BIG_BUFF),
 #define XLAT_VAL_28 ((unsigned) (KERN_SG_BIG_BUFF))
 #define XLAT_STR_28 STRINGIFY(KERN_SG_BIG_BUFF)

 [KERN_ACCT] = XLAT(KERN_ACCT),
 #define XLAT_VAL_29 ((unsigned) (KERN_ACCT))
 #define XLAT_STR_29 STRINGIFY(KERN_ACCT)
 [KERN_PPC_L2CR] = XLAT(KERN_PPC_L2CR),
 #define XLAT_VAL_30 ((unsigned) (KERN_PPC_L2CR))
 #define XLAT_STR_30 STRINGIFY(KERN_PPC_L2CR)


 [KERN_RTSIGNR] = XLAT(KERN_RTSIGNR),
 #define XLAT_VAL_31 ((unsigned) (KERN_RTSIGNR))
 #define XLAT_STR_31 STRINGIFY(KERN_RTSIGNR)
 [KERN_RTSIGMAX] = XLAT(KERN_RTSIGMAX),
 #define XLAT_VAL_32 ((unsigned) (KERN_RTSIGMAX))
 #define XLAT_STR_32 STRINGIFY(KERN_RTSIGMAX)

 [KERN_SHMMAX] = XLAT(KERN_SHMMAX),
 #define XLAT_VAL_33 ((unsigned) (KERN_SHMMAX))
 #define XLAT_STR_33 STRINGIFY(KERN_SHMMAX)
 [KERN_MSGMAX] = XLAT(KERN_MSGMAX),
 #define XLAT_VAL_34 ((unsigned) (KERN_MSGMAX))
 #define XLAT_STR_34 STRINGIFY(KERN_MSGMAX)
 [KERN_MSGMNB] = XLAT(KERN_MSGMNB),
 #define XLAT_VAL_35 ((unsigned) (KERN_MSGMNB))
 #define XLAT_STR_35 STRINGIFY(KERN_MSGMNB)
 [KERN_MSGPOOL] = XLAT(KERN_MSGPOOL),
 #define XLAT_VAL_36 ((unsigned) (KERN_MSGPOOL))
 #define XLAT_STR_36 STRINGIFY(KERN_MSGPOOL)

 [KERN_SYSRQ] = XLAT(KERN_SYSRQ),
 #define XLAT_VAL_37 ((unsigned) (KERN_SYSRQ))
 #define XLAT_STR_37 STRINGIFY(KERN_SYSRQ)
 [KERN_MAX_THREADS] = XLAT(KERN_MAX_THREADS),
 #define XLAT_VAL_38 ((unsigned) (KERN_MAX_THREADS))
 #define XLAT_STR_38 STRINGIFY(KERN_MAX_THREADS)

 [KERN_RANDOM] = XLAT(KERN_RANDOM),
 #define XLAT_VAL_39 ((unsigned) (KERN_RANDOM))
 #define XLAT_STR_39 STRINGIFY(KERN_RANDOM)

 [KERN_SHMALL] = XLAT(KERN_SHMALL),
 #define XLAT_VAL_40 ((unsigned) (KERN_SHMALL))
 #define XLAT_STR_40 STRINGIFY(KERN_SHMALL)

 [KERN_MSGMNI] = XLAT(KERN_MSGMNI),
 #define XLAT_VAL_41 ((unsigned) (KERN_MSGMNI))
 #define XLAT_STR_41 STRINGIFY(KERN_MSGMNI)
 [KERN_SEM] = XLAT(KERN_SEM),
 #define XLAT_VAL_42 ((unsigned) (KERN_SEM))
 #define XLAT_STR_42 STRINGIFY(KERN_SEM)

 [KERN_SPARC_STOP_A] = XLAT(KERN_SPARC_STOP_A),
 #define XLAT_VAL_43 ((unsigned) (KERN_SPARC_STOP_A))
 #define XLAT_STR_43 STRINGIFY(KERN_SPARC_STOP_A)

 [KERN_SHMMNI] = XLAT(KERN_SHMMNI),
 #define XLAT_VAL_44 ((unsigned) (KERN_SHMMNI))
 #define XLAT_STR_44 STRINGIFY(KERN_SHMMNI)

 [KERN_OVERFLOWUID] = XLAT(KERN_OVERFLOWUID),
 #define XLAT_VAL_45 ((unsigned) (KERN_OVERFLOWUID))
 #define XLAT_STR_45 STRINGIFY(KERN_OVERFLOWUID)
 [KERN_OVERFLOWGID] = XLAT(KERN_OVERFLOWGID),
 #define XLAT_VAL_46 ((unsigned) (KERN_OVERFLOWGID))
 #define XLAT_STR_46 STRINGIFY(KERN_OVERFLOWGID)

 [KERN_SHMPATH] = XLAT(KERN_SHMPATH),
 #define XLAT_VAL_47 ((unsigned) (KERN_SHMPATH))
 #define XLAT_STR_47 STRINGIFY(KERN_SHMPATH)

 [KERN_HOTPLUG] = XLAT(KERN_HOTPLUG),
 #define XLAT_VAL_48 ((unsigned) (KERN_HOTPLUG))
 #define XLAT_STR_48 STRINGIFY(KERN_HOTPLUG)

 [KERN_IEEE_EMULATION_WARNINGS] = XLAT(KERN_IEEE_EMULATION_WARNINGS),
 #define XLAT_VAL_49 ((unsigned) (KERN_IEEE_EMULATION_WARNINGS))
 #define XLAT_STR_49 STRINGIFY(KERN_IEEE_EMULATION_WARNINGS)
 [KERN_S390_USER_DEBUG_LOGGING] = XLAT(KERN_S390_USER_DEBUG_LOGGING),
 #define XLAT_VAL_50 ((unsigned) (KERN_S390_USER_DEBUG_LOGGING))
 #define XLAT_STR_50 STRINGIFY(KERN_S390_USER_DEBUG_LOGGING)

 [KERN_CORE_USES_PID] = XLAT(KERN_CORE_USES_PID),
 #define XLAT_VAL_51 ((unsigned) (KERN_CORE_USES_PID))
 #define XLAT_STR_51 STRINGIFY(KERN_CORE_USES_PID)

 [KERN_TAINTED] = XLAT(KERN_TAINTED),
 #define XLAT_VAL_52 ((unsigned) (KERN_TAINTED))
 #define XLAT_STR_52 STRINGIFY(KERN_TAINTED)

 [KERN_CADPID] = XLAT(KERN_CADPID),
 #define XLAT_VAL_53 ((unsigned) (KERN_CADPID))
 #define XLAT_STR_53 STRINGIFY(KERN_CADPID)

 [KERN_PIDMAX] = XLAT(KERN_PIDMAX),
 #define XLAT_VAL_54 ((unsigned) (KERN_PIDMAX))
 #define XLAT_STR_54 STRINGIFY(KERN_PIDMAX)


 [KERN_CORE_PATTERN] = XLAT(KERN_CORE_PATTERN),
 #define XLAT_VAL_55 ((unsigned) (KERN_CORE_PATTERN))
 #define XLAT_STR_55 STRINGIFY(KERN_CORE_PATTERN)

 [KERN_PANIC_ON_OOPS] = XLAT(KERN_PANIC_ON_OOPS),
 #define XLAT_VAL_56 ((unsigned) (KERN_PANIC_ON_OOPS))
 #define XLAT_STR_56 STRINGIFY(KERN_PANIC_ON_OOPS)

 [KERN_HPPA_PWRSW] = XLAT(KERN_HPPA_PWRSW),
 #define XLAT_VAL_57 ((unsigned) (KERN_HPPA_PWRSW))
 #define XLAT_STR_57 STRINGIFY(KERN_HPPA_PWRSW)
 [KERN_HPPA_UNALIGNED] = XLAT(KERN_HPPA_UNALIGNED),
 #define XLAT_VAL_58 ((unsigned) (KERN_HPPA_UNALIGNED))
 #define XLAT_STR_58 STRINGIFY(KERN_HPPA_UNALIGNED)

 [KERN_PRINTK_RATELIMIT] = XLAT(KERN_PRINTK_RATELIMIT),
 #define XLAT_VAL_59 ((unsigned) (KERN_PRINTK_RATELIMIT))
 #define XLAT_STR_59 STRINGIFY(KERN_PRINTK_RATELIMIT)
 [KERN_PRINTK_RATELIMIT_BURST] = XLAT(KERN_PRINTK_RATELIMIT_BURST),
 #define XLAT_VAL_60 ((unsigned) (KERN_PRINTK_RATELIMIT_BURST))
 #define XLAT_STR_60 STRINGIFY(KERN_PRINTK_RATELIMIT_BURST)

 [KERN_PTY] = XLAT(KERN_PTY),
 #define XLAT_VAL_61 ((unsigned) (KERN_PTY))
 #define XLAT_STR_61 STRINGIFY(KERN_PTY)

 [KERN_NGROUPS_MAX] = XLAT(KERN_NGROUPS_MAX),
 #define XLAT_VAL_62 ((unsigned) (KERN_NGROUPS_MAX))
 #define XLAT_STR_62 STRINGIFY(KERN_NGROUPS_MAX)

 [KERN_SPARC_SCONS_PWROFF] = XLAT(KERN_SPARC_SCONS_PWROFF),
 #define XLAT_VAL_63 ((unsigned) (KERN_SPARC_SCONS_PWROFF))
 #define XLAT_STR_63 STRINGIFY(KERN_SPARC_SCONS_PWROFF)

 [KERN_HZ_TIMER] = XLAT(KERN_HZ_TIMER),
 #define XLAT_VAL_64 ((unsigned) (KERN_HZ_TIMER))
 #define XLAT_STR_64 STRINGIFY(KERN_HZ_TIMER)

 [KERN_UNKNOWN_NMI_PANIC] = XLAT(KERN_UNKNOWN_NMI_PANIC),
 #define XLAT_VAL_65 ((unsigned) (KERN_UNKNOWN_NMI_PANIC))
 #define XLAT_STR_65 STRINGIFY(KERN_UNKNOWN_NMI_PANIC)

 [KERN_BOOTLOADER_TYPE] = XLAT(KERN_BOOTLOADER_TYPE),
 #define XLAT_VAL_66 ((unsigned) (KERN_BOOTLOADER_TYPE))
 #define XLAT_STR_66 STRINGIFY(KERN_BOOTLOADER_TYPE)

 [KERN_RANDOMIZE] = XLAT(KERN_RANDOMIZE),
 #define XLAT_VAL_67 ((unsigned) (KERN_RANDOMIZE))
 #define XLAT_STR_67 STRINGIFY(KERN_RANDOMIZE)

 [KERN_SETUID_DUMPABLE] = XLAT(KERN_SETUID_DUMPABLE),
 #define XLAT_VAL_68 ((unsigned) (KERN_SETUID_DUMPABLE))
 #define XLAT_STR_68 STRINGIFY(KERN_SETUID_DUMPABLE)

 [KERN_SPIN_RETRY] = XLAT(KERN_SPIN_RETRY),
 #define XLAT_VAL_69 ((unsigned) (KERN_SPIN_RETRY))
 #define XLAT_STR_69 STRINGIFY(KERN_SPIN_RETRY)

 [KERN_ACPI_VIDEO_FLAGS] = XLAT(KERN_ACPI_VIDEO_FLAGS),
 #define XLAT_VAL_70 ((unsigned) (KERN_ACPI_VIDEO_FLAGS))
 #define XLAT_STR_70 STRINGIFY(KERN_ACPI_VIDEO_FLAGS)

 [KERN_IA64_UNALIGNED] = XLAT(KERN_IA64_UNALIGNED),
 #define XLAT_VAL_71 ((unsigned) (KERN_IA64_UNALIGNED))
 #define XLAT_STR_71 STRINGIFY(KERN_IA64_UNALIGNED)

 [KERN_COMPAT_LOG] = XLAT(KERN_COMPAT_LOG),
 #define XLAT_VAL_72 ((unsigned) (KERN_COMPAT_LOG))
 #define XLAT_STR_72 STRINGIFY(KERN_COMPAT_LOG)

 [KERN_MAX_LOCK_DEPTH] = XLAT(KERN_MAX_LOCK_DEPTH),
 #define XLAT_VAL_73 ((unsigned) (KERN_MAX_LOCK_DEPTH))
 #define XLAT_STR_73 STRINGIFY(KERN_MAX_LOCK_DEPTH)

 [KERN_NMI_WATCHDOG] = XLAT(KERN_NMI_WATCHDOG),
 #define XLAT_VAL_74 ((unsigned) (KERN_NMI_WATCHDOG))
 #define XLAT_STR_74 STRINGIFY(KERN_NMI_WATCHDOG)

 [KERN_PANIC_ON_NMI] = XLAT(KERN_PANIC_ON_NMI),
 #define XLAT_VAL_75 ((unsigned) (KERN_PANIC_ON_NMI))
 #define XLAT_STR_75 STRINGIFY(KERN_PANIC_ON_NMI)

 [KERN_PANIC_ON_WARN] = XLAT(KERN_PANIC_ON_WARN),
 #define XLAT_VAL_76 ((unsigned) (KERN_PANIC_ON_WARN))
 #define XLAT_STR_76 STRINGIFY(KERN_PANIC_ON_WARN)

 [KERN_PANIC_PRINT] = XLAT(KERN_PANIC_PRINT),
 #define XLAT_VAL_77 ((unsigned) (KERN_PANIC_PRINT))
 #define XLAT_STR_77 STRINGIFY(KERN_PANIC_PRINT)
};
static
const struct xlat sysctl_kern[1] = { {
 .data = sysctl_kern_xdata,
 .size = ARRAY_SIZE(sysctl_kern_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
