/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_ipv6_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(IPV6_ADDRFORM) || (defined(HAVE_DECL_IPV6_ADDRFORM) && HAVE_DECL_IPV6_ADDRFORM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_ADDRFORM) == (1), "IPV6_ADDRFORM != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_ADDRFORM 1
#endif
#if defined(IPV6_2292PKTINFO) || (defined(HAVE_DECL_IPV6_2292PKTINFO) && HAVE_DECL_IPV6_2292PKTINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_2292PKTINFO) == (2), "IPV6_2292PKTINFO != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_2292PKTINFO 2
#endif
#if defined(IPV6_2292HOPOPTS) || (defined(HAVE_DECL_IPV6_2292HOPOPTS) && HAVE_DECL_IPV6_2292HOPOPTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_2292HOPOPTS) == (3), "IPV6_2292HOPOPTS != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_2292HOPOPTS 3
#endif
#if defined(IPV6_2292DSTOPTS) || (defined(HAVE_DECL_IPV6_2292DSTOPTS) && HAVE_DECL_IPV6_2292DSTOPTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_2292DSTOPTS) == (4), "IPV6_2292DSTOPTS != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_2292DSTOPTS 4
#endif
#if defined(IPV6_2292RTHDR) || (defined(HAVE_DECL_IPV6_2292RTHDR) && HAVE_DECL_IPV6_2292RTHDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_2292RTHDR) == (5), "IPV6_2292RTHDR != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_2292RTHDR 5
#endif
#if defined(IPV6_2292PKTOPTIONS) || (defined(HAVE_DECL_IPV6_2292PKTOPTIONS) && HAVE_DECL_IPV6_2292PKTOPTIONS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_2292PKTOPTIONS) == (6), "IPV6_2292PKTOPTIONS != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_2292PKTOPTIONS 6
#endif
#if defined(IPV6_CHECKSUM) || (defined(HAVE_DECL_IPV6_CHECKSUM) && HAVE_DECL_IPV6_CHECKSUM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_CHECKSUM) == (7), "IPV6_CHECKSUM != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_CHECKSUM 7
#endif
#if defined(IPV6_2292HOPLIMIT) || (defined(HAVE_DECL_IPV6_2292HOPLIMIT) && HAVE_DECL_IPV6_2292HOPLIMIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_2292HOPLIMIT) == (8), "IPV6_2292HOPLIMIT != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_2292HOPLIMIT 8
#endif
#if defined(IPV6_NEXTHOP) || (defined(HAVE_DECL_IPV6_NEXTHOP) && HAVE_DECL_IPV6_NEXTHOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_NEXTHOP) == (9), "IPV6_NEXTHOP != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_NEXTHOP 9
#endif
#if defined(IPV6_AUTHHDR) || (defined(HAVE_DECL_IPV6_AUTHHDR) && HAVE_DECL_IPV6_AUTHHDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_AUTHHDR) == (10), "IPV6_AUTHHDR != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_AUTHHDR 10
#endif
#if defined(IPV6_FLOWINFO) || (defined(HAVE_DECL_IPV6_FLOWINFO) && HAVE_DECL_IPV6_FLOWINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_FLOWINFO) == (11), "IPV6_FLOWINFO != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_FLOWINFO 11
#endif
#if defined(IPV6_UNICAST_HOPS) || (defined(HAVE_DECL_IPV6_UNICAST_HOPS) && HAVE_DECL_IPV6_UNICAST_HOPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_UNICAST_HOPS) == (16), "IPV6_UNICAST_HOPS != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_UNICAST_HOPS 16
#endif
#if defined(IPV6_MULTICAST_IF) || (defined(HAVE_DECL_IPV6_MULTICAST_IF) && HAVE_DECL_IPV6_MULTICAST_IF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_MULTICAST_IF) == (17), "IPV6_MULTICAST_IF != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_MULTICAST_IF 17
#endif
#if defined(IPV6_MULTICAST_HOPS) || (defined(HAVE_DECL_IPV6_MULTICAST_HOPS) && HAVE_DECL_IPV6_MULTICAST_HOPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_MULTICAST_HOPS) == (18), "IPV6_MULTICAST_HOPS != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_MULTICAST_HOPS 18
#endif
#if defined(IPV6_MULTICAST_LOOP) || (defined(HAVE_DECL_IPV6_MULTICAST_LOOP) && HAVE_DECL_IPV6_MULTICAST_LOOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_MULTICAST_LOOP) == (19), "IPV6_MULTICAST_LOOP != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_MULTICAST_LOOP 19
#endif
#if defined(IPV6_ADD_MEMBERSHIP) || (defined(HAVE_DECL_IPV6_ADD_MEMBERSHIP) && HAVE_DECL_IPV6_ADD_MEMBERSHIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_ADD_MEMBERSHIP) == (20), "IPV6_ADD_MEMBERSHIP != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_ADD_MEMBERSHIP 20
#endif
#if defined(IPV6_DROP_MEMBERSHIP) || (defined(HAVE_DECL_IPV6_DROP_MEMBERSHIP) && HAVE_DECL_IPV6_DROP_MEMBERSHIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_DROP_MEMBERSHIP) == (21), "IPV6_DROP_MEMBERSHIP != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_DROP_MEMBERSHIP 21
#endif
#if defined(IPV6_ROUTER_ALERT) || (defined(HAVE_DECL_IPV6_ROUTER_ALERT) && HAVE_DECL_IPV6_ROUTER_ALERT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_ROUTER_ALERT) == (22), "IPV6_ROUTER_ALERT != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_ROUTER_ALERT 22
#endif
#if defined(IPV6_MTU_DISCOVER) || (defined(HAVE_DECL_IPV6_MTU_DISCOVER) && HAVE_DECL_IPV6_MTU_DISCOVER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_MTU_DISCOVER) == (23), "IPV6_MTU_DISCOVER != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_MTU_DISCOVER 23
#endif
#if defined(IPV6_MTU) || (defined(HAVE_DECL_IPV6_MTU) && HAVE_DECL_IPV6_MTU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_MTU) == (24), "IPV6_MTU != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_MTU 24
#endif
#if defined(IPV6_RECVERR) || (defined(HAVE_DECL_IPV6_RECVERR) && HAVE_DECL_IPV6_RECVERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVERR) == (25), "IPV6_RECVERR != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVERR 25
#endif
#if defined(IPV6_V6ONLY) || (defined(HAVE_DECL_IPV6_V6ONLY) && HAVE_DECL_IPV6_V6ONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_V6ONLY) == (26), "IPV6_V6ONLY != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_V6ONLY 26
#endif
#if defined(IPV6_JOIN_ANYCAST) || (defined(HAVE_DECL_IPV6_JOIN_ANYCAST) && HAVE_DECL_IPV6_JOIN_ANYCAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_JOIN_ANYCAST) == (27), "IPV6_JOIN_ANYCAST != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_JOIN_ANYCAST 27
#endif
#if defined(IPV6_LEAVE_ANYCAST) || (defined(HAVE_DECL_IPV6_LEAVE_ANYCAST) && HAVE_DECL_IPV6_LEAVE_ANYCAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_LEAVE_ANYCAST) == (28), "IPV6_LEAVE_ANYCAST != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_LEAVE_ANYCAST 28
#endif
#if defined(IPV6_MULTICAST_ALL) || (defined(HAVE_DECL_IPV6_MULTICAST_ALL) && HAVE_DECL_IPV6_MULTICAST_ALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_MULTICAST_ALL) == (29), "IPV6_MULTICAST_ALL != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_MULTICAST_ALL 29
#endif
#if defined(IPV6_ROUTER_ALERT_ISOLATE) || (defined(HAVE_DECL_IPV6_ROUTER_ALERT_ISOLATE) && HAVE_DECL_IPV6_ROUTER_ALERT_ISOLATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_ROUTER_ALERT_ISOLATE) == (30), "IPV6_ROUTER_ALERT_ISOLATE != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_ROUTER_ALERT_ISOLATE 30
#endif
#if defined(IPV6_RECVERR_RFC4884) || (defined(HAVE_DECL_IPV6_RECVERR_RFC4884) && HAVE_DECL_IPV6_RECVERR_RFC4884)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVERR_RFC4884) == (31), "IPV6_RECVERR_RFC4884 != 31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVERR_RFC4884 31
#endif
#if defined(IPV6_FLOWLABEL_MGR) || (defined(HAVE_DECL_IPV6_FLOWLABEL_MGR) && HAVE_DECL_IPV6_FLOWLABEL_MGR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_FLOWLABEL_MGR) == (32), "IPV6_FLOWLABEL_MGR != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_FLOWLABEL_MGR 32
#endif
#if defined(IPV6_FLOWINFO_SEND) || (defined(HAVE_DECL_IPV6_FLOWINFO_SEND) && HAVE_DECL_IPV6_FLOWINFO_SEND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_FLOWINFO_SEND) == (33), "IPV6_FLOWINFO_SEND != 33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_FLOWINFO_SEND 33
#endif
#if defined(IPV6_IPSEC_POLICY) || (defined(HAVE_DECL_IPV6_IPSEC_POLICY) && HAVE_DECL_IPV6_IPSEC_POLICY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_IPSEC_POLICY) == (34), "IPV6_IPSEC_POLICY != 34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_IPSEC_POLICY 34
#endif
#if defined(IPV6_XFRM_POLICY) || (defined(HAVE_DECL_IPV6_XFRM_POLICY) && HAVE_DECL_IPV6_XFRM_POLICY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_XFRM_POLICY) == (35), "IPV6_XFRM_POLICY != 35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_XFRM_POLICY 35
#endif
#if defined(IPV6_HDRINCL) || (defined(HAVE_DECL_IPV6_HDRINCL) && HAVE_DECL_IPV6_HDRINCL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_HDRINCL) == (36), "IPV6_HDRINCL != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_HDRINCL 36
#endif
#if defined(MCAST_JOIN_GROUP) || (defined(HAVE_DECL_MCAST_JOIN_GROUP) && HAVE_DECL_MCAST_JOIN_GROUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCAST_JOIN_GROUP) == (42), "MCAST_JOIN_GROUP != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCAST_JOIN_GROUP 42
#endif
#if defined(MCAST_BLOCK_SOURCE) || (defined(HAVE_DECL_MCAST_BLOCK_SOURCE) && HAVE_DECL_MCAST_BLOCK_SOURCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCAST_BLOCK_SOURCE) == (43), "MCAST_BLOCK_SOURCE != 43");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCAST_BLOCK_SOURCE 43
#endif
#if defined(MCAST_UNBLOCK_SOURCE) || (defined(HAVE_DECL_MCAST_UNBLOCK_SOURCE) && HAVE_DECL_MCAST_UNBLOCK_SOURCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCAST_UNBLOCK_SOURCE) == (44), "MCAST_UNBLOCK_SOURCE != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCAST_UNBLOCK_SOURCE 44
#endif
#if defined(MCAST_LEAVE_GROUP) || (defined(HAVE_DECL_MCAST_LEAVE_GROUP) && HAVE_DECL_MCAST_LEAVE_GROUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCAST_LEAVE_GROUP) == (45), "MCAST_LEAVE_GROUP != 45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCAST_LEAVE_GROUP 45
#endif
#if defined(MCAST_JOIN_SOURCE_GROUP) || (defined(HAVE_DECL_MCAST_JOIN_SOURCE_GROUP) && HAVE_DECL_MCAST_JOIN_SOURCE_GROUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCAST_JOIN_SOURCE_GROUP) == (46), "MCAST_JOIN_SOURCE_GROUP != 46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCAST_JOIN_SOURCE_GROUP 46
#endif
#if defined(MCAST_LEAVE_SOURCE_GROUP) || (defined(HAVE_DECL_MCAST_LEAVE_SOURCE_GROUP) && HAVE_DECL_MCAST_LEAVE_SOURCE_GROUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCAST_LEAVE_SOURCE_GROUP) == (47), "MCAST_LEAVE_SOURCE_GROUP != 47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCAST_LEAVE_SOURCE_GROUP 47
#endif
#if defined(MCAST_MSFILTER) || (defined(HAVE_DECL_MCAST_MSFILTER) && HAVE_DECL_MCAST_MSFILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MCAST_MSFILTER) == (48), "MCAST_MSFILTER != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MCAST_MSFILTER 48
#endif
#if defined(IPV6_RECVPKTINFO) || (defined(HAVE_DECL_IPV6_RECVPKTINFO) && HAVE_DECL_IPV6_RECVPKTINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVPKTINFO) == (49), "IPV6_RECVPKTINFO != 49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVPKTINFO 49
#endif
#if defined(IPV6_PKTINFO) || (defined(HAVE_DECL_IPV6_PKTINFO) && HAVE_DECL_IPV6_PKTINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_PKTINFO) == (50), "IPV6_PKTINFO != 50");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_PKTINFO 50
#endif
#if defined(IPV6_RECVHOPLIMIT) || (defined(HAVE_DECL_IPV6_RECVHOPLIMIT) && HAVE_DECL_IPV6_RECVHOPLIMIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVHOPLIMIT) == (51), "IPV6_RECVHOPLIMIT != 51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVHOPLIMIT 51
#endif
#if defined(IPV6_HOPLIMIT) || (defined(HAVE_DECL_IPV6_HOPLIMIT) && HAVE_DECL_IPV6_HOPLIMIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_HOPLIMIT) == (52), "IPV6_HOPLIMIT != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_HOPLIMIT 52
#endif
#if defined(IPV6_RECVHOPOPTS) || (defined(HAVE_DECL_IPV6_RECVHOPOPTS) && HAVE_DECL_IPV6_RECVHOPOPTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVHOPOPTS) == (53), "IPV6_RECVHOPOPTS != 53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVHOPOPTS 53
#endif
#if defined(IPV6_HOPOPTS) || (defined(HAVE_DECL_IPV6_HOPOPTS) && HAVE_DECL_IPV6_HOPOPTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_HOPOPTS) == (54), "IPV6_HOPOPTS != 54");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_HOPOPTS 54
#endif
#if defined(IPV6_RTHDRDSTOPTS) || (defined(HAVE_DECL_IPV6_RTHDRDSTOPTS) && HAVE_DECL_IPV6_RTHDRDSTOPTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RTHDRDSTOPTS) == (55), "IPV6_RTHDRDSTOPTS != 55");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RTHDRDSTOPTS 55
#endif
#if defined(IPV6_RECVRTHDR) || (defined(HAVE_DECL_IPV6_RECVRTHDR) && HAVE_DECL_IPV6_RECVRTHDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVRTHDR) == (56), "IPV6_RECVRTHDR != 56");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVRTHDR 56
#endif
#if defined(IPV6_RTHDR) || (defined(HAVE_DECL_IPV6_RTHDR) && HAVE_DECL_IPV6_RTHDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RTHDR) == (57), "IPV6_RTHDR != 57");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RTHDR 57
#endif
#if defined(IPV6_RECVDSTOPTS) || (defined(HAVE_DECL_IPV6_RECVDSTOPTS) && HAVE_DECL_IPV6_RECVDSTOPTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVDSTOPTS) == (58), "IPV6_RECVDSTOPTS != 58");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVDSTOPTS 58
#endif
#if defined(IPV6_DSTOPTS) || (defined(HAVE_DECL_IPV6_DSTOPTS) && HAVE_DECL_IPV6_DSTOPTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_DSTOPTS) == (59), "IPV6_DSTOPTS != 59");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_DSTOPTS 59
#endif
#if defined(IPV6_RECVPATHMTU) || (defined(HAVE_DECL_IPV6_RECVPATHMTU) && HAVE_DECL_IPV6_RECVPATHMTU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVPATHMTU) == (60), "IPV6_RECVPATHMTU != 60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVPATHMTU 60
#endif
#if defined(IPV6_PATHMTU) || (defined(HAVE_DECL_IPV6_PATHMTU) && HAVE_DECL_IPV6_PATHMTU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_PATHMTU) == (61), "IPV6_PATHMTU != 61");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_PATHMTU 61
#endif
#if defined(IPV6_DONTFRAG) || (defined(HAVE_DECL_IPV6_DONTFRAG) && HAVE_DECL_IPV6_DONTFRAG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_DONTFRAG) == (62), "IPV6_DONTFRAG != 62");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_DONTFRAG 62
#endif
#if defined(IPV6_USE_MIN_MTU) || (defined(HAVE_DECL_IPV6_USE_MIN_MTU) && HAVE_DECL_IPV6_USE_MIN_MTU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_USE_MIN_MTU) == (63), "IPV6_USE_MIN_MTU != 63");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_USE_MIN_MTU 63
#endif
#if defined(IPV6_RECVTCLASS) || (defined(HAVE_DECL_IPV6_RECVTCLASS) && HAVE_DECL_IPV6_RECVTCLASS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVTCLASS) == (66), "IPV6_RECVTCLASS != 66");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVTCLASS 66
#endif
#if defined(IPV6_TCLASS) || (defined(HAVE_DECL_IPV6_TCLASS) && HAVE_DECL_IPV6_TCLASS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_TCLASS) == (67), "IPV6_TCLASS != 67");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_TCLASS 67
#endif
#if defined(IPV6_AUTOFLOWLABEL) || (defined(HAVE_DECL_IPV6_AUTOFLOWLABEL) && HAVE_DECL_IPV6_AUTOFLOWLABEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_AUTOFLOWLABEL) == (70), "IPV6_AUTOFLOWLABEL != 70");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_AUTOFLOWLABEL 70
#endif
#if defined(IPV6_ADDR_PREFERENCES) || (defined(HAVE_DECL_IPV6_ADDR_PREFERENCES) && HAVE_DECL_IPV6_ADDR_PREFERENCES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_ADDR_PREFERENCES) == (72), "IPV6_ADDR_PREFERENCES != 72");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_ADDR_PREFERENCES 72
#endif
#if defined(IPV6_MINHOPCOUNT) || (defined(HAVE_DECL_IPV6_MINHOPCOUNT) && HAVE_DECL_IPV6_MINHOPCOUNT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_MINHOPCOUNT) == (73), "IPV6_MINHOPCOUNT != 73");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_MINHOPCOUNT 73
#endif
#if defined(IPV6_ORIGDSTADDR) || (defined(HAVE_DECL_IPV6_ORIGDSTADDR) && HAVE_DECL_IPV6_ORIGDSTADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_ORIGDSTADDR) == (74), "IPV6_ORIGDSTADDR != 74");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_ORIGDSTADDR 74
#endif
#if defined(IPV6_TRANSPARENT) || (defined(HAVE_DECL_IPV6_TRANSPARENT) && HAVE_DECL_IPV6_TRANSPARENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_TRANSPARENT) == (75), "IPV6_TRANSPARENT != 75");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_TRANSPARENT 75
#endif
#if defined(IPV6_UNICAST_IF) || (defined(HAVE_DECL_IPV6_UNICAST_IF) && HAVE_DECL_IPV6_UNICAST_IF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_UNICAST_IF) == (76), "IPV6_UNICAST_IF != 76");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_UNICAST_IF 76
#endif
#if defined(IPV6_RECVFRAGSIZE) || (defined(HAVE_DECL_IPV6_RECVFRAGSIZE) && HAVE_DECL_IPV6_RECVFRAGSIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_RECVFRAGSIZE) == (77), "IPV6_RECVFRAGSIZE != 77");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_RECVFRAGSIZE 77
#endif
#if defined(IPV6_FREEBIND) || (defined(HAVE_DECL_IPV6_FREEBIND) && HAVE_DECL_IPV6_FREEBIND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPV6_FREEBIND) == (78), "IPV6_FREEBIND != 78");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPV6_FREEBIND 78
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_ipv6_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_ipv6_options_xdata[] = {
 [IPV6_ADDRFORM] = XLAT(IPV6_ADDRFORM),
 #define XLAT_VAL_0 ((unsigned) (IPV6_ADDRFORM))
 #define XLAT_STR_0 STRINGIFY(IPV6_ADDRFORM)
 [IPV6_2292PKTINFO] = XLAT(IPV6_2292PKTINFO),
 #define XLAT_VAL_1 ((unsigned) (IPV6_2292PKTINFO))
 #define XLAT_STR_1 STRINGIFY(IPV6_2292PKTINFO)
 [IPV6_2292HOPOPTS] = XLAT(IPV6_2292HOPOPTS),
 #define XLAT_VAL_2 ((unsigned) (IPV6_2292HOPOPTS))
 #define XLAT_STR_2 STRINGIFY(IPV6_2292HOPOPTS)
 [IPV6_2292DSTOPTS] = XLAT(IPV6_2292DSTOPTS),
 #define XLAT_VAL_3 ((unsigned) (IPV6_2292DSTOPTS))
 #define XLAT_STR_3 STRINGIFY(IPV6_2292DSTOPTS)
 [IPV6_2292RTHDR] = XLAT(IPV6_2292RTHDR),
 #define XLAT_VAL_4 ((unsigned) (IPV6_2292RTHDR))
 #define XLAT_STR_4 STRINGIFY(IPV6_2292RTHDR)
 [IPV6_2292PKTOPTIONS] = XLAT(IPV6_2292PKTOPTIONS),
 #define XLAT_VAL_5 ((unsigned) (IPV6_2292PKTOPTIONS))
 #define XLAT_STR_5 STRINGIFY(IPV6_2292PKTOPTIONS)
 [IPV6_CHECKSUM] = XLAT(IPV6_CHECKSUM),
 #define XLAT_VAL_6 ((unsigned) (IPV6_CHECKSUM))
 #define XLAT_STR_6 STRINGIFY(IPV6_CHECKSUM)
 [IPV6_2292HOPLIMIT] = XLAT(IPV6_2292HOPLIMIT),
 #define XLAT_VAL_7 ((unsigned) (IPV6_2292HOPLIMIT))
 #define XLAT_STR_7 STRINGIFY(IPV6_2292HOPLIMIT)
 [IPV6_NEXTHOP] = XLAT(IPV6_NEXTHOP),
 #define XLAT_VAL_8 ((unsigned) (IPV6_NEXTHOP))
 #define XLAT_STR_8 STRINGIFY(IPV6_NEXTHOP)
 [IPV6_AUTHHDR] = XLAT(IPV6_AUTHHDR),
 #define XLAT_VAL_9 ((unsigned) (IPV6_AUTHHDR))
 #define XLAT_STR_9 STRINGIFY(IPV6_AUTHHDR)
 [IPV6_FLOWINFO] = XLAT(IPV6_FLOWINFO),
 #define XLAT_VAL_10 ((unsigned) (IPV6_FLOWINFO))
 #define XLAT_STR_10 STRINGIFY(IPV6_FLOWINFO)
 [IPV6_UNICAST_HOPS] = XLAT(IPV6_UNICAST_HOPS),
 #define XLAT_VAL_11 ((unsigned) (IPV6_UNICAST_HOPS))
 #define XLAT_STR_11 STRINGIFY(IPV6_UNICAST_HOPS)
 [IPV6_MULTICAST_IF] = XLAT(IPV6_MULTICAST_IF),
 #define XLAT_VAL_12 ((unsigned) (IPV6_MULTICAST_IF))
 #define XLAT_STR_12 STRINGIFY(IPV6_MULTICAST_IF)
 [IPV6_MULTICAST_HOPS] = XLAT(IPV6_MULTICAST_HOPS),
 #define XLAT_VAL_13 ((unsigned) (IPV6_MULTICAST_HOPS))
 #define XLAT_STR_13 STRINGIFY(IPV6_MULTICAST_HOPS)
 [IPV6_MULTICAST_LOOP] = XLAT(IPV6_MULTICAST_LOOP),
 #define XLAT_VAL_14 ((unsigned) (IPV6_MULTICAST_LOOP))
 #define XLAT_STR_14 STRINGIFY(IPV6_MULTICAST_LOOP)
 [IPV6_ADD_MEMBERSHIP] = XLAT(IPV6_ADD_MEMBERSHIP),
 #define XLAT_VAL_15 ((unsigned) (IPV6_ADD_MEMBERSHIP))
 #define XLAT_STR_15 STRINGIFY(IPV6_ADD_MEMBERSHIP)
 [IPV6_DROP_MEMBERSHIP] = XLAT(IPV6_DROP_MEMBERSHIP),
 #define XLAT_VAL_16 ((unsigned) (IPV6_DROP_MEMBERSHIP))
 #define XLAT_STR_16 STRINGIFY(IPV6_DROP_MEMBERSHIP)
 [IPV6_ROUTER_ALERT] = XLAT(IPV6_ROUTER_ALERT),
 #define XLAT_VAL_17 ((unsigned) (IPV6_ROUTER_ALERT))
 #define XLAT_STR_17 STRINGIFY(IPV6_ROUTER_ALERT)
 [IPV6_MTU_DISCOVER] = XLAT(IPV6_MTU_DISCOVER),
 #define XLAT_VAL_18 ((unsigned) (IPV6_MTU_DISCOVER))
 #define XLAT_STR_18 STRINGIFY(IPV6_MTU_DISCOVER)
 [IPV6_MTU] = XLAT(IPV6_MTU),
 #define XLAT_VAL_19 ((unsigned) (IPV6_MTU))
 #define XLAT_STR_19 STRINGIFY(IPV6_MTU)
 [IPV6_RECVERR] = XLAT(IPV6_RECVERR),
 #define XLAT_VAL_20 ((unsigned) (IPV6_RECVERR))
 #define XLAT_STR_20 STRINGIFY(IPV6_RECVERR)
 [IPV6_V6ONLY] = XLAT(IPV6_V6ONLY),
 #define XLAT_VAL_21 ((unsigned) (IPV6_V6ONLY))
 #define XLAT_STR_21 STRINGIFY(IPV6_V6ONLY)
 [IPV6_JOIN_ANYCAST] = XLAT(IPV6_JOIN_ANYCAST),
 #define XLAT_VAL_22 ((unsigned) (IPV6_JOIN_ANYCAST))
 #define XLAT_STR_22 STRINGIFY(IPV6_JOIN_ANYCAST)
 [IPV6_LEAVE_ANYCAST] = XLAT(IPV6_LEAVE_ANYCAST),
 #define XLAT_VAL_23 ((unsigned) (IPV6_LEAVE_ANYCAST))
 #define XLAT_STR_23 STRINGIFY(IPV6_LEAVE_ANYCAST)
 [IPV6_MULTICAST_ALL] = XLAT(IPV6_MULTICAST_ALL),
 #define XLAT_VAL_24 ((unsigned) (IPV6_MULTICAST_ALL))
 #define XLAT_STR_24 STRINGIFY(IPV6_MULTICAST_ALL)
 [IPV6_ROUTER_ALERT_ISOLATE] = XLAT(IPV6_ROUTER_ALERT_ISOLATE),
 #define XLAT_VAL_25 ((unsigned) (IPV6_ROUTER_ALERT_ISOLATE))
 #define XLAT_STR_25 STRINGIFY(IPV6_ROUTER_ALERT_ISOLATE)
 [IPV6_RECVERR_RFC4884] = XLAT(IPV6_RECVERR_RFC4884),
 #define XLAT_VAL_26 ((unsigned) (IPV6_RECVERR_RFC4884))
 #define XLAT_STR_26 STRINGIFY(IPV6_RECVERR_RFC4884)
 [IPV6_FLOWLABEL_MGR] = XLAT(IPV6_FLOWLABEL_MGR),
 #define XLAT_VAL_27 ((unsigned) (IPV6_FLOWLABEL_MGR))
 #define XLAT_STR_27 STRINGIFY(IPV6_FLOWLABEL_MGR)
 [IPV6_FLOWINFO_SEND] = XLAT(IPV6_FLOWINFO_SEND),
 #define XLAT_VAL_28 ((unsigned) (IPV6_FLOWINFO_SEND))
 #define XLAT_STR_28 STRINGIFY(IPV6_FLOWINFO_SEND)
 [IPV6_IPSEC_POLICY] = XLAT(IPV6_IPSEC_POLICY),
 #define XLAT_VAL_29 ((unsigned) (IPV6_IPSEC_POLICY))
 #define XLAT_STR_29 STRINGIFY(IPV6_IPSEC_POLICY)
 [IPV6_XFRM_POLICY] = XLAT(IPV6_XFRM_POLICY),
 #define XLAT_VAL_30 ((unsigned) (IPV6_XFRM_POLICY))
 #define XLAT_STR_30 STRINGIFY(IPV6_XFRM_POLICY)
 [IPV6_HDRINCL] = XLAT(IPV6_HDRINCL),
 #define XLAT_VAL_31 ((unsigned) (IPV6_HDRINCL))
 #define XLAT_STR_31 STRINGIFY(IPV6_HDRINCL)
 [MCAST_JOIN_GROUP] = XLAT(MCAST_JOIN_GROUP),
 #define XLAT_VAL_32 ((unsigned) (MCAST_JOIN_GROUP))
 #define XLAT_STR_32 STRINGIFY(MCAST_JOIN_GROUP)
 [MCAST_BLOCK_SOURCE] = XLAT(MCAST_BLOCK_SOURCE),
 #define XLAT_VAL_33 ((unsigned) (MCAST_BLOCK_SOURCE))
 #define XLAT_STR_33 STRINGIFY(MCAST_BLOCK_SOURCE)
 [MCAST_UNBLOCK_SOURCE] = XLAT(MCAST_UNBLOCK_SOURCE),
 #define XLAT_VAL_34 ((unsigned) (MCAST_UNBLOCK_SOURCE))
 #define XLAT_STR_34 STRINGIFY(MCAST_UNBLOCK_SOURCE)
 [MCAST_LEAVE_GROUP] = XLAT(MCAST_LEAVE_GROUP),
 #define XLAT_VAL_35 ((unsigned) (MCAST_LEAVE_GROUP))
 #define XLAT_STR_35 STRINGIFY(MCAST_LEAVE_GROUP)
 [MCAST_JOIN_SOURCE_GROUP] = XLAT(MCAST_JOIN_SOURCE_GROUP),
 #define XLAT_VAL_36 ((unsigned) (MCAST_JOIN_SOURCE_GROUP))
 #define XLAT_STR_36 STRINGIFY(MCAST_JOIN_SOURCE_GROUP)
 [MCAST_LEAVE_SOURCE_GROUP] = XLAT(MCAST_LEAVE_SOURCE_GROUP),
 #define XLAT_VAL_37 ((unsigned) (MCAST_LEAVE_SOURCE_GROUP))
 #define XLAT_STR_37 STRINGIFY(MCAST_LEAVE_SOURCE_GROUP)
 [MCAST_MSFILTER] = XLAT(MCAST_MSFILTER),
 #define XLAT_VAL_38 ((unsigned) (MCAST_MSFILTER))
 #define XLAT_STR_38 STRINGIFY(MCAST_MSFILTER)
 [IPV6_RECVPKTINFO] = XLAT(IPV6_RECVPKTINFO),
 #define XLAT_VAL_39 ((unsigned) (IPV6_RECVPKTINFO))
 #define XLAT_STR_39 STRINGIFY(IPV6_RECVPKTINFO)
 [IPV6_PKTINFO] = XLAT(IPV6_PKTINFO),
 #define XLAT_VAL_40 ((unsigned) (IPV6_PKTINFO))
 #define XLAT_STR_40 STRINGIFY(IPV6_PKTINFO)
 [IPV6_RECVHOPLIMIT] = XLAT(IPV6_RECVHOPLIMIT),
 #define XLAT_VAL_41 ((unsigned) (IPV6_RECVHOPLIMIT))
 #define XLAT_STR_41 STRINGIFY(IPV6_RECVHOPLIMIT)
 [IPV6_HOPLIMIT] = XLAT(IPV6_HOPLIMIT),
 #define XLAT_VAL_42 ((unsigned) (IPV6_HOPLIMIT))
 #define XLAT_STR_42 STRINGIFY(IPV6_HOPLIMIT)
 [IPV6_RECVHOPOPTS] = XLAT(IPV6_RECVHOPOPTS),
 #define XLAT_VAL_43 ((unsigned) (IPV6_RECVHOPOPTS))
 #define XLAT_STR_43 STRINGIFY(IPV6_RECVHOPOPTS)
 [IPV6_HOPOPTS] = XLAT(IPV6_HOPOPTS),
 #define XLAT_VAL_44 ((unsigned) (IPV6_HOPOPTS))
 #define XLAT_STR_44 STRINGIFY(IPV6_HOPOPTS)
 [IPV6_RTHDRDSTOPTS] = XLAT(IPV6_RTHDRDSTOPTS),
 #define XLAT_VAL_45 ((unsigned) (IPV6_RTHDRDSTOPTS))
 #define XLAT_STR_45 STRINGIFY(IPV6_RTHDRDSTOPTS)
 [IPV6_RECVRTHDR] = XLAT(IPV6_RECVRTHDR),
 #define XLAT_VAL_46 ((unsigned) (IPV6_RECVRTHDR))
 #define XLAT_STR_46 STRINGIFY(IPV6_RECVRTHDR)
 [IPV6_RTHDR] = XLAT(IPV6_RTHDR),
 #define XLAT_VAL_47 ((unsigned) (IPV6_RTHDR))
 #define XLAT_STR_47 STRINGIFY(IPV6_RTHDR)
 [IPV6_RECVDSTOPTS] = XLAT(IPV6_RECVDSTOPTS),
 #define XLAT_VAL_48 ((unsigned) (IPV6_RECVDSTOPTS))
 #define XLAT_STR_48 STRINGIFY(IPV6_RECVDSTOPTS)
 [IPV6_DSTOPTS] = XLAT(IPV6_DSTOPTS),
 #define XLAT_VAL_49 ((unsigned) (IPV6_DSTOPTS))
 #define XLAT_STR_49 STRINGIFY(IPV6_DSTOPTS)
 [IPV6_RECVPATHMTU] = XLAT(IPV6_RECVPATHMTU),
 #define XLAT_VAL_50 ((unsigned) (IPV6_RECVPATHMTU))
 #define XLAT_STR_50 STRINGIFY(IPV6_RECVPATHMTU)
 [IPV6_PATHMTU] = XLAT(IPV6_PATHMTU),
 #define XLAT_VAL_51 ((unsigned) (IPV6_PATHMTU))
 #define XLAT_STR_51 STRINGIFY(IPV6_PATHMTU)
 [IPV6_DONTFRAG] = XLAT(IPV6_DONTFRAG),
 #define XLAT_VAL_52 ((unsigned) (IPV6_DONTFRAG))
 #define XLAT_STR_52 STRINGIFY(IPV6_DONTFRAG)
 [IPV6_USE_MIN_MTU] = XLAT(IPV6_USE_MIN_MTU),
 #define XLAT_VAL_53 ((unsigned) (IPV6_USE_MIN_MTU))
 #define XLAT_STR_53 STRINGIFY(IPV6_USE_MIN_MTU)
 [IPV6_RECVTCLASS] = XLAT(IPV6_RECVTCLASS),
 #define XLAT_VAL_54 ((unsigned) (IPV6_RECVTCLASS))
 #define XLAT_STR_54 STRINGIFY(IPV6_RECVTCLASS)
 [IPV6_TCLASS] = XLAT(IPV6_TCLASS),
 #define XLAT_VAL_55 ((unsigned) (IPV6_TCLASS))
 #define XLAT_STR_55 STRINGIFY(IPV6_TCLASS)
 [IPV6_AUTOFLOWLABEL] = XLAT(IPV6_AUTOFLOWLABEL),
 #define XLAT_VAL_56 ((unsigned) (IPV6_AUTOFLOWLABEL))
 #define XLAT_STR_56 STRINGIFY(IPV6_AUTOFLOWLABEL)
 [IPV6_ADDR_PREFERENCES] = XLAT(IPV6_ADDR_PREFERENCES),
 #define XLAT_VAL_57 ((unsigned) (IPV6_ADDR_PREFERENCES))
 #define XLAT_STR_57 STRINGIFY(IPV6_ADDR_PREFERENCES)
 [IPV6_MINHOPCOUNT] = XLAT(IPV6_MINHOPCOUNT),
 #define XLAT_VAL_58 ((unsigned) (IPV6_MINHOPCOUNT))
 #define XLAT_STR_58 STRINGIFY(IPV6_MINHOPCOUNT)
 [IPV6_ORIGDSTADDR] = XLAT(IPV6_ORIGDSTADDR),
 #define XLAT_VAL_59 ((unsigned) (IPV6_ORIGDSTADDR))
 #define XLAT_STR_59 STRINGIFY(IPV6_ORIGDSTADDR)
 [IPV6_TRANSPARENT] = XLAT(IPV6_TRANSPARENT),
 #define XLAT_VAL_60 ((unsigned) (IPV6_TRANSPARENT))
 #define XLAT_STR_60 STRINGIFY(IPV6_TRANSPARENT)
 [IPV6_UNICAST_IF] = XLAT(IPV6_UNICAST_IF),
 #define XLAT_VAL_61 ((unsigned) (IPV6_UNICAST_IF))
 #define XLAT_STR_61 STRINGIFY(IPV6_UNICAST_IF)
 [IPV6_RECVFRAGSIZE] = XLAT(IPV6_RECVFRAGSIZE),
 #define XLAT_VAL_62 ((unsigned) (IPV6_RECVFRAGSIZE))
 #define XLAT_STR_62 STRINGIFY(IPV6_RECVFRAGSIZE)
 [IPV6_FREEBIND] = XLAT(IPV6_FREEBIND),
 #define XLAT_VAL_63 ((unsigned) (IPV6_FREEBIND))
 #define XLAT_STR_63 STRINGIFY(IPV6_FREEBIND)
};
static
const struct xlat sock_ipv6_options[1] = { {
 .data = sock_ipv6_options_xdata,
 .size = ARRAY_SIZE(sock_ipv6_options_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
