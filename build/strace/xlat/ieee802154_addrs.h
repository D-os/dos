/* Generated by ./src/xlat/gen.sh from ./src/xlat/ieee802154_addrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(IEEE802154_ADDR_UNDEF) || (defined(HAVE_DECL_IEEE802154_ADDR_UNDEF) && HAVE_DECL_IEEE802154_ADDR_UNDEF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IEEE802154_ADDR_UNDEF) == (0xfffe), "IEEE802154_ADDR_UNDEF != 0xfffe");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IEEE802154_ADDR_UNDEF 0xfffe
#endif
#if defined(IEEE802154_ADDR_BROADCAST) || (defined(HAVE_DECL_IEEE802154_ADDR_BROADCAST) && HAVE_DECL_IEEE802154_ADDR_BROADCAST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IEEE802154_ADDR_BROADCAST) == (0xffff), "IEEE802154_ADDR_BROADCAST != 0xffff");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IEEE802154_ADDR_BROADCAST 0xffff
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ieee802154_addrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data ieee802154_addrs_xdata[] = {
 XLAT(IEEE802154_ADDR_UNDEF),
 #define XLAT_VAL_0 ((unsigned) (IEEE802154_ADDR_UNDEF))
 #define XLAT_STR_0 STRINGIFY(IEEE802154_ADDR_UNDEF)
 XLAT(IEEE802154_ADDR_BROADCAST),
 #define XLAT_VAL_1 ((unsigned) (IEEE802154_ADDR_BROADCAST))
 #define XLAT_STR_1 STRINGIFY(IEEE802154_ADDR_BROADCAST)
};
static
const struct xlat ieee802154_addrs[1] = { {
 .data = ieee802154_addrs_xdata,
 .size = ARRAY_SIZE(ieee802154_addrs_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
