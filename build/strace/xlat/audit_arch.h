/* Generated by ./src/xlat/gen.sh from ./src/xlat/audit_arch.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#ifndef __AUDIT_ARCH_CONVENTION_MIPS64_N32
# define __AUDIT_ARCH_CONVENTION_MIPS64_N32	0x20000000
#endif
#ifndef __AUDIT_ARCH_64BIT
# define __AUDIT_ARCH_64BIT	0x80000000
#endif
#ifndef __AUDIT_ARCH_LE
# define __AUDIT_ARCH_LE	0x40000000
#endif
#if defined(AUDIT_ARCH_AARCH64) || (defined(HAVE_DECL_AUDIT_ARCH_AARCH64) && HAVE_DECL_AUDIT_ARCH_AARCH64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_AARCH64) == ((EM_AARCH64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_AARCH64 != (EM_AARCH64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_AARCH64 (EM_AARCH64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ALPHA) || (defined(HAVE_DECL_AUDIT_ARCH_ALPHA) && HAVE_DECL_AUDIT_ARCH_ALPHA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ALPHA) == ((EM_ALPHA|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_ALPHA != (EM_ALPHA|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ALPHA (EM_ALPHA|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ARCOMPACT) || (defined(HAVE_DECL_AUDIT_ARCH_ARCOMPACT) && HAVE_DECL_AUDIT_ARCH_ARCOMPACT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARCOMPACT) == ((EM_ARCOMPACT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_ARCOMPACT != (EM_ARCOMPACT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARCOMPACT (EM_ARCOMPACT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ARCOMPACTBE) || (defined(HAVE_DECL_AUDIT_ARCH_ARCOMPACTBE) && HAVE_DECL_AUDIT_ARCH_ARCOMPACTBE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARCOMPACTBE) == ((EM_ARCOMPACT)), "AUDIT_ARCH_ARCOMPACTBE != (EM_ARCOMPACT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARCOMPACTBE (EM_ARCOMPACT)
#endif
#if defined(AUDIT_ARCH_ARCV2) || (defined(HAVE_DECL_AUDIT_ARCH_ARCV2) && HAVE_DECL_AUDIT_ARCH_ARCV2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARCV2) == ((EM_ARCV2|__AUDIT_ARCH_LE)), "AUDIT_ARCH_ARCV2 != (EM_ARCV2|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARCV2 (EM_ARCV2|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ARCV2BE) || (defined(HAVE_DECL_AUDIT_ARCH_ARCV2BE) && HAVE_DECL_AUDIT_ARCH_ARCV2BE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARCV2BE) == ((EM_ARCV2)), "AUDIT_ARCH_ARCV2BE != (EM_ARCV2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARCV2BE (EM_ARCV2)
#endif
#if defined(AUDIT_ARCH_ARM) || (defined(HAVE_DECL_AUDIT_ARCH_ARM) && HAVE_DECL_AUDIT_ARCH_ARM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARM) == ((EM_ARM|__AUDIT_ARCH_LE)), "AUDIT_ARCH_ARM != (EM_ARM|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARM (EM_ARM|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_ARMEB) || (defined(HAVE_DECL_AUDIT_ARCH_ARMEB) && HAVE_DECL_AUDIT_ARCH_ARMEB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_ARMEB) == ((EM_ARM)), "AUDIT_ARCH_ARMEB != (EM_ARM)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_ARMEB (EM_ARM)
#endif
#if defined(AUDIT_ARCH_C6X) || (defined(HAVE_DECL_AUDIT_ARCH_C6X) && HAVE_DECL_AUDIT_ARCH_C6X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_C6X) == ((EM_TI_C6000|__AUDIT_ARCH_LE)), "AUDIT_ARCH_C6X != (EM_TI_C6000|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_C6X (EM_TI_C6000|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_C6XBE) || (defined(HAVE_DECL_AUDIT_ARCH_C6XBE) && HAVE_DECL_AUDIT_ARCH_C6XBE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_C6XBE) == ((EM_TI_C6000)), "AUDIT_ARCH_C6XBE != (EM_TI_C6000)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_C6XBE (EM_TI_C6000)
#endif
#if defined(AUDIT_ARCH_CRIS) || (defined(HAVE_DECL_AUDIT_ARCH_CRIS) && HAVE_DECL_AUDIT_ARCH_CRIS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_CRIS) == ((EM_CRIS|__AUDIT_ARCH_LE)), "AUDIT_ARCH_CRIS != (EM_CRIS|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_CRIS (EM_CRIS|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_CSKY) || (defined(HAVE_DECL_AUDIT_ARCH_CSKY) && HAVE_DECL_AUDIT_ARCH_CSKY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_CSKY) == ((EM_CSKY|__AUDIT_ARCH_LE)), "AUDIT_ARCH_CSKY != (EM_CSKY|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_CSKY (EM_CSKY|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_FRV) || (defined(HAVE_DECL_AUDIT_ARCH_FRV) && HAVE_DECL_AUDIT_ARCH_FRV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_FRV) == ((EM_FRV)), "AUDIT_ARCH_FRV != (EM_FRV)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_FRV (EM_FRV)
#endif
#if defined(AUDIT_ARCH_H8300) || (defined(HAVE_DECL_AUDIT_ARCH_H8300) && HAVE_DECL_AUDIT_ARCH_H8300)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_H8300) == ((EM_H8_300)), "AUDIT_ARCH_H8300 != (EM_H8_300)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_H8300 (EM_H8_300)
#endif
#if defined(AUDIT_ARCH_HEXAGON) || (defined(HAVE_DECL_AUDIT_ARCH_HEXAGON) && HAVE_DECL_AUDIT_ARCH_HEXAGON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_HEXAGON) == ((EM_HEXAGON)), "AUDIT_ARCH_HEXAGON != (EM_HEXAGON)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_HEXAGON (EM_HEXAGON)
#endif
#if defined(AUDIT_ARCH_I386) || (defined(HAVE_DECL_AUDIT_ARCH_I386) && HAVE_DECL_AUDIT_ARCH_I386)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_I386) == ((EM_386|__AUDIT_ARCH_LE)), "AUDIT_ARCH_I386 != (EM_386|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_I386 (EM_386|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_IA64) || (defined(HAVE_DECL_AUDIT_ARCH_IA64) && HAVE_DECL_AUDIT_ARCH_IA64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_IA64) == ((EM_IA_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_IA64 != (EM_IA_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_IA64 (EM_IA_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_LOONGARCH32) || (defined(HAVE_DECL_AUDIT_ARCH_LOONGARCH32) && HAVE_DECL_AUDIT_ARCH_LOONGARCH32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_LOONGARCH32) == ((EM_LOONGARCH|__AUDIT_ARCH_LE)), "AUDIT_ARCH_LOONGARCH32 != (EM_LOONGARCH|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_LOONGARCH32 (EM_LOONGARCH|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_LOONGARCH64) || (defined(HAVE_DECL_AUDIT_ARCH_LOONGARCH64) && HAVE_DECL_AUDIT_ARCH_LOONGARCH64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_LOONGARCH64) == ((EM_LOONGARCH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_LOONGARCH64 != (EM_LOONGARCH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_LOONGARCH64 (EM_LOONGARCH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_M32R) || (defined(HAVE_DECL_AUDIT_ARCH_M32R) && HAVE_DECL_AUDIT_ARCH_M32R)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_M32R) == ((EM_M32R)), "AUDIT_ARCH_M32R != (EM_M32R)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_M32R (EM_M32R)
#endif
#if defined(AUDIT_ARCH_M68K) || (defined(HAVE_DECL_AUDIT_ARCH_M68K) && HAVE_DECL_AUDIT_ARCH_M68K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_M68K) == ((EM_68K)), "AUDIT_ARCH_M68K != (EM_68K)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_M68K (EM_68K)
#endif
#if defined(AUDIT_ARCH_MICROBLAZE) || (defined(HAVE_DECL_AUDIT_ARCH_MICROBLAZE) && HAVE_DECL_AUDIT_ARCH_MICROBLAZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MICROBLAZE) == ((EM_MICROBLAZE)), "AUDIT_ARCH_MICROBLAZE != (EM_MICROBLAZE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MICROBLAZE (EM_MICROBLAZE)
#endif
#if defined(AUDIT_ARCH_MIPS) || (defined(HAVE_DECL_AUDIT_ARCH_MIPS) && HAVE_DECL_AUDIT_ARCH_MIPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPS) == ((EM_MIPS)), "AUDIT_ARCH_MIPS != (EM_MIPS)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPS (EM_MIPS)
#endif
#if defined(AUDIT_ARCH_MIPS64) || (defined(HAVE_DECL_AUDIT_ARCH_MIPS64) && HAVE_DECL_AUDIT_ARCH_MIPS64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPS64) == ((EM_MIPS|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_MIPS64 != (EM_MIPS|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPS64 (EM_MIPS|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_MIPS64N32) || (defined(HAVE_DECL_AUDIT_ARCH_MIPS64N32) && HAVE_DECL_AUDIT_ARCH_MIPS64N32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPS64N32) == ((EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_CONVENTION_MIPS64_N32)), "AUDIT_ARCH_MIPS64N32 != (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_CONVENTION_MIPS64_N32)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPS64N32 (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_CONVENTION_MIPS64_N32)
#endif
#if defined(AUDIT_ARCH_MIPSEL) || (defined(HAVE_DECL_AUDIT_ARCH_MIPSEL) && HAVE_DECL_AUDIT_ARCH_MIPSEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPSEL) == ((EM_MIPS|__AUDIT_ARCH_LE)), "AUDIT_ARCH_MIPSEL != (EM_MIPS|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPSEL (EM_MIPS|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_MIPSEL64) || (defined(HAVE_DECL_AUDIT_ARCH_MIPSEL64) && HAVE_DECL_AUDIT_ARCH_MIPSEL64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPSEL64) == ((EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_MIPSEL64 != (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPSEL64 (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_MIPSEL64N32) || (defined(HAVE_DECL_AUDIT_ARCH_MIPSEL64N32) && HAVE_DECL_AUDIT_ARCH_MIPSEL64N32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_MIPSEL64N32) == ((EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE|__AUDIT_ARCH_CONVENTION_MIPS64_N32)), "AUDIT_ARCH_MIPSEL64N32 != (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE|__AUDIT_ARCH_CONVENTION_MIPS64_N32)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_MIPSEL64N32 (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE|__AUDIT_ARCH_CONVENTION_MIPS64_N32)
#endif
#if defined(AUDIT_ARCH_NDS32) || (defined(HAVE_DECL_AUDIT_ARCH_NDS32) && HAVE_DECL_AUDIT_ARCH_NDS32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_NDS32) == ((EM_NDS32|__AUDIT_ARCH_LE)), "AUDIT_ARCH_NDS32 != (EM_NDS32|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_NDS32 (EM_NDS32|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_NDS32BE) || (defined(HAVE_DECL_AUDIT_ARCH_NDS32BE) && HAVE_DECL_AUDIT_ARCH_NDS32BE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_NDS32BE) == ((EM_NDS32)), "AUDIT_ARCH_NDS32BE != (EM_NDS32)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_NDS32BE (EM_NDS32)
#endif
#if defined(AUDIT_ARCH_NIOS2) || (defined(HAVE_DECL_AUDIT_ARCH_NIOS2) && HAVE_DECL_AUDIT_ARCH_NIOS2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_NIOS2) == ((EM_ALTERA_NIOS2|__AUDIT_ARCH_LE)), "AUDIT_ARCH_NIOS2 != (EM_ALTERA_NIOS2|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_NIOS2 (EM_ALTERA_NIOS2|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_OPENRISC) || (defined(HAVE_DECL_AUDIT_ARCH_OPENRISC) && HAVE_DECL_AUDIT_ARCH_OPENRISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_OPENRISC) == ((EM_OPENRISC)), "AUDIT_ARCH_OPENRISC != (EM_OPENRISC)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_OPENRISC (EM_OPENRISC)
#endif
#if defined(AUDIT_ARCH_PARISC) || (defined(HAVE_DECL_AUDIT_ARCH_PARISC) && HAVE_DECL_AUDIT_ARCH_PARISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PARISC) == ((EM_PARISC)), "AUDIT_ARCH_PARISC != (EM_PARISC)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PARISC (EM_PARISC)
#endif
#if defined(AUDIT_ARCH_PARISC64) || (defined(HAVE_DECL_AUDIT_ARCH_PARISC64) && HAVE_DECL_AUDIT_ARCH_PARISC64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PARISC64) == ((EM_PARISC|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_PARISC64 != (EM_PARISC|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PARISC64 (EM_PARISC|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_PPC) || (defined(HAVE_DECL_AUDIT_ARCH_PPC) && HAVE_DECL_AUDIT_ARCH_PPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PPC) == ((EM_PPC)), "AUDIT_ARCH_PPC != (EM_PPC)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PPC (EM_PPC)
#endif
#if defined(AUDIT_ARCH_PPC64) || (defined(HAVE_DECL_AUDIT_ARCH_PPC64) && HAVE_DECL_AUDIT_ARCH_PPC64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PPC64) == ((EM_PPC64|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_PPC64 != (EM_PPC64|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PPC64 (EM_PPC64|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_PPC64LE) || (defined(HAVE_DECL_AUDIT_ARCH_PPC64LE) && HAVE_DECL_AUDIT_ARCH_PPC64LE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_PPC64LE) == ((EM_PPC64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_PPC64LE != (EM_PPC64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_PPC64LE (EM_PPC64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_RISCV32) || (defined(HAVE_DECL_AUDIT_ARCH_RISCV32) && HAVE_DECL_AUDIT_ARCH_RISCV32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_RISCV32) == ((EM_RISCV|__AUDIT_ARCH_LE)), "AUDIT_ARCH_RISCV32 != (EM_RISCV|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_RISCV32 (EM_RISCV|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_RISCV64) || (defined(HAVE_DECL_AUDIT_ARCH_RISCV64) && HAVE_DECL_AUDIT_ARCH_RISCV64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_RISCV64) == ((EM_RISCV|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_RISCV64 != (EM_RISCV|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_RISCV64 (EM_RISCV|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_S390) || (defined(HAVE_DECL_AUDIT_ARCH_S390) && HAVE_DECL_AUDIT_ARCH_S390)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_S390) == ((EM_S390)), "AUDIT_ARCH_S390 != (EM_S390)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_S390 (EM_S390)
#endif
#if defined(AUDIT_ARCH_S390X) || (defined(HAVE_DECL_AUDIT_ARCH_S390X) && HAVE_DECL_AUDIT_ARCH_S390X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_S390X) == ((EM_S390|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_S390X != (EM_S390|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_S390X (EM_S390|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_SH) || (defined(HAVE_DECL_AUDIT_ARCH_SH) && HAVE_DECL_AUDIT_ARCH_SH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SH) == ((EM_SH)), "AUDIT_ARCH_SH != (EM_SH)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SH (EM_SH)
#endif
#if defined(AUDIT_ARCH_SH64) || (defined(HAVE_DECL_AUDIT_ARCH_SH64) && HAVE_DECL_AUDIT_ARCH_SH64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SH64) == ((EM_SH|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_SH64 != (EM_SH|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SH64 (EM_SH|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_SHEL) || (defined(HAVE_DECL_AUDIT_ARCH_SHEL) && HAVE_DECL_AUDIT_ARCH_SHEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SHEL) == ((EM_SH|__AUDIT_ARCH_LE)), "AUDIT_ARCH_SHEL != (EM_SH|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SHEL (EM_SH|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_SHEL64) || (defined(HAVE_DECL_AUDIT_ARCH_SHEL64) && HAVE_DECL_AUDIT_ARCH_SHEL64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SHEL64) == ((EM_SH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_SHEL64 != (EM_SH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SHEL64 (EM_SH|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_SPARC) || (defined(HAVE_DECL_AUDIT_ARCH_SPARC) && HAVE_DECL_AUDIT_ARCH_SPARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SPARC) == ((EM_SPARC)), "AUDIT_ARCH_SPARC != (EM_SPARC)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SPARC (EM_SPARC)
#endif
#if defined(AUDIT_ARCH_SPARC64) || (defined(HAVE_DECL_AUDIT_ARCH_SPARC64) && HAVE_DECL_AUDIT_ARCH_SPARC64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_SPARC64) == ((EM_SPARCV9|__AUDIT_ARCH_64BIT)), "AUDIT_ARCH_SPARC64 != (EM_SPARCV9|__AUDIT_ARCH_64BIT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_SPARC64 (EM_SPARCV9|__AUDIT_ARCH_64BIT)
#endif
#if defined(AUDIT_ARCH_TILEGX) || (defined(HAVE_DECL_AUDIT_ARCH_TILEGX) && HAVE_DECL_AUDIT_ARCH_TILEGX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_TILEGX) == ((EM_TILEGX|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_TILEGX != (EM_TILEGX|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_TILEGX (EM_TILEGX|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_TILEGX32) || (defined(HAVE_DECL_AUDIT_ARCH_TILEGX32) && HAVE_DECL_AUDIT_ARCH_TILEGX32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_TILEGX32) == ((EM_TILEGX|__AUDIT_ARCH_LE)), "AUDIT_ARCH_TILEGX32 != (EM_TILEGX|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_TILEGX32 (EM_TILEGX|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_TILEPRO) || (defined(HAVE_DECL_AUDIT_ARCH_TILEPRO) && HAVE_DECL_AUDIT_ARCH_TILEPRO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_TILEPRO) == ((EM_TILEPRO|__AUDIT_ARCH_LE)), "AUDIT_ARCH_TILEPRO != (EM_TILEPRO|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_TILEPRO (EM_TILEPRO|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_UNICORE) || (defined(HAVE_DECL_AUDIT_ARCH_UNICORE) && HAVE_DECL_AUDIT_ARCH_UNICORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_UNICORE) == ((EM_UNICORE|__AUDIT_ARCH_LE)), "AUDIT_ARCH_UNICORE != (EM_UNICORE|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_UNICORE (EM_UNICORE|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_V850) || (defined(HAVE_DECL_AUDIT_ARCH_V850) && HAVE_DECL_AUDIT_ARCH_V850)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_V850) == ((EM_V850|__AUDIT_ARCH_LE)), "AUDIT_ARCH_V850 != (EM_V850|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_V850 (EM_V850|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_X86_64) || (defined(HAVE_DECL_AUDIT_ARCH_X86_64) && HAVE_DECL_AUDIT_ARCH_X86_64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_X86_64) == ((EM_X86_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)), "AUDIT_ARCH_X86_64 != (EM_X86_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_X86_64 (EM_X86_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif
#if defined(AUDIT_ARCH_XTENSA) || (defined(HAVE_DECL_AUDIT_ARCH_XTENSA) && HAVE_DECL_AUDIT_ARCH_XTENSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((AUDIT_ARCH_XTENSA) == ((EM_XTENSA)), "AUDIT_ARCH_XTENSA != (EM_XTENSA)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define AUDIT_ARCH_XTENSA (EM_XTENSA)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data audit_arch_xdata[] = {
#ifndef __AUDIT_ARCH_CONVENTION_MIPS64_N32
# define __AUDIT_ARCH_CONVENTION_MIPS64_N32	0x20000000
#endif
#ifndef __AUDIT_ARCH_64BIT
# define __AUDIT_ARCH_64BIT	0x80000000
#endif
#ifndef __AUDIT_ARCH_LE
# define __AUDIT_ARCH_LE	0x40000000
#endif

 XLAT(AUDIT_ARCH_AARCH64),
 #define XLAT_VAL_0 ((unsigned) (AUDIT_ARCH_AARCH64))
 #define XLAT_STR_0 STRINGIFY(AUDIT_ARCH_AARCH64)
 XLAT(AUDIT_ARCH_ALPHA),
 #define XLAT_VAL_1 ((unsigned) (AUDIT_ARCH_ALPHA))
 #define XLAT_STR_1 STRINGIFY(AUDIT_ARCH_ALPHA)
 XLAT(AUDIT_ARCH_ARCOMPACT),
 #define XLAT_VAL_2 ((unsigned) (AUDIT_ARCH_ARCOMPACT))
 #define XLAT_STR_2 STRINGIFY(AUDIT_ARCH_ARCOMPACT)
 XLAT(AUDIT_ARCH_ARCOMPACTBE),
 #define XLAT_VAL_3 ((unsigned) (AUDIT_ARCH_ARCOMPACTBE))
 #define XLAT_STR_3 STRINGIFY(AUDIT_ARCH_ARCOMPACTBE)
 XLAT(AUDIT_ARCH_ARCV2),
 #define XLAT_VAL_4 ((unsigned) (AUDIT_ARCH_ARCV2))
 #define XLAT_STR_4 STRINGIFY(AUDIT_ARCH_ARCV2)
 XLAT(AUDIT_ARCH_ARCV2BE),
 #define XLAT_VAL_5 ((unsigned) (AUDIT_ARCH_ARCV2BE))
 #define XLAT_STR_5 STRINGIFY(AUDIT_ARCH_ARCV2BE)
 XLAT(AUDIT_ARCH_ARM),
 #define XLAT_VAL_6 ((unsigned) (AUDIT_ARCH_ARM))
 #define XLAT_STR_6 STRINGIFY(AUDIT_ARCH_ARM)
 XLAT(AUDIT_ARCH_ARMEB),
 #define XLAT_VAL_7 ((unsigned) (AUDIT_ARCH_ARMEB))
 #define XLAT_STR_7 STRINGIFY(AUDIT_ARCH_ARMEB)
 XLAT(AUDIT_ARCH_C6X),
 #define XLAT_VAL_8 ((unsigned) (AUDIT_ARCH_C6X))
 #define XLAT_STR_8 STRINGIFY(AUDIT_ARCH_C6X)
 XLAT(AUDIT_ARCH_C6XBE),
 #define XLAT_VAL_9 ((unsigned) (AUDIT_ARCH_C6XBE))
 #define XLAT_STR_9 STRINGIFY(AUDIT_ARCH_C6XBE)
 XLAT(AUDIT_ARCH_CRIS),
 #define XLAT_VAL_10 ((unsigned) (AUDIT_ARCH_CRIS))
 #define XLAT_STR_10 STRINGIFY(AUDIT_ARCH_CRIS)
 XLAT(AUDIT_ARCH_CSKY),
 #define XLAT_VAL_11 ((unsigned) (AUDIT_ARCH_CSKY))
 #define XLAT_STR_11 STRINGIFY(AUDIT_ARCH_CSKY)
 XLAT(AUDIT_ARCH_FRV),
 #define XLAT_VAL_12 ((unsigned) (AUDIT_ARCH_FRV))
 #define XLAT_STR_12 STRINGIFY(AUDIT_ARCH_FRV)
 XLAT(AUDIT_ARCH_H8300),
 #define XLAT_VAL_13 ((unsigned) (AUDIT_ARCH_H8300))
 #define XLAT_STR_13 STRINGIFY(AUDIT_ARCH_H8300)
 XLAT(AUDIT_ARCH_HEXAGON),
 #define XLAT_VAL_14 ((unsigned) (AUDIT_ARCH_HEXAGON))
 #define XLAT_STR_14 STRINGIFY(AUDIT_ARCH_HEXAGON)
 XLAT(AUDIT_ARCH_I386),
 #define XLAT_VAL_15 ((unsigned) (AUDIT_ARCH_I386))
 #define XLAT_STR_15 STRINGIFY(AUDIT_ARCH_I386)
 XLAT(AUDIT_ARCH_IA64),
 #define XLAT_VAL_16 ((unsigned) (AUDIT_ARCH_IA64))
 #define XLAT_STR_16 STRINGIFY(AUDIT_ARCH_IA64)
 XLAT(AUDIT_ARCH_LOONGARCH32),
 #define XLAT_VAL_17 ((unsigned) (AUDIT_ARCH_LOONGARCH32))
 #define XLAT_STR_17 STRINGIFY(AUDIT_ARCH_LOONGARCH32)
 XLAT(AUDIT_ARCH_LOONGARCH64),
 #define XLAT_VAL_18 ((unsigned) (AUDIT_ARCH_LOONGARCH64))
 #define XLAT_STR_18 STRINGIFY(AUDIT_ARCH_LOONGARCH64)
 XLAT(AUDIT_ARCH_M32R),
 #define XLAT_VAL_19 ((unsigned) (AUDIT_ARCH_M32R))
 #define XLAT_STR_19 STRINGIFY(AUDIT_ARCH_M32R)
 XLAT(AUDIT_ARCH_M68K),
 #define XLAT_VAL_20 ((unsigned) (AUDIT_ARCH_M68K))
 #define XLAT_STR_20 STRINGIFY(AUDIT_ARCH_M68K)
 XLAT(AUDIT_ARCH_MICROBLAZE),
 #define XLAT_VAL_21 ((unsigned) (AUDIT_ARCH_MICROBLAZE))
 #define XLAT_STR_21 STRINGIFY(AUDIT_ARCH_MICROBLAZE)
 XLAT(AUDIT_ARCH_MIPS),
 #define XLAT_VAL_22 ((unsigned) (AUDIT_ARCH_MIPS))
 #define XLAT_STR_22 STRINGIFY(AUDIT_ARCH_MIPS)
 XLAT(AUDIT_ARCH_MIPS64),
 #define XLAT_VAL_23 ((unsigned) (AUDIT_ARCH_MIPS64))
 #define XLAT_STR_23 STRINGIFY(AUDIT_ARCH_MIPS64)
 XLAT(AUDIT_ARCH_MIPS64N32),
 #define XLAT_VAL_24 ((unsigned) (AUDIT_ARCH_MIPS64N32))
 #define XLAT_STR_24 STRINGIFY(AUDIT_ARCH_MIPS64N32)
 XLAT(AUDIT_ARCH_MIPSEL),
 #define XLAT_VAL_25 ((unsigned) (AUDIT_ARCH_MIPSEL))
 #define XLAT_STR_25 STRINGIFY(AUDIT_ARCH_MIPSEL)
 XLAT(AUDIT_ARCH_MIPSEL64),
 #define XLAT_VAL_26 ((unsigned) (AUDIT_ARCH_MIPSEL64))
 #define XLAT_STR_26 STRINGIFY(AUDIT_ARCH_MIPSEL64)
 XLAT(AUDIT_ARCH_MIPSEL64N32),
 #define XLAT_VAL_27 ((unsigned) (AUDIT_ARCH_MIPSEL64N32))
 #define XLAT_STR_27 STRINGIFY(AUDIT_ARCH_MIPSEL64N32)
 XLAT(AUDIT_ARCH_NDS32),
 #define XLAT_VAL_28 ((unsigned) (AUDIT_ARCH_NDS32))
 #define XLAT_STR_28 STRINGIFY(AUDIT_ARCH_NDS32)
 XLAT(AUDIT_ARCH_NDS32BE),
 #define XLAT_VAL_29 ((unsigned) (AUDIT_ARCH_NDS32BE))
 #define XLAT_STR_29 STRINGIFY(AUDIT_ARCH_NDS32BE)
 XLAT(AUDIT_ARCH_NIOS2),
 #define XLAT_VAL_30 ((unsigned) (AUDIT_ARCH_NIOS2))
 #define XLAT_STR_30 STRINGIFY(AUDIT_ARCH_NIOS2)
 XLAT(AUDIT_ARCH_OPENRISC),
 #define XLAT_VAL_31 ((unsigned) (AUDIT_ARCH_OPENRISC))
 #define XLAT_STR_31 STRINGIFY(AUDIT_ARCH_OPENRISC)
 XLAT(AUDIT_ARCH_PARISC),
 #define XLAT_VAL_32 ((unsigned) (AUDIT_ARCH_PARISC))
 #define XLAT_STR_32 STRINGIFY(AUDIT_ARCH_PARISC)
 XLAT(AUDIT_ARCH_PARISC64),
 #define XLAT_VAL_33 ((unsigned) (AUDIT_ARCH_PARISC64))
 #define XLAT_STR_33 STRINGIFY(AUDIT_ARCH_PARISC64)
 XLAT(AUDIT_ARCH_PPC),
 #define XLAT_VAL_34 ((unsigned) (AUDIT_ARCH_PPC))
 #define XLAT_STR_34 STRINGIFY(AUDIT_ARCH_PPC)
 XLAT(AUDIT_ARCH_PPC64),
 #define XLAT_VAL_35 ((unsigned) (AUDIT_ARCH_PPC64))
 #define XLAT_STR_35 STRINGIFY(AUDIT_ARCH_PPC64)
 XLAT(AUDIT_ARCH_PPC64LE),
 #define XLAT_VAL_36 ((unsigned) (AUDIT_ARCH_PPC64LE))
 #define XLAT_STR_36 STRINGIFY(AUDIT_ARCH_PPC64LE)
 XLAT(AUDIT_ARCH_RISCV32),
 #define XLAT_VAL_37 ((unsigned) (AUDIT_ARCH_RISCV32))
 #define XLAT_STR_37 STRINGIFY(AUDIT_ARCH_RISCV32)
 XLAT(AUDIT_ARCH_RISCV64),
 #define XLAT_VAL_38 ((unsigned) (AUDIT_ARCH_RISCV64))
 #define XLAT_STR_38 STRINGIFY(AUDIT_ARCH_RISCV64)
 XLAT(AUDIT_ARCH_S390),
 #define XLAT_VAL_39 ((unsigned) (AUDIT_ARCH_S390))
 #define XLAT_STR_39 STRINGIFY(AUDIT_ARCH_S390)
 XLAT(AUDIT_ARCH_S390X),
 #define XLAT_VAL_40 ((unsigned) (AUDIT_ARCH_S390X))
 #define XLAT_STR_40 STRINGIFY(AUDIT_ARCH_S390X)
 XLAT(AUDIT_ARCH_SH),
 #define XLAT_VAL_41 ((unsigned) (AUDIT_ARCH_SH))
 #define XLAT_STR_41 STRINGIFY(AUDIT_ARCH_SH)
 XLAT(AUDIT_ARCH_SH64),
 #define XLAT_VAL_42 ((unsigned) (AUDIT_ARCH_SH64))
 #define XLAT_STR_42 STRINGIFY(AUDIT_ARCH_SH64)
 XLAT(AUDIT_ARCH_SHEL),
 #define XLAT_VAL_43 ((unsigned) (AUDIT_ARCH_SHEL))
 #define XLAT_STR_43 STRINGIFY(AUDIT_ARCH_SHEL)
 XLAT(AUDIT_ARCH_SHEL64),
 #define XLAT_VAL_44 ((unsigned) (AUDIT_ARCH_SHEL64))
 #define XLAT_STR_44 STRINGIFY(AUDIT_ARCH_SHEL64)
 XLAT(AUDIT_ARCH_SPARC),
 #define XLAT_VAL_45 ((unsigned) (AUDIT_ARCH_SPARC))
 #define XLAT_STR_45 STRINGIFY(AUDIT_ARCH_SPARC)
 XLAT(AUDIT_ARCH_SPARC64),
 #define XLAT_VAL_46 ((unsigned) (AUDIT_ARCH_SPARC64))
 #define XLAT_STR_46 STRINGIFY(AUDIT_ARCH_SPARC64)
 XLAT(AUDIT_ARCH_TILEGX),
 #define XLAT_VAL_47 ((unsigned) (AUDIT_ARCH_TILEGX))
 #define XLAT_STR_47 STRINGIFY(AUDIT_ARCH_TILEGX)
 XLAT(AUDIT_ARCH_TILEGX32),
 #define XLAT_VAL_48 ((unsigned) (AUDIT_ARCH_TILEGX32))
 #define XLAT_STR_48 STRINGIFY(AUDIT_ARCH_TILEGX32)
 XLAT(AUDIT_ARCH_TILEPRO),
 #define XLAT_VAL_49 ((unsigned) (AUDIT_ARCH_TILEPRO))
 #define XLAT_STR_49 STRINGIFY(AUDIT_ARCH_TILEPRO)
 XLAT(AUDIT_ARCH_UNICORE),
 #define XLAT_VAL_50 ((unsigned) (AUDIT_ARCH_UNICORE))
 #define XLAT_STR_50 STRINGIFY(AUDIT_ARCH_UNICORE)
 XLAT(AUDIT_ARCH_V850),
 #define XLAT_VAL_51 ((unsigned) (AUDIT_ARCH_V850))
 #define XLAT_STR_51 STRINGIFY(AUDIT_ARCH_V850)
 XLAT(AUDIT_ARCH_X86_64),
 #define XLAT_VAL_52 ((unsigned) (AUDIT_ARCH_X86_64))
 #define XLAT_STR_52 STRINGIFY(AUDIT_ARCH_X86_64)
 XLAT(AUDIT_ARCH_XTENSA),
 #define XLAT_VAL_53 ((unsigned) (AUDIT_ARCH_XTENSA))
 #define XLAT_STR_53 STRINGIFY(AUDIT_ARCH_XTENSA)
};
const struct xlat audit_arch[1] = { {
 .data = audit_arch_xdata,
 .size = ARRAY_SIZE(audit_arch_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
