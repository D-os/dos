/* Generated by ./src/xlat/gen.sh from ./src/xlat/smc_states.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SMC_ACTIVE) || (defined(HAVE_DECL_SMC_ACTIVE) && HAVE_DECL_SMC_ACTIVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_ACTIVE) == (1), "SMC_ACTIVE != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_ACTIVE 1
#endif
#if defined(SMC_INIT) || (defined(HAVE_DECL_SMC_INIT) && HAVE_DECL_SMC_INIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_INIT) == (2), "SMC_INIT != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_INIT 2
#endif
#if defined(SMC_CLOSED) || (defined(HAVE_DECL_SMC_CLOSED) && HAVE_DECL_SMC_CLOSED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_CLOSED) == (7), "SMC_CLOSED != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_CLOSED 7
#endif
#if defined(SMC_LISTEN) || (defined(HAVE_DECL_SMC_LISTEN) && HAVE_DECL_SMC_LISTEN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_LISTEN) == (10), "SMC_LISTEN != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_LISTEN 10
#endif
#if defined(SMC_PEERCLOSEWAIT1) || (defined(HAVE_DECL_SMC_PEERCLOSEWAIT1) && HAVE_DECL_SMC_PEERCLOSEWAIT1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_PEERCLOSEWAIT1) == (20), "SMC_PEERCLOSEWAIT1 != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_PEERCLOSEWAIT1 20
#endif
#if defined(SMC_PEERCLOSEWAIT2) || (defined(HAVE_DECL_SMC_PEERCLOSEWAIT2) && HAVE_DECL_SMC_PEERCLOSEWAIT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_PEERCLOSEWAIT2) == (21), "SMC_PEERCLOSEWAIT2 != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_PEERCLOSEWAIT2 21
#endif
#if defined(SMC_APPFINCLOSEWAIT) || (defined(HAVE_DECL_SMC_APPFINCLOSEWAIT) && HAVE_DECL_SMC_APPFINCLOSEWAIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_APPFINCLOSEWAIT) == (24), "SMC_APPFINCLOSEWAIT != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_APPFINCLOSEWAIT 24
#endif
#if defined(SMC_APPCLOSEWAIT1) || (defined(HAVE_DECL_SMC_APPCLOSEWAIT1) && HAVE_DECL_SMC_APPCLOSEWAIT1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_APPCLOSEWAIT1) == (22), "SMC_APPCLOSEWAIT1 != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_APPCLOSEWAIT1 22
#endif
#if defined(SMC_APPCLOSEWAIT2) || (defined(HAVE_DECL_SMC_APPCLOSEWAIT2) && HAVE_DECL_SMC_APPCLOSEWAIT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_APPCLOSEWAIT2) == (23), "SMC_APPCLOSEWAIT2 != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_APPCLOSEWAIT2 23
#endif
#if defined(SMC_PEERFINCLOSEWAIT) || (defined(HAVE_DECL_SMC_PEERFINCLOSEWAIT) && HAVE_DECL_SMC_PEERFINCLOSEWAIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_PEERFINCLOSEWAIT) == (25), "SMC_PEERFINCLOSEWAIT != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_PEERFINCLOSEWAIT 25
#endif
#if defined(SMC_PEERABORTWAIT) || (defined(HAVE_DECL_SMC_PEERABORTWAIT) && HAVE_DECL_SMC_PEERABORTWAIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_PEERABORTWAIT) == (26), "SMC_PEERABORTWAIT != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_PEERABORTWAIT 26
#endif
#if defined(SMC_PROCESSABORT) || (defined(HAVE_DECL_SMC_PROCESSABORT) && HAVE_DECL_SMC_PROCESSABORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SMC_PROCESSABORT) == (27), "SMC_PROCESSABORT != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SMC_PROCESSABORT 27
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat smc_states in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data smc_states_xdata[] = {
 XLAT(SMC_ACTIVE),
 #define XLAT_VAL_0 ((unsigned) (SMC_ACTIVE))
 #define XLAT_STR_0 STRINGIFY(SMC_ACTIVE)
 XLAT(SMC_INIT),
 #define XLAT_VAL_1 ((unsigned) (SMC_INIT))
 #define XLAT_STR_1 STRINGIFY(SMC_INIT)
 XLAT(SMC_CLOSED),
 #define XLAT_VAL_2 ((unsigned) (SMC_CLOSED))
 #define XLAT_STR_2 STRINGIFY(SMC_CLOSED)
 XLAT(SMC_LISTEN),
 #define XLAT_VAL_3 ((unsigned) (SMC_LISTEN))
 #define XLAT_STR_3 STRINGIFY(SMC_LISTEN)
 XLAT(SMC_PEERCLOSEWAIT1),
 #define XLAT_VAL_4 ((unsigned) (SMC_PEERCLOSEWAIT1))
 #define XLAT_STR_4 STRINGIFY(SMC_PEERCLOSEWAIT1)
 XLAT(SMC_PEERCLOSEWAIT2),
 #define XLAT_VAL_5 ((unsigned) (SMC_PEERCLOSEWAIT2))
 #define XLAT_STR_5 STRINGIFY(SMC_PEERCLOSEWAIT2)
 XLAT(SMC_APPFINCLOSEWAIT),
 #define XLAT_VAL_6 ((unsigned) (SMC_APPFINCLOSEWAIT))
 #define XLAT_STR_6 STRINGIFY(SMC_APPFINCLOSEWAIT)
 XLAT(SMC_APPCLOSEWAIT1),
 #define XLAT_VAL_7 ((unsigned) (SMC_APPCLOSEWAIT1))
 #define XLAT_STR_7 STRINGIFY(SMC_APPCLOSEWAIT1)
 XLAT(SMC_APPCLOSEWAIT2),
 #define XLAT_VAL_8 ((unsigned) (SMC_APPCLOSEWAIT2))
 #define XLAT_STR_8 STRINGIFY(SMC_APPCLOSEWAIT2)
 XLAT(SMC_PEERFINCLOSEWAIT),
 #define XLAT_VAL_9 ((unsigned) (SMC_PEERFINCLOSEWAIT))
 #define XLAT_STR_9 STRINGIFY(SMC_PEERFINCLOSEWAIT)
 XLAT(SMC_PEERABORTWAIT),
 #define XLAT_VAL_10 ((unsigned) (SMC_PEERABORTWAIT))
 #define XLAT_STR_10 STRINGIFY(SMC_PEERABORTWAIT)
 XLAT(SMC_PROCESSABORT),
 #define XLAT_VAL_11 ((unsigned) (SMC_PROCESSABORT))
 #define XLAT_STR_11 STRINGIFY(SMC_PROCESSABORT)
};
static
const struct xlat smc_states[1] = { {
 .data = smc_states_xdata,
 .size = ARRAY_SIZE(smc_states_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
