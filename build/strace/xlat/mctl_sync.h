/* Generated by ./src/xlat/gen.sh from ./src/xlat/mctl_sync.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat mctl_sync in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data mctl_sync_xdata[] = {
#if defined(MS_SYNC) || (defined(HAVE_DECL_MS_SYNC) && HAVE_DECL_MS_SYNC)
  XLAT(MS_SYNC),
 #define XLAT_VAL_0 ((unsigned) (MS_SYNC))
 #define XLAT_STR_0 STRINGIFY(MS_SYNC)
#endif
#if defined(MS_ASYNC) || (defined(HAVE_DECL_MS_ASYNC) && HAVE_DECL_MS_ASYNC)
  XLAT(MS_ASYNC),
 #define XLAT_VAL_1 ((unsigned) (MS_ASYNC))
 #define XLAT_STR_1 STRINGIFY(MS_ASYNC)
#endif
#if defined(MS_INVALIDATE) || (defined(HAVE_DECL_MS_INVALIDATE) && HAVE_DECL_MS_INVALIDATE)
  XLAT(MS_INVALIDATE),
 #define XLAT_VAL_2 ((unsigned) (MS_INVALIDATE))
 #define XLAT_STR_2 STRINGIFY(MS_INVALIDATE)
#endif
};
static
const struct xlat mctl_sync[1] = { {
 .data = mctl_sync_xdata,
 .size = ARRAY_SIZE(mctl_sync_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
