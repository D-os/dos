/* Generated by ./src/xlat/gen.sh from ./src/xlat/sigtrap_perf_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(TRAP_PERF_FLAG_ASYNC) || (defined(HAVE_DECL_TRAP_PERF_FLAG_ASYNC) && HAVE_DECL_TRAP_PERF_FLAG_ASYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((TRAP_PERF_FLAG_ASYNC) == ((1 << 0)), "TRAP_PERF_FLAG_ASYNC != (1 << 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define TRAP_PERF_FLAG_ASYNC (1 << 0)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat sigtrap_perf_flags[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sigtrap_perf_flags_xdata[] = {
 XLAT(TRAP_PERF_FLAG_ASYNC),
 #define XLAT_VAL_0 ((unsigned) (TRAP_PERF_FLAG_ASYNC))
 #define XLAT_STR_0 STRINGIFY(TRAP_PERF_FLAG_ASYNC)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat sigtrap_perf_flags[1] = { {
 .data = sigtrap_perf_flags_xdata,
 .size = ARRAY_SIZE(sigtrap_perf_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
