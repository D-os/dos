/* Generated by ./src/xlat/gen.sh from ./src/xlat/sysctl_net_ipv6_route.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NET_IPV6_ROUTE_FLUSH) || (defined(HAVE_DECL_NET_IPV6_ROUTE_FLUSH) && HAVE_DECL_NET_IPV6_ROUTE_FLUSH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_FLUSH) == (1), "NET_IPV6_ROUTE_FLUSH != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_FLUSH 1
#endif
#if defined(NET_IPV6_ROUTE_GC_THRESH) || (defined(HAVE_DECL_NET_IPV6_ROUTE_GC_THRESH) && HAVE_DECL_NET_IPV6_ROUTE_GC_THRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_GC_THRESH) == (2), "NET_IPV6_ROUTE_GC_THRESH != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_GC_THRESH 2
#endif
#if defined(NET_IPV6_ROUTE_MAX_SIZE) || (defined(HAVE_DECL_NET_IPV6_ROUTE_MAX_SIZE) && HAVE_DECL_NET_IPV6_ROUTE_MAX_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_MAX_SIZE) == (3), "NET_IPV6_ROUTE_MAX_SIZE != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_MAX_SIZE 3
#endif
#if defined(NET_IPV6_ROUTE_GC_MIN_INTERVAL) || (defined(HAVE_DECL_NET_IPV6_ROUTE_GC_MIN_INTERVAL) && HAVE_DECL_NET_IPV6_ROUTE_GC_MIN_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_GC_MIN_INTERVAL) == (4), "NET_IPV6_ROUTE_GC_MIN_INTERVAL != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_GC_MIN_INTERVAL 4
#endif
#if defined(NET_IPV6_ROUTE_GC_TIMEOUT) || (defined(HAVE_DECL_NET_IPV6_ROUTE_GC_TIMEOUT) && HAVE_DECL_NET_IPV6_ROUTE_GC_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_GC_TIMEOUT) == (5), "NET_IPV6_ROUTE_GC_TIMEOUT != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_GC_TIMEOUT 5
#endif
#if defined(NET_IPV6_ROUTE_GC_INTERVAL) || (defined(HAVE_DECL_NET_IPV6_ROUTE_GC_INTERVAL) && HAVE_DECL_NET_IPV6_ROUTE_GC_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_GC_INTERVAL) == (6), "NET_IPV6_ROUTE_GC_INTERVAL != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_GC_INTERVAL 6
#endif
#if defined(NET_IPV6_ROUTE_GC_ELASTICITY) || (defined(HAVE_DECL_NET_IPV6_ROUTE_GC_ELASTICITY) && HAVE_DECL_NET_IPV6_ROUTE_GC_ELASTICITY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_GC_ELASTICITY) == (7), "NET_IPV6_ROUTE_GC_ELASTICITY != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_GC_ELASTICITY 7
#endif
#if defined(NET_IPV6_ROUTE_MTU_EXPIRES) || (defined(HAVE_DECL_NET_IPV6_ROUTE_MTU_EXPIRES) && HAVE_DECL_NET_IPV6_ROUTE_MTU_EXPIRES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_MTU_EXPIRES) == (8), "NET_IPV6_ROUTE_MTU_EXPIRES != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_MTU_EXPIRES 8
#endif
#if defined(NET_IPV6_ROUTE_MIN_ADVMSS) || (defined(HAVE_DECL_NET_IPV6_ROUTE_MIN_ADVMSS) && HAVE_DECL_NET_IPV6_ROUTE_MIN_ADVMSS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_MIN_ADVMSS) == (9), "NET_IPV6_ROUTE_MIN_ADVMSS != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_MIN_ADVMSS 9
#endif
#if defined(NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS) || (defined(HAVE_DECL_NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS) && HAVE_DECL_NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS) == (10), "NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS 10
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sysctl_net_ipv6_route in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sysctl_net_ipv6_route_xdata[] = {

 [NET_IPV6_ROUTE_FLUSH] = XLAT(NET_IPV6_ROUTE_FLUSH),
 #define XLAT_VAL_0 ((unsigned) (NET_IPV6_ROUTE_FLUSH))
 #define XLAT_STR_0 STRINGIFY(NET_IPV6_ROUTE_FLUSH)
 [NET_IPV6_ROUTE_GC_THRESH] = XLAT(NET_IPV6_ROUTE_GC_THRESH),
 #define XLAT_VAL_1 ((unsigned) (NET_IPV6_ROUTE_GC_THRESH))
 #define XLAT_STR_1 STRINGIFY(NET_IPV6_ROUTE_GC_THRESH)
 [NET_IPV6_ROUTE_MAX_SIZE] = XLAT(NET_IPV6_ROUTE_MAX_SIZE),
 #define XLAT_VAL_2 ((unsigned) (NET_IPV6_ROUTE_MAX_SIZE))
 #define XLAT_STR_2 STRINGIFY(NET_IPV6_ROUTE_MAX_SIZE)
 [NET_IPV6_ROUTE_GC_MIN_INTERVAL] = XLAT(NET_IPV6_ROUTE_GC_MIN_INTERVAL),
 #define XLAT_VAL_3 ((unsigned) (NET_IPV6_ROUTE_GC_MIN_INTERVAL))
 #define XLAT_STR_3 STRINGIFY(NET_IPV6_ROUTE_GC_MIN_INTERVAL)
 [NET_IPV6_ROUTE_GC_TIMEOUT] = XLAT(NET_IPV6_ROUTE_GC_TIMEOUT),
 #define XLAT_VAL_4 ((unsigned) (NET_IPV6_ROUTE_GC_TIMEOUT))
 #define XLAT_STR_4 STRINGIFY(NET_IPV6_ROUTE_GC_TIMEOUT)
 [NET_IPV6_ROUTE_GC_INTERVAL] = XLAT(NET_IPV6_ROUTE_GC_INTERVAL),
 #define XLAT_VAL_5 ((unsigned) (NET_IPV6_ROUTE_GC_INTERVAL))
 #define XLAT_STR_5 STRINGIFY(NET_IPV6_ROUTE_GC_INTERVAL)

 [NET_IPV6_ROUTE_GC_ELASTICITY] = XLAT(NET_IPV6_ROUTE_GC_ELASTICITY),
 #define XLAT_VAL_6 ((unsigned) (NET_IPV6_ROUTE_GC_ELASTICITY))
 #define XLAT_STR_6 STRINGIFY(NET_IPV6_ROUTE_GC_ELASTICITY)

 [NET_IPV6_ROUTE_MTU_EXPIRES] = XLAT(NET_IPV6_ROUTE_MTU_EXPIRES),
 #define XLAT_VAL_7 ((unsigned) (NET_IPV6_ROUTE_MTU_EXPIRES))
 #define XLAT_STR_7 STRINGIFY(NET_IPV6_ROUTE_MTU_EXPIRES)

 [NET_IPV6_ROUTE_MIN_ADVMSS] = XLAT(NET_IPV6_ROUTE_MIN_ADVMSS),
 #define XLAT_VAL_8 ((unsigned) (NET_IPV6_ROUTE_MIN_ADVMSS))
 #define XLAT_STR_8 STRINGIFY(NET_IPV6_ROUTE_MIN_ADVMSS)

 [NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS] = XLAT(NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS),
 #define XLAT_VAL_9 ((unsigned) (NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS))
 #define XLAT_STR_9 STRINGIFY(NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS)
};
static
const struct xlat sysctl_net_ipv6_route[1] = { {
 .data = sysctl_net_ipv6_route_xdata,
 .size = ARRAY_SIZE(sysctl_net_ipv6_route_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
