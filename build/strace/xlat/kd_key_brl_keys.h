/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_key_brl_keys.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(K_BRL_BLANK) || (defined(HAVE_DECL_K_BRL_BLANK) && HAVE_DECL_K_BRL_BLANK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_BLANK) == (K(KT_BRL, 0)), "K_BRL_BLANK != K(KT_BRL, 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_BLANK K(KT_BRL, 0)
#endif
#if defined(K_BRL_BLANK) || (defined(HAVE_DECL_K_BRL_BLANK) && HAVE_DECL_K_BRL_BLANK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_BLANK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_BLANK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_BLANK)
#endif
#if defined(K_BRL_DOT1) || (defined(HAVE_DECL_K_BRL_DOT1) && HAVE_DECL_K_BRL_DOT1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT1) == (K(KT_BRL, 1)), "K_BRL_DOT1 != K(KT_BRL, 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT1 K(KT_BRL, 1)
#endif
#if defined(K_BRL_DOT1) || (defined(HAVE_DECL_K_BRL_DOT1) && HAVE_DECL_K_BRL_DOT1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT1)
#endif
#if defined(K_BRL_DOT2) || (defined(HAVE_DECL_K_BRL_DOT2) && HAVE_DECL_K_BRL_DOT2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT2) == (K(KT_BRL, 2)), "K_BRL_DOT2 != K(KT_BRL, 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT2 K(KT_BRL, 2)
#endif
#if defined(K_BRL_DOT2) || (defined(HAVE_DECL_K_BRL_DOT2) && HAVE_DECL_K_BRL_DOT2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT2)
#endif
#if defined(K_BRL_DOT3) || (defined(HAVE_DECL_K_BRL_DOT3) && HAVE_DECL_K_BRL_DOT3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT3) == (K(KT_BRL, 3)), "K_BRL_DOT3 != K(KT_BRL, 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT3 K(KT_BRL, 3)
#endif
#if defined(K_BRL_DOT3) || (defined(HAVE_DECL_K_BRL_DOT3) && HAVE_DECL_K_BRL_DOT3)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT3)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT3"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT3)
#endif
#if defined(K_BRL_DOT4) || (defined(HAVE_DECL_K_BRL_DOT4) && HAVE_DECL_K_BRL_DOT4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT4) == (K(KT_BRL, 4)), "K_BRL_DOT4 != K(KT_BRL, 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT4 K(KT_BRL, 4)
#endif
#if defined(K_BRL_DOT4) || (defined(HAVE_DECL_K_BRL_DOT4) && HAVE_DECL_K_BRL_DOT4)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT4)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT4"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT4)
#endif
#if defined(K_BRL_DOT5) || (defined(HAVE_DECL_K_BRL_DOT5) && HAVE_DECL_K_BRL_DOT5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT5) == (K(KT_BRL, 5)), "K_BRL_DOT5 != K(KT_BRL, 5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT5 K(KT_BRL, 5)
#endif
#if defined(K_BRL_DOT5) || (defined(HAVE_DECL_K_BRL_DOT5) && HAVE_DECL_K_BRL_DOT5)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT5)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT5"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT5)
#endif
#if defined(K_BRL_DOT6) || (defined(HAVE_DECL_K_BRL_DOT6) && HAVE_DECL_K_BRL_DOT6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT6) == (K(KT_BRL, 6)), "K_BRL_DOT6 != K(KT_BRL, 6)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT6 K(KT_BRL, 6)
#endif
#if defined(K_BRL_DOT6) || (defined(HAVE_DECL_K_BRL_DOT6) && HAVE_DECL_K_BRL_DOT6)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT6)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT6"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT6)
#endif
#if defined(K_BRL_DOT7) || (defined(HAVE_DECL_K_BRL_DOT7) && HAVE_DECL_K_BRL_DOT7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT7) == (K(KT_BRL, 7)), "K_BRL_DOT7 != K(KT_BRL, 7)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT7 K(KT_BRL, 7)
#endif
#if defined(K_BRL_DOT7) || (defined(HAVE_DECL_K_BRL_DOT7) && HAVE_DECL_K_BRL_DOT7)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT7)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT7"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT7)
#endif
#if defined(K_BRL_DOT8) || (defined(HAVE_DECL_K_BRL_DOT8) && HAVE_DECL_K_BRL_DOT8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT8) == (K(KT_BRL, 8)), "K_BRL_DOT8 != K(KT_BRL, 8)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT8 K(KT_BRL, 8)
#endif
#if defined(K_BRL_DOT8) || (defined(HAVE_DECL_K_BRL_DOT8) && HAVE_DECL_K_BRL_DOT8)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT8)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT8"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT8)
#endif
#if defined(K_BRL_DOT9) || (defined(HAVE_DECL_K_BRL_DOT9) && HAVE_DECL_K_BRL_DOT9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT9) == (K(KT_BRL, 9)), "K_BRL_DOT9 != K(KT_BRL, 9)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT9 K(KT_BRL, 9)
#endif
#if defined(K_BRL_DOT9) || (defined(HAVE_DECL_K_BRL_DOT9) && HAVE_DECL_K_BRL_DOT9)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT9)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT9"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT9)
#endif
#if defined(K_BRL_DOT10) || (defined(HAVE_DECL_K_BRL_DOT10) && HAVE_DECL_K_BRL_DOT10)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_BRL_DOT10) == (K(KT_BRL, 10)), "K_BRL_DOT10 != K(KT_BRL, 10)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_BRL_DOT10 K(KT_BRL, 10)
#endif
#if defined(K_BRL_DOT10) || (defined(HAVE_DECL_K_BRL_DOT10) && HAVE_DECL_K_BRL_DOT10)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_BRL_DOT10)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_BRL_DOT10"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_BRL_DOT10)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat kd_key_brl_keys in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_key_brl_keys_xdata[] = {
 XLAT(K_BRL_BLANK),
 #define XLAT_VAL_0 ((unsigned) (K_BRL_BLANK))
 #define XLAT_STR_0 STRINGIFY(K_BRL_BLANK)
 XLAT(K_BRL_DOT1),
 #define XLAT_VAL_1 ((unsigned) (K_BRL_DOT1))
 #define XLAT_STR_1 STRINGIFY(K_BRL_DOT1)
 XLAT(K_BRL_DOT2),
 #define XLAT_VAL_2 ((unsigned) (K_BRL_DOT2))
 #define XLAT_STR_2 STRINGIFY(K_BRL_DOT2)
 XLAT(K_BRL_DOT3),
 #define XLAT_VAL_3 ((unsigned) (K_BRL_DOT3))
 #define XLAT_STR_3 STRINGIFY(K_BRL_DOT3)
 XLAT(K_BRL_DOT4),
 #define XLAT_VAL_4 ((unsigned) (K_BRL_DOT4))
 #define XLAT_STR_4 STRINGIFY(K_BRL_DOT4)
 XLAT(K_BRL_DOT5),
 #define XLAT_VAL_5 ((unsigned) (K_BRL_DOT5))
 #define XLAT_STR_5 STRINGIFY(K_BRL_DOT5)
 XLAT(K_BRL_DOT6),
 #define XLAT_VAL_6 ((unsigned) (K_BRL_DOT6))
 #define XLAT_STR_6 STRINGIFY(K_BRL_DOT6)
 XLAT(K_BRL_DOT7),
 #define XLAT_VAL_7 ((unsigned) (K_BRL_DOT7))
 #define XLAT_STR_7 STRINGIFY(K_BRL_DOT7)
 XLAT(K_BRL_DOT8),
 #define XLAT_VAL_8 ((unsigned) (K_BRL_DOT8))
 #define XLAT_STR_8 STRINGIFY(K_BRL_DOT8)
 XLAT(K_BRL_DOT9),
 #define XLAT_VAL_9 ((unsigned) (K_BRL_DOT9))
 #define XLAT_STR_9 STRINGIFY(K_BRL_DOT9)
 XLAT(K_BRL_DOT10),
 #define XLAT_VAL_10 ((unsigned) (K_BRL_DOT10))
 #define XLAT_STR_10 STRINGIFY(K_BRL_DOT10)
};
static
const struct xlat kd_key_brl_keys[1] = { {
 .data = kd_key_brl_keys_xdata,
 .size = ARRAY_SIZE(kd_key_brl_keys_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
