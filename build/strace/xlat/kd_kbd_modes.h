/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_kbd_modes.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(K_RAW) || (defined(HAVE_DECL_K_RAW) && HAVE_DECL_K_RAW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_RAW) == (0), "K_RAW != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_RAW 0
#endif
#if defined(K_XLATE) || (defined(HAVE_DECL_K_XLATE) && HAVE_DECL_K_XLATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_XLATE) == (1), "K_XLATE != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_XLATE 1
#endif
#if defined(K_MEDIUMRAW) || (defined(HAVE_DECL_K_MEDIUMRAW) && HAVE_DECL_K_MEDIUMRAW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_MEDIUMRAW) == (2), "K_MEDIUMRAW != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_MEDIUMRAW 2
#endif
#if defined(K_UNICODE) || (defined(HAVE_DECL_K_UNICODE) && HAVE_DECL_K_UNICODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_UNICODE) == (3), "K_UNICODE != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_UNICODE 3
#endif
#if defined(K_OFF) || (defined(HAVE_DECL_K_OFF) && HAVE_DECL_K_OFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_OFF) == (4), "K_OFF != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_OFF 4
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat kd_kbd_modes in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_kbd_modes_xdata[] = {
 [K_RAW] = XLAT(K_RAW),
 #define XLAT_VAL_0 ((unsigned) (K_RAW))
 #define XLAT_STR_0 STRINGIFY(K_RAW)
 [K_XLATE] = XLAT(K_XLATE),
 #define XLAT_VAL_1 ((unsigned) (K_XLATE))
 #define XLAT_STR_1 STRINGIFY(K_XLATE)
 [K_MEDIUMRAW] = XLAT(K_MEDIUMRAW),
 #define XLAT_VAL_2 ((unsigned) (K_MEDIUMRAW))
 #define XLAT_STR_2 STRINGIFY(K_MEDIUMRAW)
 [K_UNICODE] = XLAT(K_UNICODE),
 #define XLAT_VAL_3 ((unsigned) (K_UNICODE))
 #define XLAT_STR_3 STRINGIFY(K_UNICODE)
 [K_OFF] = XLAT(K_OFF),
 #define XLAT_VAL_4 ((unsigned) (K_OFF))
 #define XLAT_STR_4 STRINGIFY(K_OFF)
};
static
const struct xlat kd_kbd_modes[1] = { {
 .data = kd_kbd_modes_xdata,
 .size = ARRAY_SIZE(kd_kbd_modes_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
