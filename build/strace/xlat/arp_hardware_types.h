/* Generated by ./src/xlat/gen.sh from ./src/xlat/arp_hardware_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ARPHRD_NETROM) || (defined(HAVE_DECL_ARPHRD_NETROM) && HAVE_DECL_ARPHRD_NETROM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_NETROM) == (0), "ARPHRD_NETROM != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_NETROM 0
#endif
#if defined(ARPHRD_NETROM) || (defined(HAVE_DECL_ARPHRD_NETROM) && HAVE_DECL_ARPHRD_NETROM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_NETROM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_NETROM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_NETROM)
#endif
#if defined(ARPHRD_ETHER) || (defined(HAVE_DECL_ARPHRD_ETHER) && HAVE_DECL_ARPHRD_ETHER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_ETHER) == (1), "ARPHRD_ETHER != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_ETHER 1
#endif
#if defined(ARPHRD_ETHER) || (defined(HAVE_DECL_ARPHRD_ETHER) && HAVE_DECL_ARPHRD_ETHER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_ETHER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_ETHER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_ETHER)
#endif
#if defined(ARPHRD_EETHER) || (defined(HAVE_DECL_ARPHRD_EETHER) && HAVE_DECL_ARPHRD_EETHER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_EETHER) == (2), "ARPHRD_EETHER != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_EETHER 2
#endif
#if defined(ARPHRD_EETHER) || (defined(HAVE_DECL_ARPHRD_EETHER) && HAVE_DECL_ARPHRD_EETHER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_EETHER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_EETHER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_EETHER)
#endif
#if defined(ARPHRD_AX25) || (defined(HAVE_DECL_ARPHRD_AX25) && HAVE_DECL_ARPHRD_AX25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_AX25) == (3), "ARPHRD_AX25 != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_AX25 3
#endif
#if defined(ARPHRD_AX25) || (defined(HAVE_DECL_ARPHRD_AX25) && HAVE_DECL_ARPHRD_AX25)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_AX25)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_AX25"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_AX25)
#endif
#if defined(ARPHRD_PRONET) || (defined(HAVE_DECL_ARPHRD_PRONET) && HAVE_DECL_ARPHRD_PRONET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_PRONET) == (4), "ARPHRD_PRONET != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_PRONET 4
#endif
#if defined(ARPHRD_PRONET) || (defined(HAVE_DECL_ARPHRD_PRONET) && HAVE_DECL_ARPHRD_PRONET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_PRONET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_PRONET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_PRONET)
#endif
#if defined(ARPHRD_CHAOS) || (defined(HAVE_DECL_ARPHRD_CHAOS) && HAVE_DECL_ARPHRD_CHAOS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_CHAOS) == (5), "ARPHRD_CHAOS != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_CHAOS 5
#endif
#if defined(ARPHRD_CHAOS) || (defined(HAVE_DECL_ARPHRD_CHAOS) && HAVE_DECL_ARPHRD_CHAOS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_CHAOS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_CHAOS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_CHAOS)
#endif
#if defined(ARPHRD_IEEE802) || (defined(HAVE_DECL_ARPHRD_IEEE802) && HAVE_DECL_ARPHRD_IEEE802)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IEEE802) == (6), "ARPHRD_IEEE802 != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IEEE802 6
#endif
#if defined(ARPHRD_IEEE802) || (defined(HAVE_DECL_ARPHRD_IEEE802) && HAVE_DECL_ARPHRD_IEEE802)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IEEE802)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IEEE802"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IEEE802)
#endif
#if defined(ARPHRD_ARCNET) || (defined(HAVE_DECL_ARPHRD_ARCNET) && HAVE_DECL_ARPHRD_ARCNET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_ARCNET) == (7), "ARPHRD_ARCNET != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_ARCNET 7
#endif
#if defined(ARPHRD_ARCNET) || (defined(HAVE_DECL_ARPHRD_ARCNET) && HAVE_DECL_ARPHRD_ARCNET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_ARCNET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_ARCNET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_ARCNET)
#endif
#if defined(ARPHRD_APPLETLK) || (defined(HAVE_DECL_ARPHRD_APPLETLK) && HAVE_DECL_ARPHRD_APPLETLK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_APPLETLK) == (8), "ARPHRD_APPLETLK != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_APPLETLK 8
#endif
#if defined(ARPHRD_APPLETLK) || (defined(HAVE_DECL_ARPHRD_APPLETLK) && HAVE_DECL_ARPHRD_APPLETLK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_APPLETLK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_APPLETLK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_APPLETLK)
#endif
#if defined(ARPHRD_DLCI) || (defined(HAVE_DECL_ARPHRD_DLCI) && HAVE_DECL_ARPHRD_DLCI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_DLCI) == (15), "ARPHRD_DLCI != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_DLCI 15
#endif
#if defined(ARPHRD_DLCI) || (defined(HAVE_DECL_ARPHRD_DLCI) && HAVE_DECL_ARPHRD_DLCI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_DLCI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_DLCI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_DLCI)
#endif
#if defined(ARPHRD_ATM) || (defined(HAVE_DECL_ARPHRD_ATM) && HAVE_DECL_ARPHRD_ATM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_ATM) == (19), "ARPHRD_ATM != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_ATM 19
#endif
#if defined(ARPHRD_ATM) || (defined(HAVE_DECL_ARPHRD_ATM) && HAVE_DECL_ARPHRD_ATM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_ATM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_ATM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_ATM)
#endif
#if defined(ARPHRD_METRICOM) || (defined(HAVE_DECL_ARPHRD_METRICOM) && HAVE_DECL_ARPHRD_METRICOM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_METRICOM) == (23), "ARPHRD_METRICOM != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_METRICOM 23
#endif
#if defined(ARPHRD_METRICOM) || (defined(HAVE_DECL_ARPHRD_METRICOM) && HAVE_DECL_ARPHRD_METRICOM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_METRICOM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_METRICOM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_METRICOM)
#endif
#if defined(ARPHRD_IEEE1394) || (defined(HAVE_DECL_ARPHRD_IEEE1394) && HAVE_DECL_ARPHRD_IEEE1394)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IEEE1394) == (24), "ARPHRD_IEEE1394 != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IEEE1394 24
#endif
#if defined(ARPHRD_IEEE1394) || (defined(HAVE_DECL_ARPHRD_IEEE1394) && HAVE_DECL_ARPHRD_IEEE1394)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IEEE1394)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IEEE1394"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IEEE1394)
#endif
#if defined(ARPHRD_EUI64) || (defined(HAVE_DECL_ARPHRD_EUI64) && HAVE_DECL_ARPHRD_EUI64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_EUI64) == (27), "ARPHRD_EUI64 != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_EUI64 27
#endif
#if defined(ARPHRD_EUI64) || (defined(HAVE_DECL_ARPHRD_EUI64) && HAVE_DECL_ARPHRD_EUI64)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_EUI64)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_EUI64"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_EUI64)
#endif
#if defined(ARPHRD_INFINIBAND) || (defined(HAVE_DECL_ARPHRD_INFINIBAND) && HAVE_DECL_ARPHRD_INFINIBAND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_INFINIBAND) == (32), "ARPHRD_INFINIBAND != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_INFINIBAND 32
#endif
#if defined(ARPHRD_INFINIBAND) || (defined(HAVE_DECL_ARPHRD_INFINIBAND) && HAVE_DECL_ARPHRD_INFINIBAND)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_INFINIBAND)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_INFINIBAND"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_INFINIBAND)
#endif
#if defined(ARPHRD_SLIP) || (defined(HAVE_DECL_ARPHRD_SLIP) && HAVE_DECL_ARPHRD_SLIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_SLIP) == (256), "ARPHRD_SLIP != 256");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_SLIP 256
#endif
#if defined(ARPHRD_SLIP) || (defined(HAVE_DECL_ARPHRD_SLIP) && HAVE_DECL_ARPHRD_SLIP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_SLIP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_SLIP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_SLIP)
#endif
#if defined(ARPHRD_CSLIP) || (defined(HAVE_DECL_ARPHRD_CSLIP) && HAVE_DECL_ARPHRD_CSLIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_CSLIP) == (257), "ARPHRD_CSLIP != 257");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_CSLIP 257
#endif
#if defined(ARPHRD_CSLIP) || (defined(HAVE_DECL_ARPHRD_CSLIP) && HAVE_DECL_ARPHRD_CSLIP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_CSLIP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_CSLIP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_CSLIP)
#endif
#if defined(ARPHRD_SLIP6) || (defined(HAVE_DECL_ARPHRD_SLIP6) && HAVE_DECL_ARPHRD_SLIP6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_SLIP6) == (258), "ARPHRD_SLIP6 != 258");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_SLIP6 258
#endif
#if defined(ARPHRD_SLIP6) || (defined(HAVE_DECL_ARPHRD_SLIP6) && HAVE_DECL_ARPHRD_SLIP6)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_SLIP6)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_SLIP6"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_SLIP6)
#endif
#if defined(ARPHRD_CSLIP6) || (defined(HAVE_DECL_ARPHRD_CSLIP6) && HAVE_DECL_ARPHRD_CSLIP6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_CSLIP6) == (259), "ARPHRD_CSLIP6 != 259");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_CSLIP6 259
#endif
#if defined(ARPHRD_CSLIP6) || (defined(HAVE_DECL_ARPHRD_CSLIP6) && HAVE_DECL_ARPHRD_CSLIP6)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_CSLIP6)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_CSLIP6"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_CSLIP6)
#endif
#if defined(ARPHRD_RSRVD) || (defined(HAVE_DECL_ARPHRD_RSRVD) && HAVE_DECL_ARPHRD_RSRVD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_RSRVD) == (260), "ARPHRD_RSRVD != 260");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_RSRVD 260
#endif
#if defined(ARPHRD_RSRVD) || (defined(HAVE_DECL_ARPHRD_RSRVD) && HAVE_DECL_ARPHRD_RSRVD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_RSRVD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_RSRVD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_RSRVD)
#endif
#if defined(ARPHRD_ADAPT) || (defined(HAVE_DECL_ARPHRD_ADAPT) && HAVE_DECL_ARPHRD_ADAPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_ADAPT) == (264), "ARPHRD_ADAPT != 264");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_ADAPT 264
#endif
#if defined(ARPHRD_ADAPT) || (defined(HAVE_DECL_ARPHRD_ADAPT) && HAVE_DECL_ARPHRD_ADAPT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_ADAPT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_ADAPT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_ADAPT)
#endif
#if defined(ARPHRD_ROSE) || (defined(HAVE_DECL_ARPHRD_ROSE) && HAVE_DECL_ARPHRD_ROSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_ROSE) == (270), "ARPHRD_ROSE != 270");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_ROSE 270
#endif
#if defined(ARPHRD_ROSE) || (defined(HAVE_DECL_ARPHRD_ROSE) && HAVE_DECL_ARPHRD_ROSE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_ROSE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_ROSE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_ROSE)
#endif
#if defined(ARPHRD_X25) || (defined(HAVE_DECL_ARPHRD_X25) && HAVE_DECL_ARPHRD_X25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_X25) == (271), "ARPHRD_X25 != 271");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_X25 271
#endif
#if defined(ARPHRD_X25) || (defined(HAVE_DECL_ARPHRD_X25) && HAVE_DECL_ARPHRD_X25)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_X25)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_X25"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_X25)
#endif
#if defined(ARPHRD_HWX25) || (defined(HAVE_DECL_ARPHRD_HWX25) && HAVE_DECL_ARPHRD_HWX25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_HWX25) == (272), "ARPHRD_HWX25 != 272");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_HWX25 272
#endif
#if defined(ARPHRD_HWX25) || (defined(HAVE_DECL_ARPHRD_HWX25) && HAVE_DECL_ARPHRD_HWX25)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_HWX25)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_HWX25"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_HWX25)
#endif
#if defined(ARPHRD_CAN) || (defined(HAVE_DECL_ARPHRD_CAN) && HAVE_DECL_ARPHRD_CAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_CAN) == (280), "ARPHRD_CAN != 280");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_CAN 280
#endif
#if defined(ARPHRD_CAN) || (defined(HAVE_DECL_ARPHRD_CAN) && HAVE_DECL_ARPHRD_CAN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_CAN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_CAN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_CAN)
#endif
#if defined(ARPHRD_MCTP) || (defined(HAVE_DECL_ARPHRD_MCTP) && HAVE_DECL_ARPHRD_MCTP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_MCTP) == (290), "ARPHRD_MCTP != 290");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_MCTP 290
#endif
#if defined(ARPHRD_MCTP) || (defined(HAVE_DECL_ARPHRD_MCTP) && HAVE_DECL_ARPHRD_MCTP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_MCTP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_MCTP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_MCTP)
#endif
#if defined(ARPHRD_PPP) || (defined(HAVE_DECL_ARPHRD_PPP) && HAVE_DECL_ARPHRD_PPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_PPP) == (512), "ARPHRD_PPP != 512");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_PPP 512
#endif
#if defined(ARPHRD_PPP) || (defined(HAVE_DECL_ARPHRD_PPP) && HAVE_DECL_ARPHRD_PPP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_PPP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_PPP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_PPP)
#endif
#if defined(ARPHRD_CISCO) || (defined(HAVE_DECL_ARPHRD_CISCO) && HAVE_DECL_ARPHRD_CISCO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_CISCO) == (513), "ARPHRD_CISCO != 513");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_CISCO 513
#endif
#if defined(ARPHRD_CISCO) || (defined(HAVE_DECL_ARPHRD_CISCO) && HAVE_DECL_ARPHRD_CISCO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_CISCO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_CISCO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_CISCO)
#endif
#if defined(ARPHRD_LAPB) || (defined(HAVE_DECL_ARPHRD_LAPB) && HAVE_DECL_ARPHRD_LAPB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_LAPB) == (516), "ARPHRD_LAPB != 516");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_LAPB 516
#endif
#if defined(ARPHRD_LAPB) || (defined(HAVE_DECL_ARPHRD_LAPB) && HAVE_DECL_ARPHRD_LAPB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_LAPB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_LAPB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_LAPB)
#endif
#if defined(ARPHRD_DDCMP) || (defined(HAVE_DECL_ARPHRD_DDCMP) && HAVE_DECL_ARPHRD_DDCMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_DDCMP) == (517), "ARPHRD_DDCMP != 517");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_DDCMP 517
#endif
#if defined(ARPHRD_DDCMP) || (defined(HAVE_DECL_ARPHRD_DDCMP) && HAVE_DECL_ARPHRD_DDCMP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_DDCMP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_DDCMP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_DDCMP)
#endif
#if defined(ARPHRD_RAWHDLC) || (defined(HAVE_DECL_ARPHRD_RAWHDLC) && HAVE_DECL_ARPHRD_RAWHDLC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_RAWHDLC) == (518), "ARPHRD_RAWHDLC != 518");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_RAWHDLC 518
#endif
#if defined(ARPHRD_RAWHDLC) || (defined(HAVE_DECL_ARPHRD_RAWHDLC) && HAVE_DECL_ARPHRD_RAWHDLC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_RAWHDLC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_RAWHDLC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_RAWHDLC)
#endif
#if defined(ARPHRD_RAWIP) || (defined(HAVE_DECL_ARPHRD_RAWIP) && HAVE_DECL_ARPHRD_RAWIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_RAWIP) == (519), "ARPHRD_RAWIP != 519");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_RAWIP 519
#endif
#if defined(ARPHRD_RAWIP) || (defined(HAVE_DECL_ARPHRD_RAWIP) && HAVE_DECL_ARPHRD_RAWIP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_RAWIP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_RAWIP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_RAWIP)
#endif
#if defined(ARPHRD_TUNNEL) || (defined(HAVE_DECL_ARPHRD_TUNNEL) && HAVE_DECL_ARPHRD_TUNNEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_TUNNEL) == (768), "ARPHRD_TUNNEL != 768");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_TUNNEL 768
#endif
#if defined(ARPHRD_TUNNEL) || (defined(HAVE_DECL_ARPHRD_TUNNEL) && HAVE_DECL_ARPHRD_TUNNEL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_TUNNEL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_TUNNEL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_TUNNEL)
#endif
#if defined(ARPHRD_TUNNEL6) || (defined(HAVE_DECL_ARPHRD_TUNNEL6) && HAVE_DECL_ARPHRD_TUNNEL6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_TUNNEL6) == (769), "ARPHRD_TUNNEL6 != 769");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_TUNNEL6 769
#endif
#if defined(ARPHRD_TUNNEL6) || (defined(HAVE_DECL_ARPHRD_TUNNEL6) && HAVE_DECL_ARPHRD_TUNNEL6)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_TUNNEL6)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_TUNNEL6"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_TUNNEL6)
#endif
#if defined(ARPHRD_FRAD) || (defined(HAVE_DECL_ARPHRD_FRAD) && HAVE_DECL_ARPHRD_FRAD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_FRAD) == (770), "ARPHRD_FRAD != 770");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_FRAD 770
#endif
#if defined(ARPHRD_FRAD) || (defined(HAVE_DECL_ARPHRD_FRAD) && HAVE_DECL_ARPHRD_FRAD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_FRAD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_FRAD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_FRAD)
#endif
#if defined(ARPHRD_SKIP) || (defined(HAVE_DECL_ARPHRD_SKIP) && HAVE_DECL_ARPHRD_SKIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_SKIP) == (771), "ARPHRD_SKIP != 771");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_SKIP 771
#endif
#if defined(ARPHRD_SKIP) || (defined(HAVE_DECL_ARPHRD_SKIP) && HAVE_DECL_ARPHRD_SKIP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_SKIP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_SKIP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_SKIP)
#endif
#if defined(ARPHRD_LOOPBACK) || (defined(HAVE_DECL_ARPHRD_LOOPBACK) && HAVE_DECL_ARPHRD_LOOPBACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_LOOPBACK) == (772), "ARPHRD_LOOPBACK != 772");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_LOOPBACK 772
#endif
#if defined(ARPHRD_LOOPBACK) || (defined(HAVE_DECL_ARPHRD_LOOPBACK) && HAVE_DECL_ARPHRD_LOOPBACK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_LOOPBACK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_LOOPBACK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_LOOPBACK)
#endif
#if defined(ARPHRD_LOCALTLK) || (defined(HAVE_DECL_ARPHRD_LOCALTLK) && HAVE_DECL_ARPHRD_LOCALTLK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_LOCALTLK) == (773), "ARPHRD_LOCALTLK != 773");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_LOCALTLK 773
#endif
#if defined(ARPHRD_LOCALTLK) || (defined(HAVE_DECL_ARPHRD_LOCALTLK) && HAVE_DECL_ARPHRD_LOCALTLK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_LOCALTLK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_LOCALTLK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_LOCALTLK)
#endif
#if defined(ARPHRD_FDDI) || (defined(HAVE_DECL_ARPHRD_FDDI) && HAVE_DECL_ARPHRD_FDDI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_FDDI) == (774), "ARPHRD_FDDI != 774");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_FDDI 774
#endif
#if defined(ARPHRD_FDDI) || (defined(HAVE_DECL_ARPHRD_FDDI) && HAVE_DECL_ARPHRD_FDDI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_FDDI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_FDDI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_FDDI)
#endif
#if defined(ARPHRD_BIF) || (defined(HAVE_DECL_ARPHRD_BIF) && HAVE_DECL_ARPHRD_BIF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_BIF) == (775), "ARPHRD_BIF != 775");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_BIF 775
#endif
#if defined(ARPHRD_BIF) || (defined(HAVE_DECL_ARPHRD_BIF) && HAVE_DECL_ARPHRD_BIF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_BIF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_BIF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_BIF)
#endif
#if defined(ARPHRD_SIT) || (defined(HAVE_DECL_ARPHRD_SIT) && HAVE_DECL_ARPHRD_SIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_SIT) == (776), "ARPHRD_SIT != 776");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_SIT 776
#endif
#if defined(ARPHRD_SIT) || (defined(HAVE_DECL_ARPHRD_SIT) && HAVE_DECL_ARPHRD_SIT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_SIT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_SIT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_SIT)
#endif
#if defined(ARPHRD_IPDDP) || (defined(HAVE_DECL_ARPHRD_IPDDP) && HAVE_DECL_ARPHRD_IPDDP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IPDDP) == (777), "ARPHRD_IPDDP != 777");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IPDDP 777
#endif
#if defined(ARPHRD_IPDDP) || (defined(HAVE_DECL_ARPHRD_IPDDP) && HAVE_DECL_ARPHRD_IPDDP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IPDDP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IPDDP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IPDDP)
#endif
#if defined(ARPHRD_IPGRE) || (defined(HAVE_DECL_ARPHRD_IPGRE) && HAVE_DECL_ARPHRD_IPGRE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IPGRE) == (778), "ARPHRD_IPGRE != 778");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IPGRE 778
#endif
#if defined(ARPHRD_IPGRE) || (defined(HAVE_DECL_ARPHRD_IPGRE) && HAVE_DECL_ARPHRD_IPGRE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IPGRE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IPGRE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IPGRE)
#endif
#if defined(ARPHRD_PIMREG) || (defined(HAVE_DECL_ARPHRD_PIMREG) && HAVE_DECL_ARPHRD_PIMREG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_PIMREG) == (779), "ARPHRD_PIMREG != 779");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_PIMREG 779
#endif
#if defined(ARPHRD_PIMREG) || (defined(HAVE_DECL_ARPHRD_PIMREG) && HAVE_DECL_ARPHRD_PIMREG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_PIMREG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_PIMREG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_PIMREG)
#endif
#if defined(ARPHRD_HIPPI) || (defined(HAVE_DECL_ARPHRD_HIPPI) && HAVE_DECL_ARPHRD_HIPPI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_HIPPI) == (780), "ARPHRD_HIPPI != 780");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_HIPPI 780
#endif
#if defined(ARPHRD_HIPPI) || (defined(HAVE_DECL_ARPHRD_HIPPI) && HAVE_DECL_ARPHRD_HIPPI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_HIPPI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_HIPPI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_HIPPI)
#endif
#if defined(ARPHRD_ASH) || (defined(HAVE_DECL_ARPHRD_ASH) && HAVE_DECL_ARPHRD_ASH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_ASH) == (781), "ARPHRD_ASH != 781");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_ASH 781
#endif
#if defined(ARPHRD_ASH) || (defined(HAVE_DECL_ARPHRD_ASH) && HAVE_DECL_ARPHRD_ASH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_ASH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_ASH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_ASH)
#endif
#if defined(ARPHRD_ECONET) || (defined(HAVE_DECL_ARPHRD_ECONET) && HAVE_DECL_ARPHRD_ECONET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_ECONET) == (782), "ARPHRD_ECONET != 782");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_ECONET 782
#endif
#if defined(ARPHRD_ECONET) || (defined(HAVE_DECL_ARPHRD_ECONET) && HAVE_DECL_ARPHRD_ECONET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_ECONET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_ECONET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_ECONET)
#endif
#if defined(ARPHRD_IRDA) || (defined(HAVE_DECL_ARPHRD_IRDA) && HAVE_DECL_ARPHRD_IRDA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IRDA) == (783), "ARPHRD_IRDA != 783");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IRDA 783
#endif
#if defined(ARPHRD_IRDA) || (defined(HAVE_DECL_ARPHRD_IRDA) && HAVE_DECL_ARPHRD_IRDA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IRDA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IRDA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IRDA)
#endif
#if defined(ARPHRD_FCPP) || (defined(HAVE_DECL_ARPHRD_FCPP) && HAVE_DECL_ARPHRD_FCPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_FCPP) == (784), "ARPHRD_FCPP != 784");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_FCPP 784
#endif
#if defined(ARPHRD_FCPP) || (defined(HAVE_DECL_ARPHRD_FCPP) && HAVE_DECL_ARPHRD_FCPP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_FCPP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_FCPP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_FCPP)
#endif
#if defined(ARPHRD_FCAL) || (defined(HAVE_DECL_ARPHRD_FCAL) && HAVE_DECL_ARPHRD_FCAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_FCAL) == (785), "ARPHRD_FCAL != 785");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_FCAL 785
#endif
#if defined(ARPHRD_FCAL) || (defined(HAVE_DECL_ARPHRD_FCAL) && HAVE_DECL_ARPHRD_FCAL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_FCAL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_FCAL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_FCAL)
#endif
#if defined(ARPHRD_FCPL) || (defined(HAVE_DECL_ARPHRD_FCPL) && HAVE_DECL_ARPHRD_FCPL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_FCPL) == (786), "ARPHRD_FCPL != 786");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_FCPL 786
#endif
#if defined(ARPHRD_FCPL) || (defined(HAVE_DECL_ARPHRD_FCPL) && HAVE_DECL_ARPHRD_FCPL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_FCPL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_FCPL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_FCPL)
#endif
#if defined(ARPHRD_FCFABRIC) || (defined(HAVE_DECL_ARPHRD_FCFABRIC) && HAVE_DECL_ARPHRD_FCFABRIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_FCFABRIC) == (787), "ARPHRD_FCFABRIC != 787");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_FCFABRIC 787
#endif
#if defined(ARPHRD_FCFABRIC) || (defined(HAVE_DECL_ARPHRD_FCFABRIC) && HAVE_DECL_ARPHRD_FCFABRIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_FCFABRIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_FCFABRIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_FCFABRIC)
#endif
#if defined(ARPHRD_IEEE802_TR) || (defined(HAVE_DECL_ARPHRD_IEEE802_TR) && HAVE_DECL_ARPHRD_IEEE802_TR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IEEE802_TR) == (800), "ARPHRD_IEEE802_TR != 800");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IEEE802_TR 800
#endif
#if defined(ARPHRD_IEEE802_TR) || (defined(HAVE_DECL_ARPHRD_IEEE802_TR) && HAVE_DECL_ARPHRD_IEEE802_TR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IEEE802_TR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IEEE802_TR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IEEE802_TR)
#endif
#if defined(ARPHRD_IEEE80211) || (defined(HAVE_DECL_ARPHRD_IEEE80211) && HAVE_DECL_ARPHRD_IEEE80211)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IEEE80211) == (801), "ARPHRD_IEEE80211 != 801");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IEEE80211 801
#endif
#if defined(ARPHRD_IEEE80211) || (defined(HAVE_DECL_ARPHRD_IEEE80211) && HAVE_DECL_ARPHRD_IEEE80211)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IEEE80211)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IEEE80211"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IEEE80211)
#endif
#if defined(ARPHRD_IEEE80211_PRISM) || (defined(HAVE_DECL_ARPHRD_IEEE80211_PRISM) && HAVE_DECL_ARPHRD_IEEE80211_PRISM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IEEE80211_PRISM) == (802), "ARPHRD_IEEE80211_PRISM != 802");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IEEE80211_PRISM 802
#endif
#if defined(ARPHRD_IEEE80211_PRISM) || (defined(HAVE_DECL_ARPHRD_IEEE80211_PRISM) && HAVE_DECL_ARPHRD_IEEE80211_PRISM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IEEE80211_PRISM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IEEE80211_PRISM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IEEE80211_PRISM)
#endif
#if defined(ARPHRD_IEEE80211_RADIOTAP) || (defined(HAVE_DECL_ARPHRD_IEEE80211_RADIOTAP) && HAVE_DECL_ARPHRD_IEEE80211_RADIOTAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IEEE80211_RADIOTAP) == (803), "ARPHRD_IEEE80211_RADIOTAP != 803");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IEEE80211_RADIOTAP 803
#endif
#if defined(ARPHRD_IEEE80211_RADIOTAP) || (defined(HAVE_DECL_ARPHRD_IEEE80211_RADIOTAP) && HAVE_DECL_ARPHRD_IEEE80211_RADIOTAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IEEE80211_RADIOTAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IEEE80211_RADIOTAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IEEE80211_RADIOTAP)
#endif
#if defined(ARPHRD_IEEE802154) || (defined(HAVE_DECL_ARPHRD_IEEE802154) && HAVE_DECL_ARPHRD_IEEE802154)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IEEE802154) == (804), "ARPHRD_IEEE802154 != 804");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IEEE802154 804
#endif
#if defined(ARPHRD_IEEE802154) || (defined(HAVE_DECL_ARPHRD_IEEE802154) && HAVE_DECL_ARPHRD_IEEE802154)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IEEE802154)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IEEE802154"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IEEE802154)
#endif
#if defined(ARPHRD_IEEE802154_MONITOR) || (defined(HAVE_DECL_ARPHRD_IEEE802154_MONITOR) && HAVE_DECL_ARPHRD_IEEE802154_MONITOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IEEE802154_MONITOR) == (805), "ARPHRD_IEEE802154_MONITOR != 805");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IEEE802154_MONITOR 805
#endif
#if defined(ARPHRD_IEEE802154_MONITOR) || (defined(HAVE_DECL_ARPHRD_IEEE802154_MONITOR) && HAVE_DECL_ARPHRD_IEEE802154_MONITOR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IEEE802154_MONITOR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IEEE802154_MONITOR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IEEE802154_MONITOR)
#endif
#if defined(ARPHRD_PHONET) || (defined(HAVE_DECL_ARPHRD_PHONET) && HAVE_DECL_ARPHRD_PHONET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_PHONET) == (820), "ARPHRD_PHONET != 820");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_PHONET 820
#endif
#if defined(ARPHRD_PHONET) || (defined(HAVE_DECL_ARPHRD_PHONET) && HAVE_DECL_ARPHRD_PHONET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_PHONET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_PHONET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_PHONET)
#endif
#if defined(ARPHRD_PHONET_PIPE) || (defined(HAVE_DECL_ARPHRD_PHONET_PIPE) && HAVE_DECL_ARPHRD_PHONET_PIPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_PHONET_PIPE) == (821), "ARPHRD_PHONET_PIPE != 821");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_PHONET_PIPE 821
#endif
#if defined(ARPHRD_PHONET_PIPE) || (defined(HAVE_DECL_ARPHRD_PHONET_PIPE) && HAVE_DECL_ARPHRD_PHONET_PIPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_PHONET_PIPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_PHONET_PIPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_PHONET_PIPE)
#endif
#if defined(ARPHRD_CAIF) || (defined(HAVE_DECL_ARPHRD_CAIF) && HAVE_DECL_ARPHRD_CAIF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_CAIF) == (822), "ARPHRD_CAIF != 822");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_CAIF 822
#endif
#if defined(ARPHRD_CAIF) || (defined(HAVE_DECL_ARPHRD_CAIF) && HAVE_DECL_ARPHRD_CAIF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_CAIF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_CAIF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_CAIF)
#endif
#if defined(ARPHRD_IP6GRE) || (defined(HAVE_DECL_ARPHRD_IP6GRE) && HAVE_DECL_ARPHRD_IP6GRE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_IP6GRE) == (823), "ARPHRD_IP6GRE != 823");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_IP6GRE 823
#endif
#if defined(ARPHRD_IP6GRE) || (defined(HAVE_DECL_ARPHRD_IP6GRE) && HAVE_DECL_ARPHRD_IP6GRE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_IP6GRE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_IP6GRE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_IP6GRE)
#endif
#if defined(ARPHRD_NETLINK) || (defined(HAVE_DECL_ARPHRD_NETLINK) && HAVE_DECL_ARPHRD_NETLINK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_NETLINK) == (824), "ARPHRD_NETLINK != 824");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_NETLINK 824
#endif
#if defined(ARPHRD_NETLINK) || (defined(HAVE_DECL_ARPHRD_NETLINK) && HAVE_DECL_ARPHRD_NETLINK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_NETLINK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_NETLINK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_NETLINK)
#endif
#if defined(ARPHRD_6LOWPAN) || (defined(HAVE_DECL_ARPHRD_6LOWPAN) && HAVE_DECL_ARPHRD_6LOWPAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_6LOWPAN) == (825), "ARPHRD_6LOWPAN != 825");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_6LOWPAN 825
#endif
#if defined(ARPHRD_6LOWPAN) || (defined(HAVE_DECL_ARPHRD_6LOWPAN) && HAVE_DECL_ARPHRD_6LOWPAN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_6LOWPAN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_6LOWPAN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_6LOWPAN)
#endif
#if defined(ARPHRD_VSOCKMON) || (defined(HAVE_DECL_ARPHRD_VSOCKMON) && HAVE_DECL_ARPHRD_VSOCKMON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_VSOCKMON) == (826), "ARPHRD_VSOCKMON != 826");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_VSOCKMON 826
#endif
#if defined(ARPHRD_VSOCKMON) || (defined(HAVE_DECL_ARPHRD_VSOCKMON) && HAVE_DECL_ARPHRD_VSOCKMON)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_VSOCKMON)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_VSOCKMON"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_VSOCKMON)
#endif
#if defined(ARPHRD_NONE) || (defined(HAVE_DECL_ARPHRD_NONE) && HAVE_DECL_ARPHRD_NONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_NONE) == (0xFFFE), "ARPHRD_NONE != 0xFFFE");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_NONE 0xFFFE
#endif
#if defined(ARPHRD_NONE) || (defined(HAVE_DECL_ARPHRD_NONE) && HAVE_DECL_ARPHRD_NONE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_NONE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_NONE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_NONE)
#endif
#if defined(ARPHRD_VOID) || (defined(HAVE_DECL_ARPHRD_VOID) && HAVE_DECL_ARPHRD_VOID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ARPHRD_VOID) == (0xFFFF), "ARPHRD_VOID != 0xFFFF");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ARPHRD_VOID 0xFFFF
#endif
#if defined(ARPHRD_VOID) || (defined(HAVE_DECL_ARPHRD_VOID) && HAVE_DECL_ARPHRD_VOID)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ARPHRD_VOID)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ARPHRD_VOID"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ARPHRD_VOID)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data arp_hardware_types_xdata[] = {
 XLAT(ARPHRD_NETROM),
 #define XLAT_VAL_0 ((unsigned) (ARPHRD_NETROM))
 #define XLAT_STR_0 STRINGIFY(ARPHRD_NETROM)
 XLAT(ARPHRD_ETHER),
 #define XLAT_VAL_1 ((unsigned) (ARPHRD_ETHER))
 #define XLAT_STR_1 STRINGIFY(ARPHRD_ETHER)
 XLAT(ARPHRD_EETHER),
 #define XLAT_VAL_2 ((unsigned) (ARPHRD_EETHER))
 #define XLAT_STR_2 STRINGIFY(ARPHRD_EETHER)
 XLAT(ARPHRD_AX25),
 #define XLAT_VAL_3 ((unsigned) (ARPHRD_AX25))
 #define XLAT_STR_3 STRINGIFY(ARPHRD_AX25)
 XLAT(ARPHRD_PRONET),
 #define XLAT_VAL_4 ((unsigned) (ARPHRD_PRONET))
 #define XLAT_STR_4 STRINGIFY(ARPHRD_PRONET)
 XLAT(ARPHRD_CHAOS),
 #define XLAT_VAL_5 ((unsigned) (ARPHRD_CHAOS))
 #define XLAT_STR_5 STRINGIFY(ARPHRD_CHAOS)
 XLAT(ARPHRD_IEEE802),
 #define XLAT_VAL_6 ((unsigned) (ARPHRD_IEEE802))
 #define XLAT_STR_6 STRINGIFY(ARPHRD_IEEE802)
 XLAT(ARPHRD_ARCNET),
 #define XLAT_VAL_7 ((unsigned) (ARPHRD_ARCNET))
 #define XLAT_STR_7 STRINGIFY(ARPHRD_ARCNET)
 XLAT(ARPHRD_APPLETLK),
 #define XLAT_VAL_8 ((unsigned) (ARPHRD_APPLETLK))
 #define XLAT_STR_8 STRINGIFY(ARPHRD_APPLETLK)
 XLAT(ARPHRD_DLCI),
 #define XLAT_VAL_9 ((unsigned) (ARPHRD_DLCI))
 #define XLAT_STR_9 STRINGIFY(ARPHRD_DLCI)
 XLAT(ARPHRD_ATM),
 #define XLAT_VAL_10 ((unsigned) (ARPHRD_ATM))
 #define XLAT_STR_10 STRINGIFY(ARPHRD_ATM)
 XLAT(ARPHRD_METRICOM),
 #define XLAT_VAL_11 ((unsigned) (ARPHRD_METRICOM))
 #define XLAT_STR_11 STRINGIFY(ARPHRD_METRICOM)
 XLAT(ARPHRD_IEEE1394),
 #define XLAT_VAL_12 ((unsigned) (ARPHRD_IEEE1394))
 #define XLAT_STR_12 STRINGIFY(ARPHRD_IEEE1394)
 XLAT(ARPHRD_EUI64),
 #define XLAT_VAL_13 ((unsigned) (ARPHRD_EUI64))
 #define XLAT_STR_13 STRINGIFY(ARPHRD_EUI64)
 XLAT(ARPHRD_INFINIBAND),
 #define XLAT_VAL_14 ((unsigned) (ARPHRD_INFINIBAND))
 #define XLAT_STR_14 STRINGIFY(ARPHRD_INFINIBAND)
 XLAT(ARPHRD_SLIP),
 #define XLAT_VAL_15 ((unsigned) (ARPHRD_SLIP))
 #define XLAT_STR_15 STRINGIFY(ARPHRD_SLIP)
 XLAT(ARPHRD_CSLIP),
 #define XLAT_VAL_16 ((unsigned) (ARPHRD_CSLIP))
 #define XLAT_STR_16 STRINGIFY(ARPHRD_CSLIP)
 XLAT(ARPHRD_SLIP6),
 #define XLAT_VAL_17 ((unsigned) (ARPHRD_SLIP6))
 #define XLAT_STR_17 STRINGIFY(ARPHRD_SLIP6)
 XLAT(ARPHRD_CSLIP6),
 #define XLAT_VAL_18 ((unsigned) (ARPHRD_CSLIP6))
 #define XLAT_STR_18 STRINGIFY(ARPHRD_CSLIP6)
 XLAT(ARPHRD_RSRVD),
 #define XLAT_VAL_19 ((unsigned) (ARPHRD_RSRVD))
 #define XLAT_STR_19 STRINGIFY(ARPHRD_RSRVD)
 XLAT(ARPHRD_ADAPT),
 #define XLAT_VAL_20 ((unsigned) (ARPHRD_ADAPT))
 #define XLAT_STR_20 STRINGIFY(ARPHRD_ADAPT)
 XLAT(ARPHRD_ROSE),
 #define XLAT_VAL_21 ((unsigned) (ARPHRD_ROSE))
 #define XLAT_STR_21 STRINGIFY(ARPHRD_ROSE)
 XLAT(ARPHRD_X25),
 #define XLAT_VAL_22 ((unsigned) (ARPHRD_X25))
 #define XLAT_STR_22 STRINGIFY(ARPHRD_X25)
 XLAT(ARPHRD_HWX25),
 #define XLAT_VAL_23 ((unsigned) (ARPHRD_HWX25))
 #define XLAT_STR_23 STRINGIFY(ARPHRD_HWX25)
 XLAT(ARPHRD_CAN),
 #define XLAT_VAL_24 ((unsigned) (ARPHRD_CAN))
 #define XLAT_STR_24 STRINGIFY(ARPHRD_CAN)
 XLAT(ARPHRD_MCTP),
 #define XLAT_VAL_25 ((unsigned) (ARPHRD_MCTP))
 #define XLAT_STR_25 STRINGIFY(ARPHRD_MCTP)
 XLAT(ARPHRD_PPP),
 #define XLAT_VAL_26 ((unsigned) (ARPHRD_PPP))
 #define XLAT_STR_26 STRINGIFY(ARPHRD_PPP)
 XLAT(ARPHRD_CISCO),
 #define XLAT_VAL_27 ((unsigned) (ARPHRD_CISCO))
 #define XLAT_STR_27 STRINGIFY(ARPHRD_CISCO)
 XLAT(ARPHRD_LAPB),
 #define XLAT_VAL_28 ((unsigned) (ARPHRD_LAPB))
 #define XLAT_STR_28 STRINGIFY(ARPHRD_LAPB)
 XLAT(ARPHRD_DDCMP),
 #define XLAT_VAL_29 ((unsigned) (ARPHRD_DDCMP))
 #define XLAT_STR_29 STRINGIFY(ARPHRD_DDCMP)
 XLAT(ARPHRD_RAWHDLC),
 #define XLAT_VAL_30 ((unsigned) (ARPHRD_RAWHDLC))
 #define XLAT_STR_30 STRINGIFY(ARPHRD_RAWHDLC)
 XLAT(ARPHRD_RAWIP),
 #define XLAT_VAL_31 ((unsigned) (ARPHRD_RAWIP))
 #define XLAT_STR_31 STRINGIFY(ARPHRD_RAWIP)
 XLAT(ARPHRD_TUNNEL),
 #define XLAT_VAL_32 ((unsigned) (ARPHRD_TUNNEL))
 #define XLAT_STR_32 STRINGIFY(ARPHRD_TUNNEL)
 XLAT(ARPHRD_TUNNEL6),
 #define XLAT_VAL_33 ((unsigned) (ARPHRD_TUNNEL6))
 #define XLAT_STR_33 STRINGIFY(ARPHRD_TUNNEL6)
 XLAT(ARPHRD_FRAD),
 #define XLAT_VAL_34 ((unsigned) (ARPHRD_FRAD))
 #define XLAT_STR_34 STRINGIFY(ARPHRD_FRAD)
 XLAT(ARPHRD_SKIP),
 #define XLAT_VAL_35 ((unsigned) (ARPHRD_SKIP))
 #define XLAT_STR_35 STRINGIFY(ARPHRD_SKIP)
 XLAT(ARPHRD_LOOPBACK),
 #define XLAT_VAL_36 ((unsigned) (ARPHRD_LOOPBACK))
 #define XLAT_STR_36 STRINGIFY(ARPHRD_LOOPBACK)
 XLAT(ARPHRD_LOCALTLK),
 #define XLAT_VAL_37 ((unsigned) (ARPHRD_LOCALTLK))
 #define XLAT_STR_37 STRINGIFY(ARPHRD_LOCALTLK)
 XLAT(ARPHRD_FDDI),
 #define XLAT_VAL_38 ((unsigned) (ARPHRD_FDDI))
 #define XLAT_STR_38 STRINGIFY(ARPHRD_FDDI)
 XLAT(ARPHRD_BIF),
 #define XLAT_VAL_39 ((unsigned) (ARPHRD_BIF))
 #define XLAT_STR_39 STRINGIFY(ARPHRD_BIF)
 XLAT(ARPHRD_SIT),
 #define XLAT_VAL_40 ((unsigned) (ARPHRD_SIT))
 #define XLAT_STR_40 STRINGIFY(ARPHRD_SIT)
 XLAT(ARPHRD_IPDDP),
 #define XLAT_VAL_41 ((unsigned) (ARPHRD_IPDDP))
 #define XLAT_STR_41 STRINGIFY(ARPHRD_IPDDP)
 XLAT(ARPHRD_IPGRE),
 #define XLAT_VAL_42 ((unsigned) (ARPHRD_IPGRE))
 #define XLAT_STR_42 STRINGIFY(ARPHRD_IPGRE)
 XLAT(ARPHRD_PIMREG),
 #define XLAT_VAL_43 ((unsigned) (ARPHRD_PIMREG))
 #define XLAT_STR_43 STRINGIFY(ARPHRD_PIMREG)
 XLAT(ARPHRD_HIPPI),
 #define XLAT_VAL_44 ((unsigned) (ARPHRD_HIPPI))
 #define XLAT_STR_44 STRINGIFY(ARPHRD_HIPPI)
 XLAT(ARPHRD_ASH),
 #define XLAT_VAL_45 ((unsigned) (ARPHRD_ASH))
 #define XLAT_STR_45 STRINGIFY(ARPHRD_ASH)
 XLAT(ARPHRD_ECONET),
 #define XLAT_VAL_46 ((unsigned) (ARPHRD_ECONET))
 #define XLAT_STR_46 STRINGIFY(ARPHRD_ECONET)
 XLAT(ARPHRD_IRDA),
 #define XLAT_VAL_47 ((unsigned) (ARPHRD_IRDA))
 #define XLAT_STR_47 STRINGIFY(ARPHRD_IRDA)
 XLAT(ARPHRD_FCPP),
 #define XLAT_VAL_48 ((unsigned) (ARPHRD_FCPP))
 #define XLAT_STR_48 STRINGIFY(ARPHRD_FCPP)
 XLAT(ARPHRD_FCAL),
 #define XLAT_VAL_49 ((unsigned) (ARPHRD_FCAL))
 #define XLAT_STR_49 STRINGIFY(ARPHRD_FCAL)
 XLAT(ARPHRD_FCPL),
 #define XLAT_VAL_50 ((unsigned) (ARPHRD_FCPL))
 #define XLAT_STR_50 STRINGIFY(ARPHRD_FCPL)
 XLAT(ARPHRD_FCFABRIC),
 #define XLAT_VAL_51 ((unsigned) (ARPHRD_FCFABRIC))
 #define XLAT_STR_51 STRINGIFY(ARPHRD_FCFABRIC)
 XLAT(ARPHRD_IEEE802_TR),
 #define XLAT_VAL_52 ((unsigned) (ARPHRD_IEEE802_TR))
 #define XLAT_STR_52 STRINGIFY(ARPHRD_IEEE802_TR)
 XLAT(ARPHRD_IEEE80211),
 #define XLAT_VAL_53 ((unsigned) (ARPHRD_IEEE80211))
 #define XLAT_STR_53 STRINGIFY(ARPHRD_IEEE80211)
 XLAT(ARPHRD_IEEE80211_PRISM),
 #define XLAT_VAL_54 ((unsigned) (ARPHRD_IEEE80211_PRISM))
 #define XLAT_STR_54 STRINGIFY(ARPHRD_IEEE80211_PRISM)
 XLAT(ARPHRD_IEEE80211_RADIOTAP),
 #define XLAT_VAL_55 ((unsigned) (ARPHRD_IEEE80211_RADIOTAP))
 #define XLAT_STR_55 STRINGIFY(ARPHRD_IEEE80211_RADIOTAP)
 XLAT(ARPHRD_IEEE802154),
 #define XLAT_VAL_56 ((unsigned) (ARPHRD_IEEE802154))
 #define XLAT_STR_56 STRINGIFY(ARPHRD_IEEE802154)
 XLAT(ARPHRD_IEEE802154_MONITOR),
 #define XLAT_VAL_57 ((unsigned) (ARPHRD_IEEE802154_MONITOR))
 #define XLAT_STR_57 STRINGIFY(ARPHRD_IEEE802154_MONITOR)
 XLAT(ARPHRD_PHONET),
 #define XLAT_VAL_58 ((unsigned) (ARPHRD_PHONET))
 #define XLAT_STR_58 STRINGIFY(ARPHRD_PHONET)
 XLAT(ARPHRD_PHONET_PIPE),
 #define XLAT_VAL_59 ((unsigned) (ARPHRD_PHONET_PIPE))
 #define XLAT_STR_59 STRINGIFY(ARPHRD_PHONET_PIPE)
 XLAT(ARPHRD_CAIF),
 #define XLAT_VAL_60 ((unsigned) (ARPHRD_CAIF))
 #define XLAT_STR_60 STRINGIFY(ARPHRD_CAIF)
 XLAT(ARPHRD_IP6GRE),
 #define XLAT_VAL_61 ((unsigned) (ARPHRD_IP6GRE))
 #define XLAT_STR_61 STRINGIFY(ARPHRD_IP6GRE)
 XLAT(ARPHRD_NETLINK),
 #define XLAT_VAL_62 ((unsigned) (ARPHRD_NETLINK))
 #define XLAT_STR_62 STRINGIFY(ARPHRD_NETLINK)
 XLAT(ARPHRD_6LOWPAN),
 #define XLAT_VAL_63 ((unsigned) (ARPHRD_6LOWPAN))
 #define XLAT_STR_63 STRINGIFY(ARPHRD_6LOWPAN)
 XLAT(ARPHRD_VSOCKMON),
 #define XLAT_VAL_64 ((unsigned) (ARPHRD_VSOCKMON))
 #define XLAT_STR_64 STRINGIFY(ARPHRD_VSOCKMON)
 XLAT(ARPHRD_NONE),
 #define XLAT_VAL_65 ((unsigned) (ARPHRD_NONE))
 #define XLAT_STR_65 STRINGIFY(ARPHRD_NONE)
 XLAT(ARPHRD_VOID),
 #define XLAT_VAL_66 ((unsigned) (ARPHRD_VOID))
 #define XLAT_STR_66 STRINGIFY(ARPHRD_VOID)
};
const struct xlat arp_hardware_types[1] = { {
 .data = arp_hardware_types_xdata,
 .size = ARRAY_SIZE(arp_hardware_types_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
