/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtnl_tc_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_tc_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtnl_tc_attrs_xdata[] = {
 [TCA_UNSPEC] = XLAT(TCA_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (TCA_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(TCA_UNSPEC)
 [TCA_KIND] = XLAT(TCA_KIND),
 #define XLAT_VAL_1 ((unsigned) (TCA_KIND))
 #define XLAT_STR_1 STRINGIFY(TCA_KIND)
 [TCA_OPTIONS] = XLAT(TCA_OPTIONS),
 #define XLAT_VAL_2 ((unsigned) (TCA_OPTIONS))
 #define XLAT_STR_2 STRINGIFY(TCA_OPTIONS)
 [TCA_STATS] = XLAT(TCA_STATS),
 #define XLAT_VAL_3 ((unsigned) (TCA_STATS))
 #define XLAT_STR_3 STRINGIFY(TCA_STATS)
 [TCA_XSTATS] = XLAT(TCA_XSTATS),
 #define XLAT_VAL_4 ((unsigned) (TCA_XSTATS))
 #define XLAT_STR_4 STRINGIFY(TCA_XSTATS)
 [TCA_RATE] = XLAT(TCA_RATE),
 #define XLAT_VAL_5 ((unsigned) (TCA_RATE))
 #define XLAT_STR_5 STRINGIFY(TCA_RATE)
 [TCA_FCNT] = XLAT(TCA_FCNT),
 #define XLAT_VAL_6 ((unsigned) (TCA_FCNT))
 #define XLAT_STR_6 STRINGIFY(TCA_FCNT)
 [TCA_STATS2] = XLAT(TCA_STATS2),
 #define XLAT_VAL_7 ((unsigned) (TCA_STATS2))
 #define XLAT_STR_7 STRINGIFY(TCA_STATS2)
 [TCA_STAB] = XLAT(TCA_STAB),
 #define XLAT_VAL_8 ((unsigned) (TCA_STAB))
 #define XLAT_STR_8 STRINGIFY(TCA_STAB)
 [TCA_PAD] = XLAT(TCA_PAD),
 #define XLAT_VAL_9 ((unsigned) (TCA_PAD))
 #define XLAT_STR_9 STRINGIFY(TCA_PAD)
 [TCA_DUMP_INVISIBLE] = XLAT(TCA_DUMP_INVISIBLE),
 #define XLAT_VAL_10 ((unsigned) (TCA_DUMP_INVISIBLE))
 #define XLAT_STR_10 STRINGIFY(TCA_DUMP_INVISIBLE)
 [TCA_CHAIN] = XLAT(TCA_CHAIN),
 #define XLAT_VAL_11 ((unsigned) (TCA_CHAIN))
 #define XLAT_STR_11 STRINGIFY(TCA_CHAIN)
 [TCA_HW_OFFLOAD] = XLAT(TCA_HW_OFFLOAD),
 #define XLAT_VAL_12 ((unsigned) (TCA_HW_OFFLOAD))
 #define XLAT_STR_12 STRINGIFY(TCA_HW_OFFLOAD)
 [TCA_INGRESS_BLOCK] = XLAT(TCA_INGRESS_BLOCK),
 #define XLAT_VAL_13 ((unsigned) (TCA_INGRESS_BLOCK))
 #define XLAT_STR_13 STRINGIFY(TCA_INGRESS_BLOCK)
 [TCA_EGRESS_BLOCK] = XLAT(TCA_EGRESS_BLOCK),
 #define XLAT_VAL_14 ((unsigned) (TCA_EGRESS_BLOCK))
 #define XLAT_STR_14 STRINGIFY(TCA_EGRESS_BLOCK)
 [TCA_DUMP_FLAGS] = XLAT(TCA_DUMP_FLAGS),
 #define XLAT_VAL_15 ((unsigned) (TCA_DUMP_FLAGS))
 #define XLAT_STR_15 STRINGIFY(TCA_DUMP_FLAGS)
};
static
const struct xlat rtnl_tc_attrs[1] = { {
 .data = rtnl_tc_attrs_xdata,
 .size = ARRAY_SIZE(rtnl_tc_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
