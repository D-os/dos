/* Generated by ./src/xlat/gen.sh from ./src/xlat/pr_set_mm.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PR_SET_MM_START_CODE) || (defined(HAVE_DECL_PR_SET_MM_START_CODE) && HAVE_DECL_PR_SET_MM_START_CODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_START_CODE) == (1), "PR_SET_MM_START_CODE != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_START_CODE 1
#endif
#if defined(PR_SET_MM_END_CODE) || (defined(HAVE_DECL_PR_SET_MM_END_CODE) && HAVE_DECL_PR_SET_MM_END_CODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_END_CODE) == (2), "PR_SET_MM_END_CODE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_END_CODE 2
#endif
#if defined(PR_SET_MM_START_DATA) || (defined(HAVE_DECL_PR_SET_MM_START_DATA) && HAVE_DECL_PR_SET_MM_START_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_START_DATA) == (3), "PR_SET_MM_START_DATA != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_START_DATA 3
#endif
#if defined(PR_SET_MM_END_DATA) || (defined(HAVE_DECL_PR_SET_MM_END_DATA) && HAVE_DECL_PR_SET_MM_END_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_END_DATA) == (4), "PR_SET_MM_END_DATA != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_END_DATA 4
#endif
#if defined(PR_SET_MM_START_STACK) || (defined(HAVE_DECL_PR_SET_MM_START_STACK) && HAVE_DECL_PR_SET_MM_START_STACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_START_STACK) == (5), "PR_SET_MM_START_STACK != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_START_STACK 5
#endif
#if defined(PR_SET_MM_START_BRK) || (defined(HAVE_DECL_PR_SET_MM_START_BRK) && HAVE_DECL_PR_SET_MM_START_BRK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_START_BRK) == (6), "PR_SET_MM_START_BRK != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_START_BRK 6
#endif
#if defined(PR_SET_MM_BRK) || (defined(HAVE_DECL_PR_SET_MM_BRK) && HAVE_DECL_PR_SET_MM_BRK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_BRK) == (7), "PR_SET_MM_BRK != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_BRK 7
#endif
#if defined(PR_SET_MM_ARG_START) || (defined(HAVE_DECL_PR_SET_MM_ARG_START) && HAVE_DECL_PR_SET_MM_ARG_START)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_ARG_START) == (8), "PR_SET_MM_ARG_START != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_ARG_START 8
#endif
#if defined(PR_SET_MM_ARG_END) || (defined(HAVE_DECL_PR_SET_MM_ARG_END) && HAVE_DECL_PR_SET_MM_ARG_END)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_ARG_END) == (9), "PR_SET_MM_ARG_END != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_ARG_END 9
#endif
#if defined(PR_SET_MM_ENV_START) || (defined(HAVE_DECL_PR_SET_MM_ENV_START) && HAVE_DECL_PR_SET_MM_ENV_START)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_ENV_START) == (10), "PR_SET_MM_ENV_START != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_ENV_START 10
#endif
#if defined(PR_SET_MM_ENV_END) || (defined(HAVE_DECL_PR_SET_MM_ENV_END) && HAVE_DECL_PR_SET_MM_ENV_END)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_ENV_END) == (11), "PR_SET_MM_ENV_END != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_ENV_END 11
#endif
#if defined(PR_SET_MM_AUXV) || (defined(HAVE_DECL_PR_SET_MM_AUXV) && HAVE_DECL_PR_SET_MM_AUXV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_AUXV) == (12), "PR_SET_MM_AUXV != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_AUXV 12
#endif
#if defined(PR_SET_MM_EXE_FILE) || (defined(HAVE_DECL_PR_SET_MM_EXE_FILE) && HAVE_DECL_PR_SET_MM_EXE_FILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_EXE_FILE) == (13), "PR_SET_MM_EXE_FILE != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_EXE_FILE 13
#endif
#if defined(PR_SET_MM_MAP) || (defined(HAVE_DECL_PR_SET_MM_MAP) && HAVE_DECL_PR_SET_MM_MAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_MAP) == (14), "PR_SET_MM_MAP != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_MAP 14
#endif
#if defined(PR_SET_MM_MAP_SIZE) || (defined(HAVE_DECL_PR_SET_MM_MAP_SIZE) && HAVE_DECL_PR_SET_MM_MAP_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PR_SET_MM_MAP_SIZE) == (15), "PR_SET_MM_MAP_SIZE != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PR_SET_MM_MAP_SIZE 15
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat pr_set_mm in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data pr_set_mm_xdata[] = {
 [PR_SET_MM_START_CODE] = XLAT(PR_SET_MM_START_CODE),
 #define XLAT_VAL_0 ((unsigned) (PR_SET_MM_START_CODE))
 #define XLAT_STR_0 STRINGIFY(PR_SET_MM_START_CODE)
 [PR_SET_MM_END_CODE] = XLAT(PR_SET_MM_END_CODE),
 #define XLAT_VAL_1 ((unsigned) (PR_SET_MM_END_CODE))
 #define XLAT_STR_1 STRINGIFY(PR_SET_MM_END_CODE)
 [PR_SET_MM_START_DATA] = XLAT(PR_SET_MM_START_DATA),
 #define XLAT_VAL_2 ((unsigned) (PR_SET_MM_START_DATA))
 #define XLAT_STR_2 STRINGIFY(PR_SET_MM_START_DATA)
 [PR_SET_MM_END_DATA] = XLAT(PR_SET_MM_END_DATA),
 #define XLAT_VAL_3 ((unsigned) (PR_SET_MM_END_DATA))
 #define XLAT_STR_3 STRINGIFY(PR_SET_MM_END_DATA)
 [PR_SET_MM_START_STACK] = XLAT(PR_SET_MM_START_STACK),
 #define XLAT_VAL_4 ((unsigned) (PR_SET_MM_START_STACK))
 #define XLAT_STR_4 STRINGIFY(PR_SET_MM_START_STACK)
 [PR_SET_MM_START_BRK] = XLAT(PR_SET_MM_START_BRK),
 #define XLAT_VAL_5 ((unsigned) (PR_SET_MM_START_BRK))
 #define XLAT_STR_5 STRINGIFY(PR_SET_MM_START_BRK)
 [PR_SET_MM_BRK] = XLAT(PR_SET_MM_BRK),
 #define XLAT_VAL_6 ((unsigned) (PR_SET_MM_BRK))
 #define XLAT_STR_6 STRINGIFY(PR_SET_MM_BRK)
 [PR_SET_MM_ARG_START] = XLAT(PR_SET_MM_ARG_START),
 #define XLAT_VAL_7 ((unsigned) (PR_SET_MM_ARG_START))
 #define XLAT_STR_7 STRINGIFY(PR_SET_MM_ARG_START)
 [PR_SET_MM_ARG_END] = XLAT(PR_SET_MM_ARG_END),
 #define XLAT_VAL_8 ((unsigned) (PR_SET_MM_ARG_END))
 #define XLAT_STR_8 STRINGIFY(PR_SET_MM_ARG_END)
 [PR_SET_MM_ENV_START] = XLAT(PR_SET_MM_ENV_START),
 #define XLAT_VAL_9 ((unsigned) (PR_SET_MM_ENV_START))
 #define XLAT_STR_9 STRINGIFY(PR_SET_MM_ENV_START)
 [PR_SET_MM_ENV_END] = XLAT(PR_SET_MM_ENV_END),
 #define XLAT_VAL_10 ((unsigned) (PR_SET_MM_ENV_END))
 #define XLAT_STR_10 STRINGIFY(PR_SET_MM_ENV_END)
 [PR_SET_MM_AUXV] = XLAT(PR_SET_MM_AUXV),
 #define XLAT_VAL_11 ((unsigned) (PR_SET_MM_AUXV))
 #define XLAT_STR_11 STRINGIFY(PR_SET_MM_AUXV)
 [PR_SET_MM_EXE_FILE] = XLAT(PR_SET_MM_EXE_FILE),
 #define XLAT_VAL_12 ((unsigned) (PR_SET_MM_EXE_FILE))
 #define XLAT_STR_12 STRINGIFY(PR_SET_MM_EXE_FILE)
 [PR_SET_MM_MAP] = XLAT(PR_SET_MM_MAP),
 #define XLAT_VAL_13 ((unsigned) (PR_SET_MM_MAP))
 #define XLAT_STR_13 STRINGIFY(PR_SET_MM_MAP)
 [PR_SET_MM_MAP_SIZE] = XLAT(PR_SET_MM_MAP_SIZE),
 #define XLAT_VAL_14 ((unsigned) (PR_SET_MM_MAP_SIZE))
 #define XLAT_STR_14 STRINGIFY(PR_SET_MM_MAP_SIZE)
};
static
const struct xlat pr_set_mm[1] = { {
 .data = pr_set_mm_xdata,
 .size = ARRAY_SIZE(pr_set_mm_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
