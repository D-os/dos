/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_rds_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(RDS_CANCEL_SENT_TO) || (defined(HAVE_DECL_RDS_CANCEL_SENT_TO) && HAVE_DECL_RDS_CANCEL_SENT_TO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_CANCEL_SENT_TO) == (1), "RDS_CANCEL_SENT_TO != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_CANCEL_SENT_TO 1
#endif
#if defined(RDS_GET_MR) || (defined(HAVE_DECL_RDS_GET_MR) && HAVE_DECL_RDS_GET_MR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_GET_MR) == (2), "RDS_GET_MR != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_GET_MR 2
#endif
#if defined(RDS_FREE_MR) || (defined(HAVE_DECL_RDS_FREE_MR) && HAVE_DECL_RDS_FREE_MR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_FREE_MR) == (3), "RDS_FREE_MR != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_FREE_MR 3
#endif
#if defined(RDS_BARRIER) || (defined(HAVE_DECL_RDS_BARRIER) && HAVE_DECL_RDS_BARRIER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_BARRIER) == (4), "RDS_BARRIER != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_BARRIER 4
#endif
#if defined(RDS_RECVERR) || (defined(HAVE_DECL_RDS_RECVERR) && HAVE_DECL_RDS_RECVERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_RECVERR) == (5), "RDS_RECVERR != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_RECVERR 5
#endif
#if defined(RDS_CONG_MONITOR) || (defined(HAVE_DECL_RDS_CONG_MONITOR) && HAVE_DECL_RDS_CONG_MONITOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_CONG_MONITOR) == (6), "RDS_CONG_MONITOR != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_CONG_MONITOR 6
#endif
#if defined(RDS_GET_MR_FOR_DEST) || (defined(HAVE_DECL_RDS_GET_MR_FOR_DEST) && HAVE_DECL_RDS_GET_MR_FOR_DEST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_GET_MR_FOR_DEST) == (7), "RDS_GET_MR_FOR_DEST != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_GET_MR_FOR_DEST 7
#endif
#if defined(SO_RDS_TRANSPORT) || (defined(HAVE_DECL_SO_RDS_TRANSPORT) && HAVE_DECL_SO_RDS_TRANSPORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_RDS_TRANSPORT) == (8), "SO_RDS_TRANSPORT != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SO_RDS_TRANSPORT 8
#endif
#if defined(SO_RDS_MSG_RXPATH_LATENCY) || (defined(HAVE_DECL_SO_RDS_MSG_RXPATH_LATENCY) && HAVE_DECL_SO_RDS_MSG_RXPATH_LATENCY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_RDS_MSG_RXPATH_LATENCY) == (10), "SO_RDS_MSG_RXPATH_LATENCY != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SO_RDS_MSG_RXPATH_LATENCY 10
#endif
#ifndef __hppa__
#if defined(SO_TIMESTAMP_OLD) || (defined(HAVE_DECL_SO_TIMESTAMP_OLD) && HAVE_DECL_SO_TIMESTAMP_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_TIMESTAMP_OLD) == (29), "SO_TIMESTAMP_OLD != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SO_TIMESTAMP_OLD 29
#endif
#endif
#if defined(RDS_INFO_COUNTERS) || (defined(HAVE_DECL_RDS_INFO_COUNTERS) && HAVE_DECL_RDS_INFO_COUNTERS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_COUNTERS) == (10000), "RDS_INFO_COUNTERS != 10000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_COUNTERS 10000
#endif
#if defined(RDS_INFO_CONNECTIONS) || (defined(HAVE_DECL_RDS_INFO_CONNECTIONS) && HAVE_DECL_RDS_INFO_CONNECTIONS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_CONNECTIONS) == (10001), "RDS_INFO_CONNECTIONS != 10001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_CONNECTIONS 10001
#endif
#if defined(RDS_INFO_FLOWS) || (defined(HAVE_DECL_RDS_INFO_FLOWS) && HAVE_DECL_RDS_INFO_FLOWS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_FLOWS) == (10002), "RDS_INFO_FLOWS != 10002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_FLOWS 10002
#endif
#if defined(RDS_INFO_SEND_MESSAGES) || (defined(HAVE_DECL_RDS_INFO_SEND_MESSAGES) && HAVE_DECL_RDS_INFO_SEND_MESSAGES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_SEND_MESSAGES) == (10003), "RDS_INFO_SEND_MESSAGES != 10003");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_SEND_MESSAGES 10003
#endif
#if defined(RDS_INFO_RETRANS_MESSAGES) || (defined(HAVE_DECL_RDS_INFO_RETRANS_MESSAGES) && HAVE_DECL_RDS_INFO_RETRANS_MESSAGES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_RETRANS_MESSAGES) == (10004), "RDS_INFO_RETRANS_MESSAGES != 10004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_RETRANS_MESSAGES 10004
#endif
#if defined(RDS_INFO_RECV_MESSAGES) || (defined(HAVE_DECL_RDS_INFO_RECV_MESSAGES) && HAVE_DECL_RDS_INFO_RECV_MESSAGES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_RECV_MESSAGES) == (10005), "RDS_INFO_RECV_MESSAGES != 10005");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_RECV_MESSAGES 10005
#endif
#if defined(RDS_INFO_SOCKETS) || (defined(HAVE_DECL_RDS_INFO_SOCKETS) && HAVE_DECL_RDS_INFO_SOCKETS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_SOCKETS) == (10006), "RDS_INFO_SOCKETS != 10006");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_SOCKETS 10006
#endif
#if defined(RDS_INFO_TCP_SOCKETS) || (defined(HAVE_DECL_RDS_INFO_TCP_SOCKETS) && HAVE_DECL_RDS_INFO_TCP_SOCKETS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_TCP_SOCKETS) == (10007), "RDS_INFO_TCP_SOCKETS != 10007");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_TCP_SOCKETS 10007
#endif
#if defined(RDS_INFO_IB_CONNECTIONS) || (defined(HAVE_DECL_RDS_INFO_IB_CONNECTIONS) && HAVE_DECL_RDS_INFO_IB_CONNECTIONS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_IB_CONNECTIONS) == (10008), "RDS_INFO_IB_CONNECTIONS != 10008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_IB_CONNECTIONS 10008
#endif
#if defined(RDS_INFO_CONNECTION_STATS) || (defined(HAVE_DECL_RDS_INFO_CONNECTION_STATS) && HAVE_DECL_RDS_INFO_CONNECTION_STATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_CONNECTION_STATS) == (10009), "RDS_INFO_CONNECTION_STATS != 10009");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_CONNECTION_STATS 10009
#endif
#if defined(RDS_INFO_IWARP_CONNECTIONS) || (defined(HAVE_DECL_RDS_INFO_IWARP_CONNECTIONS) && HAVE_DECL_RDS_INFO_IWARP_CONNECTIONS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RDS_INFO_IWARP_CONNECTIONS) == (10010), "RDS_INFO_IWARP_CONNECTIONS != 10010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RDS_INFO_IWARP_CONNECTIONS 10010
#endif
#ifdef __hppa__
#if defined(SO_TIMESTAMP_OLD) || (defined(HAVE_DECL_SO_TIMESTAMP_OLD) && HAVE_DECL_SO_TIMESTAMP_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SO_TIMESTAMP_OLD) == (0x4012), "SO_TIMESTAMP_OLD != 0x4012");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SO_TIMESTAMP_OLD 0x4012
#endif
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_rds_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_rds_options_xdata[] = {
 XLAT(RDS_CANCEL_SENT_TO),
 #define XLAT_VAL_0 ((unsigned) (RDS_CANCEL_SENT_TO))
 #define XLAT_STR_0 STRINGIFY(RDS_CANCEL_SENT_TO)
 XLAT(RDS_GET_MR),
 #define XLAT_VAL_1 ((unsigned) (RDS_GET_MR))
 #define XLAT_STR_1 STRINGIFY(RDS_GET_MR)
 XLAT(RDS_FREE_MR),
 #define XLAT_VAL_2 ((unsigned) (RDS_FREE_MR))
 #define XLAT_STR_2 STRINGIFY(RDS_FREE_MR)
 XLAT(RDS_BARRIER),
 #define XLAT_VAL_3 ((unsigned) (RDS_BARRIER))
 #define XLAT_STR_3 STRINGIFY(RDS_BARRIER)
 XLAT(RDS_RECVERR),
 #define XLAT_VAL_4 ((unsigned) (RDS_RECVERR))
 #define XLAT_STR_4 STRINGIFY(RDS_RECVERR)
 XLAT(RDS_CONG_MONITOR),
 #define XLAT_VAL_5 ((unsigned) (RDS_CONG_MONITOR))
 #define XLAT_STR_5 STRINGIFY(RDS_CONG_MONITOR)
 XLAT(RDS_GET_MR_FOR_DEST),
 #define XLAT_VAL_6 ((unsigned) (RDS_GET_MR_FOR_DEST))
 #define XLAT_STR_6 STRINGIFY(RDS_GET_MR_FOR_DEST)
 XLAT(SO_RDS_TRANSPORT),
 #define XLAT_VAL_7 ((unsigned) (SO_RDS_TRANSPORT))
 #define XLAT_STR_7 STRINGIFY(SO_RDS_TRANSPORT)
 XLAT(SO_RDS_MSG_RXPATH_LATENCY),
 #define XLAT_VAL_8 ((unsigned) (SO_RDS_MSG_RXPATH_LATENCY))
 #define XLAT_STR_8 STRINGIFY(SO_RDS_MSG_RXPATH_LATENCY)

#ifndef __hppa__
 XLAT(SO_TIMESTAMP_OLD),
 #define XLAT_VAL_9 ((unsigned) (SO_TIMESTAMP_OLD))
 #define XLAT_STR_9 STRINGIFY(SO_TIMESTAMP_OLD)
#endif

 XLAT(RDS_INFO_COUNTERS),
 #define XLAT_VAL_10 ((unsigned) (RDS_INFO_COUNTERS))
 #define XLAT_STR_10 STRINGIFY(RDS_INFO_COUNTERS)
 XLAT(RDS_INFO_CONNECTIONS),
 #define XLAT_VAL_11 ((unsigned) (RDS_INFO_CONNECTIONS))
 #define XLAT_STR_11 STRINGIFY(RDS_INFO_CONNECTIONS)
 XLAT(RDS_INFO_FLOWS),
 #define XLAT_VAL_12 ((unsigned) (RDS_INFO_FLOWS))
 #define XLAT_STR_12 STRINGIFY(RDS_INFO_FLOWS)
 XLAT(RDS_INFO_SEND_MESSAGES),
 #define XLAT_VAL_13 ((unsigned) (RDS_INFO_SEND_MESSAGES))
 #define XLAT_STR_13 STRINGIFY(RDS_INFO_SEND_MESSAGES)
 XLAT(RDS_INFO_RETRANS_MESSAGES),
 #define XLAT_VAL_14 ((unsigned) (RDS_INFO_RETRANS_MESSAGES))
 #define XLAT_STR_14 STRINGIFY(RDS_INFO_RETRANS_MESSAGES)
 XLAT(RDS_INFO_RECV_MESSAGES),
 #define XLAT_VAL_15 ((unsigned) (RDS_INFO_RECV_MESSAGES))
 #define XLAT_STR_15 STRINGIFY(RDS_INFO_RECV_MESSAGES)
 XLAT(RDS_INFO_SOCKETS),
 #define XLAT_VAL_16 ((unsigned) (RDS_INFO_SOCKETS))
 #define XLAT_STR_16 STRINGIFY(RDS_INFO_SOCKETS)
 XLAT(RDS_INFO_TCP_SOCKETS),
 #define XLAT_VAL_17 ((unsigned) (RDS_INFO_TCP_SOCKETS))
 #define XLAT_STR_17 STRINGIFY(RDS_INFO_TCP_SOCKETS)
 XLAT(RDS_INFO_IB_CONNECTIONS),
 #define XLAT_VAL_18 ((unsigned) (RDS_INFO_IB_CONNECTIONS))
 #define XLAT_STR_18 STRINGIFY(RDS_INFO_IB_CONNECTIONS)
 XLAT(RDS_INFO_CONNECTION_STATS),
 #define XLAT_VAL_19 ((unsigned) (RDS_INFO_CONNECTION_STATS))
 #define XLAT_STR_19 STRINGIFY(RDS_INFO_CONNECTION_STATS)
 XLAT(RDS_INFO_IWARP_CONNECTIONS),
 #define XLAT_VAL_20 ((unsigned) (RDS_INFO_IWARP_CONNECTIONS))
 #define XLAT_STR_20 STRINGIFY(RDS_INFO_IWARP_CONNECTIONS)

#ifdef __hppa__
 XLAT(SO_TIMESTAMP_OLD),
 #define XLAT_VAL_21 ((unsigned) (SO_TIMESTAMP_OLD))
 #define XLAT_STR_21 STRINGIFY(SO_TIMESTAMP_OLD)
#endif
};
static
const struct xlat sock_rds_options[1] = { {
 .data = sock_rds_options_xdata,
 .size = ARRAY_SIZE(sock_rds_options_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
