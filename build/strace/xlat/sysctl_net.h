/* Generated by ./src/xlat/gen.sh from ./src/xlat/sysctl_net.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NET_CORE) || (defined(HAVE_DECL_NET_CORE) && HAVE_DECL_NET_CORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE) == (1), "NET_CORE != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE 1
#endif
#if defined(NET_CORE) || (defined(HAVE_DECL_NET_CORE) && HAVE_DECL_NET_CORE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_CORE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_CORE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_CORE)
#endif
#if defined(NET_ETHER) || (defined(HAVE_DECL_NET_ETHER) && HAVE_DECL_NET_ETHER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_ETHER) == (2), "NET_ETHER != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_ETHER 2
#endif
#if defined(NET_ETHER) || (defined(HAVE_DECL_NET_ETHER) && HAVE_DECL_NET_ETHER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_ETHER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_ETHER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_ETHER)
#endif
#if defined(NET_802) || (defined(HAVE_DECL_NET_802) && HAVE_DECL_NET_802)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_802) == (3), "NET_802 != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_802 3
#endif
#if defined(NET_802) || (defined(HAVE_DECL_NET_802) && HAVE_DECL_NET_802)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_802)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_802"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_802)
#endif
#if defined(NET_UNIX) || (defined(HAVE_DECL_NET_UNIX) && HAVE_DECL_NET_UNIX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_UNIX) == (4), "NET_UNIX != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_UNIX 4
#endif
#if defined(NET_UNIX) || (defined(HAVE_DECL_NET_UNIX) && HAVE_DECL_NET_UNIX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_UNIX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_UNIX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_UNIX)
#endif
#if defined(NET_IPV4) || (defined(HAVE_DECL_NET_IPV4) && HAVE_DECL_NET_IPV4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV4) == (5), "NET_IPV4 != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV4 5
#endif
#if defined(NET_IPV4) || (defined(HAVE_DECL_NET_IPV4) && HAVE_DECL_NET_IPV4)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV4)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV4"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV4)
#endif
#if defined(NET_IPX) || (defined(HAVE_DECL_NET_IPX) && HAVE_DECL_NET_IPX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPX) == (6), "NET_IPX != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPX 6
#endif
#if defined(NET_IPX) || (defined(HAVE_DECL_NET_IPX) && HAVE_DECL_NET_IPX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPX)
#endif
#if defined(NET_ATALK) || (defined(HAVE_DECL_NET_ATALK) && HAVE_DECL_NET_ATALK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_ATALK) == (7), "NET_ATALK != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_ATALK 7
#endif
#if defined(NET_ATALK) || (defined(HAVE_DECL_NET_ATALK) && HAVE_DECL_NET_ATALK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_ATALK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_ATALK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_ATALK)
#endif
#if defined(NET_NETROM) || (defined(HAVE_DECL_NET_NETROM) && HAVE_DECL_NET_NETROM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_NETROM) == (8), "NET_NETROM != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_NETROM 8
#endif
#if defined(NET_NETROM) || (defined(HAVE_DECL_NET_NETROM) && HAVE_DECL_NET_NETROM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_NETROM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_NETROM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_NETROM)
#endif
#if defined(NET_AX25) || (defined(HAVE_DECL_NET_AX25) && HAVE_DECL_NET_AX25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_AX25) == (9), "NET_AX25 != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_AX25 9
#endif
#if defined(NET_AX25) || (defined(HAVE_DECL_NET_AX25) && HAVE_DECL_NET_AX25)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_AX25)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_AX25"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_AX25)
#endif
#if defined(NET_BRIDGE) || (defined(HAVE_DECL_NET_BRIDGE) && HAVE_DECL_NET_BRIDGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_BRIDGE) == (10), "NET_BRIDGE != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_BRIDGE 10
#endif
#if defined(NET_BRIDGE) || (defined(HAVE_DECL_NET_BRIDGE) && HAVE_DECL_NET_BRIDGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_BRIDGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_BRIDGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_BRIDGE)
#endif
#if defined(NET_ROSE) || (defined(HAVE_DECL_NET_ROSE) && HAVE_DECL_NET_ROSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_ROSE) == (11), "NET_ROSE != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_ROSE 11
#endif
#if defined(NET_ROSE) || (defined(HAVE_DECL_NET_ROSE) && HAVE_DECL_NET_ROSE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_ROSE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_ROSE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_ROSE)
#endif
#if defined(NET_IPV6) || (defined(HAVE_DECL_NET_IPV6) && HAVE_DECL_NET_IPV6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IPV6) == (12), "NET_IPV6 != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IPV6 12
#endif
#if defined(NET_IPV6) || (defined(HAVE_DECL_NET_IPV6) && HAVE_DECL_NET_IPV6)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IPV6)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IPV6"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IPV6)
#endif
#if defined(NET_X25) || (defined(HAVE_DECL_NET_X25) && HAVE_DECL_NET_X25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_X25) == (13), "NET_X25 != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_X25 13
#endif
#if defined(NET_X25) || (defined(HAVE_DECL_NET_X25) && HAVE_DECL_NET_X25)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_X25)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_X25"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_X25)
#endif
#if defined(NET_TR) || (defined(HAVE_DECL_NET_TR) && HAVE_DECL_NET_TR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_TR) == (14), "NET_TR != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_TR 14
#endif
#if defined(NET_TR) || (defined(HAVE_DECL_NET_TR) && HAVE_DECL_NET_TR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_TR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_TR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_TR)
#endif
#if defined(NET_DECNET) || (defined(HAVE_DECL_NET_DECNET) && HAVE_DECL_NET_DECNET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_DECNET) == (15), "NET_DECNET != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_DECNET 15
#endif
#if defined(NET_DECNET) || (defined(HAVE_DECL_NET_DECNET) && HAVE_DECL_NET_DECNET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_DECNET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_DECNET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_DECNET)
#endif
#if defined(NET_ECONET) || (defined(HAVE_DECL_NET_ECONET) && HAVE_DECL_NET_ECONET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_ECONET) == (16), "NET_ECONET != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_ECONET 16
#endif
#if defined(NET_ECONET) || (defined(HAVE_DECL_NET_ECONET) && HAVE_DECL_NET_ECONET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_ECONET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_ECONET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_ECONET)
#endif
#if defined(NET_SCTP) || (defined(HAVE_DECL_NET_SCTP) && HAVE_DECL_NET_SCTP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_SCTP) == (17), "NET_SCTP != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_SCTP 17
#endif
#if defined(NET_SCTP) || (defined(HAVE_DECL_NET_SCTP) && HAVE_DECL_NET_SCTP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_SCTP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_SCTP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_SCTP)
#endif
#if defined(NET_LLC) || (defined(HAVE_DECL_NET_LLC) && HAVE_DECL_NET_LLC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_LLC) == (18), "NET_LLC != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_LLC 18
#endif
#if defined(NET_LLC) || (defined(HAVE_DECL_NET_LLC) && HAVE_DECL_NET_LLC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_LLC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_LLC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_LLC)
#endif
#if defined(NET_NETFILTER) || (defined(HAVE_DECL_NET_NETFILTER) && HAVE_DECL_NET_NETFILTER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_NETFILTER) == (19), "NET_NETFILTER != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_NETFILTER 19
#endif
#if defined(NET_NETFILTER) || (defined(HAVE_DECL_NET_NETFILTER) && HAVE_DECL_NET_NETFILTER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_NETFILTER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_NETFILTER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_NETFILTER)
#endif
#if defined(NET_DCCP) || (defined(HAVE_DECL_NET_DCCP) && HAVE_DECL_NET_DCCP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_DCCP) == (20), "NET_DCCP != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_DCCP 20
#endif
#if defined(NET_DCCP) || (defined(HAVE_DECL_NET_DCCP) && HAVE_DECL_NET_DCCP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_DCCP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_DCCP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_DCCP)
#endif
#if defined(NET_IRDA) || (defined(HAVE_DECL_NET_IRDA) && HAVE_DECL_NET_IRDA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_IRDA) == (412), "NET_IRDA != 412");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_IRDA 412
#endif
#if defined(NET_IRDA) || (defined(HAVE_DECL_NET_IRDA) && HAVE_DECL_NET_IRDA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NET_IRDA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NET_IRDA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NET_IRDA)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sysctl_net in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sysctl_net_xdata[] = {

 XLAT(NET_CORE),
 #define XLAT_VAL_0 ((unsigned) (NET_CORE))
 #define XLAT_STR_0 STRINGIFY(NET_CORE)

 XLAT(NET_ETHER),
 #define XLAT_VAL_1 ((unsigned) (NET_ETHER))
 #define XLAT_STR_1 STRINGIFY(NET_ETHER)

 XLAT(NET_802),
 #define XLAT_VAL_2 ((unsigned) (NET_802))
 #define XLAT_STR_2 STRINGIFY(NET_802)

 XLAT(NET_UNIX),
 #define XLAT_VAL_3 ((unsigned) (NET_UNIX))
 #define XLAT_STR_3 STRINGIFY(NET_UNIX)

 XLAT(NET_IPV4),
 #define XLAT_VAL_4 ((unsigned) (NET_IPV4))
 #define XLAT_STR_4 STRINGIFY(NET_IPV4)

 XLAT(NET_IPX),
 #define XLAT_VAL_5 ((unsigned) (NET_IPX))
 #define XLAT_STR_5 STRINGIFY(NET_IPX)

 XLAT(NET_ATALK),
 #define XLAT_VAL_6 ((unsigned) (NET_ATALK))
 #define XLAT_STR_6 STRINGIFY(NET_ATALK)

 XLAT(NET_NETROM),
 #define XLAT_VAL_7 ((unsigned) (NET_NETROM))
 #define XLAT_STR_7 STRINGIFY(NET_NETROM)

 XLAT(NET_AX25),
 #define XLAT_VAL_8 ((unsigned) (NET_AX25))
 #define XLAT_STR_8 STRINGIFY(NET_AX25)

 XLAT(NET_BRIDGE),
 #define XLAT_VAL_9 ((unsigned) (NET_BRIDGE))
 #define XLAT_STR_9 STRINGIFY(NET_BRIDGE)

 XLAT(NET_ROSE),
 #define XLAT_VAL_10 ((unsigned) (NET_ROSE))
 #define XLAT_STR_10 STRINGIFY(NET_ROSE)

 XLAT(NET_IPV6),
 #define XLAT_VAL_11 ((unsigned) (NET_IPV6))
 #define XLAT_STR_11 STRINGIFY(NET_IPV6)

 XLAT(NET_X25),
 #define XLAT_VAL_12 ((unsigned) (NET_X25))
 #define XLAT_STR_12 STRINGIFY(NET_X25)

 XLAT(NET_TR),
 #define XLAT_VAL_13 ((unsigned) (NET_TR))
 #define XLAT_STR_13 STRINGIFY(NET_TR)

 XLAT(NET_DECNET),
 #define XLAT_VAL_14 ((unsigned) (NET_DECNET))
 #define XLAT_STR_14 STRINGIFY(NET_DECNET)

 XLAT(NET_ECONET),
 #define XLAT_VAL_15 ((unsigned) (NET_ECONET))
 #define XLAT_STR_15 STRINGIFY(NET_ECONET)



 XLAT(NET_SCTP),
 #define XLAT_VAL_16 ((unsigned) (NET_SCTP))
 #define XLAT_STR_16 STRINGIFY(NET_SCTP)

 XLAT(NET_LLC),
 #define XLAT_VAL_17 ((unsigned) (NET_LLC))
 #define XLAT_STR_17 STRINGIFY(NET_LLC)

 XLAT(NET_NETFILTER),
 #define XLAT_VAL_18 ((unsigned) (NET_NETFILTER))
 #define XLAT_STR_18 STRINGIFY(NET_NETFILTER)

 XLAT(NET_DCCP),
 #define XLAT_VAL_19 ((unsigned) (NET_DCCP))
 #define XLAT_STR_19 STRINGIFY(NET_DCCP)

 XLAT(NET_IRDA),
 #define XLAT_VAL_20 ((unsigned) (NET_IRDA))
 #define XLAT_STR_20 STRINGIFY(NET_IRDA)
};
static
const struct xlat sysctl_net[1] = { {
 .data = sysctl_net_xdata,
 .size = ARRAY_SIZE(sysctl_net_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
