/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_key_dead_keys.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(K_DGRAVE) || (defined(HAVE_DECL_K_DGRAVE) && HAVE_DECL_K_DGRAVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DGRAVE) == (K(KT_DEAD,0)), "K_DGRAVE != K(KT_DEAD,0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DGRAVE K(KT_DEAD,0)
#endif
#if defined(K_DGRAVE) || (defined(HAVE_DECL_K_DGRAVE) && HAVE_DECL_K_DGRAVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DGRAVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DGRAVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DGRAVE)
#endif
#if defined(K_DACUTE) || (defined(HAVE_DECL_K_DACUTE) && HAVE_DECL_K_DACUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DACUTE) == (K(KT_DEAD,1)), "K_DACUTE != K(KT_DEAD,1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DACUTE K(KT_DEAD,1)
#endif
#if defined(K_DACUTE) || (defined(HAVE_DECL_K_DACUTE) && HAVE_DECL_K_DACUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DACUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DACUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DACUTE)
#endif
#if defined(K_DCIRCM) || (defined(HAVE_DECL_K_DCIRCM) && HAVE_DECL_K_DCIRCM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DCIRCM) == (K(KT_DEAD,2)), "K_DCIRCM != K(KT_DEAD,2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DCIRCM K(KT_DEAD,2)
#endif
#if defined(K_DCIRCM) || (defined(HAVE_DECL_K_DCIRCM) && HAVE_DECL_K_DCIRCM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DCIRCM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DCIRCM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DCIRCM)
#endif
#if defined(K_DTILDE) || (defined(HAVE_DECL_K_DTILDE) && HAVE_DECL_K_DTILDE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DTILDE) == (K(KT_DEAD,3)), "K_DTILDE != K(KT_DEAD,3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DTILDE K(KT_DEAD,3)
#endif
#if defined(K_DTILDE) || (defined(HAVE_DECL_K_DTILDE) && HAVE_DECL_K_DTILDE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DTILDE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DTILDE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DTILDE)
#endif
#if defined(K_DDIERE) || (defined(HAVE_DECL_K_DDIERE) && HAVE_DECL_K_DDIERE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DDIERE) == (K(KT_DEAD,4)), "K_DDIERE != K(KT_DEAD,4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DDIERE K(KT_DEAD,4)
#endif
#if defined(K_DDIERE) || (defined(HAVE_DECL_K_DDIERE) && HAVE_DECL_K_DDIERE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DDIERE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DDIERE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DDIERE)
#endif
#if defined(K_DCEDIL) || (defined(HAVE_DECL_K_DCEDIL) && HAVE_DECL_K_DCEDIL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DCEDIL) == (K(KT_DEAD,5)), "K_DCEDIL != K(KT_DEAD,5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DCEDIL K(KT_DEAD,5)
#endif
#if defined(K_DCEDIL) || (defined(HAVE_DECL_K_DCEDIL) && HAVE_DECL_K_DCEDIL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DCEDIL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DCEDIL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DCEDIL)
#endif
#if defined(K_DMACRON) || (defined(HAVE_DECL_K_DMACRON) && HAVE_DECL_K_DMACRON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DMACRON) == (K(KT_DEAD,6)), "K_DMACRON != K(KT_DEAD,6)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DMACRON K(KT_DEAD,6)
#endif
#if defined(K_DMACRON) || (defined(HAVE_DECL_K_DMACRON) && HAVE_DECL_K_DMACRON)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DMACRON)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DMACRON"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DMACRON)
#endif
#if defined(K_DBREVE) || (defined(HAVE_DECL_K_DBREVE) && HAVE_DECL_K_DBREVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DBREVE) == (K(KT_DEAD,7)), "K_DBREVE != K(KT_DEAD,7)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DBREVE K(KT_DEAD,7)
#endif
#if defined(K_DBREVE) || (defined(HAVE_DECL_K_DBREVE) && HAVE_DECL_K_DBREVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DBREVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DBREVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DBREVE)
#endif
#if defined(K_DABDOT) || (defined(HAVE_DECL_K_DABDOT) && HAVE_DECL_K_DABDOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DABDOT) == (K(KT_DEAD,8)), "K_DABDOT != K(KT_DEAD,8)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DABDOT K(KT_DEAD,8)
#endif
#if defined(K_DABDOT) || (defined(HAVE_DECL_K_DABDOT) && HAVE_DECL_K_DABDOT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DABDOT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DABDOT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DABDOT)
#endif
#if defined(K_DABRING) || (defined(HAVE_DECL_K_DABRING) && HAVE_DECL_K_DABRING)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DABRING) == (K(KT_DEAD,9)), "K_DABRING != K(KT_DEAD,9)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DABRING K(KT_DEAD,9)
#endif
#if defined(K_DABRING) || (defined(HAVE_DECL_K_DABRING) && HAVE_DECL_K_DABRING)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DABRING)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DABRING"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DABRING)
#endif
#if defined(K_DDBACUTE) || (defined(HAVE_DECL_K_DDBACUTE) && HAVE_DECL_K_DDBACUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DDBACUTE) == (K(KT_DEAD,10)), "K_DDBACUTE != K(KT_DEAD,10)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DDBACUTE K(KT_DEAD,10)
#endif
#if defined(K_DDBACUTE) || (defined(HAVE_DECL_K_DDBACUTE) && HAVE_DECL_K_DDBACUTE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DDBACUTE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DDBACUTE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DDBACUTE)
#endif
#if defined(K_DCARON) || (defined(HAVE_DECL_K_DCARON) && HAVE_DECL_K_DCARON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DCARON) == (K(KT_DEAD,11)), "K_DCARON != K(KT_DEAD,11)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DCARON K(KT_DEAD,11)
#endif
#if defined(K_DCARON) || (defined(HAVE_DECL_K_DCARON) && HAVE_DECL_K_DCARON)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DCARON)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DCARON"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DCARON)
#endif
#if defined(K_DOGONEK) || (defined(HAVE_DECL_K_DOGONEK) && HAVE_DECL_K_DOGONEK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DOGONEK) == (K(KT_DEAD,12)), "K_DOGONEK != K(KT_DEAD,12)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DOGONEK K(KT_DEAD,12)
#endif
#if defined(K_DOGONEK) || (defined(HAVE_DECL_K_DOGONEK) && HAVE_DECL_K_DOGONEK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DOGONEK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DOGONEK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DOGONEK)
#endif
#if defined(K_DIOTA) || (defined(HAVE_DECL_K_DIOTA) && HAVE_DECL_K_DIOTA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DIOTA) == (K(KT_DEAD,13)), "K_DIOTA != K(KT_DEAD,13)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DIOTA K(KT_DEAD,13)
#endif
#if defined(K_DIOTA) || (defined(HAVE_DECL_K_DIOTA) && HAVE_DECL_K_DIOTA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DIOTA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DIOTA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DIOTA)
#endif
#if defined(K_DVOICED) || (defined(HAVE_DECL_K_DVOICED) && HAVE_DECL_K_DVOICED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DVOICED) == (K(KT_DEAD,14)), "K_DVOICED != K(KT_DEAD,14)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DVOICED K(KT_DEAD,14)
#endif
#if defined(K_DVOICED) || (defined(HAVE_DECL_K_DVOICED) && HAVE_DECL_K_DVOICED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DVOICED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DVOICED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DVOICED)
#endif
#if defined(K_DSEMVOICED) || (defined(HAVE_DECL_K_DSEMVOICED) && HAVE_DECL_K_DSEMVOICED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DSEMVOICED) == (K(KT_DEAD,15)), "K_DSEMVOICED != K(KT_DEAD,15)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DSEMVOICED K(KT_DEAD,15)
#endif
#if defined(K_DSEMVOICED) || (defined(HAVE_DECL_K_DSEMVOICED) && HAVE_DECL_K_DSEMVOICED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DSEMVOICED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DSEMVOICED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DSEMVOICED)
#endif
#if defined(K_DBEDOT) || (defined(HAVE_DECL_K_DBEDOT) && HAVE_DECL_K_DBEDOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DBEDOT) == (K(KT_DEAD,16)), "K_DBEDOT != K(KT_DEAD,16)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DBEDOT K(KT_DEAD,16)
#endif
#if defined(K_DBEDOT) || (defined(HAVE_DECL_K_DBEDOT) && HAVE_DECL_K_DBEDOT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DBEDOT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DBEDOT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DBEDOT)
#endif
#if defined(K_DHOOK) || (defined(HAVE_DECL_K_DHOOK) && HAVE_DECL_K_DHOOK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DHOOK) == (K(KT_DEAD,17)), "K_DHOOK != K(KT_DEAD,17)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DHOOK K(KT_DEAD,17)
#endif
#if defined(K_DHOOK) || (defined(HAVE_DECL_K_DHOOK) && HAVE_DECL_K_DHOOK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DHOOK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DHOOK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DHOOK)
#endif
#if defined(K_DHORN) || (defined(HAVE_DECL_K_DHORN) && HAVE_DECL_K_DHORN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DHORN) == (K(KT_DEAD,18)), "K_DHORN != K(KT_DEAD,18)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DHORN K(KT_DEAD,18)
#endif
#if defined(K_DHORN) || (defined(HAVE_DECL_K_DHORN) && HAVE_DECL_K_DHORN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DHORN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DHORN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DHORN)
#endif
#if defined(K_DSTROKE) || (defined(HAVE_DECL_K_DSTROKE) && HAVE_DECL_K_DSTROKE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DSTROKE) == (K(KT_DEAD,19)), "K_DSTROKE != K(KT_DEAD,19)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DSTROKE K(KT_DEAD,19)
#endif
#if defined(K_DSTROKE) || (defined(HAVE_DECL_K_DSTROKE) && HAVE_DECL_K_DSTROKE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DSTROKE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DSTROKE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DSTROKE)
#endif
#if defined(K_DABCOMMA) || (defined(HAVE_DECL_K_DABCOMMA) && HAVE_DECL_K_DABCOMMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DABCOMMA) == (K(KT_DEAD,20)), "K_DABCOMMA != K(KT_DEAD,20)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DABCOMMA K(KT_DEAD,20)
#endif
#if defined(K_DABCOMMA) || (defined(HAVE_DECL_K_DABCOMMA) && HAVE_DECL_K_DABCOMMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DABCOMMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DABCOMMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DABCOMMA)
#endif
#if defined(K_DABREVCOMMA) || (defined(HAVE_DECL_K_DABREVCOMMA) && HAVE_DECL_K_DABREVCOMMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DABREVCOMMA) == (K(KT_DEAD,21)), "K_DABREVCOMMA != K(KT_DEAD,21)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DABREVCOMMA K(KT_DEAD,21)
#endif
#if defined(K_DABREVCOMMA) || (defined(HAVE_DECL_K_DABREVCOMMA) && HAVE_DECL_K_DABREVCOMMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DABREVCOMMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DABREVCOMMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DABREVCOMMA)
#endif
#if defined(K_DDBGRAVE) || (defined(HAVE_DECL_K_DDBGRAVE) && HAVE_DECL_K_DDBGRAVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DDBGRAVE) == (K(KT_DEAD,22)), "K_DDBGRAVE != K(KT_DEAD,22)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DDBGRAVE K(KT_DEAD,22)
#endif
#if defined(K_DDBGRAVE) || (defined(HAVE_DECL_K_DDBGRAVE) && HAVE_DECL_K_DDBGRAVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DDBGRAVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DDBGRAVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DDBGRAVE)
#endif
#if defined(K_DINVBREVE) || (defined(HAVE_DECL_K_DINVBREVE) && HAVE_DECL_K_DINVBREVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DINVBREVE) == (K(KT_DEAD,23)), "K_DINVBREVE != K(KT_DEAD,23)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DINVBREVE K(KT_DEAD,23)
#endif
#if defined(K_DINVBREVE) || (defined(HAVE_DECL_K_DINVBREVE) && HAVE_DECL_K_DINVBREVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DINVBREVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DINVBREVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DINVBREVE)
#endif
#if defined(K_DBECOMMA) || (defined(HAVE_DECL_K_DBECOMMA) && HAVE_DECL_K_DBECOMMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DBECOMMA) == (K(KT_DEAD,24)), "K_DBECOMMA != K(KT_DEAD,24)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DBECOMMA K(KT_DEAD,24)
#endif
#if defined(K_DBECOMMA) || (defined(HAVE_DECL_K_DBECOMMA) && HAVE_DECL_K_DBECOMMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DBECOMMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DBECOMMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DBECOMMA)
#endif
#if defined(K_DCURRENCY) || (defined(HAVE_DECL_K_DCURRENCY) && HAVE_DECL_K_DCURRENCY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DCURRENCY) == (K(KT_DEAD,25)), "K_DCURRENCY != K(KT_DEAD,25)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DCURRENCY K(KT_DEAD,25)
#endif
#if defined(K_DCURRENCY) || (defined(HAVE_DECL_K_DCURRENCY) && HAVE_DECL_K_DCURRENCY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DCURRENCY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DCURRENCY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DCURRENCY)
#endif
#if defined(K_DGREEK) || (defined(HAVE_DECL_K_DGREEK) && HAVE_DECL_K_DGREEK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_DGREEK) == (K(KT_DEAD,26)), "K_DGREEK != K(KT_DEAD,26)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_DGREEK K(KT_DEAD,26)
#endif
#if defined(K_DGREEK) || (defined(HAVE_DECL_K_DGREEK) && HAVE_DECL_K_DGREEK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_DGREEK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_DGREEK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_DGREEK)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat kd_key_dead_keys in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_key_dead_keys_xdata[] = {
 XLAT(K_DGRAVE),
 #define XLAT_VAL_0 ((unsigned) (K_DGRAVE))
 #define XLAT_STR_0 STRINGIFY(K_DGRAVE)
 XLAT(K_DACUTE),
 #define XLAT_VAL_1 ((unsigned) (K_DACUTE))
 #define XLAT_STR_1 STRINGIFY(K_DACUTE)
 XLAT(K_DCIRCM),
 #define XLAT_VAL_2 ((unsigned) (K_DCIRCM))
 #define XLAT_STR_2 STRINGIFY(K_DCIRCM)
 XLAT(K_DTILDE),
 #define XLAT_VAL_3 ((unsigned) (K_DTILDE))
 #define XLAT_STR_3 STRINGIFY(K_DTILDE)
 XLAT(K_DDIERE),
 #define XLAT_VAL_4 ((unsigned) (K_DDIERE))
 #define XLAT_STR_4 STRINGIFY(K_DDIERE)
 XLAT(K_DCEDIL),
 #define XLAT_VAL_5 ((unsigned) (K_DCEDIL))
 #define XLAT_STR_5 STRINGIFY(K_DCEDIL)
 XLAT(K_DMACRON),
 #define XLAT_VAL_6 ((unsigned) (K_DMACRON))
 #define XLAT_STR_6 STRINGIFY(K_DMACRON)
 XLAT(K_DBREVE),
 #define XLAT_VAL_7 ((unsigned) (K_DBREVE))
 #define XLAT_STR_7 STRINGIFY(K_DBREVE)
 XLAT(K_DABDOT),
 #define XLAT_VAL_8 ((unsigned) (K_DABDOT))
 #define XLAT_STR_8 STRINGIFY(K_DABDOT)
 XLAT(K_DABRING),
 #define XLAT_VAL_9 ((unsigned) (K_DABRING))
 #define XLAT_STR_9 STRINGIFY(K_DABRING)
 XLAT(K_DDBACUTE),
 #define XLAT_VAL_10 ((unsigned) (K_DDBACUTE))
 #define XLAT_STR_10 STRINGIFY(K_DDBACUTE)
 XLAT(K_DCARON),
 #define XLAT_VAL_11 ((unsigned) (K_DCARON))
 #define XLAT_STR_11 STRINGIFY(K_DCARON)
 XLAT(K_DOGONEK),
 #define XLAT_VAL_12 ((unsigned) (K_DOGONEK))
 #define XLAT_STR_12 STRINGIFY(K_DOGONEK)
 XLAT(K_DIOTA),
 #define XLAT_VAL_13 ((unsigned) (K_DIOTA))
 #define XLAT_STR_13 STRINGIFY(K_DIOTA)
 XLAT(K_DVOICED),
 #define XLAT_VAL_14 ((unsigned) (K_DVOICED))
 #define XLAT_STR_14 STRINGIFY(K_DVOICED)
 XLAT(K_DSEMVOICED),
 #define XLAT_VAL_15 ((unsigned) (K_DSEMVOICED))
 #define XLAT_STR_15 STRINGIFY(K_DSEMVOICED)
 XLAT(K_DBEDOT),
 #define XLAT_VAL_16 ((unsigned) (K_DBEDOT))
 #define XLAT_STR_16 STRINGIFY(K_DBEDOT)
 XLAT(K_DHOOK),
 #define XLAT_VAL_17 ((unsigned) (K_DHOOK))
 #define XLAT_STR_17 STRINGIFY(K_DHOOK)
 XLAT(K_DHORN),
 #define XLAT_VAL_18 ((unsigned) (K_DHORN))
 #define XLAT_STR_18 STRINGIFY(K_DHORN)
 XLAT(K_DSTROKE),
 #define XLAT_VAL_19 ((unsigned) (K_DSTROKE))
 #define XLAT_STR_19 STRINGIFY(K_DSTROKE)
 XLAT(K_DABCOMMA),
 #define XLAT_VAL_20 ((unsigned) (K_DABCOMMA))
 #define XLAT_STR_20 STRINGIFY(K_DABCOMMA)
 XLAT(K_DABREVCOMMA),
 #define XLAT_VAL_21 ((unsigned) (K_DABREVCOMMA))
 #define XLAT_STR_21 STRINGIFY(K_DABREVCOMMA)
 XLAT(K_DDBGRAVE),
 #define XLAT_VAL_22 ((unsigned) (K_DDBGRAVE))
 #define XLAT_STR_22 STRINGIFY(K_DDBGRAVE)
 XLAT(K_DINVBREVE),
 #define XLAT_VAL_23 ((unsigned) (K_DINVBREVE))
 #define XLAT_STR_23 STRINGIFY(K_DINVBREVE)
 XLAT(K_DBECOMMA),
 #define XLAT_VAL_24 ((unsigned) (K_DBECOMMA))
 #define XLAT_STR_24 STRINGIFY(K_DBECOMMA)
 XLAT(K_DCURRENCY),
 #define XLAT_VAL_25 ((unsigned) (K_DCURRENCY))
 #define XLAT_STR_25 STRINGIFY(K_DCURRENCY)
 XLAT(K_DGREEK),
 #define XLAT_VAL_26 ((unsigned) (K_DGREEK))
 #define XLAT_STR_26 STRINGIFY(K_DGREEK)
};
static
const struct xlat kd_key_dead_keys[1] = { {
 .data = kd_key_dead_keys_xdata,
 .size = ARRAY_SIZE(kd_key_dead_keys_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
