/* Generated by ./src/xlat/gen.sh from ./src/xlat/ethernet_protocols.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ETH_P_802_3) || (defined(HAVE_DECL_ETH_P_802_3) && HAVE_DECL_ETH_P_802_3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_802_3) == (0x0001), "ETH_P_802_3 != 0x0001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_802_3 0x0001
#endif
#if defined(ETH_P_802_3) || (defined(HAVE_DECL_ETH_P_802_3) && HAVE_DECL_ETH_P_802_3)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_802_3)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_802_3"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_802_3)
#endif
#if defined(ETH_P_AX25) || (defined(HAVE_DECL_ETH_P_AX25) && HAVE_DECL_ETH_P_AX25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_AX25) == (0x0002), "ETH_P_AX25 != 0x0002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_AX25 0x0002
#endif
#if defined(ETH_P_AX25) || (defined(HAVE_DECL_ETH_P_AX25) && HAVE_DECL_ETH_P_AX25)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_AX25)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_AX25"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_AX25)
#endif
#if defined(ETH_P_ALL) || (defined(HAVE_DECL_ETH_P_ALL) && HAVE_DECL_ETH_P_ALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_ALL) == (0x0003), "ETH_P_ALL != 0x0003");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_ALL 0x0003
#endif
#if defined(ETH_P_ALL) || (defined(HAVE_DECL_ETH_P_ALL) && HAVE_DECL_ETH_P_ALL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_ALL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_ALL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_ALL)
#endif
#if defined(ETH_P_802_2) || (defined(HAVE_DECL_ETH_P_802_2) && HAVE_DECL_ETH_P_802_2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_802_2) == (0x0004), "ETH_P_802_2 != 0x0004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_802_2 0x0004
#endif
#if defined(ETH_P_802_2) || (defined(HAVE_DECL_ETH_P_802_2) && HAVE_DECL_ETH_P_802_2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_802_2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_802_2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_802_2)
#endif
#if defined(ETH_P_SNAP) || (defined(HAVE_DECL_ETH_P_SNAP) && HAVE_DECL_ETH_P_SNAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_SNAP) == (0x0005), "ETH_P_SNAP != 0x0005");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_SNAP 0x0005
#endif
#if defined(ETH_P_SNAP) || (defined(HAVE_DECL_ETH_P_SNAP) && HAVE_DECL_ETH_P_SNAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_SNAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_SNAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_SNAP)
#endif
#if defined(ETH_P_DDCMP) || (defined(HAVE_DECL_ETH_P_DDCMP) && HAVE_DECL_ETH_P_DDCMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_DDCMP) == (0x0006), "ETH_P_DDCMP != 0x0006");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_DDCMP 0x0006
#endif
#if defined(ETH_P_DDCMP) || (defined(HAVE_DECL_ETH_P_DDCMP) && HAVE_DECL_ETH_P_DDCMP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_DDCMP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_DDCMP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_DDCMP)
#endif
#if defined(ETH_P_WAN_PPP) || (defined(HAVE_DECL_ETH_P_WAN_PPP) && HAVE_DECL_ETH_P_WAN_PPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_WAN_PPP) == (0x0007), "ETH_P_WAN_PPP != 0x0007");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_WAN_PPP 0x0007
#endif
#if defined(ETH_P_WAN_PPP) || (defined(HAVE_DECL_ETH_P_WAN_PPP) && HAVE_DECL_ETH_P_WAN_PPP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_WAN_PPP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_WAN_PPP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_WAN_PPP)
#endif
#if defined(ETH_P_PPP_MP) || (defined(HAVE_DECL_ETH_P_PPP_MP) && HAVE_DECL_ETH_P_PPP_MP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PPP_MP) == (0x0008), "ETH_P_PPP_MP != 0x0008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PPP_MP 0x0008
#endif
#if defined(ETH_P_PPP_MP) || (defined(HAVE_DECL_ETH_P_PPP_MP) && HAVE_DECL_ETH_P_PPP_MP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PPP_MP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PPP_MP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PPP_MP)
#endif
#if defined(ETH_P_LOCALTALK) || (defined(HAVE_DECL_ETH_P_LOCALTALK) && HAVE_DECL_ETH_P_LOCALTALK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_LOCALTALK) == (0x0009), "ETH_P_LOCALTALK != 0x0009");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_LOCALTALK 0x0009
#endif
#if defined(ETH_P_LOCALTALK) || (defined(HAVE_DECL_ETH_P_LOCALTALK) && HAVE_DECL_ETH_P_LOCALTALK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_LOCALTALK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_LOCALTALK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_LOCALTALK)
#endif
#if defined(ETH_P_CAN) || (defined(HAVE_DECL_ETH_P_CAN) && HAVE_DECL_ETH_P_CAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_CAN) == (0x000C), "ETH_P_CAN != 0x000C");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_CAN 0x000C
#endif
#if defined(ETH_P_CAN) || (defined(HAVE_DECL_ETH_P_CAN) && HAVE_DECL_ETH_P_CAN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_CAN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_CAN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_CAN)
#endif
#if defined(ETH_P_CANFD) || (defined(HAVE_DECL_ETH_P_CANFD) && HAVE_DECL_ETH_P_CANFD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_CANFD) == (0x000D), "ETH_P_CANFD != 0x000D");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_CANFD 0x000D
#endif
#if defined(ETH_P_CANFD) || (defined(HAVE_DECL_ETH_P_CANFD) && HAVE_DECL_ETH_P_CANFD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_CANFD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_CANFD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_CANFD)
#endif
#if defined(ETH_P_PPPTALK) || (defined(HAVE_DECL_ETH_P_PPPTALK) && HAVE_DECL_ETH_P_PPPTALK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PPPTALK) == (0x0010), "ETH_P_PPPTALK != 0x0010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PPPTALK 0x0010
#endif
#if defined(ETH_P_PPPTALK) || (defined(HAVE_DECL_ETH_P_PPPTALK) && HAVE_DECL_ETH_P_PPPTALK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PPPTALK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PPPTALK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PPPTALK)
#endif
#if defined(ETH_P_TR_802_2) || (defined(HAVE_DECL_ETH_P_TR_802_2) && HAVE_DECL_ETH_P_TR_802_2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_TR_802_2) == (0x0011), "ETH_P_TR_802_2 != 0x0011");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_TR_802_2 0x0011
#endif
#if defined(ETH_P_TR_802_2) || (defined(HAVE_DECL_ETH_P_TR_802_2) && HAVE_DECL_ETH_P_TR_802_2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_TR_802_2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_TR_802_2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_TR_802_2)
#endif
#if defined(ETH_P_MOBITEX) || (defined(HAVE_DECL_ETH_P_MOBITEX) && HAVE_DECL_ETH_P_MOBITEX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_MOBITEX) == (0x0015), "ETH_P_MOBITEX != 0x0015");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_MOBITEX 0x0015
#endif
#if defined(ETH_P_MOBITEX) || (defined(HAVE_DECL_ETH_P_MOBITEX) && HAVE_DECL_ETH_P_MOBITEX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_MOBITEX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_MOBITEX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_MOBITEX)
#endif
#if defined(ETH_P_CONTROL) || (defined(HAVE_DECL_ETH_P_CONTROL) && HAVE_DECL_ETH_P_CONTROL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_CONTROL) == (0x0016), "ETH_P_CONTROL != 0x0016");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_CONTROL 0x0016
#endif
#if defined(ETH_P_CONTROL) || (defined(HAVE_DECL_ETH_P_CONTROL) && HAVE_DECL_ETH_P_CONTROL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_CONTROL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_CONTROL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_CONTROL)
#endif
#if defined(ETH_P_IRDA) || (defined(HAVE_DECL_ETH_P_IRDA) && HAVE_DECL_ETH_P_IRDA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_IRDA) == (0x0017), "ETH_P_IRDA != 0x0017");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_IRDA 0x0017
#endif
#if defined(ETH_P_IRDA) || (defined(HAVE_DECL_ETH_P_IRDA) && HAVE_DECL_ETH_P_IRDA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_IRDA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_IRDA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_IRDA)
#endif
#if defined(ETH_P_ECONET) || (defined(HAVE_DECL_ETH_P_ECONET) && HAVE_DECL_ETH_P_ECONET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_ECONET) == (0x0018), "ETH_P_ECONET != 0x0018");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_ECONET 0x0018
#endif
#if defined(ETH_P_ECONET) || (defined(HAVE_DECL_ETH_P_ECONET) && HAVE_DECL_ETH_P_ECONET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_ECONET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_ECONET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_ECONET)
#endif
#if defined(ETH_P_HDLC) || (defined(HAVE_DECL_ETH_P_HDLC) && HAVE_DECL_ETH_P_HDLC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_HDLC) == (0x0019), "ETH_P_HDLC != 0x0019");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_HDLC 0x0019
#endif
#if defined(ETH_P_HDLC) || (defined(HAVE_DECL_ETH_P_HDLC) && HAVE_DECL_ETH_P_HDLC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_HDLC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_HDLC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_HDLC)
#endif
#if defined(ETH_P_ARCNET) || (defined(HAVE_DECL_ETH_P_ARCNET) && HAVE_DECL_ETH_P_ARCNET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_ARCNET) == (0x001A), "ETH_P_ARCNET != 0x001A");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_ARCNET 0x001A
#endif
#if defined(ETH_P_ARCNET) || (defined(HAVE_DECL_ETH_P_ARCNET) && HAVE_DECL_ETH_P_ARCNET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_ARCNET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_ARCNET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_ARCNET)
#endif
#if defined(ETH_P_DSA) || (defined(HAVE_DECL_ETH_P_DSA) && HAVE_DECL_ETH_P_DSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_DSA) == (0x001B), "ETH_P_DSA != 0x001B");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_DSA 0x001B
#endif
#if defined(ETH_P_DSA) || (defined(HAVE_DECL_ETH_P_DSA) && HAVE_DECL_ETH_P_DSA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_DSA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_DSA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_DSA)
#endif
#if defined(ETH_P_TRAILER) || (defined(HAVE_DECL_ETH_P_TRAILER) && HAVE_DECL_ETH_P_TRAILER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_TRAILER) == (0x001C), "ETH_P_TRAILER != 0x001C");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_TRAILER 0x001C
#endif
#if defined(ETH_P_TRAILER) || (defined(HAVE_DECL_ETH_P_TRAILER) && HAVE_DECL_ETH_P_TRAILER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_TRAILER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_TRAILER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_TRAILER)
#endif
#if defined(ETH_P_LOOP) || (defined(HAVE_DECL_ETH_P_LOOP) && HAVE_DECL_ETH_P_LOOP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_LOOP) == (0x0060), "ETH_P_LOOP != 0x0060");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_LOOP 0x0060
#endif
#if defined(ETH_P_LOOP) || (defined(HAVE_DECL_ETH_P_LOOP) && HAVE_DECL_ETH_P_LOOP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_LOOP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_LOOP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_LOOP)
#endif
#if defined(ETH_P_PHONET) || (defined(HAVE_DECL_ETH_P_PHONET) && HAVE_DECL_ETH_P_PHONET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PHONET) == (0x00F5), "ETH_P_PHONET != 0x00F5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PHONET 0x00F5
#endif
#if defined(ETH_P_PHONET) || (defined(HAVE_DECL_ETH_P_PHONET) && HAVE_DECL_ETH_P_PHONET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PHONET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PHONET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PHONET)
#endif
#if defined(ETH_P_IEEE802154) || (defined(HAVE_DECL_ETH_P_IEEE802154) && HAVE_DECL_ETH_P_IEEE802154)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_IEEE802154) == (0x00F6), "ETH_P_IEEE802154 != 0x00F6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_IEEE802154 0x00F6
#endif
#if defined(ETH_P_IEEE802154) || (defined(HAVE_DECL_ETH_P_IEEE802154) && HAVE_DECL_ETH_P_IEEE802154)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_IEEE802154)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_IEEE802154"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_IEEE802154)
#endif
#if defined(ETH_P_CAIF) || (defined(HAVE_DECL_ETH_P_CAIF) && HAVE_DECL_ETH_P_CAIF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_CAIF) == (0x00F7), "ETH_P_CAIF != 0x00F7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_CAIF 0x00F7
#endif
#if defined(ETH_P_CAIF) || (defined(HAVE_DECL_ETH_P_CAIF) && HAVE_DECL_ETH_P_CAIF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_CAIF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_CAIF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_CAIF)
#endif
#if defined(ETH_P_XDSA) || (defined(HAVE_DECL_ETH_P_XDSA) && HAVE_DECL_ETH_P_XDSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_XDSA) == (0x00F8), "ETH_P_XDSA != 0x00F8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_XDSA 0x00F8
#endif
#if defined(ETH_P_XDSA) || (defined(HAVE_DECL_ETH_P_XDSA) && HAVE_DECL_ETH_P_XDSA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_XDSA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_XDSA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_XDSA)
#endif
#if defined(ETH_P_MAP) || (defined(HAVE_DECL_ETH_P_MAP) && HAVE_DECL_ETH_P_MAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_MAP) == (0x00F9), "ETH_P_MAP != 0x00F9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_MAP 0x00F9
#endif
#if defined(ETH_P_MAP) || (defined(HAVE_DECL_ETH_P_MAP) && HAVE_DECL_ETH_P_MAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_MAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_MAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_MAP)
#endif
#if defined(ETH_P_MCTP) || (defined(HAVE_DECL_ETH_P_MCTP) && HAVE_DECL_ETH_P_MCTP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_MCTP) == (0x00FA), "ETH_P_MCTP != 0x00FA");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_MCTP 0x00FA
#endif
#if defined(ETH_P_MCTP) || (defined(HAVE_DECL_ETH_P_MCTP) && HAVE_DECL_ETH_P_MCTP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_MCTP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_MCTP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_MCTP)
#endif
#if defined(ETH_P_PUP) || (defined(HAVE_DECL_ETH_P_PUP) && HAVE_DECL_ETH_P_PUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PUP) == (0x0200), "ETH_P_PUP != 0x0200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PUP 0x0200
#endif
#if defined(ETH_P_PUP) || (defined(HAVE_DECL_ETH_P_PUP) && HAVE_DECL_ETH_P_PUP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PUP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PUP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PUP)
#endif
#if defined(ETH_P_PUPAT) || (defined(HAVE_DECL_ETH_P_PUPAT) && HAVE_DECL_ETH_P_PUPAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PUPAT) == (0x0201), "ETH_P_PUPAT != 0x0201");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PUPAT 0x0201
#endif
#if defined(ETH_P_PUPAT) || (defined(HAVE_DECL_ETH_P_PUPAT) && HAVE_DECL_ETH_P_PUPAT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PUPAT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PUPAT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PUPAT)
#endif
#if defined(ETH_P_802_3_MIN) || (defined(HAVE_DECL_ETH_P_802_3_MIN) && HAVE_DECL_ETH_P_802_3_MIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_802_3_MIN) == (0x0600), "ETH_P_802_3_MIN != 0x0600");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_802_3_MIN 0x0600
#endif
#if defined(ETH_P_802_3_MIN) || (defined(HAVE_DECL_ETH_P_802_3_MIN) && HAVE_DECL_ETH_P_802_3_MIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_802_3_MIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_802_3_MIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_802_3_MIN)
#endif
#if defined(ETH_P_IP) || (defined(HAVE_DECL_ETH_P_IP) && HAVE_DECL_ETH_P_IP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_IP) == (0x0800), "ETH_P_IP != 0x0800");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_IP 0x0800
#endif
#if defined(ETH_P_IP) || (defined(HAVE_DECL_ETH_P_IP) && HAVE_DECL_ETH_P_IP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_IP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_IP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_IP)
#endif
#if defined(ETH_P_X25) || (defined(HAVE_DECL_ETH_P_X25) && HAVE_DECL_ETH_P_X25)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_X25) == (0x0805), "ETH_P_X25 != 0x0805");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_X25 0x0805
#endif
#if defined(ETH_P_X25) || (defined(HAVE_DECL_ETH_P_X25) && HAVE_DECL_ETH_P_X25)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_X25)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_X25"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_X25)
#endif
#if defined(ETH_P_ARP) || (defined(HAVE_DECL_ETH_P_ARP) && HAVE_DECL_ETH_P_ARP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_ARP) == (0x0806), "ETH_P_ARP != 0x0806");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_ARP 0x0806
#endif
#if defined(ETH_P_ARP) || (defined(HAVE_DECL_ETH_P_ARP) && HAVE_DECL_ETH_P_ARP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_ARP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_ARP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_ARP)
#endif
#if defined(ETH_P_BPQ) || (defined(HAVE_DECL_ETH_P_BPQ) && HAVE_DECL_ETH_P_BPQ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_BPQ) == (0x08FF), "ETH_P_BPQ != 0x08FF");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_BPQ 0x08FF
#endif
#if defined(ETH_P_BPQ) || (defined(HAVE_DECL_ETH_P_BPQ) && HAVE_DECL_ETH_P_BPQ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_BPQ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_BPQ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_BPQ)
#endif
#if defined(ETH_P_IEEEPUP) || (defined(HAVE_DECL_ETH_P_IEEEPUP) && HAVE_DECL_ETH_P_IEEEPUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_IEEEPUP) == (0x0a00), "ETH_P_IEEEPUP != 0x0a00");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_IEEEPUP 0x0a00
#endif
#if defined(ETH_P_IEEEPUP) || (defined(HAVE_DECL_ETH_P_IEEEPUP) && HAVE_DECL_ETH_P_IEEEPUP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_IEEEPUP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_IEEEPUP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_IEEEPUP)
#endif
#if defined(ETH_P_IEEEPUPAT) || (defined(HAVE_DECL_ETH_P_IEEEPUPAT) && HAVE_DECL_ETH_P_IEEEPUPAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_IEEEPUPAT) == (0x0a01), "ETH_P_IEEEPUPAT != 0x0a01");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_IEEEPUPAT 0x0a01
#endif
#if defined(ETH_P_IEEEPUPAT) || (defined(HAVE_DECL_ETH_P_IEEEPUPAT) && HAVE_DECL_ETH_P_IEEEPUPAT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_IEEEPUPAT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_IEEEPUPAT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_IEEEPUPAT)
#endif
#if defined(ETH_P_ERSPAN2) || (defined(HAVE_DECL_ETH_P_ERSPAN2) && HAVE_DECL_ETH_P_ERSPAN2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_ERSPAN2) == (0x22EB), "ETH_P_ERSPAN2 != 0x22EB");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_ERSPAN2 0x22EB
#endif
#if defined(ETH_P_ERSPAN2) || (defined(HAVE_DECL_ETH_P_ERSPAN2) && HAVE_DECL_ETH_P_ERSPAN2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_ERSPAN2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_ERSPAN2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_ERSPAN2)
#endif
#if defined(ETH_P_TSN) || (defined(HAVE_DECL_ETH_P_TSN) && HAVE_DECL_ETH_P_TSN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_TSN) == (0x22F0), "ETH_P_TSN != 0x22F0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_TSN 0x22F0
#endif
#if defined(ETH_P_TSN) || (defined(HAVE_DECL_ETH_P_TSN) && HAVE_DECL_ETH_P_TSN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_TSN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_TSN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_TSN)
#endif
#if defined(ETH_P_BATMAN) || (defined(HAVE_DECL_ETH_P_BATMAN) && HAVE_DECL_ETH_P_BATMAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_BATMAN) == (0x4305), "ETH_P_BATMAN != 0x4305");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_BATMAN 0x4305
#endif
#if defined(ETH_P_BATMAN) || (defined(HAVE_DECL_ETH_P_BATMAN) && HAVE_DECL_ETH_P_BATMAN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_BATMAN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_BATMAN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_BATMAN)
#endif
#if defined(ETH_P_DEC) || (defined(HAVE_DECL_ETH_P_DEC) && HAVE_DECL_ETH_P_DEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_DEC) == (0x6000), "ETH_P_DEC != 0x6000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_DEC 0x6000
#endif
#if defined(ETH_P_DEC) || (defined(HAVE_DECL_ETH_P_DEC) && HAVE_DECL_ETH_P_DEC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_DEC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_DEC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_DEC)
#endif
#if defined(ETH_P_DNA_DL) || (defined(HAVE_DECL_ETH_P_DNA_DL) && HAVE_DECL_ETH_P_DNA_DL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_DNA_DL) == (0x6001), "ETH_P_DNA_DL != 0x6001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_DNA_DL 0x6001
#endif
#if defined(ETH_P_DNA_DL) || (defined(HAVE_DECL_ETH_P_DNA_DL) && HAVE_DECL_ETH_P_DNA_DL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_DNA_DL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_DNA_DL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_DNA_DL)
#endif
#if defined(ETH_P_DNA_RC) || (defined(HAVE_DECL_ETH_P_DNA_RC) && HAVE_DECL_ETH_P_DNA_RC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_DNA_RC) == (0x6002), "ETH_P_DNA_RC != 0x6002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_DNA_RC 0x6002
#endif
#if defined(ETH_P_DNA_RC) || (defined(HAVE_DECL_ETH_P_DNA_RC) && HAVE_DECL_ETH_P_DNA_RC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_DNA_RC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_DNA_RC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_DNA_RC)
#endif
#if defined(ETH_P_DNA_RT) || (defined(HAVE_DECL_ETH_P_DNA_RT) && HAVE_DECL_ETH_P_DNA_RT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_DNA_RT) == (0x6003), "ETH_P_DNA_RT != 0x6003");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_DNA_RT 0x6003
#endif
#if defined(ETH_P_DNA_RT) || (defined(HAVE_DECL_ETH_P_DNA_RT) && HAVE_DECL_ETH_P_DNA_RT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_DNA_RT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_DNA_RT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_DNA_RT)
#endif
#if defined(ETH_P_LAT) || (defined(HAVE_DECL_ETH_P_LAT) && HAVE_DECL_ETH_P_LAT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_LAT) == (0x6004), "ETH_P_LAT != 0x6004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_LAT 0x6004
#endif
#if defined(ETH_P_LAT) || (defined(HAVE_DECL_ETH_P_LAT) && HAVE_DECL_ETH_P_LAT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_LAT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_LAT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_LAT)
#endif
#if defined(ETH_P_DIAG) || (defined(HAVE_DECL_ETH_P_DIAG) && HAVE_DECL_ETH_P_DIAG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_DIAG) == (0x6005), "ETH_P_DIAG != 0x6005");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_DIAG 0x6005
#endif
#if defined(ETH_P_DIAG) || (defined(HAVE_DECL_ETH_P_DIAG) && HAVE_DECL_ETH_P_DIAG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_DIAG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_DIAG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_DIAG)
#endif
#if defined(ETH_P_CUST) || (defined(HAVE_DECL_ETH_P_CUST) && HAVE_DECL_ETH_P_CUST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_CUST) == (0x6006), "ETH_P_CUST != 0x6006");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_CUST 0x6006
#endif
#if defined(ETH_P_CUST) || (defined(HAVE_DECL_ETH_P_CUST) && HAVE_DECL_ETH_P_CUST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_CUST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_CUST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_CUST)
#endif
#if defined(ETH_P_SCA) || (defined(HAVE_DECL_ETH_P_SCA) && HAVE_DECL_ETH_P_SCA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_SCA) == (0x6007), "ETH_P_SCA != 0x6007");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_SCA 0x6007
#endif
#if defined(ETH_P_SCA) || (defined(HAVE_DECL_ETH_P_SCA) && HAVE_DECL_ETH_P_SCA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_SCA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_SCA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_SCA)
#endif
#if defined(ETH_P_TEB) || (defined(HAVE_DECL_ETH_P_TEB) && HAVE_DECL_ETH_P_TEB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_TEB) == (0x6558), "ETH_P_TEB != 0x6558");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_TEB 0x6558
#endif
#if defined(ETH_P_TEB) || (defined(HAVE_DECL_ETH_P_TEB) && HAVE_DECL_ETH_P_TEB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_TEB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_TEB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_TEB)
#endif
#if defined(ETH_P_RARP) || (defined(HAVE_DECL_ETH_P_RARP) && HAVE_DECL_ETH_P_RARP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_RARP) == (0x8035), "ETH_P_RARP != 0x8035");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_RARP 0x8035
#endif
#if defined(ETH_P_RARP) || (defined(HAVE_DECL_ETH_P_RARP) && HAVE_DECL_ETH_P_RARP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_RARP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_RARP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_RARP)
#endif
#if defined(ETH_P_ATALK) || (defined(HAVE_DECL_ETH_P_ATALK) && HAVE_DECL_ETH_P_ATALK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_ATALK) == (0x809B), "ETH_P_ATALK != 0x809B");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_ATALK 0x809B
#endif
#if defined(ETH_P_ATALK) || (defined(HAVE_DECL_ETH_P_ATALK) && HAVE_DECL_ETH_P_ATALK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_ATALK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_ATALK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_ATALK)
#endif
#if defined(ETH_P_AARP) || (defined(HAVE_DECL_ETH_P_AARP) && HAVE_DECL_ETH_P_AARP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_AARP) == (0x80F3), "ETH_P_AARP != 0x80F3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_AARP 0x80F3
#endif
#if defined(ETH_P_AARP) || (defined(HAVE_DECL_ETH_P_AARP) && HAVE_DECL_ETH_P_AARP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_AARP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_AARP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_AARP)
#endif
#if defined(ETH_P_8021Q) || (defined(HAVE_DECL_ETH_P_8021Q) && HAVE_DECL_ETH_P_8021Q)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_8021Q) == (0x8100), "ETH_P_8021Q != 0x8100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_8021Q 0x8100
#endif
#if defined(ETH_P_8021Q) || (defined(HAVE_DECL_ETH_P_8021Q) && HAVE_DECL_ETH_P_8021Q)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_8021Q)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_8021Q"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_8021Q)
#endif
#if defined(ETH_P_IPX) || (defined(HAVE_DECL_ETH_P_IPX) && HAVE_DECL_ETH_P_IPX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_IPX) == (0x8137), "ETH_P_IPX != 0x8137");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_IPX 0x8137
#endif
#if defined(ETH_P_IPX) || (defined(HAVE_DECL_ETH_P_IPX) && HAVE_DECL_ETH_P_IPX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_IPX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_IPX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_IPX)
#endif
#if defined(ETH_P_IPV6) || (defined(HAVE_DECL_ETH_P_IPV6) && HAVE_DECL_ETH_P_IPV6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_IPV6) == (0x86DD), "ETH_P_IPV6 != 0x86DD");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_IPV6 0x86DD
#endif
#if defined(ETH_P_IPV6) || (defined(HAVE_DECL_ETH_P_IPV6) && HAVE_DECL_ETH_P_IPV6)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_IPV6)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_IPV6"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_IPV6)
#endif
#if defined(ETH_P_PAUSE) || (defined(HAVE_DECL_ETH_P_PAUSE) && HAVE_DECL_ETH_P_PAUSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PAUSE) == (0x8808), "ETH_P_PAUSE != 0x8808");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PAUSE 0x8808
#endif
#if defined(ETH_P_PAUSE) || (defined(HAVE_DECL_ETH_P_PAUSE) && HAVE_DECL_ETH_P_PAUSE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PAUSE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PAUSE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PAUSE)
#endif
#if defined(ETH_P_SLOW) || (defined(HAVE_DECL_ETH_P_SLOW) && HAVE_DECL_ETH_P_SLOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_SLOW) == (0x8809), "ETH_P_SLOW != 0x8809");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_SLOW 0x8809
#endif
#if defined(ETH_P_SLOW) || (defined(HAVE_DECL_ETH_P_SLOW) && HAVE_DECL_ETH_P_SLOW)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_SLOW)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_SLOW"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_SLOW)
#endif
#if defined(ETH_P_WCCP) || (defined(HAVE_DECL_ETH_P_WCCP) && HAVE_DECL_ETH_P_WCCP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_WCCP) == (0x883E), "ETH_P_WCCP != 0x883E");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_WCCP 0x883E
#endif
#if defined(ETH_P_WCCP) || (defined(HAVE_DECL_ETH_P_WCCP) && HAVE_DECL_ETH_P_WCCP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_WCCP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_WCCP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_WCCP)
#endif
#if defined(ETH_P_MPLS_UC) || (defined(HAVE_DECL_ETH_P_MPLS_UC) && HAVE_DECL_ETH_P_MPLS_UC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_MPLS_UC) == (0x8847), "ETH_P_MPLS_UC != 0x8847");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_MPLS_UC 0x8847
#endif
#if defined(ETH_P_MPLS_UC) || (defined(HAVE_DECL_ETH_P_MPLS_UC) && HAVE_DECL_ETH_P_MPLS_UC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_MPLS_UC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_MPLS_UC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_MPLS_UC)
#endif
#if defined(ETH_P_MPLS_MC) || (defined(HAVE_DECL_ETH_P_MPLS_MC) && HAVE_DECL_ETH_P_MPLS_MC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_MPLS_MC) == (0x8848), "ETH_P_MPLS_MC != 0x8848");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_MPLS_MC 0x8848
#endif
#if defined(ETH_P_MPLS_MC) || (defined(HAVE_DECL_ETH_P_MPLS_MC) && HAVE_DECL_ETH_P_MPLS_MC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_MPLS_MC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_MPLS_MC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_MPLS_MC)
#endif
#if defined(ETH_P_ATMMPOA) || (defined(HAVE_DECL_ETH_P_ATMMPOA) && HAVE_DECL_ETH_P_ATMMPOA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_ATMMPOA) == (0x884c), "ETH_P_ATMMPOA != 0x884c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_ATMMPOA 0x884c
#endif
#if defined(ETH_P_ATMMPOA) || (defined(HAVE_DECL_ETH_P_ATMMPOA) && HAVE_DECL_ETH_P_ATMMPOA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_ATMMPOA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_ATMMPOA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_ATMMPOA)
#endif
#if defined(ETH_P_PPP_DISC) || (defined(HAVE_DECL_ETH_P_PPP_DISC) && HAVE_DECL_ETH_P_PPP_DISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PPP_DISC) == (0x8863), "ETH_P_PPP_DISC != 0x8863");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PPP_DISC 0x8863
#endif
#if defined(ETH_P_PPP_DISC) || (defined(HAVE_DECL_ETH_P_PPP_DISC) && HAVE_DECL_ETH_P_PPP_DISC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PPP_DISC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PPP_DISC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PPP_DISC)
#endif
#if defined(ETH_P_PPP_SES) || (defined(HAVE_DECL_ETH_P_PPP_SES) && HAVE_DECL_ETH_P_PPP_SES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PPP_SES) == (0x8864), "ETH_P_PPP_SES != 0x8864");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PPP_SES 0x8864
#endif
#if defined(ETH_P_PPP_SES) || (defined(HAVE_DECL_ETH_P_PPP_SES) && HAVE_DECL_ETH_P_PPP_SES)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PPP_SES)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PPP_SES"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PPP_SES)
#endif
#if defined(ETH_P_LINK_CTL) || (defined(HAVE_DECL_ETH_P_LINK_CTL) && HAVE_DECL_ETH_P_LINK_CTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_LINK_CTL) == (0x886c), "ETH_P_LINK_CTL != 0x886c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_LINK_CTL 0x886c
#endif
#if defined(ETH_P_LINK_CTL) || (defined(HAVE_DECL_ETH_P_LINK_CTL) && HAVE_DECL_ETH_P_LINK_CTL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_LINK_CTL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_LINK_CTL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_LINK_CTL)
#endif
#if defined(ETH_P_ATMFATE) || (defined(HAVE_DECL_ETH_P_ATMFATE) && HAVE_DECL_ETH_P_ATMFATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_ATMFATE) == (0x8884), "ETH_P_ATMFATE != 0x8884");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_ATMFATE 0x8884
#endif
#if defined(ETH_P_ATMFATE) || (defined(HAVE_DECL_ETH_P_ATMFATE) && HAVE_DECL_ETH_P_ATMFATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_ATMFATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_ATMFATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_ATMFATE)
#endif
#if defined(ETH_P_PAE) || (defined(HAVE_DECL_ETH_P_PAE) && HAVE_DECL_ETH_P_PAE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PAE) == (0x888E), "ETH_P_PAE != 0x888E");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PAE 0x888E
#endif
#if defined(ETH_P_PAE) || (defined(HAVE_DECL_ETH_P_PAE) && HAVE_DECL_ETH_P_PAE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PAE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PAE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PAE)
#endif
#if defined(ETH_P_REALTEK) || (defined(HAVE_DECL_ETH_P_REALTEK) && HAVE_DECL_ETH_P_REALTEK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_REALTEK) == (0x8899), "ETH_P_REALTEK != 0x8899");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_REALTEK 0x8899
#endif
#if defined(ETH_P_REALTEK) || (defined(HAVE_DECL_ETH_P_REALTEK) && HAVE_DECL_ETH_P_REALTEK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_REALTEK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_REALTEK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_REALTEK)
#endif
#if defined(ETH_P_AOE) || (defined(HAVE_DECL_ETH_P_AOE) && HAVE_DECL_ETH_P_AOE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_AOE) == (0x88A2), "ETH_P_AOE != 0x88A2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_AOE 0x88A2
#endif
#if defined(ETH_P_AOE) || (defined(HAVE_DECL_ETH_P_AOE) && HAVE_DECL_ETH_P_AOE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_AOE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_AOE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_AOE)
#endif
#if defined(ETH_P_8021AD) || (defined(HAVE_DECL_ETH_P_8021AD) && HAVE_DECL_ETH_P_8021AD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_8021AD) == (0x88A8), "ETH_P_8021AD != 0x88A8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_8021AD 0x88A8
#endif
#if defined(ETH_P_8021AD) || (defined(HAVE_DECL_ETH_P_8021AD) && HAVE_DECL_ETH_P_8021AD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_8021AD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_8021AD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_8021AD)
#endif
#if defined(ETH_P_802_EX1) || (defined(HAVE_DECL_ETH_P_802_EX1) && HAVE_DECL_ETH_P_802_EX1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_802_EX1) == (0x88B5), "ETH_P_802_EX1 != 0x88B5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_802_EX1 0x88B5
#endif
#if defined(ETH_P_802_EX1) || (defined(HAVE_DECL_ETH_P_802_EX1) && HAVE_DECL_ETH_P_802_EX1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_802_EX1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_802_EX1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_802_EX1)
#endif
#if defined(ETH_P_ERSPAN) || (defined(HAVE_DECL_ETH_P_ERSPAN) && HAVE_DECL_ETH_P_ERSPAN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_ERSPAN) == (0x88BE), "ETH_P_ERSPAN != 0x88BE");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_ERSPAN 0x88BE
#endif
#if defined(ETH_P_ERSPAN) || (defined(HAVE_DECL_ETH_P_ERSPAN) && HAVE_DECL_ETH_P_ERSPAN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_ERSPAN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_ERSPAN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_ERSPAN)
#endif
#if defined(ETH_P_PREAUTH) || (defined(HAVE_DECL_ETH_P_PREAUTH) && HAVE_DECL_ETH_P_PREAUTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PREAUTH) == (0x88C7), "ETH_P_PREAUTH != 0x88C7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PREAUTH 0x88C7
#endif
#if defined(ETH_P_PREAUTH) || (defined(HAVE_DECL_ETH_P_PREAUTH) && HAVE_DECL_ETH_P_PREAUTH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PREAUTH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PREAUTH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PREAUTH)
#endif
#if defined(ETH_P_TIPC) || (defined(HAVE_DECL_ETH_P_TIPC) && HAVE_DECL_ETH_P_TIPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_TIPC) == (0x88CA), "ETH_P_TIPC != 0x88CA");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_TIPC 0x88CA
#endif
#if defined(ETH_P_TIPC) || (defined(HAVE_DECL_ETH_P_TIPC) && HAVE_DECL_ETH_P_TIPC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_TIPC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_TIPC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_TIPC)
#endif
#if defined(ETH_P_LLDP) || (defined(HAVE_DECL_ETH_P_LLDP) && HAVE_DECL_ETH_P_LLDP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_LLDP) == (0x88CC), "ETH_P_LLDP != 0x88CC");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_LLDP 0x88CC
#endif
#if defined(ETH_P_LLDP) || (defined(HAVE_DECL_ETH_P_LLDP) && HAVE_DECL_ETH_P_LLDP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_LLDP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_LLDP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_LLDP)
#endif
#if defined(ETH_P_MRP) || (defined(HAVE_DECL_ETH_P_MRP) && HAVE_DECL_ETH_P_MRP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_MRP) == (0x88E3), "ETH_P_MRP != 0x88E3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_MRP 0x88E3
#endif
#if defined(ETH_P_MRP) || (defined(HAVE_DECL_ETH_P_MRP) && HAVE_DECL_ETH_P_MRP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_MRP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_MRP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_MRP)
#endif
#if defined(ETH_P_MACSEC) || (defined(HAVE_DECL_ETH_P_MACSEC) && HAVE_DECL_ETH_P_MACSEC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_MACSEC) == (0x88E5), "ETH_P_MACSEC != 0x88E5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_MACSEC 0x88E5
#endif
#if defined(ETH_P_MACSEC) || (defined(HAVE_DECL_ETH_P_MACSEC) && HAVE_DECL_ETH_P_MACSEC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_MACSEC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_MACSEC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_MACSEC)
#endif
#if defined(ETH_P_8021AH) || (defined(HAVE_DECL_ETH_P_8021AH) && HAVE_DECL_ETH_P_8021AH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_8021AH) == (0x88E7), "ETH_P_8021AH != 0x88E7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_8021AH 0x88E7
#endif
#if defined(ETH_P_8021AH) || (defined(HAVE_DECL_ETH_P_8021AH) && HAVE_DECL_ETH_P_8021AH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_8021AH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_8021AH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_8021AH)
#endif
#if defined(ETH_P_MVRP) || (defined(HAVE_DECL_ETH_P_MVRP) && HAVE_DECL_ETH_P_MVRP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_MVRP) == (0x88F5), "ETH_P_MVRP != 0x88F5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_MVRP 0x88F5
#endif
#if defined(ETH_P_MVRP) || (defined(HAVE_DECL_ETH_P_MVRP) && HAVE_DECL_ETH_P_MVRP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_MVRP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_MVRP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_MVRP)
#endif
#if defined(ETH_P_1588) || (defined(HAVE_DECL_ETH_P_1588) && HAVE_DECL_ETH_P_1588)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_1588) == (0x88F7), "ETH_P_1588 != 0x88F7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_1588 0x88F7
#endif
#if defined(ETH_P_1588) || (defined(HAVE_DECL_ETH_P_1588) && HAVE_DECL_ETH_P_1588)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_1588)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_1588"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_1588)
#endif
#if defined(ETH_P_NCSI) || (defined(HAVE_DECL_ETH_P_NCSI) && HAVE_DECL_ETH_P_NCSI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_NCSI) == (0x88F8), "ETH_P_NCSI != 0x88F8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_NCSI 0x88F8
#endif
#if defined(ETH_P_NCSI) || (defined(HAVE_DECL_ETH_P_NCSI) && HAVE_DECL_ETH_P_NCSI)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_NCSI)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_NCSI"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_NCSI)
#endif
#if defined(ETH_P_PRP) || (defined(HAVE_DECL_ETH_P_PRP) && HAVE_DECL_ETH_P_PRP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_PRP) == (0x88FB), "ETH_P_PRP != 0x88FB");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_PRP 0x88FB
#endif
#if defined(ETH_P_PRP) || (defined(HAVE_DECL_ETH_P_PRP) && HAVE_DECL_ETH_P_PRP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_PRP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_PRP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_PRP)
#endif
#if defined(ETH_P_CFM) || (defined(HAVE_DECL_ETH_P_CFM) && HAVE_DECL_ETH_P_CFM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_CFM) == (0x8902), "ETH_P_CFM != 0x8902");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_CFM 0x8902
#endif
#if defined(ETH_P_CFM) || (defined(HAVE_DECL_ETH_P_CFM) && HAVE_DECL_ETH_P_CFM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_CFM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_CFM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_CFM)
#endif
#if defined(ETH_P_FCOE) || (defined(HAVE_DECL_ETH_P_FCOE) && HAVE_DECL_ETH_P_FCOE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_FCOE) == (0x8906), "ETH_P_FCOE != 0x8906");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_FCOE 0x8906
#endif
#if defined(ETH_P_FCOE) || (defined(HAVE_DECL_ETH_P_FCOE) && HAVE_DECL_ETH_P_FCOE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_FCOE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_FCOE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_FCOE)
#endif
#if defined(ETH_P_TDLS) || (defined(HAVE_DECL_ETH_P_TDLS) && HAVE_DECL_ETH_P_TDLS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_TDLS) == (0x890D), "ETH_P_TDLS != 0x890D");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_TDLS 0x890D
#endif
#if defined(ETH_P_TDLS) || (defined(HAVE_DECL_ETH_P_TDLS) && HAVE_DECL_ETH_P_TDLS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_TDLS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_TDLS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_TDLS)
#endif
#if defined(ETH_P_FIP) || (defined(HAVE_DECL_ETH_P_FIP) && HAVE_DECL_ETH_P_FIP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_FIP) == (0x8914), "ETH_P_FIP != 0x8914");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_FIP 0x8914
#endif
#if defined(ETH_P_FIP) || (defined(HAVE_DECL_ETH_P_FIP) && HAVE_DECL_ETH_P_FIP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_FIP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_FIP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_FIP)
#endif
#if defined(ETH_P_IBOE) || (defined(HAVE_DECL_ETH_P_IBOE) && HAVE_DECL_ETH_P_IBOE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_IBOE) == (0x8915), "ETH_P_IBOE != 0x8915");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_IBOE 0x8915
#endif
#if defined(ETH_P_IBOE) || (defined(HAVE_DECL_ETH_P_IBOE) && HAVE_DECL_ETH_P_IBOE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_IBOE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_IBOE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_IBOE)
#endif
#if defined(ETH_P_80221) || (defined(HAVE_DECL_ETH_P_80221) && HAVE_DECL_ETH_P_80221)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_80221) == (0x8917), "ETH_P_80221 != 0x8917");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_80221 0x8917
#endif
#if defined(ETH_P_80221) || (defined(HAVE_DECL_ETH_P_80221) && HAVE_DECL_ETH_P_80221)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_80221)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_80221"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_80221)
#endif
#if defined(ETH_P_HSR) || (defined(HAVE_DECL_ETH_P_HSR) && HAVE_DECL_ETH_P_HSR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_HSR) == (0x892F), "ETH_P_HSR != 0x892F");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_HSR 0x892F
#endif
#if defined(ETH_P_HSR) || (defined(HAVE_DECL_ETH_P_HSR) && HAVE_DECL_ETH_P_HSR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_HSR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_HSR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_HSR)
#endif
#if defined(ETH_P_NSH) || (defined(HAVE_DECL_ETH_P_NSH) && HAVE_DECL_ETH_P_NSH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_NSH) == (0x894F), "ETH_P_NSH != 0x894F");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_NSH 0x894F
#endif
#if defined(ETH_P_NSH) || (defined(HAVE_DECL_ETH_P_NSH) && HAVE_DECL_ETH_P_NSH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_NSH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_NSH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_NSH)
#endif
#if defined(ETH_P_LOOPBACK) || (defined(HAVE_DECL_ETH_P_LOOPBACK) && HAVE_DECL_ETH_P_LOOPBACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_LOOPBACK) == (0x9000), "ETH_P_LOOPBACK != 0x9000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_LOOPBACK 0x9000
#endif
#if defined(ETH_P_LOOPBACK) || (defined(HAVE_DECL_ETH_P_LOOPBACK) && HAVE_DECL_ETH_P_LOOPBACK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_LOOPBACK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_LOOPBACK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_LOOPBACK)
#endif
#if defined(ETH_P_QINQ1) || (defined(HAVE_DECL_ETH_P_QINQ1) && HAVE_DECL_ETH_P_QINQ1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_QINQ1) == (0x9100), "ETH_P_QINQ1 != 0x9100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_QINQ1 0x9100
#endif
#if defined(ETH_P_QINQ1) || (defined(HAVE_DECL_ETH_P_QINQ1) && HAVE_DECL_ETH_P_QINQ1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_QINQ1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_QINQ1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_QINQ1)
#endif
#if defined(ETH_P_QINQ2) || (defined(HAVE_DECL_ETH_P_QINQ2) && HAVE_DECL_ETH_P_QINQ2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_QINQ2) == (0x9200), "ETH_P_QINQ2 != 0x9200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_QINQ2 0x9200
#endif
#if defined(ETH_P_QINQ2) || (defined(HAVE_DECL_ETH_P_QINQ2) && HAVE_DECL_ETH_P_QINQ2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_QINQ2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_QINQ2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_QINQ2)
#endif
#if defined(ETH_P_QINQ3) || (defined(HAVE_DECL_ETH_P_QINQ3) && HAVE_DECL_ETH_P_QINQ3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_QINQ3) == (0x9300), "ETH_P_QINQ3 != 0x9300");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_QINQ3 0x9300
#endif
#if defined(ETH_P_QINQ3) || (defined(HAVE_DECL_ETH_P_QINQ3) && HAVE_DECL_ETH_P_QINQ3)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_QINQ3)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_QINQ3"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_QINQ3)
#endif
#if defined(ETH_P_EDSA) || (defined(HAVE_DECL_ETH_P_EDSA) && HAVE_DECL_ETH_P_EDSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_EDSA) == (0xDADA), "ETH_P_EDSA != 0xDADA");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_EDSA 0xDADA
#endif
#if defined(ETH_P_EDSA) || (defined(HAVE_DECL_ETH_P_EDSA) && HAVE_DECL_ETH_P_EDSA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_EDSA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_EDSA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_EDSA)
#endif
#if defined(ETH_P_DSA_8021Q) || (defined(HAVE_DECL_ETH_P_DSA_8021Q) && HAVE_DECL_ETH_P_DSA_8021Q)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_DSA_8021Q) == (0xDADB), "ETH_P_DSA_8021Q != 0xDADB");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_DSA_8021Q 0xDADB
#endif
#if defined(ETH_P_DSA_8021Q) || (defined(HAVE_DECL_ETH_P_DSA_8021Q) && HAVE_DECL_ETH_P_DSA_8021Q)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_DSA_8021Q)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_DSA_8021Q"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_DSA_8021Q)
#endif
#if defined(ETH_P_DSA_A5PSW) || (defined(HAVE_DECL_ETH_P_DSA_A5PSW) && HAVE_DECL_ETH_P_DSA_A5PSW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_DSA_A5PSW) == (0xE001), "ETH_P_DSA_A5PSW != 0xE001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_DSA_A5PSW 0xE001
#endif
#if defined(ETH_P_DSA_A5PSW) || (defined(HAVE_DECL_ETH_P_DSA_A5PSW) && HAVE_DECL_ETH_P_DSA_A5PSW)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_DSA_A5PSW)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_DSA_A5PSW"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_DSA_A5PSW)
#endif
#if defined(ETH_P_IFE) || (defined(HAVE_DECL_ETH_P_IFE) && HAVE_DECL_ETH_P_IFE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_IFE) == (0xED3E), "ETH_P_IFE != 0xED3E");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_IFE 0xED3E
#endif
#if defined(ETH_P_IFE) || (defined(HAVE_DECL_ETH_P_IFE) && HAVE_DECL_ETH_P_IFE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_IFE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_IFE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_IFE)
#endif
#if defined(ETH_P_AF_IUCV) || (defined(HAVE_DECL_ETH_P_AF_IUCV) && HAVE_DECL_ETH_P_AF_IUCV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ETH_P_AF_IUCV) == (0xFBFB), "ETH_P_AF_IUCV != 0xFBFB");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ETH_P_AF_IUCV 0xFBFB
#endif
#if defined(ETH_P_AF_IUCV) || (defined(HAVE_DECL_ETH_P_AF_IUCV) && HAVE_DECL_ETH_P_AF_IUCV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (ETH_P_AF_IUCV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: ETH_P_AF_IUCV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (ETH_P_AF_IUCV)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data ethernet_protocols_xdata[] = {
 XLAT(ETH_P_802_3),
 #define XLAT_VAL_0 ((unsigned) (ETH_P_802_3))
 #define XLAT_STR_0 STRINGIFY(ETH_P_802_3)
 XLAT(ETH_P_AX25),
 #define XLAT_VAL_1 ((unsigned) (ETH_P_AX25))
 #define XLAT_STR_1 STRINGIFY(ETH_P_AX25)
 XLAT(ETH_P_ALL),
 #define XLAT_VAL_2 ((unsigned) (ETH_P_ALL))
 #define XLAT_STR_2 STRINGIFY(ETH_P_ALL)
 XLAT(ETH_P_802_2),
 #define XLAT_VAL_3 ((unsigned) (ETH_P_802_2))
 #define XLAT_STR_3 STRINGIFY(ETH_P_802_2)
 XLAT(ETH_P_SNAP),
 #define XLAT_VAL_4 ((unsigned) (ETH_P_SNAP))
 #define XLAT_STR_4 STRINGIFY(ETH_P_SNAP)
 XLAT(ETH_P_DDCMP),
 #define XLAT_VAL_5 ((unsigned) (ETH_P_DDCMP))
 #define XLAT_STR_5 STRINGIFY(ETH_P_DDCMP)
 XLAT(ETH_P_WAN_PPP),
 #define XLAT_VAL_6 ((unsigned) (ETH_P_WAN_PPP))
 #define XLAT_STR_6 STRINGIFY(ETH_P_WAN_PPP)
 XLAT(ETH_P_PPP_MP),
 #define XLAT_VAL_7 ((unsigned) (ETH_P_PPP_MP))
 #define XLAT_STR_7 STRINGIFY(ETH_P_PPP_MP)
 XLAT(ETH_P_LOCALTALK),
 #define XLAT_VAL_8 ((unsigned) (ETH_P_LOCALTALK))
 #define XLAT_STR_8 STRINGIFY(ETH_P_LOCALTALK)
 XLAT(ETH_P_CAN),
 #define XLAT_VAL_9 ((unsigned) (ETH_P_CAN))
 #define XLAT_STR_9 STRINGIFY(ETH_P_CAN)
 XLAT(ETH_P_CANFD),
 #define XLAT_VAL_10 ((unsigned) (ETH_P_CANFD))
 #define XLAT_STR_10 STRINGIFY(ETH_P_CANFD)
 XLAT(ETH_P_PPPTALK),
 #define XLAT_VAL_11 ((unsigned) (ETH_P_PPPTALK))
 #define XLAT_STR_11 STRINGIFY(ETH_P_PPPTALK)
 XLAT(ETH_P_TR_802_2),
 #define XLAT_VAL_12 ((unsigned) (ETH_P_TR_802_2))
 #define XLAT_STR_12 STRINGIFY(ETH_P_TR_802_2)
 XLAT(ETH_P_MOBITEX),
 #define XLAT_VAL_13 ((unsigned) (ETH_P_MOBITEX))
 #define XLAT_STR_13 STRINGIFY(ETH_P_MOBITEX)
 XLAT(ETH_P_CONTROL),
 #define XLAT_VAL_14 ((unsigned) (ETH_P_CONTROL))
 #define XLAT_STR_14 STRINGIFY(ETH_P_CONTROL)
 XLAT(ETH_P_IRDA),
 #define XLAT_VAL_15 ((unsigned) (ETH_P_IRDA))
 #define XLAT_STR_15 STRINGIFY(ETH_P_IRDA)
 XLAT(ETH_P_ECONET),
 #define XLAT_VAL_16 ((unsigned) (ETH_P_ECONET))
 #define XLAT_STR_16 STRINGIFY(ETH_P_ECONET)
 XLAT(ETH_P_HDLC),
 #define XLAT_VAL_17 ((unsigned) (ETH_P_HDLC))
 #define XLAT_STR_17 STRINGIFY(ETH_P_HDLC)
 XLAT(ETH_P_ARCNET),
 #define XLAT_VAL_18 ((unsigned) (ETH_P_ARCNET))
 #define XLAT_STR_18 STRINGIFY(ETH_P_ARCNET)
 XLAT(ETH_P_DSA),
 #define XLAT_VAL_19 ((unsigned) (ETH_P_DSA))
 #define XLAT_STR_19 STRINGIFY(ETH_P_DSA)
 XLAT(ETH_P_TRAILER),
 #define XLAT_VAL_20 ((unsigned) (ETH_P_TRAILER))
 #define XLAT_STR_20 STRINGIFY(ETH_P_TRAILER)
 XLAT(ETH_P_LOOP),
 #define XLAT_VAL_21 ((unsigned) (ETH_P_LOOP))
 #define XLAT_STR_21 STRINGIFY(ETH_P_LOOP)
 XLAT(ETH_P_PHONET),
 #define XLAT_VAL_22 ((unsigned) (ETH_P_PHONET))
 #define XLAT_STR_22 STRINGIFY(ETH_P_PHONET)
 XLAT(ETH_P_IEEE802154),
 #define XLAT_VAL_23 ((unsigned) (ETH_P_IEEE802154))
 #define XLAT_STR_23 STRINGIFY(ETH_P_IEEE802154)
 XLAT(ETH_P_CAIF),
 #define XLAT_VAL_24 ((unsigned) (ETH_P_CAIF))
 #define XLAT_STR_24 STRINGIFY(ETH_P_CAIF)
 XLAT(ETH_P_XDSA),
 #define XLAT_VAL_25 ((unsigned) (ETH_P_XDSA))
 #define XLAT_STR_25 STRINGIFY(ETH_P_XDSA)
 XLAT(ETH_P_MAP),
 #define XLAT_VAL_26 ((unsigned) (ETH_P_MAP))
 #define XLAT_STR_26 STRINGIFY(ETH_P_MAP)
 XLAT(ETH_P_MCTP),
 #define XLAT_VAL_27 ((unsigned) (ETH_P_MCTP))
 #define XLAT_STR_27 STRINGIFY(ETH_P_MCTP)
 XLAT(ETH_P_PUP),
 #define XLAT_VAL_28 ((unsigned) (ETH_P_PUP))
 #define XLAT_STR_28 STRINGIFY(ETH_P_PUP)
 XLAT(ETH_P_PUPAT),
 #define XLAT_VAL_29 ((unsigned) (ETH_P_PUPAT))
 #define XLAT_STR_29 STRINGIFY(ETH_P_PUPAT)
 XLAT(ETH_P_802_3_MIN),
 #define XLAT_VAL_30 ((unsigned) (ETH_P_802_3_MIN))
 #define XLAT_STR_30 STRINGIFY(ETH_P_802_3_MIN)
 XLAT(ETH_P_IP),
 #define XLAT_VAL_31 ((unsigned) (ETH_P_IP))
 #define XLAT_STR_31 STRINGIFY(ETH_P_IP)
 XLAT(ETH_P_X25),
 #define XLAT_VAL_32 ((unsigned) (ETH_P_X25))
 #define XLAT_STR_32 STRINGIFY(ETH_P_X25)
 XLAT(ETH_P_ARP),
 #define XLAT_VAL_33 ((unsigned) (ETH_P_ARP))
 #define XLAT_STR_33 STRINGIFY(ETH_P_ARP)
 XLAT(ETH_P_BPQ),
 #define XLAT_VAL_34 ((unsigned) (ETH_P_BPQ))
 #define XLAT_STR_34 STRINGIFY(ETH_P_BPQ)
 XLAT(ETH_P_IEEEPUP),
 #define XLAT_VAL_35 ((unsigned) (ETH_P_IEEEPUP))
 #define XLAT_STR_35 STRINGIFY(ETH_P_IEEEPUP)
 XLAT(ETH_P_IEEEPUPAT),
 #define XLAT_VAL_36 ((unsigned) (ETH_P_IEEEPUPAT))
 #define XLAT_STR_36 STRINGIFY(ETH_P_IEEEPUPAT)
 XLAT(ETH_P_ERSPAN2),
 #define XLAT_VAL_37 ((unsigned) (ETH_P_ERSPAN2))
 #define XLAT_STR_37 STRINGIFY(ETH_P_ERSPAN2)
 XLAT(ETH_P_TSN),
 #define XLAT_VAL_38 ((unsigned) (ETH_P_TSN))
 #define XLAT_STR_38 STRINGIFY(ETH_P_TSN)
 XLAT(ETH_P_BATMAN),
 #define XLAT_VAL_39 ((unsigned) (ETH_P_BATMAN))
 #define XLAT_STR_39 STRINGIFY(ETH_P_BATMAN)
 XLAT(ETH_P_DEC),
 #define XLAT_VAL_40 ((unsigned) (ETH_P_DEC))
 #define XLAT_STR_40 STRINGIFY(ETH_P_DEC)
 XLAT(ETH_P_DNA_DL),
 #define XLAT_VAL_41 ((unsigned) (ETH_P_DNA_DL))
 #define XLAT_STR_41 STRINGIFY(ETH_P_DNA_DL)
 XLAT(ETH_P_DNA_RC),
 #define XLAT_VAL_42 ((unsigned) (ETH_P_DNA_RC))
 #define XLAT_STR_42 STRINGIFY(ETH_P_DNA_RC)
 XLAT(ETH_P_DNA_RT),
 #define XLAT_VAL_43 ((unsigned) (ETH_P_DNA_RT))
 #define XLAT_STR_43 STRINGIFY(ETH_P_DNA_RT)
 XLAT(ETH_P_LAT),
 #define XLAT_VAL_44 ((unsigned) (ETH_P_LAT))
 #define XLAT_STR_44 STRINGIFY(ETH_P_LAT)
 XLAT(ETH_P_DIAG),
 #define XLAT_VAL_45 ((unsigned) (ETH_P_DIAG))
 #define XLAT_STR_45 STRINGIFY(ETH_P_DIAG)
 XLAT(ETH_P_CUST),
 #define XLAT_VAL_46 ((unsigned) (ETH_P_CUST))
 #define XLAT_STR_46 STRINGIFY(ETH_P_CUST)
 XLAT(ETH_P_SCA),
 #define XLAT_VAL_47 ((unsigned) (ETH_P_SCA))
 #define XLAT_STR_47 STRINGIFY(ETH_P_SCA)
 XLAT(ETH_P_TEB),
 #define XLAT_VAL_48 ((unsigned) (ETH_P_TEB))
 #define XLAT_STR_48 STRINGIFY(ETH_P_TEB)
 XLAT(ETH_P_RARP),
 #define XLAT_VAL_49 ((unsigned) (ETH_P_RARP))
 #define XLAT_STR_49 STRINGIFY(ETH_P_RARP)
 XLAT(ETH_P_ATALK),
 #define XLAT_VAL_50 ((unsigned) (ETH_P_ATALK))
 #define XLAT_STR_50 STRINGIFY(ETH_P_ATALK)
 XLAT(ETH_P_AARP),
 #define XLAT_VAL_51 ((unsigned) (ETH_P_AARP))
 #define XLAT_STR_51 STRINGIFY(ETH_P_AARP)
 XLAT(ETH_P_8021Q),
 #define XLAT_VAL_52 ((unsigned) (ETH_P_8021Q))
 #define XLAT_STR_52 STRINGIFY(ETH_P_8021Q)
 XLAT(ETH_P_IPX),
 #define XLAT_VAL_53 ((unsigned) (ETH_P_IPX))
 #define XLAT_STR_53 STRINGIFY(ETH_P_IPX)
 XLAT(ETH_P_IPV6),
 #define XLAT_VAL_54 ((unsigned) (ETH_P_IPV6))
 #define XLAT_STR_54 STRINGIFY(ETH_P_IPV6)
 XLAT(ETH_P_PAUSE),
 #define XLAT_VAL_55 ((unsigned) (ETH_P_PAUSE))
 #define XLAT_STR_55 STRINGIFY(ETH_P_PAUSE)
 XLAT(ETH_P_SLOW),
 #define XLAT_VAL_56 ((unsigned) (ETH_P_SLOW))
 #define XLAT_STR_56 STRINGIFY(ETH_P_SLOW)
 XLAT(ETH_P_WCCP),
 #define XLAT_VAL_57 ((unsigned) (ETH_P_WCCP))
 #define XLAT_STR_57 STRINGIFY(ETH_P_WCCP)
 XLAT(ETH_P_MPLS_UC),
 #define XLAT_VAL_58 ((unsigned) (ETH_P_MPLS_UC))
 #define XLAT_STR_58 STRINGIFY(ETH_P_MPLS_UC)
 XLAT(ETH_P_MPLS_MC),
 #define XLAT_VAL_59 ((unsigned) (ETH_P_MPLS_MC))
 #define XLAT_STR_59 STRINGIFY(ETH_P_MPLS_MC)
 XLAT(ETH_P_ATMMPOA),
 #define XLAT_VAL_60 ((unsigned) (ETH_P_ATMMPOA))
 #define XLAT_STR_60 STRINGIFY(ETH_P_ATMMPOA)
 XLAT(ETH_P_PPP_DISC),
 #define XLAT_VAL_61 ((unsigned) (ETH_P_PPP_DISC))
 #define XLAT_STR_61 STRINGIFY(ETH_P_PPP_DISC)
 XLAT(ETH_P_PPP_SES),
 #define XLAT_VAL_62 ((unsigned) (ETH_P_PPP_SES))
 #define XLAT_STR_62 STRINGIFY(ETH_P_PPP_SES)
 XLAT(ETH_P_LINK_CTL),
 #define XLAT_VAL_63 ((unsigned) (ETH_P_LINK_CTL))
 #define XLAT_STR_63 STRINGIFY(ETH_P_LINK_CTL)
 XLAT(ETH_P_ATMFATE),
 #define XLAT_VAL_64 ((unsigned) (ETH_P_ATMFATE))
 #define XLAT_STR_64 STRINGIFY(ETH_P_ATMFATE)
 XLAT(ETH_P_PAE),
 #define XLAT_VAL_65 ((unsigned) (ETH_P_PAE))
 #define XLAT_STR_65 STRINGIFY(ETH_P_PAE)
 XLAT(ETH_P_REALTEK),
 #define XLAT_VAL_66 ((unsigned) (ETH_P_REALTEK))
 #define XLAT_STR_66 STRINGIFY(ETH_P_REALTEK)
 XLAT(ETH_P_AOE),
 #define XLAT_VAL_67 ((unsigned) (ETH_P_AOE))
 #define XLAT_STR_67 STRINGIFY(ETH_P_AOE)
 XLAT(ETH_P_8021AD),
 #define XLAT_VAL_68 ((unsigned) (ETH_P_8021AD))
 #define XLAT_STR_68 STRINGIFY(ETH_P_8021AD)
 XLAT(ETH_P_802_EX1),
 #define XLAT_VAL_69 ((unsigned) (ETH_P_802_EX1))
 #define XLAT_STR_69 STRINGIFY(ETH_P_802_EX1)
 XLAT(ETH_P_ERSPAN),
 #define XLAT_VAL_70 ((unsigned) (ETH_P_ERSPAN))
 #define XLAT_STR_70 STRINGIFY(ETH_P_ERSPAN)
 XLAT(ETH_P_PREAUTH),
 #define XLAT_VAL_71 ((unsigned) (ETH_P_PREAUTH))
 #define XLAT_STR_71 STRINGIFY(ETH_P_PREAUTH)
 XLAT(ETH_P_TIPC),
 #define XLAT_VAL_72 ((unsigned) (ETH_P_TIPC))
 #define XLAT_STR_72 STRINGIFY(ETH_P_TIPC)
 XLAT(ETH_P_LLDP),
 #define XLAT_VAL_73 ((unsigned) (ETH_P_LLDP))
 #define XLAT_STR_73 STRINGIFY(ETH_P_LLDP)
 XLAT(ETH_P_MRP),
 #define XLAT_VAL_74 ((unsigned) (ETH_P_MRP))
 #define XLAT_STR_74 STRINGIFY(ETH_P_MRP)
 XLAT(ETH_P_MACSEC),
 #define XLAT_VAL_75 ((unsigned) (ETH_P_MACSEC))
 #define XLAT_STR_75 STRINGIFY(ETH_P_MACSEC)
 XLAT(ETH_P_8021AH),
 #define XLAT_VAL_76 ((unsigned) (ETH_P_8021AH))
 #define XLAT_STR_76 STRINGIFY(ETH_P_8021AH)
 XLAT(ETH_P_MVRP),
 #define XLAT_VAL_77 ((unsigned) (ETH_P_MVRP))
 #define XLAT_STR_77 STRINGIFY(ETH_P_MVRP)
 XLAT(ETH_P_1588),
 #define XLAT_VAL_78 ((unsigned) (ETH_P_1588))
 #define XLAT_STR_78 STRINGIFY(ETH_P_1588)
 XLAT(ETH_P_NCSI),
 #define XLAT_VAL_79 ((unsigned) (ETH_P_NCSI))
 #define XLAT_STR_79 STRINGIFY(ETH_P_NCSI)
 XLAT(ETH_P_PRP),
 #define XLAT_VAL_80 ((unsigned) (ETH_P_PRP))
 #define XLAT_STR_80 STRINGIFY(ETH_P_PRP)
 XLAT(ETH_P_CFM),
 #define XLAT_VAL_81 ((unsigned) (ETH_P_CFM))
 #define XLAT_STR_81 STRINGIFY(ETH_P_CFM)
 XLAT(ETH_P_FCOE),
 #define XLAT_VAL_82 ((unsigned) (ETH_P_FCOE))
 #define XLAT_STR_82 STRINGIFY(ETH_P_FCOE)
 XLAT(ETH_P_TDLS),
 #define XLAT_VAL_83 ((unsigned) (ETH_P_TDLS))
 #define XLAT_STR_83 STRINGIFY(ETH_P_TDLS)
 XLAT(ETH_P_FIP),
 #define XLAT_VAL_84 ((unsigned) (ETH_P_FIP))
 #define XLAT_STR_84 STRINGIFY(ETH_P_FIP)
 XLAT(ETH_P_IBOE),
 #define XLAT_VAL_85 ((unsigned) (ETH_P_IBOE))
 #define XLAT_STR_85 STRINGIFY(ETH_P_IBOE)
 XLAT(ETH_P_80221),
 #define XLAT_VAL_86 ((unsigned) (ETH_P_80221))
 #define XLAT_STR_86 STRINGIFY(ETH_P_80221)
 XLAT(ETH_P_HSR),
 #define XLAT_VAL_87 ((unsigned) (ETH_P_HSR))
 #define XLAT_STR_87 STRINGIFY(ETH_P_HSR)
 XLAT(ETH_P_NSH),
 #define XLAT_VAL_88 ((unsigned) (ETH_P_NSH))
 #define XLAT_STR_88 STRINGIFY(ETH_P_NSH)
 XLAT(ETH_P_LOOPBACK),
 #define XLAT_VAL_89 ((unsigned) (ETH_P_LOOPBACK))
 #define XLAT_STR_89 STRINGIFY(ETH_P_LOOPBACK)
 XLAT(ETH_P_QINQ1),
 #define XLAT_VAL_90 ((unsigned) (ETH_P_QINQ1))
 #define XLAT_STR_90 STRINGIFY(ETH_P_QINQ1)
 XLAT(ETH_P_QINQ2),
 #define XLAT_VAL_91 ((unsigned) (ETH_P_QINQ2))
 #define XLAT_STR_91 STRINGIFY(ETH_P_QINQ2)
 XLAT(ETH_P_QINQ3),
 #define XLAT_VAL_92 ((unsigned) (ETH_P_QINQ3))
 #define XLAT_STR_92 STRINGIFY(ETH_P_QINQ3)
 XLAT(ETH_P_EDSA),
 #define XLAT_VAL_93 ((unsigned) (ETH_P_EDSA))
 #define XLAT_STR_93 STRINGIFY(ETH_P_EDSA)
 XLAT(ETH_P_DSA_8021Q),
 #define XLAT_VAL_94 ((unsigned) (ETH_P_DSA_8021Q))
 #define XLAT_STR_94 STRINGIFY(ETH_P_DSA_8021Q)
 XLAT(ETH_P_DSA_A5PSW),
 #define XLAT_VAL_95 ((unsigned) (ETH_P_DSA_A5PSW))
 #define XLAT_STR_95 STRINGIFY(ETH_P_DSA_A5PSW)
 XLAT(ETH_P_IFE),
 #define XLAT_VAL_96 ((unsigned) (ETH_P_IFE))
 #define XLAT_STR_96 STRINGIFY(ETH_P_IFE)
 XLAT(ETH_P_AF_IUCV),
 #define XLAT_VAL_97 ((unsigned) (ETH_P_AF_IUCV))
 #define XLAT_STR_97 STRINGIFY(ETH_P_AF_IUCV)
};
const struct xlat ethernet_protocols[1] = { {
 .data = ethernet_protocols_xdata,
 .size = ARRAY_SIZE(ethernet_protocols_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
#  ifdef XLAT_VAL_79
  | XLAT_VAL_79
#  endif
#  ifdef XLAT_VAL_80
  | XLAT_VAL_80
#  endif
#  ifdef XLAT_VAL_81
  | XLAT_VAL_81
#  endif
#  ifdef XLAT_VAL_82
  | XLAT_VAL_82
#  endif
#  ifdef XLAT_VAL_83
  | XLAT_VAL_83
#  endif
#  ifdef XLAT_VAL_84
  | XLAT_VAL_84
#  endif
#  ifdef XLAT_VAL_85
  | XLAT_VAL_85
#  endif
#  ifdef XLAT_VAL_86
  | XLAT_VAL_86
#  endif
#  ifdef XLAT_VAL_87
  | XLAT_VAL_87
#  endif
#  ifdef XLAT_VAL_88
  | XLAT_VAL_88
#  endif
#  ifdef XLAT_VAL_89
  | XLAT_VAL_89
#  endif
#  ifdef XLAT_VAL_90
  | XLAT_VAL_90
#  endif
#  ifdef XLAT_VAL_91
  | XLAT_VAL_91
#  endif
#  ifdef XLAT_VAL_92
  | XLAT_VAL_92
#  endif
#  ifdef XLAT_VAL_93
  | XLAT_VAL_93
#  endif
#  ifdef XLAT_VAL_94
  | XLAT_VAL_94
#  endif
#  ifdef XLAT_VAL_95
  | XLAT_VAL_95
#  endif
#  ifdef XLAT_VAL_96
  | XLAT_VAL_96
#  endif
#  ifdef XLAT_VAL_97
  | XLAT_VAL_97
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
#  ifdef XLAT_STR_79
  + sizeof(XLAT_STR_79)
#  endif
#  ifdef XLAT_STR_80
  + sizeof(XLAT_STR_80)
#  endif
#  ifdef XLAT_STR_81
  + sizeof(XLAT_STR_81)
#  endif
#  ifdef XLAT_STR_82
  + sizeof(XLAT_STR_82)
#  endif
#  ifdef XLAT_STR_83
  + sizeof(XLAT_STR_83)
#  endif
#  ifdef XLAT_STR_84
  + sizeof(XLAT_STR_84)
#  endif
#  ifdef XLAT_STR_85
  + sizeof(XLAT_STR_85)
#  endif
#  ifdef XLAT_STR_86
  + sizeof(XLAT_STR_86)
#  endif
#  ifdef XLAT_STR_87
  + sizeof(XLAT_STR_87)
#  endif
#  ifdef XLAT_STR_88
  + sizeof(XLAT_STR_88)
#  endif
#  ifdef XLAT_STR_89
  + sizeof(XLAT_STR_89)
#  endif
#  ifdef XLAT_STR_90
  + sizeof(XLAT_STR_90)
#  endif
#  ifdef XLAT_STR_91
  + sizeof(XLAT_STR_91)
#  endif
#  ifdef XLAT_STR_92
  + sizeof(XLAT_STR_92)
#  endif
#  ifdef XLAT_STR_93
  + sizeof(XLAT_STR_93)
#  endif
#  ifdef XLAT_STR_94
  + sizeof(XLAT_STR_94)
#  endif
#  ifdef XLAT_STR_95
  + sizeof(XLAT_STR_95)
#  endif
#  ifdef XLAT_STR_96
  + sizeof(XLAT_STR_96)
#  endif
#  ifdef XLAT_STR_97
  + sizeof(XLAT_STR_97)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
#  undef XLAT_STR_79
#  undef XLAT_VAL_79
#  undef XLAT_STR_80
#  undef XLAT_VAL_80
#  undef XLAT_STR_81
#  undef XLAT_VAL_81
#  undef XLAT_STR_82
#  undef XLAT_VAL_82
#  undef XLAT_STR_83
#  undef XLAT_VAL_83
#  undef XLAT_STR_84
#  undef XLAT_VAL_84
#  undef XLAT_STR_85
#  undef XLAT_VAL_85
#  undef XLAT_STR_86
#  undef XLAT_VAL_86
#  undef XLAT_STR_87
#  undef XLAT_VAL_87
#  undef XLAT_STR_88
#  undef XLAT_VAL_88
#  undef XLAT_STR_89
#  undef XLAT_VAL_89
#  undef XLAT_STR_90
#  undef XLAT_VAL_90
#  undef XLAT_STR_91
#  undef XLAT_VAL_91
#  undef XLAT_STR_92
#  undef XLAT_VAL_92
#  undef XLAT_STR_93
#  undef XLAT_VAL_93
#  undef XLAT_STR_94
#  undef XLAT_VAL_94
#  undef XLAT_STR_95
#  undef XLAT_VAL_95
#  undef XLAT_STR_96
#  undef XLAT_VAL_96
#  undef XLAT_STR_97
#  undef XLAT_VAL_97
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
