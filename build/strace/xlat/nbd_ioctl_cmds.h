/* Generated by ./src/xlat/gen.sh from ./src/xlat/nbd_ioctl_cmds.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NBD_SET_SOCK) || (defined(HAVE_DECL_NBD_SET_SOCK) && HAVE_DECL_NBD_SET_SOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_SET_SOCK) == (_IO( 0xab, 0 )), "NBD_SET_SOCK != _IO( 0xab, 0 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_SET_SOCK _IO( 0xab, 0 )
#endif
#if defined(NBD_SET_BLKSIZE) || (defined(HAVE_DECL_NBD_SET_BLKSIZE) && HAVE_DECL_NBD_SET_BLKSIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_SET_BLKSIZE) == (_IO( 0xab, 1 )), "NBD_SET_BLKSIZE != _IO( 0xab, 1 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_SET_BLKSIZE _IO( 0xab, 1 )
#endif
#if defined(NBD_SET_SIZE) || (defined(HAVE_DECL_NBD_SET_SIZE) && HAVE_DECL_NBD_SET_SIZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_SET_SIZE) == (_IO( 0xab, 2 )), "NBD_SET_SIZE != _IO( 0xab, 2 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_SET_SIZE _IO( 0xab, 2 )
#endif
#if defined(NBD_DO_IT) || (defined(HAVE_DECL_NBD_DO_IT) && HAVE_DECL_NBD_DO_IT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_DO_IT) == (_IO( 0xab, 3 )), "NBD_DO_IT != _IO( 0xab, 3 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_DO_IT _IO( 0xab, 3 )
#endif
#if defined(NBD_CLEAR_SOCK) || (defined(HAVE_DECL_NBD_CLEAR_SOCK) && HAVE_DECL_NBD_CLEAR_SOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_CLEAR_SOCK) == (_IO( 0xab, 4 )), "NBD_CLEAR_SOCK != _IO( 0xab, 4 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_CLEAR_SOCK _IO( 0xab, 4 )
#endif
#if defined(NBD_CLEAR_QUE) || (defined(HAVE_DECL_NBD_CLEAR_QUE) && HAVE_DECL_NBD_CLEAR_QUE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_CLEAR_QUE) == (_IO( 0xab, 5 )), "NBD_CLEAR_QUE != _IO( 0xab, 5 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_CLEAR_QUE _IO( 0xab, 5 )
#endif
#if defined(NBD_PRINT_DEBUG) || (defined(HAVE_DECL_NBD_PRINT_DEBUG) && HAVE_DECL_NBD_PRINT_DEBUG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_PRINT_DEBUG) == (_IO( 0xab, 6 )), "NBD_PRINT_DEBUG != _IO( 0xab, 6 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_PRINT_DEBUG _IO( 0xab, 6 )
#endif
#if defined(NBD_SET_SIZE_BLOCKS) || (defined(HAVE_DECL_NBD_SET_SIZE_BLOCKS) && HAVE_DECL_NBD_SET_SIZE_BLOCKS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_SET_SIZE_BLOCKS) == (_IO( 0xab, 7 )), "NBD_SET_SIZE_BLOCKS != _IO( 0xab, 7 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_SET_SIZE_BLOCKS _IO( 0xab, 7 )
#endif
#if defined(NBD_DISCONNECT) || (defined(HAVE_DECL_NBD_DISCONNECT) && HAVE_DECL_NBD_DISCONNECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_DISCONNECT) == (_IO( 0xab, 8 )), "NBD_DISCONNECT != _IO( 0xab, 8 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_DISCONNECT _IO( 0xab, 8 )
#endif
#if defined(NBD_SET_TIMEOUT) || (defined(HAVE_DECL_NBD_SET_TIMEOUT) && HAVE_DECL_NBD_SET_TIMEOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_SET_TIMEOUT) == (_IO( 0xab, 9 )), "NBD_SET_TIMEOUT != _IO( 0xab, 9 )");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_SET_TIMEOUT _IO( 0xab, 9 )
#endif
#if defined(NBD_SET_FLAGS) || (defined(HAVE_DECL_NBD_SET_FLAGS) && HAVE_DECL_NBD_SET_FLAGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NBD_SET_FLAGS) == (_IO( 0xab, 10)), "NBD_SET_FLAGS != _IO( 0xab, 10)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NBD_SET_FLAGS _IO( 0xab, 10)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat nbd_ioctl_cmds in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data nbd_ioctl_cmds_xdata[] = {
 XLAT(NBD_SET_SOCK),
 #define XLAT_VAL_0 ((unsigned) (NBD_SET_SOCK))
 #define XLAT_STR_0 STRINGIFY(NBD_SET_SOCK)
 XLAT(NBD_SET_BLKSIZE),
 #define XLAT_VAL_1 ((unsigned) (NBD_SET_BLKSIZE))
 #define XLAT_STR_1 STRINGIFY(NBD_SET_BLKSIZE)
 XLAT(NBD_SET_SIZE),
 #define XLAT_VAL_2 ((unsigned) (NBD_SET_SIZE))
 #define XLAT_STR_2 STRINGIFY(NBD_SET_SIZE)
 XLAT(NBD_DO_IT),
 #define XLAT_VAL_3 ((unsigned) (NBD_DO_IT))
 #define XLAT_STR_3 STRINGIFY(NBD_DO_IT)
 XLAT(NBD_CLEAR_SOCK),
 #define XLAT_VAL_4 ((unsigned) (NBD_CLEAR_SOCK))
 #define XLAT_STR_4 STRINGIFY(NBD_CLEAR_SOCK)
 XLAT(NBD_CLEAR_QUE),
 #define XLAT_VAL_5 ((unsigned) (NBD_CLEAR_QUE))
 #define XLAT_STR_5 STRINGIFY(NBD_CLEAR_QUE)
 XLAT(NBD_PRINT_DEBUG),
 #define XLAT_VAL_6 ((unsigned) (NBD_PRINT_DEBUG))
 #define XLAT_STR_6 STRINGIFY(NBD_PRINT_DEBUG)
 XLAT(NBD_SET_SIZE_BLOCKS),
 #define XLAT_VAL_7 ((unsigned) (NBD_SET_SIZE_BLOCKS))
 #define XLAT_STR_7 STRINGIFY(NBD_SET_SIZE_BLOCKS)
 XLAT(NBD_DISCONNECT),
 #define XLAT_VAL_8 ((unsigned) (NBD_DISCONNECT))
 #define XLAT_STR_8 STRINGIFY(NBD_DISCONNECT)
 XLAT(NBD_SET_TIMEOUT),
 #define XLAT_VAL_9 ((unsigned) (NBD_SET_TIMEOUT))
 #define XLAT_STR_9 STRINGIFY(NBD_SET_TIMEOUT)
 XLAT(NBD_SET_FLAGS),
 #define XLAT_VAL_10 ((unsigned) (NBD_SET_FLAGS))
 #define XLAT_STR_10 STRINGIFY(NBD_SET_FLAGS)
};
static
const struct xlat nbd_ioctl_cmds[1] = { {
 .data = nbd_ioctl_cmds_xdata,
 .size = ARRAY_SIZE(nbd_ioctl_cmds_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
