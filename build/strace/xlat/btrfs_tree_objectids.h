/* Generated by ./src/xlat/gen.sh from ./src/xlat/btrfs_tree_objectids.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat btrfs_tree_objectids[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data btrfs_tree_objectids_xdata[] = {
 XLAT_TYPE(uint64_t, BTRFS_ROOT_TREE_OBJECTID),
 #define XLAT_VAL_0 ((uint64_t) (BTRFS_ROOT_TREE_OBJECTID))
 #define XLAT_STR_0 STRINGIFY(BTRFS_ROOT_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_EXTENT_TREE_OBJECTID),
 #define XLAT_VAL_1 ((uint64_t) (BTRFS_EXTENT_TREE_OBJECTID))
 #define XLAT_STR_1 STRINGIFY(BTRFS_EXTENT_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_CHUNK_TREE_OBJECTID),
 #define XLAT_VAL_2 ((uint64_t) (BTRFS_CHUNK_TREE_OBJECTID))
 #define XLAT_STR_2 STRINGIFY(BTRFS_CHUNK_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_DEV_TREE_OBJECTID),
 #define XLAT_VAL_3 ((uint64_t) (BTRFS_DEV_TREE_OBJECTID))
 #define XLAT_STR_3 STRINGIFY(BTRFS_DEV_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_FS_TREE_OBJECTID),
 #define XLAT_VAL_4 ((uint64_t) (BTRFS_FS_TREE_OBJECTID))
 #define XLAT_STR_4 STRINGIFY(BTRFS_FS_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_ROOT_TREE_DIR_OBJECTID),
 #define XLAT_VAL_5 ((uint64_t) (BTRFS_ROOT_TREE_DIR_OBJECTID))
 #define XLAT_STR_5 STRINGIFY(BTRFS_ROOT_TREE_DIR_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_CSUM_TREE_OBJECTID),
 #define XLAT_VAL_6 ((uint64_t) (BTRFS_CSUM_TREE_OBJECTID))
 #define XLAT_STR_6 STRINGIFY(BTRFS_CSUM_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_QUOTA_TREE_OBJECTID),
 #define XLAT_VAL_7 ((uint64_t) (BTRFS_QUOTA_TREE_OBJECTID))
 #define XLAT_STR_7 STRINGIFY(BTRFS_QUOTA_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_UUID_TREE_OBJECTID),
 #define XLAT_VAL_8 ((uint64_t) (BTRFS_UUID_TREE_OBJECTID))
 #define XLAT_STR_8 STRINGIFY(BTRFS_UUID_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_FREE_SPACE_TREE_OBJECTID),
 #define XLAT_VAL_9 ((uint64_t) (BTRFS_FREE_SPACE_TREE_OBJECTID))
 #define XLAT_STR_9 STRINGIFY(BTRFS_FREE_SPACE_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_BLOCK_GROUP_TREE_OBJECTID),
 #define XLAT_VAL_10 ((uint64_t) (BTRFS_BLOCK_GROUP_TREE_OBJECTID))
 #define XLAT_STR_10 STRINGIFY(BTRFS_BLOCK_GROUP_TREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_FIRST_FREE_OBJECTID),
 #define XLAT_VAL_11 ((uint64_t) (BTRFS_FIRST_FREE_OBJECTID))
 #define XLAT_STR_11 STRINGIFY(BTRFS_FIRST_FREE_OBJECTID)
 XLAT_TYPE(uint64_t, BTRFS_LAST_FREE_OBJECTID),
 #define XLAT_VAL_12 ((uint64_t) (BTRFS_LAST_FREE_OBJECTID))
 #define XLAT_STR_12 STRINGIFY(BTRFS_LAST_FREE_OBJECTID)
 XLAT_TYPE(uint64_t, UINT64_MAX),
 #define XLAT_VAL_13 ((uint64_t) (UINT64_MAX))
 #define XLAT_STR_13 STRINGIFY(UINT64_MAX)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat btrfs_tree_objectids[1] = { {
 .data = btrfs_tree_objectids_xdata,
 .size = ARRAY_SIZE(btrfs_tree_objectids_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
