/* Generated by ./src/xlat/gen.sh from ./src/xlat/sysctl_net_core.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NET_CORE_WMEM_MAX) || (defined(HAVE_DECL_NET_CORE_WMEM_MAX) && HAVE_DECL_NET_CORE_WMEM_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_WMEM_MAX) == (1), "NET_CORE_WMEM_MAX != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_WMEM_MAX 1
#endif
#if defined(NET_CORE_RMEM_MAX) || (defined(HAVE_DECL_NET_CORE_RMEM_MAX) && HAVE_DECL_NET_CORE_RMEM_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_RMEM_MAX) == (2), "NET_CORE_RMEM_MAX != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_RMEM_MAX 2
#endif
#if defined(NET_CORE_WMEM_DEFAULT) || (defined(HAVE_DECL_NET_CORE_WMEM_DEFAULT) && HAVE_DECL_NET_CORE_WMEM_DEFAULT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_WMEM_DEFAULT) == (3), "NET_CORE_WMEM_DEFAULT != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_WMEM_DEFAULT 3
#endif
#if defined(NET_CORE_RMEM_DEFAULT) || (defined(HAVE_DECL_NET_CORE_RMEM_DEFAULT) && HAVE_DECL_NET_CORE_RMEM_DEFAULT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_RMEM_DEFAULT) == (4), "NET_CORE_RMEM_DEFAULT != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_RMEM_DEFAULT 4
#endif
#if defined(NET_CORE_DESTROY_DELAY) || (defined(HAVE_DECL_NET_CORE_DESTROY_DELAY) && HAVE_DECL_NET_CORE_DESTROY_DELAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_DESTROY_DELAY) == (5), "NET_CORE_DESTROY_DELAY != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_DESTROY_DELAY 5
#endif
#if defined(NET_CORE_MAX_BACKLOG) || (defined(HAVE_DECL_NET_CORE_MAX_BACKLOG) && HAVE_DECL_NET_CORE_MAX_BACKLOG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_MAX_BACKLOG) == (6), "NET_CORE_MAX_BACKLOG != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_MAX_BACKLOG 6
#endif
#if defined(NET_CORE_FASTROUTE) || (defined(HAVE_DECL_NET_CORE_FASTROUTE) && HAVE_DECL_NET_CORE_FASTROUTE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_FASTROUTE) == (7), "NET_CORE_FASTROUTE != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_FASTROUTE 7
#endif
#if defined(NET_CORE_MSG_COST) || (defined(HAVE_DECL_NET_CORE_MSG_COST) && HAVE_DECL_NET_CORE_MSG_COST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_MSG_COST) == (8), "NET_CORE_MSG_COST != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_MSG_COST 8
#endif
#if defined(NET_CORE_MSG_BURST) || (defined(HAVE_DECL_NET_CORE_MSG_BURST) && HAVE_DECL_NET_CORE_MSG_BURST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_MSG_BURST) == (9), "NET_CORE_MSG_BURST != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_MSG_BURST 9
#endif
#if defined(NET_CORE_OPTMEM_MAX) || (defined(HAVE_DECL_NET_CORE_OPTMEM_MAX) && HAVE_DECL_NET_CORE_OPTMEM_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_OPTMEM_MAX) == (10), "NET_CORE_OPTMEM_MAX != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_OPTMEM_MAX 10
#endif
#if defined(NET_CORE_HOT_LIST_LENGTH) || (defined(HAVE_DECL_NET_CORE_HOT_LIST_LENGTH) && HAVE_DECL_NET_CORE_HOT_LIST_LENGTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_HOT_LIST_LENGTH) == (11), "NET_CORE_HOT_LIST_LENGTH != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_HOT_LIST_LENGTH 11
#endif
#if defined(NET_CORE_DIVERT_VERSION) || (defined(HAVE_DECL_NET_CORE_DIVERT_VERSION) && HAVE_DECL_NET_CORE_DIVERT_VERSION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_DIVERT_VERSION) == (12), "NET_CORE_DIVERT_VERSION != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_DIVERT_VERSION 12
#endif
#if defined(NET_CORE_NO_CONG_THRESH) || (defined(HAVE_DECL_NET_CORE_NO_CONG_THRESH) && HAVE_DECL_NET_CORE_NO_CONG_THRESH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_NO_CONG_THRESH) == (13), "NET_CORE_NO_CONG_THRESH != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_NO_CONG_THRESH 13
#endif
#if defined(NET_CORE_NO_CONG) || (defined(HAVE_DECL_NET_CORE_NO_CONG) && HAVE_DECL_NET_CORE_NO_CONG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_NO_CONG) == (14), "NET_CORE_NO_CONG != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_NO_CONG 14
#endif
#if defined(NET_CORE_LO_CONG) || (defined(HAVE_DECL_NET_CORE_LO_CONG) && HAVE_DECL_NET_CORE_LO_CONG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_LO_CONG) == (15), "NET_CORE_LO_CONG != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_LO_CONG 15
#endif
#if defined(NET_CORE_MOD_CONG) || (defined(HAVE_DECL_NET_CORE_MOD_CONG) && HAVE_DECL_NET_CORE_MOD_CONG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_MOD_CONG) == (16), "NET_CORE_MOD_CONG != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_MOD_CONG 16
#endif
#if defined(NET_CORE_DEV_WEIGHT) || (defined(HAVE_DECL_NET_CORE_DEV_WEIGHT) && HAVE_DECL_NET_CORE_DEV_WEIGHT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_DEV_WEIGHT) == (17), "NET_CORE_DEV_WEIGHT != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_DEV_WEIGHT 17
#endif
#if defined(NET_CORE_SOMAXCONN) || (defined(HAVE_DECL_NET_CORE_SOMAXCONN) && HAVE_DECL_NET_CORE_SOMAXCONN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_SOMAXCONN) == (18), "NET_CORE_SOMAXCONN != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_SOMAXCONN 18
#endif
#if defined(NET_CORE_BUDGET) || (defined(HAVE_DECL_NET_CORE_BUDGET) && HAVE_DECL_NET_CORE_BUDGET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_BUDGET) == (19), "NET_CORE_BUDGET != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_BUDGET 19
#endif
#if defined(NET_CORE_AEVENT_ETIME) || (defined(HAVE_DECL_NET_CORE_AEVENT_ETIME) && HAVE_DECL_NET_CORE_AEVENT_ETIME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_AEVENT_ETIME) == (20), "NET_CORE_AEVENT_ETIME != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_AEVENT_ETIME 20
#endif
#if defined(NET_CORE_AEVENT_RSEQTH) || (defined(HAVE_DECL_NET_CORE_AEVENT_RSEQTH) && HAVE_DECL_NET_CORE_AEVENT_RSEQTH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_AEVENT_RSEQTH) == (21), "NET_CORE_AEVENT_RSEQTH != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_AEVENT_RSEQTH 21
#endif
#if defined(NET_CORE_WARNINGS) || (defined(HAVE_DECL_NET_CORE_WARNINGS) && HAVE_DECL_NET_CORE_WARNINGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NET_CORE_WARNINGS) == (22), "NET_CORE_WARNINGS != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NET_CORE_WARNINGS 22
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sysctl_net_core in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sysctl_net_core_xdata[] = {

 [NET_CORE_WMEM_MAX] = XLAT(NET_CORE_WMEM_MAX),
 #define XLAT_VAL_0 ((unsigned) (NET_CORE_WMEM_MAX))
 #define XLAT_STR_0 STRINGIFY(NET_CORE_WMEM_MAX)
 [NET_CORE_RMEM_MAX] = XLAT(NET_CORE_RMEM_MAX),
 #define XLAT_VAL_1 ((unsigned) (NET_CORE_RMEM_MAX))
 #define XLAT_STR_1 STRINGIFY(NET_CORE_RMEM_MAX)
 [NET_CORE_WMEM_DEFAULT] = XLAT(NET_CORE_WMEM_DEFAULT),
 #define XLAT_VAL_2 ((unsigned) (NET_CORE_WMEM_DEFAULT))
 #define XLAT_STR_2 STRINGIFY(NET_CORE_WMEM_DEFAULT)
 [NET_CORE_RMEM_DEFAULT] = XLAT(NET_CORE_RMEM_DEFAULT),
 #define XLAT_VAL_3 ((unsigned) (NET_CORE_RMEM_DEFAULT))
 #define XLAT_STR_3 STRINGIFY(NET_CORE_RMEM_DEFAULT)

 [NET_CORE_DESTROY_DELAY] = XLAT(NET_CORE_DESTROY_DELAY),
 #define XLAT_VAL_4 ((unsigned) (NET_CORE_DESTROY_DELAY))
 #define XLAT_STR_4 STRINGIFY(NET_CORE_DESTROY_DELAY)

 [NET_CORE_MAX_BACKLOG] = XLAT(NET_CORE_MAX_BACKLOG),
 #define XLAT_VAL_5 ((unsigned) (NET_CORE_MAX_BACKLOG))
 #define XLAT_STR_5 STRINGIFY(NET_CORE_MAX_BACKLOG)

 [NET_CORE_FASTROUTE] = XLAT(NET_CORE_FASTROUTE),
 #define XLAT_VAL_6 ((unsigned) (NET_CORE_FASTROUTE))
 #define XLAT_STR_6 STRINGIFY(NET_CORE_FASTROUTE)

 [NET_CORE_MSG_COST] = XLAT(NET_CORE_MSG_COST),
 #define XLAT_VAL_7 ((unsigned) (NET_CORE_MSG_COST))
 #define XLAT_STR_7 STRINGIFY(NET_CORE_MSG_COST)

 [NET_CORE_MSG_BURST] = XLAT(NET_CORE_MSG_BURST),
 #define XLAT_VAL_8 ((unsigned) (NET_CORE_MSG_BURST))
 #define XLAT_STR_8 STRINGIFY(NET_CORE_MSG_BURST)

 [NET_CORE_OPTMEM_MAX] = XLAT(NET_CORE_OPTMEM_MAX),
 #define XLAT_VAL_9 ((unsigned) (NET_CORE_OPTMEM_MAX))
 #define XLAT_STR_9 STRINGIFY(NET_CORE_OPTMEM_MAX)

 [NET_CORE_HOT_LIST_LENGTH] = XLAT(NET_CORE_HOT_LIST_LENGTH),
 #define XLAT_VAL_10 ((unsigned) (NET_CORE_HOT_LIST_LENGTH))
 #define XLAT_STR_10 STRINGIFY(NET_CORE_HOT_LIST_LENGTH)

 [NET_CORE_DIVERT_VERSION] = XLAT(NET_CORE_DIVERT_VERSION),
 #define XLAT_VAL_11 ((unsigned) (NET_CORE_DIVERT_VERSION))
 #define XLAT_STR_11 STRINGIFY(NET_CORE_DIVERT_VERSION)

 [NET_CORE_NO_CONG_THRESH] = XLAT(NET_CORE_NO_CONG_THRESH),
 #define XLAT_VAL_12 ((unsigned) (NET_CORE_NO_CONG_THRESH))
 #define XLAT_STR_12 STRINGIFY(NET_CORE_NO_CONG_THRESH)
 [NET_CORE_NO_CONG] = XLAT(NET_CORE_NO_CONG),
 #define XLAT_VAL_13 ((unsigned) (NET_CORE_NO_CONG))
 #define XLAT_STR_13 STRINGIFY(NET_CORE_NO_CONG)
 [NET_CORE_LO_CONG] = XLAT(NET_CORE_LO_CONG),
 #define XLAT_VAL_14 ((unsigned) (NET_CORE_LO_CONG))
 #define XLAT_STR_14 STRINGIFY(NET_CORE_LO_CONG)
 [NET_CORE_MOD_CONG] = XLAT(NET_CORE_MOD_CONG),
 #define XLAT_VAL_15 ((unsigned) (NET_CORE_MOD_CONG))
 #define XLAT_STR_15 STRINGIFY(NET_CORE_MOD_CONG)

 [NET_CORE_DEV_WEIGHT] = XLAT(NET_CORE_DEV_WEIGHT),
 #define XLAT_VAL_16 ((unsigned) (NET_CORE_DEV_WEIGHT))
 #define XLAT_STR_16 STRINGIFY(NET_CORE_DEV_WEIGHT)

 [NET_CORE_SOMAXCONN] = XLAT(NET_CORE_SOMAXCONN),
 #define XLAT_VAL_17 ((unsigned) (NET_CORE_SOMAXCONN))
 #define XLAT_STR_17 STRINGIFY(NET_CORE_SOMAXCONN)

 [NET_CORE_BUDGET] = XLAT(NET_CORE_BUDGET),
 #define XLAT_VAL_18 ((unsigned) (NET_CORE_BUDGET))
 #define XLAT_STR_18 STRINGIFY(NET_CORE_BUDGET)

 [NET_CORE_AEVENT_ETIME] = XLAT(NET_CORE_AEVENT_ETIME),
 #define XLAT_VAL_19 ((unsigned) (NET_CORE_AEVENT_ETIME))
 #define XLAT_STR_19 STRINGIFY(NET_CORE_AEVENT_ETIME)
 [NET_CORE_AEVENT_RSEQTH] = XLAT(NET_CORE_AEVENT_RSEQTH),
 #define XLAT_VAL_20 ((unsigned) (NET_CORE_AEVENT_RSEQTH))
 #define XLAT_STR_20 STRINGIFY(NET_CORE_AEVENT_RSEQTH)

 [NET_CORE_WARNINGS] = XLAT(NET_CORE_WARNINGS),
 #define XLAT_VAL_21 ((unsigned) (NET_CORE_WARNINGS))
 #define XLAT_STR_21 STRINGIFY(NET_CORE_WARNINGS)
};
static
const struct xlat sysctl_net_core[1] = { {
 .data = sysctl_net_core_xdata,
 .size = ARRAY_SIZE(sysctl_net_core_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
