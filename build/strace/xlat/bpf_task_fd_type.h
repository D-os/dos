/* Generated by ./src/xlat/gen.sh from ./src/xlat/bpf_task_fd_type.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BPF_FD_TYPE_RAW_TRACEPOINT) || (defined(HAVE_DECL_BPF_FD_TYPE_RAW_TRACEPOINT) && HAVE_DECL_BPF_FD_TYPE_RAW_TRACEPOINT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_FD_TYPE_RAW_TRACEPOINT) == (0), "BPF_FD_TYPE_RAW_TRACEPOINT != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_FD_TYPE_RAW_TRACEPOINT 0
#endif
#if defined(BPF_FD_TYPE_TRACEPOINT) || (defined(HAVE_DECL_BPF_FD_TYPE_TRACEPOINT) && HAVE_DECL_BPF_FD_TYPE_TRACEPOINT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_FD_TYPE_TRACEPOINT) == (1), "BPF_FD_TYPE_TRACEPOINT != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_FD_TYPE_TRACEPOINT 1
#endif
#if defined(BPF_FD_TYPE_KPROBE) || (defined(HAVE_DECL_BPF_FD_TYPE_KPROBE) && HAVE_DECL_BPF_FD_TYPE_KPROBE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_FD_TYPE_KPROBE) == (2), "BPF_FD_TYPE_KPROBE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_FD_TYPE_KPROBE 2
#endif
#if defined(BPF_FD_TYPE_KRETPROBE) || (defined(HAVE_DECL_BPF_FD_TYPE_KRETPROBE) && HAVE_DECL_BPF_FD_TYPE_KRETPROBE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_FD_TYPE_KRETPROBE) == (3), "BPF_FD_TYPE_KRETPROBE != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_FD_TYPE_KRETPROBE 3
#endif
#if defined(BPF_FD_TYPE_UPROBE) || (defined(HAVE_DECL_BPF_FD_TYPE_UPROBE) && HAVE_DECL_BPF_FD_TYPE_UPROBE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_FD_TYPE_UPROBE) == (4), "BPF_FD_TYPE_UPROBE != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_FD_TYPE_UPROBE 4
#endif
#if defined(BPF_FD_TYPE_URETPROBE) || (defined(HAVE_DECL_BPF_FD_TYPE_URETPROBE) && HAVE_DECL_BPF_FD_TYPE_URETPROBE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_FD_TYPE_URETPROBE) == (5), "BPF_FD_TYPE_URETPROBE != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_FD_TYPE_URETPROBE 5
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat bpf_task_fd_type in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data bpf_task_fd_type_xdata[] = {
 [BPF_FD_TYPE_RAW_TRACEPOINT] = XLAT(BPF_FD_TYPE_RAW_TRACEPOINT),
 #define XLAT_VAL_0 ((unsigned) (BPF_FD_TYPE_RAW_TRACEPOINT))
 #define XLAT_STR_0 STRINGIFY(BPF_FD_TYPE_RAW_TRACEPOINT)
 [BPF_FD_TYPE_TRACEPOINT] = XLAT(BPF_FD_TYPE_TRACEPOINT),
 #define XLAT_VAL_1 ((unsigned) (BPF_FD_TYPE_TRACEPOINT))
 #define XLAT_STR_1 STRINGIFY(BPF_FD_TYPE_TRACEPOINT)
 [BPF_FD_TYPE_KPROBE] = XLAT(BPF_FD_TYPE_KPROBE),
 #define XLAT_VAL_2 ((unsigned) (BPF_FD_TYPE_KPROBE))
 #define XLAT_STR_2 STRINGIFY(BPF_FD_TYPE_KPROBE)
 [BPF_FD_TYPE_KRETPROBE] = XLAT(BPF_FD_TYPE_KRETPROBE),
 #define XLAT_VAL_3 ((unsigned) (BPF_FD_TYPE_KRETPROBE))
 #define XLAT_STR_3 STRINGIFY(BPF_FD_TYPE_KRETPROBE)
 [BPF_FD_TYPE_UPROBE] = XLAT(BPF_FD_TYPE_UPROBE),
 #define XLAT_VAL_4 ((unsigned) (BPF_FD_TYPE_UPROBE))
 #define XLAT_STR_4 STRINGIFY(BPF_FD_TYPE_UPROBE)
 [BPF_FD_TYPE_URETPROBE] = XLAT(BPF_FD_TYPE_URETPROBE),
 #define XLAT_VAL_5 ((unsigned) (BPF_FD_TYPE_URETPROBE))
 #define XLAT_STR_5 STRINGIFY(BPF_FD_TYPE_URETPROBE)
};
static
const struct xlat bpf_task_fd_type[1] = { {
 .data = bpf_task_fd_type_xdata,
 .size = ARRAY_SIZE(bpf_task_fd_type_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
