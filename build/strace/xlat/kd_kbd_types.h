/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_kbd_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(KB_84) || (defined(HAVE_DECL_KB_84) && HAVE_DECL_KB_84)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KB_84) == (0x1), "KB_84 != 0x1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KB_84 0x1
#endif
#if defined(KB_101) || (defined(HAVE_DECL_KB_101) && HAVE_DECL_KB_101)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KB_101) == (0x2), "KB_101 != 0x2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KB_101 0x2
#endif
#if defined(KB_OTHER) || (defined(HAVE_DECL_KB_OTHER) && HAVE_DECL_KB_OTHER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KB_OTHER) == (0x3), "KB_OTHER != 0x3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KB_OTHER 0x3
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat kd_kbd_types in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_kbd_types_xdata[] = {
 XLAT(KB_84),
 #define XLAT_VAL_0 ((unsigned) (KB_84))
 #define XLAT_STR_0 STRINGIFY(KB_84)
 XLAT(KB_101),
 #define XLAT_VAL_1 ((unsigned) (KB_101))
 #define XLAT_STR_1 STRINGIFY(KB_101)
 XLAT(KB_OTHER),
 #define XLAT_VAL_2 ((unsigned) (KB_OTHER))
 #define XLAT_STR_2 STRINGIFY(KB_OTHER)
};
static
const struct xlat kd_kbd_types[1] = { {
 .data = kd_kbd_types_xdata,
 .size = ARRAY_SIZE(kd_kbd_types_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
