/* Generated by ./src/xlat/gen.sh from ./src/xlat/elf_em.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(EM_NONE) || (defined(HAVE_DECL_EM_NONE) && HAVE_DECL_EM_NONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NONE) == (0), "EM_NONE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NONE 0
#endif
#if defined(EM_NONE) || (defined(HAVE_DECL_EM_NONE) && HAVE_DECL_EM_NONE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_NONE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_NONE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_NONE)
#endif
#if defined(EM_M32) || (defined(HAVE_DECL_EM_M32) && HAVE_DECL_EM_M32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_M32) == (1), "EM_M32 != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_M32 1
#endif
#if defined(EM_M32) || (defined(HAVE_DECL_EM_M32) && HAVE_DECL_EM_M32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_M32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_M32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_M32)
#endif
#if defined(EM_SPARC) || (defined(HAVE_DECL_EM_SPARC) && HAVE_DECL_EM_SPARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SPARC) == (2), "EM_SPARC != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SPARC 2
#endif
#if defined(EM_SPARC) || (defined(HAVE_DECL_EM_SPARC) && HAVE_DECL_EM_SPARC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SPARC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SPARC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SPARC)
#endif
#if defined(EM_386) || (defined(HAVE_DECL_EM_386) && HAVE_DECL_EM_386)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_386) == (3), "EM_386 != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_386 3
#endif
#if defined(EM_386) || (defined(HAVE_DECL_EM_386) && HAVE_DECL_EM_386)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_386)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_386"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_386)
#endif
#if defined(EM_68K) || (defined(HAVE_DECL_EM_68K) && HAVE_DECL_EM_68K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68K) == (4), "EM_68K != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68K 4
#endif
#if defined(EM_68K) || (defined(HAVE_DECL_EM_68K) && HAVE_DECL_EM_68K)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_68K)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_68K"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_68K)
#endif
#if defined(EM_88K) || (defined(HAVE_DECL_EM_88K) && HAVE_DECL_EM_88K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_88K) == (5), "EM_88K != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_88K 5
#endif
#if defined(EM_88K) || (defined(HAVE_DECL_EM_88K) && HAVE_DECL_EM_88K)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_88K)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_88K"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_88K)
#endif
#if defined(EM_486) || (defined(HAVE_DECL_EM_486) && HAVE_DECL_EM_486)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_486) == (6), "EM_486 != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_486 6
#endif
#if defined(EM_486) || (defined(HAVE_DECL_EM_486) && HAVE_DECL_EM_486)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_486)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_486"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_486)
#endif
#if defined(EM_860) || (defined(HAVE_DECL_EM_860) && HAVE_DECL_EM_860)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_860) == (7), "EM_860 != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_860 7
#endif
#if defined(EM_860) || (defined(HAVE_DECL_EM_860) && HAVE_DECL_EM_860)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_860)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_860"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_860)
#endif
#if defined(EM_MIPS) || (defined(HAVE_DECL_EM_MIPS) && HAVE_DECL_EM_MIPS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MIPS) == (8), "EM_MIPS != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MIPS 8
#endif
#if defined(EM_MIPS) || (defined(HAVE_DECL_EM_MIPS) && HAVE_DECL_EM_MIPS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MIPS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MIPS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MIPS)
#endif
#if defined(EM_S370) || (defined(HAVE_DECL_EM_S370) && HAVE_DECL_EM_S370)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_S370) == (9), "EM_S370 != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_S370 9
#endif
#if defined(EM_S370) || (defined(HAVE_DECL_EM_S370) && HAVE_DECL_EM_S370)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_S370)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_S370"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_S370)
#endif
#if defined(EM_MIPS_RS3_LE) || (defined(HAVE_DECL_EM_MIPS_RS3_LE) && HAVE_DECL_EM_MIPS_RS3_LE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MIPS_RS3_LE) == (10), "EM_MIPS_RS3_LE != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MIPS_RS3_LE 10
#endif
#if defined(EM_MIPS_RS3_LE) || (defined(HAVE_DECL_EM_MIPS_RS3_LE) && HAVE_DECL_EM_MIPS_RS3_LE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MIPS_RS3_LE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MIPS_RS3_LE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MIPS_RS3_LE)
#endif
#if defined(EM_PARISC) || (defined(HAVE_DECL_EM_PARISC) && HAVE_DECL_EM_PARISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PARISC) == (15), "EM_PARISC != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PARISC 15
#endif
#if defined(EM_PARISC) || (defined(HAVE_DECL_EM_PARISC) && HAVE_DECL_EM_PARISC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_PARISC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_PARISC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_PARISC)
#endif
#if defined(EM_VPP500) || (defined(HAVE_DECL_EM_VPP500) && HAVE_DECL_EM_VPP500)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VPP500) == (17), "EM_VPP500 != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VPP500 17
#endif
#if defined(EM_VPP500) || (defined(HAVE_DECL_EM_VPP500) && HAVE_DECL_EM_VPP500)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_VPP500)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_VPP500"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_VPP500)
#endif
#if defined(EM_SPARC32PLUS) || (defined(HAVE_DECL_EM_SPARC32PLUS) && HAVE_DECL_EM_SPARC32PLUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SPARC32PLUS) == (18), "EM_SPARC32PLUS != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SPARC32PLUS 18
#endif
#if defined(EM_SPARC32PLUS) || (defined(HAVE_DECL_EM_SPARC32PLUS) && HAVE_DECL_EM_SPARC32PLUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SPARC32PLUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SPARC32PLUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SPARC32PLUS)
#endif
#if defined(EM_960) || (defined(HAVE_DECL_EM_960) && HAVE_DECL_EM_960)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_960) == (19), "EM_960 != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_960 19
#endif
#if defined(EM_960) || (defined(HAVE_DECL_EM_960) && HAVE_DECL_EM_960)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_960)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_960"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_960)
#endif
#if defined(EM_PPC) || (defined(HAVE_DECL_EM_PPC) && HAVE_DECL_EM_PPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PPC) == (20), "EM_PPC != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PPC 20
#endif
#if defined(EM_PPC) || (defined(HAVE_DECL_EM_PPC) && HAVE_DECL_EM_PPC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_PPC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_PPC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_PPC)
#endif
#if defined(EM_PPC64) || (defined(HAVE_DECL_EM_PPC64) && HAVE_DECL_EM_PPC64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PPC64) == (21), "EM_PPC64 != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PPC64 21
#endif
#if defined(EM_PPC64) || (defined(HAVE_DECL_EM_PPC64) && HAVE_DECL_EM_PPC64)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_PPC64)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_PPC64"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_PPC64)
#endif
#if defined(EM_S390) || (defined(HAVE_DECL_EM_S390) && HAVE_DECL_EM_S390)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_S390) == (22), "EM_S390 != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_S390 22
#endif
#if defined(EM_S390) || (defined(HAVE_DECL_EM_S390) && HAVE_DECL_EM_S390)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_S390)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_S390"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_S390)
#endif
#if defined(EM_SPU) || (defined(HAVE_DECL_EM_SPU) && HAVE_DECL_EM_SPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SPU) == (23), "EM_SPU != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SPU 23
#endif
#if defined(EM_SPU) || (defined(HAVE_DECL_EM_SPU) && HAVE_DECL_EM_SPU)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SPU)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SPU"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SPU)
#endif
#if defined(EM_V800) || (defined(HAVE_DECL_EM_V800) && HAVE_DECL_EM_V800)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_V800) == (36), "EM_V800 != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_V800 36
#endif
#if defined(EM_V800) || (defined(HAVE_DECL_EM_V800) && HAVE_DECL_EM_V800)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_V800)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_V800"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_V800)
#endif
#if defined(EM_FR20) || (defined(HAVE_DECL_EM_FR20) && HAVE_DECL_EM_FR20)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FR20) == (37), "EM_FR20 != 37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FR20 37
#endif
#if defined(EM_FR20) || (defined(HAVE_DECL_EM_FR20) && HAVE_DECL_EM_FR20)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_FR20)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_FR20"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_FR20)
#endif
#if defined(EM_RH32) || (defined(HAVE_DECL_EM_RH32) && HAVE_DECL_EM_RH32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RH32) == (38), "EM_RH32 != 38");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RH32 38
#endif
#if defined(EM_RH32) || (defined(HAVE_DECL_EM_RH32) && HAVE_DECL_EM_RH32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_RH32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_RH32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_RH32)
#endif
#if defined(EM_RCE) || (defined(HAVE_DECL_EM_RCE) && HAVE_DECL_EM_RCE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RCE) == (39), "EM_RCE != 39");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RCE 39
#endif
#if defined(EM_RCE) || (defined(HAVE_DECL_EM_RCE) && HAVE_DECL_EM_RCE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_RCE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_RCE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_RCE)
#endif
#if defined(EM_ARM) || (defined(HAVE_DECL_EM_ARM) && HAVE_DECL_EM_ARM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARM) == (40), "EM_ARM != 40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARM 40
#endif
#if defined(EM_ARM) || (defined(HAVE_DECL_EM_ARM) && HAVE_DECL_EM_ARM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ARM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ARM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ARM)
#endif
#if defined(EM_SH) || (defined(HAVE_DECL_EM_SH) && HAVE_DECL_EM_SH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SH) == (42), "EM_SH != 42");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SH 42
#endif
#if defined(EM_SH) || (defined(HAVE_DECL_EM_SH) && HAVE_DECL_EM_SH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SH)
#endif
#if defined(EM_SPARCV9) || (defined(HAVE_DECL_EM_SPARCV9) && HAVE_DECL_EM_SPARCV9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SPARCV9) == (43), "EM_SPARCV9 != 43");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SPARCV9 43
#endif
#if defined(EM_SPARCV9) || (defined(HAVE_DECL_EM_SPARCV9) && HAVE_DECL_EM_SPARCV9)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SPARCV9)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SPARCV9"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SPARCV9)
#endif
#if defined(EM_TRICORE) || (defined(HAVE_DECL_EM_TRICORE) && HAVE_DECL_EM_TRICORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TRICORE) == (44), "EM_TRICORE != 44");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TRICORE 44
#endif
#if defined(EM_TRICORE) || (defined(HAVE_DECL_EM_TRICORE) && HAVE_DECL_EM_TRICORE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TRICORE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TRICORE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TRICORE)
#endif
#if defined(EM_ARC) || (defined(HAVE_DECL_EM_ARC) && HAVE_DECL_EM_ARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARC) == (45), "EM_ARC != 45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARC 45
#endif
#if defined(EM_ARC) || (defined(HAVE_DECL_EM_ARC) && HAVE_DECL_EM_ARC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ARC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ARC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ARC)
#endif
#if defined(EM_H8_300) || (defined(HAVE_DECL_EM_H8_300) && HAVE_DECL_EM_H8_300)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_H8_300) == (46), "EM_H8_300 != 46");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_H8_300 46
#endif
#if defined(EM_H8_300) || (defined(HAVE_DECL_EM_H8_300) && HAVE_DECL_EM_H8_300)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_H8_300)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_H8_300"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_H8_300)
#endif
#if defined(EM_H8_300H) || (defined(HAVE_DECL_EM_H8_300H) && HAVE_DECL_EM_H8_300H)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_H8_300H) == (47), "EM_H8_300H != 47");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_H8_300H 47
#endif
#if defined(EM_H8_300H) || (defined(HAVE_DECL_EM_H8_300H) && HAVE_DECL_EM_H8_300H)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_H8_300H)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_H8_300H"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_H8_300H)
#endif
#if defined(EM_H8S) || (defined(HAVE_DECL_EM_H8S) && HAVE_DECL_EM_H8S)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_H8S) == (48), "EM_H8S != 48");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_H8S 48
#endif
#if defined(EM_H8S) || (defined(HAVE_DECL_EM_H8S) && HAVE_DECL_EM_H8S)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_H8S)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_H8S"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_H8S)
#endif
#if defined(EM_H8_500) || (defined(HAVE_DECL_EM_H8_500) && HAVE_DECL_EM_H8_500)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_H8_500) == (49), "EM_H8_500 != 49");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_H8_500 49
#endif
#if defined(EM_H8_500) || (defined(HAVE_DECL_EM_H8_500) && HAVE_DECL_EM_H8_500)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_H8_500)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_H8_500"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_H8_500)
#endif
#if defined(EM_IA_64) || (defined(HAVE_DECL_EM_IA_64) && HAVE_DECL_EM_IA_64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_IA_64) == (50), "EM_IA_64 != 50");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_IA_64 50
#endif
#if defined(EM_IA_64) || (defined(HAVE_DECL_EM_IA_64) && HAVE_DECL_EM_IA_64)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_IA_64)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_IA_64"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_IA_64)
#endif
#if defined(EM_MIPS_X) || (defined(HAVE_DECL_EM_MIPS_X) && HAVE_DECL_EM_MIPS_X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MIPS_X) == (51), "EM_MIPS_X != 51");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MIPS_X 51
#endif
#if defined(EM_MIPS_X) || (defined(HAVE_DECL_EM_MIPS_X) && HAVE_DECL_EM_MIPS_X)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MIPS_X)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MIPS_X"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MIPS_X)
#endif
#if defined(EM_COLDFIRE) || (defined(HAVE_DECL_EM_COLDFIRE) && HAVE_DECL_EM_COLDFIRE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COLDFIRE) == (52), "EM_COLDFIRE != 52");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COLDFIRE 52
#endif
#if defined(EM_COLDFIRE) || (defined(HAVE_DECL_EM_COLDFIRE) && HAVE_DECL_EM_COLDFIRE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_COLDFIRE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_COLDFIRE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_COLDFIRE)
#endif
#if defined(EM_68HC12) || (defined(HAVE_DECL_EM_68HC12) && HAVE_DECL_EM_68HC12)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC12) == (53), "EM_68HC12 != 53");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC12 53
#endif
#if defined(EM_68HC12) || (defined(HAVE_DECL_EM_68HC12) && HAVE_DECL_EM_68HC12)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_68HC12)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_68HC12"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_68HC12)
#endif
#if defined(EM_MMA) || (defined(HAVE_DECL_EM_MMA) && HAVE_DECL_EM_MMA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MMA) == (54), "EM_MMA != 54");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MMA 54
#endif
#if defined(EM_MMA) || (defined(HAVE_DECL_EM_MMA) && HAVE_DECL_EM_MMA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MMA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MMA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MMA)
#endif
#if defined(EM_PCP) || (defined(HAVE_DECL_EM_PCP) && HAVE_DECL_EM_PCP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PCP) == (55), "EM_PCP != 55");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PCP 55
#endif
#if defined(EM_PCP) || (defined(HAVE_DECL_EM_PCP) && HAVE_DECL_EM_PCP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_PCP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_PCP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_PCP)
#endif
#if defined(EM_NCPU) || (defined(HAVE_DECL_EM_NCPU) && HAVE_DECL_EM_NCPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NCPU) == (56), "EM_NCPU != 56");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NCPU 56
#endif
#if defined(EM_NCPU) || (defined(HAVE_DECL_EM_NCPU) && HAVE_DECL_EM_NCPU)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_NCPU)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_NCPU"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_NCPU)
#endif
#if defined(EM_NDR1) || (defined(HAVE_DECL_EM_NDR1) && HAVE_DECL_EM_NDR1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NDR1) == (57), "EM_NDR1 != 57");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NDR1 57
#endif
#if defined(EM_NDR1) || (defined(HAVE_DECL_EM_NDR1) && HAVE_DECL_EM_NDR1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_NDR1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_NDR1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_NDR1)
#endif
#if defined(EM_STARCORE) || (defined(HAVE_DECL_EM_STARCORE) && HAVE_DECL_EM_STARCORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_STARCORE) == (58), "EM_STARCORE != 58");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_STARCORE 58
#endif
#if defined(EM_STARCORE) || (defined(HAVE_DECL_EM_STARCORE) && HAVE_DECL_EM_STARCORE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_STARCORE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_STARCORE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_STARCORE)
#endif
#if defined(EM_ME16) || (defined(HAVE_DECL_EM_ME16) && HAVE_DECL_EM_ME16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ME16) == (59), "EM_ME16 != 59");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ME16 59
#endif
#if defined(EM_ME16) || (defined(HAVE_DECL_EM_ME16) && HAVE_DECL_EM_ME16)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ME16)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ME16"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ME16)
#endif
#if defined(EM_ST100) || (defined(HAVE_DECL_EM_ST100) && HAVE_DECL_EM_ST100)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST100) == (60), "EM_ST100 != 60");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST100 60
#endif
#if defined(EM_ST100) || (defined(HAVE_DECL_EM_ST100) && HAVE_DECL_EM_ST100)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ST100)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ST100"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ST100)
#endif
#if defined(EM_TINYJ) || (defined(HAVE_DECL_EM_TINYJ) && HAVE_DECL_EM_TINYJ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TINYJ) == (61), "EM_TINYJ != 61");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TINYJ 61
#endif
#if defined(EM_TINYJ) || (defined(HAVE_DECL_EM_TINYJ) && HAVE_DECL_EM_TINYJ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TINYJ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TINYJ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TINYJ)
#endif
#if defined(EM_X86_64) || (defined(HAVE_DECL_EM_X86_64) && HAVE_DECL_EM_X86_64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_X86_64) == (62), "EM_X86_64 != 62");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_X86_64 62
#endif
#if defined(EM_X86_64) || (defined(HAVE_DECL_EM_X86_64) && HAVE_DECL_EM_X86_64)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_X86_64)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_X86_64"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_X86_64)
#endif
#if defined(EM_PDSP) || (defined(HAVE_DECL_EM_PDSP) && HAVE_DECL_EM_PDSP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PDSP) == (63), "EM_PDSP != 63");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PDSP 63
#endif
#if defined(EM_PDSP) || (defined(HAVE_DECL_EM_PDSP) && HAVE_DECL_EM_PDSP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_PDSP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_PDSP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_PDSP)
#endif
#if defined(EM_PDP10) || (defined(HAVE_DECL_EM_PDP10) && HAVE_DECL_EM_PDP10)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PDP10) == (64), "EM_PDP10 != 64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PDP10 64
#endif
#if defined(EM_PDP10) || (defined(HAVE_DECL_EM_PDP10) && HAVE_DECL_EM_PDP10)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_PDP10)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_PDP10"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_PDP10)
#endif
#if defined(EM_PDP11) || (defined(HAVE_DECL_EM_PDP11) && HAVE_DECL_EM_PDP11)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PDP11) == (65), "EM_PDP11 != 65");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PDP11 65
#endif
#if defined(EM_PDP11) || (defined(HAVE_DECL_EM_PDP11) && HAVE_DECL_EM_PDP11)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_PDP11)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_PDP11"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_PDP11)
#endif
#if defined(EM_FX66) || (defined(HAVE_DECL_EM_FX66) && HAVE_DECL_EM_FX66)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FX66) == (66), "EM_FX66 != 66");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FX66 66
#endif
#if defined(EM_FX66) || (defined(HAVE_DECL_EM_FX66) && HAVE_DECL_EM_FX66)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_FX66)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_FX66"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_FX66)
#endif
#if defined(EM_ST9PLUS) || (defined(HAVE_DECL_EM_ST9PLUS) && HAVE_DECL_EM_ST9PLUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST9PLUS) == (67), "EM_ST9PLUS != 67");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST9PLUS 67
#endif
#if defined(EM_ST9PLUS) || (defined(HAVE_DECL_EM_ST9PLUS) && HAVE_DECL_EM_ST9PLUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ST9PLUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ST9PLUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ST9PLUS)
#endif
#if defined(EM_ST7) || (defined(HAVE_DECL_EM_ST7) && HAVE_DECL_EM_ST7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST7) == (68), "EM_ST7 != 68");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST7 68
#endif
#if defined(EM_ST7) || (defined(HAVE_DECL_EM_ST7) && HAVE_DECL_EM_ST7)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ST7)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ST7"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ST7)
#endif
#if defined(EM_68HC16) || (defined(HAVE_DECL_EM_68HC16) && HAVE_DECL_EM_68HC16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC16) == (69), "EM_68HC16 != 69");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC16 69
#endif
#if defined(EM_68HC16) || (defined(HAVE_DECL_EM_68HC16) && HAVE_DECL_EM_68HC16)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_68HC16)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_68HC16"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_68HC16)
#endif
#if defined(EM_68HC11) || (defined(HAVE_DECL_EM_68HC11) && HAVE_DECL_EM_68HC11)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC11) == (70), "EM_68HC11 != 70");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC11 70
#endif
#if defined(EM_68HC11) || (defined(HAVE_DECL_EM_68HC11) && HAVE_DECL_EM_68HC11)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_68HC11)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_68HC11"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_68HC11)
#endif
#if defined(EM_68HC08) || (defined(HAVE_DECL_EM_68HC08) && HAVE_DECL_EM_68HC08)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC08) == (71), "EM_68HC08 != 71");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC08 71
#endif
#if defined(EM_68HC08) || (defined(HAVE_DECL_EM_68HC08) && HAVE_DECL_EM_68HC08)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_68HC08)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_68HC08"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_68HC08)
#endif
#if defined(EM_68HC05) || (defined(HAVE_DECL_EM_68HC05) && HAVE_DECL_EM_68HC05)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_68HC05) == (72), "EM_68HC05 != 72");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_68HC05 72
#endif
#if defined(EM_68HC05) || (defined(HAVE_DECL_EM_68HC05) && HAVE_DECL_EM_68HC05)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_68HC05)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_68HC05"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_68HC05)
#endif
#if defined(EM_SVX) || (defined(HAVE_DECL_EM_SVX) && HAVE_DECL_EM_SVX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SVX) == (73), "EM_SVX != 73");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SVX 73
#endif
#if defined(EM_SVX) || (defined(HAVE_DECL_EM_SVX) && HAVE_DECL_EM_SVX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SVX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SVX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SVX)
#endif
#if defined(EM_ST19) || (defined(HAVE_DECL_EM_ST19) && HAVE_DECL_EM_ST19)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST19) == (74), "EM_ST19 != 74");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST19 74
#endif
#if defined(EM_ST19) || (defined(HAVE_DECL_EM_ST19) && HAVE_DECL_EM_ST19)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ST19)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ST19"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ST19)
#endif
#if defined(EM_VAX) || (defined(HAVE_DECL_EM_VAX) && HAVE_DECL_EM_VAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VAX) == (75), "EM_VAX != 75");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VAX 75
#endif
#if defined(EM_VAX) || (defined(HAVE_DECL_EM_VAX) && HAVE_DECL_EM_VAX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_VAX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_VAX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_VAX)
#endif
#if defined(EM_CRIS) || (defined(HAVE_DECL_EM_CRIS) && HAVE_DECL_EM_CRIS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CRIS) == (76), "EM_CRIS != 76");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CRIS 76
#endif
#if defined(EM_CRIS) || (defined(HAVE_DECL_EM_CRIS) && HAVE_DECL_EM_CRIS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CRIS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CRIS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CRIS)
#endif
#if defined(EM_JAVELIN) || (defined(HAVE_DECL_EM_JAVELIN) && HAVE_DECL_EM_JAVELIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_JAVELIN) == (77), "EM_JAVELIN != 77");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_JAVELIN 77
#endif
#if defined(EM_JAVELIN) || (defined(HAVE_DECL_EM_JAVELIN) && HAVE_DECL_EM_JAVELIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_JAVELIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_JAVELIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_JAVELIN)
#endif
#if defined(EM_FIREPATH) || (defined(HAVE_DECL_EM_FIREPATH) && HAVE_DECL_EM_FIREPATH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FIREPATH) == (78), "EM_FIREPATH != 78");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FIREPATH 78
#endif
#if defined(EM_FIREPATH) || (defined(HAVE_DECL_EM_FIREPATH) && HAVE_DECL_EM_FIREPATH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_FIREPATH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_FIREPATH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_FIREPATH)
#endif
#if defined(EM_ZSP) || (defined(HAVE_DECL_EM_ZSP) && HAVE_DECL_EM_ZSP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ZSP) == (79), "EM_ZSP != 79");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ZSP 79
#endif
#if defined(EM_ZSP) || (defined(HAVE_DECL_EM_ZSP) && HAVE_DECL_EM_ZSP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ZSP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ZSP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ZSP)
#endif
#if defined(EM_MMIX) || (defined(HAVE_DECL_EM_MMIX) && HAVE_DECL_EM_MMIX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MMIX) == (80), "EM_MMIX != 80");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MMIX 80
#endif
#if defined(EM_MMIX) || (defined(HAVE_DECL_EM_MMIX) && HAVE_DECL_EM_MMIX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MMIX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MMIX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MMIX)
#endif
#if defined(EM_HUANY) || (defined(HAVE_DECL_EM_HUANY) && HAVE_DECL_EM_HUANY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_HUANY) == (81), "EM_HUANY != 81");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_HUANY 81
#endif
#if defined(EM_HUANY) || (defined(HAVE_DECL_EM_HUANY) && HAVE_DECL_EM_HUANY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_HUANY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_HUANY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_HUANY)
#endif
#if defined(EM_PRISM) || (defined(HAVE_DECL_EM_PRISM) && HAVE_DECL_EM_PRISM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PRISM) == (82), "EM_PRISM != 82");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PRISM 82
#endif
#if defined(EM_PRISM) || (defined(HAVE_DECL_EM_PRISM) && HAVE_DECL_EM_PRISM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_PRISM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_PRISM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_PRISM)
#endif
#if defined(EM_AVR) || (defined(HAVE_DECL_EM_AVR) && HAVE_DECL_EM_AVR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_AVR) == (83), "EM_AVR != 83");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_AVR 83
#endif
#if defined(EM_AVR) || (defined(HAVE_DECL_EM_AVR) && HAVE_DECL_EM_AVR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_AVR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_AVR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_AVR)
#endif
#if defined(EM_FR30) || (defined(HAVE_DECL_EM_FR30) && HAVE_DECL_EM_FR30)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FR30) == (84), "EM_FR30 != 84");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FR30 84
#endif
#if defined(EM_FR30) || (defined(HAVE_DECL_EM_FR30) && HAVE_DECL_EM_FR30)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_FR30)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_FR30"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_FR30)
#endif
#if defined(EM_D10V) || (defined(HAVE_DECL_EM_D10V) && HAVE_DECL_EM_D10V)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_D10V) == (85), "EM_D10V != 85");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_D10V 85
#endif
#if defined(EM_D10V) || (defined(HAVE_DECL_EM_D10V) && HAVE_DECL_EM_D10V)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_D10V)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_D10V"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_D10V)
#endif
#if defined(EM_D30V) || (defined(HAVE_DECL_EM_D30V) && HAVE_DECL_EM_D30V)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_D30V) == (86), "EM_D30V != 86");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_D30V 86
#endif
#if defined(EM_D30V) || (defined(HAVE_DECL_EM_D30V) && HAVE_DECL_EM_D30V)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_D30V)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_D30V"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_D30V)
#endif
#if defined(EM_V850) || (defined(HAVE_DECL_EM_V850) && HAVE_DECL_EM_V850)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_V850) == (87), "EM_V850 != 87");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_V850 87
#endif
#if defined(EM_V850) || (defined(HAVE_DECL_EM_V850) && HAVE_DECL_EM_V850)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_V850)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_V850"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_V850)
#endif
#if defined(EM_M32R) || (defined(HAVE_DECL_EM_M32R) && HAVE_DECL_EM_M32R)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_M32R) == (88), "EM_M32R != 88");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_M32R 88
#endif
#if defined(EM_M32R) || (defined(HAVE_DECL_EM_M32R) && HAVE_DECL_EM_M32R)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_M32R)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_M32R"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_M32R)
#endif
#if defined(EM_MN10300) || (defined(HAVE_DECL_EM_MN10300) && HAVE_DECL_EM_MN10300)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MN10300) == (89), "EM_MN10300 != 89");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MN10300 89
#endif
#if defined(EM_MN10300) || (defined(HAVE_DECL_EM_MN10300) && HAVE_DECL_EM_MN10300)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MN10300)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MN10300"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MN10300)
#endif
#if defined(EM_MN10200) || (defined(HAVE_DECL_EM_MN10200) && HAVE_DECL_EM_MN10200)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MN10200) == (90), "EM_MN10200 != 90");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MN10200 90
#endif
#if defined(EM_MN10200) || (defined(HAVE_DECL_EM_MN10200) && HAVE_DECL_EM_MN10200)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MN10200)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MN10200"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MN10200)
#endif
#if defined(EM_PJ) || (defined(HAVE_DECL_EM_PJ) && HAVE_DECL_EM_PJ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_PJ) == (91), "EM_PJ != 91");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_PJ 91
#endif
#if defined(EM_PJ) || (defined(HAVE_DECL_EM_PJ) && HAVE_DECL_EM_PJ)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_PJ)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_PJ"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_PJ)
#endif
#if defined(EM_OPENRISC) || (defined(HAVE_DECL_EM_OPENRISC) && HAVE_DECL_EM_OPENRISC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_OPENRISC) == (92), "EM_OPENRISC != 92");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_OPENRISC 92
#endif
#if defined(EM_OPENRISC) || (defined(HAVE_DECL_EM_OPENRISC) && HAVE_DECL_EM_OPENRISC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_OPENRISC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_OPENRISC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_OPENRISC)
#endif
#if defined(EM_ARCOMPACT) || (defined(HAVE_DECL_EM_ARCOMPACT) && HAVE_DECL_EM_ARCOMPACT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARCOMPACT) == (93), "EM_ARCOMPACT != 93");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARCOMPACT 93
#endif
#if defined(EM_ARCOMPACT) || (defined(HAVE_DECL_EM_ARCOMPACT) && HAVE_DECL_EM_ARCOMPACT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ARCOMPACT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ARCOMPACT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ARCOMPACT)
#endif
#if defined(EM_XTENSA) || (defined(HAVE_DECL_EM_XTENSA) && HAVE_DECL_EM_XTENSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XTENSA) == (94), "EM_XTENSA != 94");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XTENSA 94
#endif
#if defined(EM_XTENSA) || (defined(HAVE_DECL_EM_XTENSA) && HAVE_DECL_EM_XTENSA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_XTENSA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_XTENSA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_XTENSA)
#endif
#if defined(EM_VIDEOCORE) || (defined(HAVE_DECL_EM_VIDEOCORE) && HAVE_DECL_EM_VIDEOCORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VIDEOCORE) == (95), "EM_VIDEOCORE != 95");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VIDEOCORE 95
#endif
#if defined(EM_VIDEOCORE) || (defined(HAVE_DECL_EM_VIDEOCORE) && HAVE_DECL_EM_VIDEOCORE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_VIDEOCORE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_VIDEOCORE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_VIDEOCORE)
#endif
#if defined(EM_TMM_GPP) || (defined(HAVE_DECL_EM_TMM_GPP) && HAVE_DECL_EM_TMM_GPP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TMM_GPP) == (96), "EM_TMM_GPP != 96");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TMM_GPP 96
#endif
#if defined(EM_TMM_GPP) || (defined(HAVE_DECL_EM_TMM_GPP) && HAVE_DECL_EM_TMM_GPP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TMM_GPP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TMM_GPP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TMM_GPP)
#endif
#if defined(EM_NS32K) || (defined(HAVE_DECL_EM_NS32K) && HAVE_DECL_EM_NS32K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NS32K) == (97), "EM_NS32K != 97");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NS32K 97
#endif
#if defined(EM_NS32K) || (defined(HAVE_DECL_EM_NS32K) && HAVE_DECL_EM_NS32K)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_NS32K)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_NS32K"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_NS32K)
#endif
#if defined(EM_TPC) || (defined(HAVE_DECL_EM_TPC) && HAVE_DECL_EM_TPC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TPC) == (98), "EM_TPC != 98");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TPC 98
#endif
#if defined(EM_TPC) || (defined(HAVE_DECL_EM_TPC) && HAVE_DECL_EM_TPC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TPC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TPC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TPC)
#endif
#if defined(EM_SNP1K) || (defined(HAVE_DECL_EM_SNP1K) && HAVE_DECL_EM_SNP1K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SNP1K) == (99), "EM_SNP1K != 99");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SNP1K 99
#endif
#if defined(EM_SNP1K) || (defined(HAVE_DECL_EM_SNP1K) && HAVE_DECL_EM_SNP1K)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SNP1K)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SNP1K"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SNP1K)
#endif
#if defined(EM_ST200) || (defined(HAVE_DECL_EM_ST200) && HAVE_DECL_EM_ST200)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ST200) == (100), "EM_ST200 != 100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ST200 100
#endif
#if defined(EM_ST200) || (defined(HAVE_DECL_EM_ST200) && HAVE_DECL_EM_ST200)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ST200)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ST200"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ST200)
#endif
#if defined(EM_IP2K) || (defined(HAVE_DECL_EM_IP2K) && HAVE_DECL_EM_IP2K)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_IP2K) == (101), "EM_IP2K != 101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_IP2K 101
#endif
#if defined(EM_IP2K) || (defined(HAVE_DECL_EM_IP2K) && HAVE_DECL_EM_IP2K)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_IP2K)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_IP2K"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_IP2K)
#endif
#if defined(EM_MAX) || (defined(HAVE_DECL_EM_MAX) && HAVE_DECL_EM_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MAX) == (102), "EM_MAX != 102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MAX 102
#endif
#if defined(EM_MAX) || (defined(HAVE_DECL_EM_MAX) && HAVE_DECL_EM_MAX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MAX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MAX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MAX)
#endif
#if defined(EM_CR) || (defined(HAVE_DECL_EM_CR) && HAVE_DECL_EM_CR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CR) == (103), "EM_CR != 103");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CR 103
#endif
#if defined(EM_CR) || (defined(HAVE_DECL_EM_CR) && HAVE_DECL_EM_CR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CR)
#endif
#if defined(EM_F2MC16) || (defined(HAVE_DECL_EM_F2MC16) && HAVE_DECL_EM_F2MC16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_F2MC16) == (104), "EM_F2MC16 != 104");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_F2MC16 104
#endif
#if defined(EM_F2MC16) || (defined(HAVE_DECL_EM_F2MC16) && HAVE_DECL_EM_F2MC16)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_F2MC16)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_F2MC16"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_F2MC16)
#endif
#if defined(EM_MSP430) || (defined(HAVE_DECL_EM_MSP430) && HAVE_DECL_EM_MSP430)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MSP430) == (105), "EM_MSP430 != 105");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MSP430 105
#endif
#if defined(EM_MSP430) || (defined(HAVE_DECL_EM_MSP430) && HAVE_DECL_EM_MSP430)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MSP430)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MSP430"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MSP430)
#endif
#if defined(EM_BLACKFIN) || (defined(HAVE_DECL_EM_BLACKFIN) && HAVE_DECL_EM_BLACKFIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_BLACKFIN) == (106), "EM_BLACKFIN != 106");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_BLACKFIN 106
#endif
#if defined(EM_BLACKFIN) || (defined(HAVE_DECL_EM_BLACKFIN) && HAVE_DECL_EM_BLACKFIN)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_BLACKFIN)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_BLACKFIN"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_BLACKFIN)
#endif
#if defined(EM_SE_C33) || (defined(HAVE_DECL_EM_SE_C33) && HAVE_DECL_EM_SE_C33)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SE_C33) == (107), "EM_SE_C33 != 107");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SE_C33 107
#endif
#if defined(EM_SE_C33) || (defined(HAVE_DECL_EM_SE_C33) && HAVE_DECL_EM_SE_C33)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SE_C33)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SE_C33"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SE_C33)
#endif
#if defined(EM_SEP) || (defined(HAVE_DECL_EM_SEP) && HAVE_DECL_EM_SEP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SEP) == (108), "EM_SEP != 108");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SEP 108
#endif
#if defined(EM_SEP) || (defined(HAVE_DECL_EM_SEP) && HAVE_DECL_EM_SEP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SEP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SEP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SEP)
#endif
#if defined(EM_ARCA) || (defined(HAVE_DECL_EM_ARCA) && HAVE_DECL_EM_ARCA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARCA) == (109), "EM_ARCA != 109");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARCA 109
#endif
#if defined(EM_ARCA) || (defined(HAVE_DECL_EM_ARCA) && HAVE_DECL_EM_ARCA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ARCA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ARCA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ARCA)
#endif
#if defined(EM_UNICORE) || (defined(HAVE_DECL_EM_UNICORE) && HAVE_DECL_EM_UNICORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_UNICORE) == (110), "EM_UNICORE != 110");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_UNICORE 110
#endif
#if defined(EM_UNICORE) || (defined(HAVE_DECL_EM_UNICORE) && HAVE_DECL_EM_UNICORE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_UNICORE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_UNICORE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_UNICORE)
#endif
#if defined(EM_EXCESS) || (defined(HAVE_DECL_EM_EXCESS) && HAVE_DECL_EM_EXCESS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_EXCESS) == (111), "EM_EXCESS != 111");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_EXCESS 111
#endif
#if defined(EM_EXCESS) || (defined(HAVE_DECL_EM_EXCESS) && HAVE_DECL_EM_EXCESS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_EXCESS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_EXCESS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_EXCESS)
#endif
#if defined(EM_DXP) || (defined(HAVE_DECL_EM_DXP) && HAVE_DECL_EM_DXP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_DXP) == (112), "EM_DXP != 112");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_DXP 112
#endif
#if defined(EM_DXP) || (defined(HAVE_DECL_EM_DXP) && HAVE_DECL_EM_DXP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_DXP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_DXP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_DXP)
#endif
#if defined(EM_ALTERA_NIOS2) || (defined(HAVE_DECL_EM_ALTERA_NIOS2) && HAVE_DECL_EM_ALTERA_NIOS2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ALTERA_NIOS2) == (113), "EM_ALTERA_NIOS2 != 113");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ALTERA_NIOS2 113
#endif
#if defined(EM_ALTERA_NIOS2) || (defined(HAVE_DECL_EM_ALTERA_NIOS2) && HAVE_DECL_EM_ALTERA_NIOS2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ALTERA_NIOS2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ALTERA_NIOS2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ALTERA_NIOS2)
#endif
#if defined(EM_CRX) || (defined(HAVE_DECL_EM_CRX) && HAVE_DECL_EM_CRX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CRX) == (114), "EM_CRX != 114");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CRX 114
#endif
#if defined(EM_CRX) || (defined(HAVE_DECL_EM_CRX) && HAVE_DECL_EM_CRX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CRX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CRX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CRX)
#endif
#if defined(EM_XGATE) || (defined(HAVE_DECL_EM_XGATE) && HAVE_DECL_EM_XGATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XGATE) == (115), "EM_XGATE != 115");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XGATE 115
#endif
#if defined(EM_XGATE) || (defined(HAVE_DECL_EM_XGATE) && HAVE_DECL_EM_XGATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_XGATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_XGATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_XGATE)
#endif
#if defined(EM_C166) || (defined(HAVE_DECL_EM_C166) && HAVE_DECL_EM_C166)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_C166) == (116), "EM_C166 != 116");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_C166 116
#endif
#if defined(EM_C166) || (defined(HAVE_DECL_EM_C166) && HAVE_DECL_EM_C166)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_C166)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_C166"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_C166)
#endif
#if defined(EM_M16C) || (defined(HAVE_DECL_EM_M16C) && HAVE_DECL_EM_M16C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_M16C) == (117), "EM_M16C != 117");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_M16C 117
#endif
#if defined(EM_M16C) || (defined(HAVE_DECL_EM_M16C) && HAVE_DECL_EM_M16C)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_M16C)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_M16C"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_M16C)
#endif
#if defined(EM_DSPIC30F) || (defined(HAVE_DECL_EM_DSPIC30F) && HAVE_DECL_EM_DSPIC30F)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_DSPIC30F) == (118), "EM_DSPIC30F != 118");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_DSPIC30F 118
#endif
#if defined(EM_DSPIC30F) || (defined(HAVE_DECL_EM_DSPIC30F) && HAVE_DECL_EM_DSPIC30F)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_DSPIC30F)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_DSPIC30F"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_DSPIC30F)
#endif
#if defined(EM_CE) || (defined(HAVE_DECL_EM_CE) && HAVE_DECL_EM_CE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CE) == (119), "EM_CE != 119");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CE 119
#endif
#if defined(EM_CE) || (defined(HAVE_DECL_EM_CE) && HAVE_DECL_EM_CE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CE)
#endif
#if defined(EM_M32C) || (defined(HAVE_DECL_EM_M32C) && HAVE_DECL_EM_M32C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_M32C) == (120), "EM_M32C != 120");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_M32C 120
#endif
#if defined(EM_M32C) || (defined(HAVE_DECL_EM_M32C) && HAVE_DECL_EM_M32C)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_M32C)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_M32C"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_M32C)
#endif
#if defined(EM_TSK3000) || (defined(HAVE_DECL_EM_TSK3000) && HAVE_DECL_EM_TSK3000)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TSK3000) == (131), "EM_TSK3000 != 131");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TSK3000 131
#endif
#if defined(EM_TSK3000) || (defined(HAVE_DECL_EM_TSK3000) && HAVE_DECL_EM_TSK3000)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TSK3000)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TSK3000"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TSK3000)
#endif
#if defined(EM_RS08) || (defined(HAVE_DECL_EM_RS08) && HAVE_DECL_EM_RS08)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RS08) == (132), "EM_RS08 != 132");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RS08 132
#endif
#if defined(EM_RS08) || (defined(HAVE_DECL_EM_RS08) && HAVE_DECL_EM_RS08)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_RS08)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_RS08"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_RS08)
#endif
#if defined(EM_SHARC) || (defined(HAVE_DECL_EM_SHARC) && HAVE_DECL_EM_SHARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SHARC) == (133), "EM_SHARC != 133");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SHARC 133
#endif
#if defined(EM_SHARC) || (defined(HAVE_DECL_EM_SHARC) && HAVE_DECL_EM_SHARC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SHARC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SHARC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SHARC)
#endif
#if defined(EM_ECOG2) || (defined(HAVE_DECL_EM_ECOG2) && HAVE_DECL_EM_ECOG2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ECOG2) == (134), "EM_ECOG2 != 134");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ECOG2 134
#endif
#if defined(EM_ECOG2) || (defined(HAVE_DECL_EM_ECOG2) && HAVE_DECL_EM_ECOG2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ECOG2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ECOG2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ECOG2)
#endif
#if defined(EM_SCORE7) || (defined(HAVE_DECL_EM_SCORE7) && HAVE_DECL_EM_SCORE7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SCORE7) == (135), "EM_SCORE7 != 135");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SCORE7 135
#endif
#if defined(EM_SCORE7) || (defined(HAVE_DECL_EM_SCORE7) && HAVE_DECL_EM_SCORE7)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SCORE7)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SCORE7"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SCORE7)
#endif
#if defined(EM_DSP24) || (defined(HAVE_DECL_EM_DSP24) && HAVE_DECL_EM_DSP24)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_DSP24) == (136), "EM_DSP24 != 136");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_DSP24 136
#endif
#if defined(EM_DSP24) || (defined(HAVE_DECL_EM_DSP24) && HAVE_DECL_EM_DSP24)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_DSP24)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_DSP24"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_DSP24)
#endif
#if defined(EM_VIDEOCORE3) || (defined(HAVE_DECL_EM_VIDEOCORE3) && HAVE_DECL_EM_VIDEOCORE3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VIDEOCORE3) == (137), "EM_VIDEOCORE3 != 137");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VIDEOCORE3 137
#endif
#if defined(EM_VIDEOCORE3) || (defined(HAVE_DECL_EM_VIDEOCORE3) && HAVE_DECL_EM_VIDEOCORE3)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_VIDEOCORE3)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_VIDEOCORE3"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_VIDEOCORE3)
#endif
#if defined(EM_LATTICEMICO32) || (defined(HAVE_DECL_EM_LATTICEMICO32) && HAVE_DECL_EM_LATTICEMICO32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_LATTICEMICO32) == (138), "EM_LATTICEMICO32 != 138");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_LATTICEMICO32 138
#endif
#if defined(EM_LATTICEMICO32) || (defined(HAVE_DECL_EM_LATTICEMICO32) && HAVE_DECL_EM_LATTICEMICO32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_LATTICEMICO32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_LATTICEMICO32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_LATTICEMICO32)
#endif
#if defined(EM_SE_C17) || (defined(HAVE_DECL_EM_SE_C17) && HAVE_DECL_EM_SE_C17)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SE_C17) == (139), "EM_SE_C17 != 139");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SE_C17 139
#endif
#if defined(EM_SE_C17) || (defined(HAVE_DECL_EM_SE_C17) && HAVE_DECL_EM_SE_C17)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SE_C17)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SE_C17"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SE_C17)
#endif
#if defined(EM_TI_C6000) || (defined(HAVE_DECL_EM_TI_C6000) && HAVE_DECL_EM_TI_C6000)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_C6000) == (140), "EM_TI_C6000 != 140");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_C6000 140
#endif
#if defined(EM_TI_C6000) || (defined(HAVE_DECL_EM_TI_C6000) && HAVE_DECL_EM_TI_C6000)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TI_C6000)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TI_C6000"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TI_C6000)
#endif
#if defined(EM_TI_C2000) || (defined(HAVE_DECL_EM_TI_C2000) && HAVE_DECL_EM_TI_C2000)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_C2000) == (141), "EM_TI_C2000 != 141");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_C2000 141
#endif
#if defined(EM_TI_C2000) || (defined(HAVE_DECL_EM_TI_C2000) && HAVE_DECL_EM_TI_C2000)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TI_C2000)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TI_C2000"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TI_C2000)
#endif
#if defined(EM_TI_C5500) || (defined(HAVE_DECL_EM_TI_C5500) && HAVE_DECL_EM_TI_C5500)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_C5500) == (142), "EM_TI_C5500 != 142");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_C5500 142
#endif
#if defined(EM_TI_C5500) || (defined(HAVE_DECL_EM_TI_C5500) && HAVE_DECL_EM_TI_C5500)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TI_C5500)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TI_C5500"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TI_C5500)
#endif
#if defined(EM_TI_ARP32) || (defined(HAVE_DECL_EM_TI_ARP32) && HAVE_DECL_EM_TI_ARP32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_ARP32) == (143), "EM_TI_ARP32 != 143");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_ARP32 143
#endif
#if defined(EM_TI_ARP32) || (defined(HAVE_DECL_EM_TI_ARP32) && HAVE_DECL_EM_TI_ARP32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TI_ARP32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TI_ARP32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TI_ARP32)
#endif
#if defined(EM_TI_PRU) || (defined(HAVE_DECL_EM_TI_PRU) && HAVE_DECL_EM_TI_PRU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TI_PRU) == (144), "EM_TI_PRU != 144");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TI_PRU 144
#endif
#if defined(EM_TI_PRU) || (defined(HAVE_DECL_EM_TI_PRU) && HAVE_DECL_EM_TI_PRU)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TI_PRU)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TI_PRU"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TI_PRU)
#endif
#if defined(EM_MMDSP_PLUS) || (defined(HAVE_DECL_EM_MMDSP_PLUS) && HAVE_DECL_EM_MMDSP_PLUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MMDSP_PLUS) == (160), "EM_MMDSP_PLUS != 160");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MMDSP_PLUS 160
#endif
#if defined(EM_MMDSP_PLUS) || (defined(HAVE_DECL_EM_MMDSP_PLUS) && HAVE_DECL_EM_MMDSP_PLUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MMDSP_PLUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MMDSP_PLUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MMDSP_PLUS)
#endif
#if defined(EM_CYPRESS_M8C) || (defined(HAVE_DECL_EM_CYPRESS_M8C) && HAVE_DECL_EM_CYPRESS_M8C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CYPRESS_M8C) == (161), "EM_CYPRESS_M8C != 161");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CYPRESS_M8C 161
#endif
#if defined(EM_CYPRESS_M8C) || (defined(HAVE_DECL_EM_CYPRESS_M8C) && HAVE_DECL_EM_CYPRESS_M8C)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CYPRESS_M8C)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CYPRESS_M8C"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CYPRESS_M8C)
#endif
#if defined(EM_R32C) || (defined(HAVE_DECL_EM_R32C) && HAVE_DECL_EM_R32C)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_R32C) == (162), "EM_R32C != 162");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_R32C 162
#endif
#if defined(EM_R32C) || (defined(HAVE_DECL_EM_R32C) && HAVE_DECL_EM_R32C)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_R32C)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_R32C"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_R32C)
#endif
#if defined(EM_TRIMEDIA) || (defined(HAVE_DECL_EM_TRIMEDIA) && HAVE_DECL_EM_TRIMEDIA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TRIMEDIA) == (163), "EM_TRIMEDIA != 163");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TRIMEDIA 163
#endif
#if defined(EM_TRIMEDIA) || (defined(HAVE_DECL_EM_TRIMEDIA) && HAVE_DECL_EM_TRIMEDIA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TRIMEDIA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TRIMEDIA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TRIMEDIA)
#endif
#if defined(EM_HEXAGON) || (defined(HAVE_DECL_EM_HEXAGON) && HAVE_DECL_EM_HEXAGON)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_HEXAGON) == (164), "EM_HEXAGON != 164");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_HEXAGON 164
#endif
#if defined(EM_HEXAGON) || (defined(HAVE_DECL_EM_HEXAGON) && HAVE_DECL_EM_HEXAGON)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_HEXAGON)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_HEXAGON"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_HEXAGON)
#endif
#if defined(EM_8051) || (defined(HAVE_DECL_EM_8051) && HAVE_DECL_EM_8051)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_8051) == (165), "EM_8051 != 165");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_8051 165
#endif
#if defined(EM_8051) || (defined(HAVE_DECL_EM_8051) && HAVE_DECL_EM_8051)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_8051)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_8051"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_8051)
#endif
#if defined(EM_STXP7X) || (defined(HAVE_DECL_EM_STXP7X) && HAVE_DECL_EM_STXP7X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_STXP7X) == (166), "EM_STXP7X != 166");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_STXP7X 166
#endif
#if defined(EM_STXP7X) || (defined(HAVE_DECL_EM_STXP7X) && HAVE_DECL_EM_STXP7X)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_STXP7X)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_STXP7X"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_STXP7X)
#endif
#if defined(EM_NDS32) || (defined(HAVE_DECL_EM_NDS32) && HAVE_DECL_EM_NDS32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NDS32) == (167), "EM_NDS32 != 167");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NDS32 167
#endif
#if defined(EM_NDS32) || (defined(HAVE_DECL_EM_NDS32) && HAVE_DECL_EM_NDS32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_NDS32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_NDS32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_NDS32)
#endif
#if defined(EM_ECOG1X) || (defined(HAVE_DECL_EM_ECOG1X) && HAVE_DECL_EM_ECOG1X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ECOG1X) == (168), "EM_ECOG1X != 168");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ECOG1X 168
#endif
#if defined(EM_ECOG1X) || (defined(HAVE_DECL_EM_ECOG1X) && HAVE_DECL_EM_ECOG1X)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ECOG1X)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ECOG1X"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ECOG1X)
#endif
#if defined(EM_MAXQ30) || (defined(HAVE_DECL_EM_MAXQ30) && HAVE_DECL_EM_MAXQ30)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MAXQ30) == (169), "EM_MAXQ30 != 169");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MAXQ30 169
#endif
#if defined(EM_MAXQ30) || (defined(HAVE_DECL_EM_MAXQ30) && HAVE_DECL_EM_MAXQ30)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MAXQ30)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MAXQ30"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MAXQ30)
#endif
#if defined(EM_XIMO16) || (defined(HAVE_DECL_EM_XIMO16) && HAVE_DECL_EM_XIMO16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XIMO16) == (170), "EM_XIMO16 != 170");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XIMO16 170
#endif
#if defined(EM_XIMO16) || (defined(HAVE_DECL_EM_XIMO16) && HAVE_DECL_EM_XIMO16)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_XIMO16)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_XIMO16"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_XIMO16)
#endif
#if defined(EM_MANIK) || (defined(HAVE_DECL_EM_MANIK) && HAVE_DECL_EM_MANIK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MANIK) == (171), "EM_MANIK != 171");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MANIK 171
#endif
#if defined(EM_MANIK) || (defined(HAVE_DECL_EM_MANIK) && HAVE_DECL_EM_MANIK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MANIK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MANIK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MANIK)
#endif
#if defined(EM_CRAYNV2) || (defined(HAVE_DECL_EM_CRAYNV2) && HAVE_DECL_EM_CRAYNV2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CRAYNV2) == (172), "EM_CRAYNV2 != 172");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CRAYNV2 172
#endif
#if defined(EM_CRAYNV2) || (defined(HAVE_DECL_EM_CRAYNV2) && HAVE_DECL_EM_CRAYNV2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CRAYNV2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CRAYNV2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CRAYNV2)
#endif
#if defined(EM_RX) || (defined(HAVE_DECL_EM_RX) && HAVE_DECL_EM_RX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RX) == (173), "EM_RX != 173");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RX 173
#endif
#if defined(EM_RX) || (defined(HAVE_DECL_EM_RX) && HAVE_DECL_EM_RX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_RX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_RX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_RX)
#endif
#if defined(EM_METAG) || (defined(HAVE_DECL_EM_METAG) && HAVE_DECL_EM_METAG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_METAG) == (174), "EM_METAG != 174");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_METAG 174
#endif
#if defined(EM_METAG) || (defined(HAVE_DECL_EM_METAG) && HAVE_DECL_EM_METAG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_METAG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_METAG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_METAG)
#endif
#if defined(EM_MCST_ELBRUS) || (defined(HAVE_DECL_EM_MCST_ELBRUS) && HAVE_DECL_EM_MCST_ELBRUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MCST_ELBRUS) == (175), "EM_MCST_ELBRUS != 175");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MCST_ELBRUS 175
#endif
#if defined(EM_MCST_ELBRUS) || (defined(HAVE_DECL_EM_MCST_ELBRUS) && HAVE_DECL_EM_MCST_ELBRUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MCST_ELBRUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MCST_ELBRUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MCST_ELBRUS)
#endif
#if defined(EM_ECOG16) || (defined(HAVE_DECL_EM_ECOG16) && HAVE_DECL_EM_ECOG16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ECOG16) == (176), "EM_ECOG16 != 176");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ECOG16 176
#endif
#if defined(EM_ECOG16) || (defined(HAVE_DECL_EM_ECOG16) && HAVE_DECL_EM_ECOG16)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ECOG16)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ECOG16"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ECOG16)
#endif
#if defined(EM_CR16) || (defined(HAVE_DECL_EM_CR16) && HAVE_DECL_EM_CR16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CR16) == (177), "EM_CR16 != 177");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CR16 177
#endif
#if defined(EM_CR16) || (defined(HAVE_DECL_EM_CR16) && HAVE_DECL_EM_CR16)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CR16)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CR16"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CR16)
#endif
#if defined(EM_ETPU) || (defined(HAVE_DECL_EM_ETPU) && HAVE_DECL_EM_ETPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ETPU) == (178), "EM_ETPU != 178");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ETPU 178
#endif
#if defined(EM_ETPU) || (defined(HAVE_DECL_EM_ETPU) && HAVE_DECL_EM_ETPU)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ETPU)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ETPU"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ETPU)
#endif
#if defined(EM_SLE9X) || (defined(HAVE_DECL_EM_SLE9X) && HAVE_DECL_EM_SLE9X)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_SLE9X) == (179), "EM_SLE9X != 179");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_SLE9X 179
#endif
#if defined(EM_SLE9X) || (defined(HAVE_DECL_EM_SLE9X) && HAVE_DECL_EM_SLE9X)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_SLE9X)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_SLE9X"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_SLE9X)
#endif
#if defined(EM_L10M) || (defined(HAVE_DECL_EM_L10M) && HAVE_DECL_EM_L10M)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_L10M) == (180), "EM_L10M != 180");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_L10M 180
#endif
#if defined(EM_L10M) || (defined(HAVE_DECL_EM_L10M) && HAVE_DECL_EM_L10M)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_L10M)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_L10M"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_L10M)
#endif
#if defined(EM_K10M) || (defined(HAVE_DECL_EM_K10M) && HAVE_DECL_EM_K10M)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_K10M) == (181), "EM_K10M != 181");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_K10M 181
#endif
#if defined(EM_K10M) || (defined(HAVE_DECL_EM_K10M) && HAVE_DECL_EM_K10M)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_K10M)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_K10M"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_K10M)
#endif
#if defined(EM_AARCH64) || (defined(HAVE_DECL_EM_AARCH64) && HAVE_DECL_EM_AARCH64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_AARCH64) == (183), "EM_AARCH64 != 183");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_AARCH64 183
#endif
#if defined(EM_AARCH64) || (defined(HAVE_DECL_EM_AARCH64) && HAVE_DECL_EM_AARCH64)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_AARCH64)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_AARCH64"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_AARCH64)
#endif
#if defined(EM_STM8) || (defined(HAVE_DECL_EM_STM8) && HAVE_DECL_EM_STM8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_STM8) == (186), "EM_STM8 != 186");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_STM8 186
#endif
#if defined(EM_STM8) || (defined(HAVE_DECL_EM_STM8) && HAVE_DECL_EM_STM8)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_STM8)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_STM8"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_STM8)
#endif
#if defined(EM_TILE64) || (defined(HAVE_DECL_EM_TILE64) && HAVE_DECL_EM_TILE64)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TILE64) == (187), "EM_TILE64 != 187");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TILE64 187
#endif
#if defined(EM_TILE64) || (defined(HAVE_DECL_EM_TILE64) && HAVE_DECL_EM_TILE64)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TILE64)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TILE64"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TILE64)
#endif
#if defined(EM_TILEPRO) || (defined(HAVE_DECL_EM_TILEPRO) && HAVE_DECL_EM_TILEPRO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TILEPRO) == (188), "EM_TILEPRO != 188");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TILEPRO 188
#endif
#if defined(EM_TILEPRO) || (defined(HAVE_DECL_EM_TILEPRO) && HAVE_DECL_EM_TILEPRO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TILEPRO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TILEPRO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TILEPRO)
#endif
#if defined(EM_MICROBLAZE) || (defined(HAVE_DECL_EM_MICROBLAZE) && HAVE_DECL_EM_MICROBLAZE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MICROBLAZE) == (189), "EM_MICROBLAZE != 189");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MICROBLAZE 189
#endif
#if defined(EM_MICROBLAZE) || (defined(HAVE_DECL_EM_MICROBLAZE) && HAVE_DECL_EM_MICROBLAZE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MICROBLAZE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MICROBLAZE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MICROBLAZE)
#endif
#if defined(EM_CUDA) || (defined(HAVE_DECL_EM_CUDA) && HAVE_DECL_EM_CUDA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CUDA) == (190), "EM_CUDA != 190");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CUDA 190
#endif
#if defined(EM_CUDA) || (defined(HAVE_DECL_EM_CUDA) && HAVE_DECL_EM_CUDA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CUDA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CUDA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CUDA)
#endif
#if defined(EM_TILEGX) || (defined(HAVE_DECL_EM_TILEGX) && HAVE_DECL_EM_TILEGX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_TILEGX) == (191), "EM_TILEGX != 191");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_TILEGX 191
#endif
#if defined(EM_TILEGX) || (defined(HAVE_DECL_EM_TILEGX) && HAVE_DECL_EM_TILEGX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_TILEGX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_TILEGX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_TILEGX)
#endif
#if defined(EM_CLOUDSHIELD) || (defined(HAVE_DECL_EM_CLOUDSHIELD) && HAVE_DECL_EM_CLOUDSHIELD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CLOUDSHIELD) == (192), "EM_CLOUDSHIELD != 192");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CLOUDSHIELD 192
#endif
#if defined(EM_CLOUDSHIELD) || (defined(HAVE_DECL_EM_CLOUDSHIELD) && HAVE_DECL_EM_CLOUDSHIELD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CLOUDSHIELD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CLOUDSHIELD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CLOUDSHIELD)
#endif
#if defined(EM_COREA_1ST) || (defined(HAVE_DECL_EM_COREA_1ST) && HAVE_DECL_EM_COREA_1ST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COREA_1ST) == (193), "EM_COREA_1ST != 193");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COREA_1ST 193
#endif
#if defined(EM_COREA_1ST) || (defined(HAVE_DECL_EM_COREA_1ST) && HAVE_DECL_EM_COREA_1ST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_COREA_1ST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_COREA_1ST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_COREA_1ST)
#endif
#if defined(EM_COREA_2ND) || (defined(HAVE_DECL_EM_COREA_2ND) && HAVE_DECL_EM_COREA_2ND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COREA_2ND) == (194), "EM_COREA_2ND != 194");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COREA_2ND 194
#endif
#if defined(EM_COREA_2ND) || (defined(HAVE_DECL_EM_COREA_2ND) && HAVE_DECL_EM_COREA_2ND)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_COREA_2ND)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_COREA_2ND"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_COREA_2ND)
#endif
#if defined(EM_ARCV2) || (defined(HAVE_DECL_EM_ARCV2) && HAVE_DECL_EM_ARCV2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ARCV2) == (195), "EM_ARCV2 != 195");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ARCV2 195
#endif
#if defined(EM_ARCV2) || (defined(HAVE_DECL_EM_ARCV2) && HAVE_DECL_EM_ARCV2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ARCV2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ARCV2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ARCV2)
#endif
#if defined(EM_OPEN8) || (defined(HAVE_DECL_EM_OPEN8) && HAVE_DECL_EM_OPEN8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_OPEN8) == (196), "EM_OPEN8 != 196");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_OPEN8 196
#endif
#if defined(EM_OPEN8) || (defined(HAVE_DECL_EM_OPEN8) && HAVE_DECL_EM_OPEN8)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_OPEN8)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_OPEN8"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_OPEN8)
#endif
#if defined(EM_RL78) || (defined(HAVE_DECL_EM_RL78) && HAVE_DECL_EM_RL78)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RL78) == (197), "EM_RL78 != 197");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RL78 197
#endif
#if defined(EM_RL78) || (defined(HAVE_DECL_EM_RL78) && HAVE_DECL_EM_RL78)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_RL78)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_RL78"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_RL78)
#endif
#if defined(EM_VIDEOCORE5) || (defined(HAVE_DECL_EM_VIDEOCORE5) && HAVE_DECL_EM_VIDEOCORE5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VIDEOCORE5) == (198), "EM_VIDEOCORE5 != 198");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VIDEOCORE5 198
#endif
#if defined(EM_VIDEOCORE5) || (defined(HAVE_DECL_EM_VIDEOCORE5) && HAVE_DECL_EM_VIDEOCORE5)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_VIDEOCORE5)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_VIDEOCORE5"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_VIDEOCORE5)
#endif
#if defined(EM_78KOR) || (defined(HAVE_DECL_EM_78KOR) && HAVE_DECL_EM_78KOR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_78KOR) == (199), "EM_78KOR != 199");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_78KOR 199
#endif
#if defined(EM_78KOR) || (defined(HAVE_DECL_EM_78KOR) && HAVE_DECL_EM_78KOR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_78KOR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_78KOR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_78KOR)
#endif
#if defined(EM_56800EX) || (defined(HAVE_DECL_EM_56800EX) && HAVE_DECL_EM_56800EX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_56800EX) == (200), "EM_56800EX != 200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_56800EX 200
#endif
#if defined(EM_56800EX) || (defined(HAVE_DECL_EM_56800EX) && HAVE_DECL_EM_56800EX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_56800EX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_56800EX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_56800EX)
#endif
#if defined(EM_BA1) || (defined(HAVE_DECL_EM_BA1) && HAVE_DECL_EM_BA1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_BA1) == (201), "EM_BA1 != 201");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_BA1 201
#endif
#if defined(EM_BA1) || (defined(HAVE_DECL_EM_BA1) && HAVE_DECL_EM_BA1)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_BA1)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_BA1"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_BA1)
#endif
#if defined(EM_BA2) || (defined(HAVE_DECL_EM_BA2) && HAVE_DECL_EM_BA2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_BA2) == (202), "EM_BA2 != 202");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_BA2 202
#endif
#if defined(EM_BA2) || (defined(HAVE_DECL_EM_BA2) && HAVE_DECL_EM_BA2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_BA2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_BA2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_BA2)
#endif
#if defined(EM_XCORE) || (defined(HAVE_DECL_EM_XCORE) && HAVE_DECL_EM_XCORE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XCORE) == (203), "EM_XCORE != 203");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XCORE 203
#endif
#if defined(EM_XCORE) || (defined(HAVE_DECL_EM_XCORE) && HAVE_DECL_EM_XCORE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_XCORE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_XCORE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_XCORE)
#endif
#if defined(EM_MCHP_PIC) || (defined(HAVE_DECL_EM_MCHP_PIC) && HAVE_DECL_EM_MCHP_PIC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MCHP_PIC) == (204), "EM_MCHP_PIC != 204");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MCHP_PIC 204
#endif
#if defined(EM_MCHP_PIC) || (defined(HAVE_DECL_EM_MCHP_PIC) && HAVE_DECL_EM_MCHP_PIC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MCHP_PIC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MCHP_PIC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MCHP_PIC)
#endif
#if defined(EM_KM32) || (defined(HAVE_DECL_EM_KM32) && HAVE_DECL_EM_KM32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KM32) == (210), "EM_KM32 != 210");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KM32 210
#endif
#if defined(EM_KM32) || (defined(HAVE_DECL_EM_KM32) && HAVE_DECL_EM_KM32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_KM32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_KM32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_KM32)
#endif
#if defined(EM_KMX32) || (defined(HAVE_DECL_EM_KMX32) && HAVE_DECL_EM_KMX32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KMX32) == (211), "EM_KMX32 != 211");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KMX32 211
#endif
#if defined(EM_KMX32) || (defined(HAVE_DECL_EM_KMX32) && HAVE_DECL_EM_KMX32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_KMX32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_KMX32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_KMX32)
#endif
#if defined(EM_KMX16) || (defined(HAVE_DECL_EM_KMX16) && HAVE_DECL_EM_KMX16)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KMX16) == (212), "EM_KMX16 != 212");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KMX16 212
#endif
#if defined(EM_KMX16) || (defined(HAVE_DECL_EM_KMX16) && HAVE_DECL_EM_KMX16)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_KMX16)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_KMX16"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_KMX16)
#endif
#if defined(EM_KMX8) || (defined(HAVE_DECL_EM_KMX8) && HAVE_DECL_EM_KMX8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KMX8) == (213), "EM_KMX8 != 213");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KMX8 213
#endif
#if defined(EM_KMX8) || (defined(HAVE_DECL_EM_KMX8) && HAVE_DECL_EM_KMX8)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_KMX8)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_KMX8"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_KMX8)
#endif
#if defined(EM_KVARC) || (defined(HAVE_DECL_EM_KVARC) && HAVE_DECL_EM_KVARC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_KVARC) == (214), "EM_KVARC != 214");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_KVARC 214
#endif
#if defined(EM_KVARC) || (defined(HAVE_DECL_EM_KVARC) && HAVE_DECL_EM_KVARC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_KVARC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_KVARC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_KVARC)
#endif
#if defined(EM_CDP) || (defined(HAVE_DECL_EM_CDP) && HAVE_DECL_EM_CDP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CDP) == (215), "EM_CDP != 215");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CDP 215
#endif
#if defined(EM_CDP) || (defined(HAVE_DECL_EM_CDP) && HAVE_DECL_EM_CDP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CDP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CDP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CDP)
#endif
#if defined(EM_COGE) || (defined(HAVE_DECL_EM_COGE) && HAVE_DECL_EM_COGE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COGE) == (216), "EM_COGE != 216");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COGE 216
#endif
#if defined(EM_COGE) || (defined(HAVE_DECL_EM_COGE) && HAVE_DECL_EM_COGE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_COGE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_COGE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_COGE)
#endif
#if defined(EM_COOL) || (defined(HAVE_DECL_EM_COOL) && HAVE_DECL_EM_COOL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_COOL) == (217), "EM_COOL != 217");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_COOL 217
#endif
#if defined(EM_COOL) || (defined(HAVE_DECL_EM_COOL) && HAVE_DECL_EM_COOL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_COOL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_COOL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_COOL)
#endif
#if defined(EM_NORC) || (defined(HAVE_DECL_EM_NORC) && HAVE_DECL_EM_NORC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_NORC) == (218), "EM_NORC != 218");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_NORC 218
#endif
#if defined(EM_NORC) || (defined(HAVE_DECL_EM_NORC) && HAVE_DECL_EM_NORC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_NORC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_NORC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_NORC)
#endif
#if defined(EM_CSR_KALIMBA) || (defined(HAVE_DECL_EM_CSR_KALIMBA) && HAVE_DECL_EM_CSR_KALIMBA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CSR_KALIMBA) == (219), "EM_CSR_KALIMBA != 219");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CSR_KALIMBA 219
#endif
#if defined(EM_CSR_KALIMBA) || (defined(HAVE_DECL_EM_CSR_KALIMBA) && HAVE_DECL_EM_CSR_KALIMBA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CSR_KALIMBA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CSR_KALIMBA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CSR_KALIMBA)
#endif
#if defined(EM_Z80) || (defined(HAVE_DECL_EM_Z80) && HAVE_DECL_EM_Z80)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_Z80) == (220), "EM_Z80 != 220");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_Z80 220
#endif
#if defined(EM_Z80) || (defined(HAVE_DECL_EM_Z80) && HAVE_DECL_EM_Z80)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_Z80)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_Z80"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_Z80)
#endif
#if defined(EM_VISIUM) || (defined(HAVE_DECL_EM_VISIUM) && HAVE_DECL_EM_VISIUM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_VISIUM) == (221), "EM_VISIUM != 221");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_VISIUM 221
#endif
#if defined(EM_VISIUM) || (defined(HAVE_DECL_EM_VISIUM) && HAVE_DECL_EM_VISIUM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_VISIUM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_VISIUM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_VISIUM)
#endif
#if defined(EM_FT32) || (defined(HAVE_DECL_EM_FT32) && HAVE_DECL_EM_FT32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FT32) == (222), "EM_FT32 != 222");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FT32 222
#endif
#if defined(EM_FT32) || (defined(HAVE_DECL_EM_FT32) && HAVE_DECL_EM_FT32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_FT32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_FT32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_FT32)
#endif
#if defined(EM_MOXIE) || (defined(HAVE_DECL_EM_MOXIE) && HAVE_DECL_EM_MOXIE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MOXIE) == (223), "EM_MOXIE != 223");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MOXIE 223
#endif
#if defined(EM_MOXIE) || (defined(HAVE_DECL_EM_MOXIE) && HAVE_DECL_EM_MOXIE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MOXIE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MOXIE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MOXIE)
#endif
#if defined(EM_AMDGPU) || (defined(HAVE_DECL_EM_AMDGPU) && HAVE_DECL_EM_AMDGPU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_AMDGPU) == (224), "EM_AMDGPU != 224");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_AMDGPU 224
#endif
#if defined(EM_AMDGPU) || (defined(HAVE_DECL_EM_AMDGPU) && HAVE_DECL_EM_AMDGPU)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_AMDGPU)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_AMDGPU"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_AMDGPU)
#endif
#if defined(EM_RISCV) || (defined(HAVE_DECL_EM_RISCV) && HAVE_DECL_EM_RISCV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_RISCV) == (243), "EM_RISCV != 243");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_RISCV 243
#endif
#if defined(EM_RISCV) || (defined(HAVE_DECL_EM_RISCV) && HAVE_DECL_EM_RISCV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_RISCV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_RISCV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_RISCV)
#endif
#if defined(EM_BPF) || (defined(HAVE_DECL_EM_BPF) && HAVE_DECL_EM_BPF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_BPF) == (247), "EM_BPF != 247");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_BPF 247
#endif
#if defined(EM_BPF) || (defined(HAVE_DECL_EM_BPF) && HAVE_DECL_EM_BPF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_BPF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_BPF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_BPF)
#endif
#if defined(EM_CSKY) || (defined(HAVE_DECL_EM_CSKY) && HAVE_DECL_EM_CSKY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CSKY) == (252), "EM_CSKY != 252");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CSKY 252
#endif
#if defined(EM_CSKY) || (defined(HAVE_DECL_EM_CSKY) && HAVE_DECL_EM_CSKY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CSKY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CSKY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CSKY)
#endif
#if defined(EM_LOONGARCH) || (defined(HAVE_DECL_EM_LOONGARCH) && HAVE_DECL_EM_LOONGARCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_LOONGARCH) == (258), "EM_LOONGARCH != 258");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_LOONGARCH 258
#endif
#if defined(EM_LOONGARCH) || (defined(HAVE_DECL_EM_LOONGARCH) && HAVE_DECL_EM_LOONGARCH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_LOONGARCH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_LOONGARCH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_LOONGARCH)
#endif
#if defined(EM_AVR32) || (defined(HAVE_DECL_EM_AVR32) && HAVE_DECL_EM_AVR32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_AVR32) == (0x18ad), "EM_AVR32 != 0x18ad");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_AVR32 0x18ad
#endif
#if defined(EM_AVR32) || (defined(HAVE_DECL_EM_AVR32) && HAVE_DECL_EM_AVR32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_AVR32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_AVR32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_AVR32)
#endif
#if defined(EM_FRV) || (defined(HAVE_DECL_EM_FRV) && HAVE_DECL_EM_FRV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_FRV) == (0x5441), "EM_FRV != 0x5441");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_FRV 0x5441
#endif
#if defined(EM_FRV) || (defined(HAVE_DECL_EM_FRV) && HAVE_DECL_EM_FRV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_FRV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_FRV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_FRV)
#endif
#if defined(EM_OR32) || (defined(HAVE_DECL_EM_OR32) && HAVE_DECL_EM_OR32)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_OR32) == (0x8472), "EM_OR32 != 0x8472");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_OR32 0x8472
#endif
#if defined(EM_OR32) || (defined(HAVE_DECL_EM_OR32) && HAVE_DECL_EM_OR32)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_OR32)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_OR32"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_OR32)
#endif
#if defined(EM_ALPHA) || (defined(HAVE_DECL_EM_ALPHA) && HAVE_DECL_EM_ALPHA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_ALPHA) == (0x9026), "EM_ALPHA != 0x9026");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_ALPHA 0x9026
#endif
#if defined(EM_ALPHA) || (defined(HAVE_DECL_EM_ALPHA) && HAVE_DECL_EM_ALPHA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_ALPHA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_ALPHA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_ALPHA)
#endif
#if defined(EM_CYGNUS_M32R) || (defined(HAVE_DECL_EM_CYGNUS_M32R) && HAVE_DECL_EM_CYGNUS_M32R)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CYGNUS_M32R) == (0x9041), "EM_CYGNUS_M32R != 0x9041");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CYGNUS_M32R 0x9041
#endif
#if defined(EM_CYGNUS_M32R) || (defined(HAVE_DECL_EM_CYGNUS_M32R) && HAVE_DECL_EM_CYGNUS_M32R)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CYGNUS_M32R)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CYGNUS_M32R"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CYGNUS_M32R)
#endif
#if defined(EM_CYGNUS_V850) || (defined(HAVE_DECL_EM_CYGNUS_V850) && HAVE_DECL_EM_CYGNUS_V850)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CYGNUS_V850) == (0x9080), "EM_CYGNUS_V850 != 0x9080");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CYGNUS_V850 0x9080
#endif
#if defined(EM_CYGNUS_V850) || (defined(HAVE_DECL_EM_CYGNUS_V850) && HAVE_DECL_EM_CYGNUS_V850)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CYGNUS_V850)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CYGNUS_V850"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CYGNUS_V850)
#endif
#if defined(EM_S390_OLD) || (defined(HAVE_DECL_EM_S390_OLD) && HAVE_DECL_EM_S390_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_S390_OLD) == (0xa390), "EM_S390_OLD != 0xa390");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_S390_OLD 0xa390
#endif
#if defined(EM_S390_OLD) || (defined(HAVE_DECL_EM_S390_OLD) && HAVE_DECL_EM_S390_OLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_S390_OLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_S390_OLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_S390_OLD)
#endif
#if defined(EM_XTENSA_OLD) || (defined(HAVE_DECL_EM_XTENSA_OLD) && HAVE_DECL_EM_XTENSA_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_XTENSA_OLD) == (0xabc7), "EM_XTENSA_OLD != 0xabc7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_XTENSA_OLD 0xabc7
#endif
#if defined(EM_XTENSA_OLD) || (defined(HAVE_DECL_EM_XTENSA_OLD) && HAVE_DECL_EM_XTENSA_OLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_XTENSA_OLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_XTENSA_OLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_XTENSA_OLD)
#endif
#if defined(EM_MICROBLAZE_OLD) || (defined(HAVE_DECL_EM_MICROBLAZE_OLD) && HAVE_DECL_EM_MICROBLAZE_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_MICROBLAZE_OLD) == (0xbaab), "EM_MICROBLAZE_OLD != 0xbaab");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_MICROBLAZE_OLD 0xbaab
#endif
#if defined(EM_MICROBLAZE_OLD) || (defined(HAVE_DECL_EM_MICROBLAZE_OLD) && HAVE_DECL_EM_MICROBLAZE_OLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_MICROBLAZE_OLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_MICROBLAZE_OLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_MICROBLAZE_OLD)
#endif
#if defined(EM_CYGNUS_MN10300) || (defined(HAVE_DECL_EM_CYGNUS_MN10300) && HAVE_DECL_EM_CYGNUS_MN10300)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EM_CYGNUS_MN10300) == (0xbeef), "EM_CYGNUS_MN10300 != 0xbeef");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EM_CYGNUS_MN10300 0xbeef
#endif
#if defined(EM_CYGNUS_MN10300) || (defined(HAVE_DECL_EM_CYGNUS_MN10300) && HAVE_DECL_EM_CYGNUS_MN10300)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (EM_CYGNUS_MN10300)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: EM_CYGNUS_MN10300"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (EM_CYGNUS_MN10300)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat elf_em[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data elf_em_xdata[] = {


 XLAT(EM_NONE),
 #define XLAT_VAL_0 ((unsigned) (EM_NONE))
 #define XLAT_STR_0 STRINGIFY(EM_NONE)
 XLAT(EM_M32),
 #define XLAT_VAL_1 ((unsigned) (EM_M32))
 #define XLAT_STR_1 STRINGIFY(EM_M32)
 XLAT(EM_SPARC),
 #define XLAT_VAL_2 ((unsigned) (EM_SPARC))
 #define XLAT_STR_2 STRINGIFY(EM_SPARC)
 XLAT(EM_386),
 #define XLAT_VAL_3 ((unsigned) (EM_386))
 #define XLAT_STR_3 STRINGIFY(EM_386)
 XLAT(EM_68K),
 #define XLAT_VAL_4 ((unsigned) (EM_68K))
 #define XLAT_STR_4 STRINGIFY(EM_68K)
 XLAT(EM_88K),
 #define XLAT_VAL_5 ((unsigned) (EM_88K))
 #define XLAT_STR_5 STRINGIFY(EM_88K)
 XLAT(EM_486),
 #define XLAT_VAL_6 ((unsigned) (EM_486))
 #define XLAT_STR_6 STRINGIFY(EM_486)

 XLAT(EM_860),
 #define XLAT_VAL_7 ((unsigned) (EM_860))
 #define XLAT_STR_7 STRINGIFY(EM_860)
 XLAT(EM_MIPS),
 #define XLAT_VAL_8 ((unsigned) (EM_MIPS))
 #define XLAT_STR_8 STRINGIFY(EM_MIPS)
 XLAT(EM_S370),
 #define XLAT_VAL_9 ((unsigned) (EM_S370))
 #define XLAT_STR_9 STRINGIFY(EM_S370)
 XLAT(EM_MIPS_RS3_LE),
 #define XLAT_VAL_10 ((unsigned) (EM_MIPS_RS3_LE))
 #define XLAT_STR_10 STRINGIFY(EM_MIPS_RS3_LE)


 XLAT(EM_PARISC),
 #define XLAT_VAL_11 ((unsigned) (EM_PARISC))
 #define XLAT_STR_11 STRINGIFY(EM_PARISC)

 XLAT(EM_VPP500),
 #define XLAT_VAL_12 ((unsigned) (EM_VPP500))
 #define XLAT_STR_12 STRINGIFY(EM_VPP500)
 XLAT(EM_SPARC32PLUS),
 #define XLAT_VAL_13 ((unsigned) (EM_SPARC32PLUS))
 #define XLAT_STR_13 STRINGIFY(EM_SPARC32PLUS)
 XLAT(EM_960),
 #define XLAT_VAL_14 ((unsigned) (EM_960))
 #define XLAT_STR_14 STRINGIFY(EM_960)
 XLAT(EM_PPC),
 #define XLAT_VAL_15 ((unsigned) (EM_PPC))
 #define XLAT_STR_15 STRINGIFY(EM_PPC)
 XLAT(EM_PPC64),
 #define XLAT_VAL_16 ((unsigned) (EM_PPC64))
 #define XLAT_STR_16 STRINGIFY(EM_PPC64)
 XLAT(EM_S390),
 #define XLAT_VAL_17 ((unsigned) (EM_S390))
 #define XLAT_STR_17 STRINGIFY(EM_S390)
 XLAT(EM_SPU),
 #define XLAT_VAL_18 ((unsigned) (EM_SPU))
 #define XLAT_STR_18 STRINGIFY(EM_SPU)

 XLAT(EM_V800),
 #define XLAT_VAL_19 ((unsigned) (EM_V800))
 #define XLAT_STR_19 STRINGIFY(EM_V800)
 XLAT(EM_FR20),
 #define XLAT_VAL_20 ((unsigned) (EM_FR20))
 #define XLAT_STR_20 STRINGIFY(EM_FR20)
 XLAT(EM_RH32),
 #define XLAT_VAL_21 ((unsigned) (EM_RH32))
 #define XLAT_STR_21 STRINGIFY(EM_RH32)
 XLAT(EM_RCE),
 #define XLAT_VAL_22 ((unsigned) (EM_RCE))
 #define XLAT_STR_22 STRINGIFY(EM_RCE)
 XLAT(EM_ARM),
 #define XLAT_VAL_23 ((unsigned) (EM_ARM))
 #define XLAT_STR_23 STRINGIFY(EM_ARM)

 XLAT(EM_SH),
 #define XLAT_VAL_24 ((unsigned) (EM_SH))
 #define XLAT_STR_24 STRINGIFY(EM_SH)
 XLAT(EM_SPARCV9),
 #define XLAT_VAL_25 ((unsigned) (EM_SPARCV9))
 #define XLAT_STR_25 STRINGIFY(EM_SPARCV9)
 XLAT(EM_TRICORE),
 #define XLAT_VAL_26 ((unsigned) (EM_TRICORE))
 #define XLAT_STR_26 STRINGIFY(EM_TRICORE)
 XLAT(EM_ARC),
 #define XLAT_VAL_27 ((unsigned) (EM_ARC))
 #define XLAT_STR_27 STRINGIFY(EM_ARC)
 XLAT(EM_H8_300),
 #define XLAT_VAL_28 ((unsigned) (EM_H8_300))
 #define XLAT_STR_28 STRINGIFY(EM_H8_300)
 XLAT(EM_H8_300H),
 #define XLAT_VAL_29 ((unsigned) (EM_H8_300H))
 #define XLAT_STR_29 STRINGIFY(EM_H8_300H)
 XLAT(EM_H8S),
 #define XLAT_VAL_30 ((unsigned) (EM_H8S))
 #define XLAT_STR_30 STRINGIFY(EM_H8S)
 XLAT(EM_H8_500),
 #define XLAT_VAL_31 ((unsigned) (EM_H8_500))
 #define XLAT_STR_31 STRINGIFY(EM_H8_500)
 XLAT(EM_IA_64),
 #define XLAT_VAL_32 ((unsigned) (EM_IA_64))
 #define XLAT_STR_32 STRINGIFY(EM_IA_64)
 XLAT(EM_MIPS_X),
 #define XLAT_VAL_33 ((unsigned) (EM_MIPS_X))
 #define XLAT_STR_33 STRINGIFY(EM_MIPS_X)
 XLAT(EM_COLDFIRE),
 #define XLAT_VAL_34 ((unsigned) (EM_COLDFIRE))
 #define XLAT_STR_34 STRINGIFY(EM_COLDFIRE)
 XLAT(EM_68HC12),
 #define XLAT_VAL_35 ((unsigned) (EM_68HC12))
 #define XLAT_STR_35 STRINGIFY(EM_68HC12)
 XLAT(EM_MMA),
 #define XLAT_VAL_36 ((unsigned) (EM_MMA))
 #define XLAT_STR_36 STRINGIFY(EM_MMA)
 XLAT(EM_PCP),
 #define XLAT_VAL_37 ((unsigned) (EM_PCP))
 #define XLAT_STR_37 STRINGIFY(EM_PCP)
 XLAT(EM_NCPU),
 #define XLAT_VAL_38 ((unsigned) (EM_NCPU))
 #define XLAT_STR_38 STRINGIFY(EM_NCPU)
 XLAT(EM_NDR1),
 #define XLAT_VAL_39 ((unsigned) (EM_NDR1))
 #define XLAT_STR_39 STRINGIFY(EM_NDR1)
 XLAT(EM_STARCORE),
 #define XLAT_VAL_40 ((unsigned) (EM_STARCORE))
 #define XLAT_STR_40 STRINGIFY(EM_STARCORE)
 XLAT(EM_ME16),
 #define XLAT_VAL_41 ((unsigned) (EM_ME16))
 #define XLAT_STR_41 STRINGIFY(EM_ME16)
 XLAT(EM_ST100),
 #define XLAT_VAL_42 ((unsigned) (EM_ST100))
 #define XLAT_STR_42 STRINGIFY(EM_ST100)
 XLAT(EM_TINYJ),
 #define XLAT_VAL_43 ((unsigned) (EM_TINYJ))
 #define XLAT_STR_43 STRINGIFY(EM_TINYJ)
 XLAT(EM_X86_64),
 #define XLAT_VAL_44 ((unsigned) (EM_X86_64))
 #define XLAT_STR_44 STRINGIFY(EM_X86_64)
 XLAT(EM_PDSP),
 #define XLAT_VAL_45 ((unsigned) (EM_PDSP))
 #define XLAT_STR_45 STRINGIFY(EM_PDSP)
 XLAT(EM_PDP10),
 #define XLAT_VAL_46 ((unsigned) (EM_PDP10))
 #define XLAT_STR_46 STRINGIFY(EM_PDP10)
 XLAT(EM_PDP11),
 #define XLAT_VAL_47 ((unsigned) (EM_PDP11))
 #define XLAT_STR_47 STRINGIFY(EM_PDP11)
 XLAT(EM_FX66),
 #define XLAT_VAL_48 ((unsigned) (EM_FX66))
 #define XLAT_STR_48 STRINGIFY(EM_FX66)
 XLAT(EM_ST9PLUS),
 #define XLAT_VAL_49 ((unsigned) (EM_ST9PLUS))
 #define XLAT_STR_49 STRINGIFY(EM_ST9PLUS)
 XLAT(EM_ST7),
 #define XLAT_VAL_50 ((unsigned) (EM_ST7))
 #define XLAT_STR_50 STRINGIFY(EM_ST7)
 XLAT(EM_68HC16),
 #define XLAT_VAL_51 ((unsigned) (EM_68HC16))
 #define XLAT_STR_51 STRINGIFY(EM_68HC16)
 XLAT(EM_68HC11),
 #define XLAT_VAL_52 ((unsigned) (EM_68HC11))
 #define XLAT_STR_52 STRINGIFY(EM_68HC11)
 XLAT(EM_68HC08),
 #define XLAT_VAL_53 ((unsigned) (EM_68HC08))
 #define XLAT_STR_53 STRINGIFY(EM_68HC08)
 XLAT(EM_68HC05),
 #define XLAT_VAL_54 ((unsigned) (EM_68HC05))
 #define XLAT_STR_54 STRINGIFY(EM_68HC05)
 XLAT(EM_SVX),
 #define XLAT_VAL_55 ((unsigned) (EM_SVX))
 #define XLAT_STR_55 STRINGIFY(EM_SVX)
 XLAT(EM_ST19),
 #define XLAT_VAL_56 ((unsigned) (EM_ST19))
 #define XLAT_STR_56 STRINGIFY(EM_ST19)
 XLAT(EM_VAX),
 #define XLAT_VAL_57 ((unsigned) (EM_VAX))
 #define XLAT_STR_57 STRINGIFY(EM_VAX)
 XLAT(EM_CRIS),
 #define XLAT_VAL_58 ((unsigned) (EM_CRIS))
 #define XLAT_STR_58 STRINGIFY(EM_CRIS)
 XLAT(EM_JAVELIN),
 #define XLAT_VAL_59 ((unsigned) (EM_JAVELIN))
 #define XLAT_STR_59 STRINGIFY(EM_JAVELIN)
 XLAT(EM_FIREPATH),
 #define XLAT_VAL_60 ((unsigned) (EM_FIREPATH))
 #define XLAT_STR_60 STRINGIFY(EM_FIREPATH)
 XLAT(EM_ZSP),
 #define XLAT_VAL_61 ((unsigned) (EM_ZSP))
 #define XLAT_STR_61 STRINGIFY(EM_ZSP)
 XLAT(EM_MMIX),
 #define XLAT_VAL_62 ((unsigned) (EM_MMIX))
 #define XLAT_STR_62 STRINGIFY(EM_MMIX)
 XLAT(EM_HUANY),
 #define XLAT_VAL_63 ((unsigned) (EM_HUANY))
 #define XLAT_STR_63 STRINGIFY(EM_HUANY)
 XLAT(EM_PRISM),
 #define XLAT_VAL_64 ((unsigned) (EM_PRISM))
 #define XLAT_STR_64 STRINGIFY(EM_PRISM)
 XLAT(EM_AVR),
 #define XLAT_VAL_65 ((unsigned) (EM_AVR))
 #define XLAT_STR_65 STRINGIFY(EM_AVR)
 XLAT(EM_FR30),
 #define XLAT_VAL_66 ((unsigned) (EM_FR30))
 #define XLAT_STR_66 STRINGIFY(EM_FR30)
 XLAT(EM_D10V),
 #define XLAT_VAL_67 ((unsigned) (EM_D10V))
 #define XLAT_STR_67 STRINGIFY(EM_D10V)
 XLAT(EM_D30V),
 #define XLAT_VAL_68 ((unsigned) (EM_D30V))
 #define XLAT_STR_68 STRINGIFY(EM_D30V)
 XLAT(EM_V850),
 #define XLAT_VAL_69 ((unsigned) (EM_V850))
 #define XLAT_STR_69 STRINGIFY(EM_V850)
 XLAT(EM_M32R),
 #define XLAT_VAL_70 ((unsigned) (EM_M32R))
 #define XLAT_STR_70 STRINGIFY(EM_M32R)
 XLAT(EM_MN10300),
 #define XLAT_VAL_71 ((unsigned) (EM_MN10300))
 #define XLAT_STR_71 STRINGIFY(EM_MN10300)
 XLAT(EM_MN10200),
 #define XLAT_VAL_72 ((unsigned) (EM_MN10200))
 #define XLAT_STR_72 STRINGIFY(EM_MN10200)
 XLAT(EM_PJ),
 #define XLAT_VAL_73 ((unsigned) (EM_PJ))
 #define XLAT_STR_73 STRINGIFY(EM_PJ)
 XLAT(EM_OPENRISC),
 #define XLAT_VAL_74 ((unsigned) (EM_OPENRISC))
 #define XLAT_STR_74 STRINGIFY(EM_OPENRISC)
 XLAT(EM_ARCOMPACT),
 #define XLAT_VAL_75 ((unsigned) (EM_ARCOMPACT))
 #define XLAT_STR_75 STRINGIFY(EM_ARCOMPACT)
 XLAT(EM_XTENSA),
 #define XLAT_VAL_76 ((unsigned) (EM_XTENSA))
 #define XLAT_STR_76 STRINGIFY(EM_XTENSA)
 XLAT(EM_VIDEOCORE),
 #define XLAT_VAL_77 ((unsigned) (EM_VIDEOCORE))
 #define XLAT_STR_77 STRINGIFY(EM_VIDEOCORE)
 XLAT(EM_TMM_GPP),
 #define XLAT_VAL_78 ((unsigned) (EM_TMM_GPP))
 #define XLAT_STR_78 STRINGIFY(EM_TMM_GPP)
 XLAT(EM_NS32K),
 #define XLAT_VAL_79 ((unsigned) (EM_NS32K))
 #define XLAT_STR_79 STRINGIFY(EM_NS32K)
 XLAT(EM_TPC),
 #define XLAT_VAL_80 ((unsigned) (EM_TPC))
 #define XLAT_STR_80 STRINGIFY(EM_TPC)
 XLAT(EM_SNP1K),
 #define XLAT_VAL_81 ((unsigned) (EM_SNP1K))
 #define XLAT_STR_81 STRINGIFY(EM_SNP1K)
 XLAT(EM_ST200),
 #define XLAT_VAL_82 ((unsigned) (EM_ST200))
 #define XLAT_STR_82 STRINGIFY(EM_ST200)
 XLAT(EM_IP2K),
 #define XLAT_VAL_83 ((unsigned) (EM_IP2K))
 #define XLAT_STR_83 STRINGIFY(EM_IP2K)
 XLAT(EM_MAX),
 #define XLAT_VAL_84 ((unsigned) (EM_MAX))
 #define XLAT_STR_84 STRINGIFY(EM_MAX)
 XLAT(EM_CR),
 #define XLAT_VAL_85 ((unsigned) (EM_CR))
 #define XLAT_STR_85 STRINGIFY(EM_CR)
 XLAT(EM_F2MC16),
 #define XLAT_VAL_86 ((unsigned) (EM_F2MC16))
 #define XLAT_STR_86 STRINGIFY(EM_F2MC16)
 XLAT(EM_MSP430),
 #define XLAT_VAL_87 ((unsigned) (EM_MSP430))
 #define XLAT_STR_87 STRINGIFY(EM_MSP430)
 XLAT(EM_BLACKFIN),
 #define XLAT_VAL_88 ((unsigned) (EM_BLACKFIN))
 #define XLAT_STR_88 STRINGIFY(EM_BLACKFIN)
 XLAT(EM_SE_C33),
 #define XLAT_VAL_89 ((unsigned) (EM_SE_C33))
 #define XLAT_STR_89 STRINGIFY(EM_SE_C33)
 XLAT(EM_SEP),
 #define XLAT_VAL_90 ((unsigned) (EM_SEP))
 #define XLAT_STR_90 STRINGIFY(EM_SEP)
 XLAT(EM_ARCA),
 #define XLAT_VAL_91 ((unsigned) (EM_ARCA))
 #define XLAT_STR_91 STRINGIFY(EM_ARCA)
 XLAT(EM_UNICORE),
 #define XLAT_VAL_92 ((unsigned) (EM_UNICORE))
 #define XLAT_STR_92 STRINGIFY(EM_UNICORE)
 XLAT(EM_EXCESS),
 #define XLAT_VAL_93 ((unsigned) (EM_EXCESS))
 #define XLAT_STR_93 STRINGIFY(EM_EXCESS)
 XLAT(EM_DXP),
 #define XLAT_VAL_94 ((unsigned) (EM_DXP))
 #define XLAT_STR_94 STRINGIFY(EM_DXP)
 XLAT(EM_ALTERA_NIOS2),
 #define XLAT_VAL_95 ((unsigned) (EM_ALTERA_NIOS2))
 #define XLAT_STR_95 STRINGIFY(EM_ALTERA_NIOS2)
 XLAT(EM_CRX),
 #define XLAT_VAL_96 ((unsigned) (EM_CRX))
 #define XLAT_STR_96 STRINGIFY(EM_CRX)
 XLAT(EM_XGATE),
 #define XLAT_VAL_97 ((unsigned) (EM_XGATE))
 #define XLAT_STR_97 STRINGIFY(EM_XGATE)
 XLAT(EM_C166),
 #define XLAT_VAL_98 ((unsigned) (EM_C166))
 #define XLAT_STR_98 STRINGIFY(EM_C166)
 XLAT(EM_M16C),
 #define XLAT_VAL_99 ((unsigned) (EM_M16C))
 #define XLAT_STR_99 STRINGIFY(EM_M16C)
 XLAT(EM_DSPIC30F),
 #define XLAT_VAL_100 ((unsigned) (EM_DSPIC30F))
 #define XLAT_STR_100 STRINGIFY(EM_DSPIC30F)
 XLAT(EM_CE),
 #define XLAT_VAL_101 ((unsigned) (EM_CE))
 #define XLAT_STR_101 STRINGIFY(EM_CE)
 XLAT(EM_M32C),
 #define XLAT_VAL_102 ((unsigned) (EM_M32C))
 #define XLAT_STR_102 STRINGIFY(EM_M32C)

 XLAT(EM_TSK3000),
 #define XLAT_VAL_103 ((unsigned) (EM_TSK3000))
 #define XLAT_STR_103 STRINGIFY(EM_TSK3000)
 XLAT(EM_RS08),
 #define XLAT_VAL_104 ((unsigned) (EM_RS08))
 #define XLAT_STR_104 STRINGIFY(EM_RS08)
 XLAT(EM_SHARC),
 #define XLAT_VAL_105 ((unsigned) (EM_SHARC))
 #define XLAT_STR_105 STRINGIFY(EM_SHARC)
 XLAT(EM_ECOG2),
 #define XLAT_VAL_106 ((unsigned) (EM_ECOG2))
 #define XLAT_STR_106 STRINGIFY(EM_ECOG2)
 XLAT(EM_SCORE7),
 #define XLAT_VAL_107 ((unsigned) (EM_SCORE7))
 #define XLAT_STR_107 STRINGIFY(EM_SCORE7)
 XLAT(EM_DSP24),
 #define XLAT_VAL_108 ((unsigned) (EM_DSP24))
 #define XLAT_STR_108 STRINGIFY(EM_DSP24)
 XLAT(EM_VIDEOCORE3),
 #define XLAT_VAL_109 ((unsigned) (EM_VIDEOCORE3))
 #define XLAT_STR_109 STRINGIFY(EM_VIDEOCORE3)
 XLAT(EM_LATTICEMICO32),
 #define XLAT_VAL_110 ((unsigned) (EM_LATTICEMICO32))
 #define XLAT_STR_110 STRINGIFY(EM_LATTICEMICO32)
 XLAT(EM_SE_C17),
 #define XLAT_VAL_111 ((unsigned) (EM_SE_C17))
 #define XLAT_STR_111 STRINGIFY(EM_SE_C17)
 XLAT(EM_TI_C6000),
 #define XLAT_VAL_112 ((unsigned) (EM_TI_C6000))
 #define XLAT_STR_112 STRINGIFY(EM_TI_C6000)
 XLAT(EM_TI_C2000),
 #define XLAT_VAL_113 ((unsigned) (EM_TI_C2000))
 #define XLAT_STR_113 STRINGIFY(EM_TI_C2000)
 XLAT(EM_TI_C5500),
 #define XLAT_VAL_114 ((unsigned) (EM_TI_C5500))
 #define XLAT_STR_114 STRINGIFY(EM_TI_C5500)
 XLAT(EM_TI_ARP32),
 #define XLAT_VAL_115 ((unsigned) (EM_TI_ARP32))
 #define XLAT_STR_115 STRINGIFY(EM_TI_ARP32)
 XLAT(EM_TI_PRU),
 #define XLAT_VAL_116 ((unsigned) (EM_TI_PRU))
 #define XLAT_STR_116 STRINGIFY(EM_TI_PRU)

 XLAT(EM_MMDSP_PLUS),
 #define XLAT_VAL_117 ((unsigned) (EM_MMDSP_PLUS))
 #define XLAT_STR_117 STRINGIFY(EM_MMDSP_PLUS)
 XLAT(EM_CYPRESS_M8C),
 #define XLAT_VAL_118 ((unsigned) (EM_CYPRESS_M8C))
 #define XLAT_STR_118 STRINGIFY(EM_CYPRESS_M8C)
 XLAT(EM_R32C),
 #define XLAT_VAL_119 ((unsigned) (EM_R32C))
 #define XLAT_STR_119 STRINGIFY(EM_R32C)
 XLAT(EM_TRIMEDIA),
 #define XLAT_VAL_120 ((unsigned) (EM_TRIMEDIA))
 #define XLAT_STR_120 STRINGIFY(EM_TRIMEDIA)
 XLAT(EM_HEXAGON),
 #define XLAT_VAL_121 ((unsigned) (EM_HEXAGON))
 #define XLAT_STR_121 STRINGIFY(EM_HEXAGON)
 XLAT(EM_8051),
 #define XLAT_VAL_122 ((unsigned) (EM_8051))
 #define XLAT_STR_122 STRINGIFY(EM_8051)
 XLAT(EM_STXP7X),
 #define XLAT_VAL_123 ((unsigned) (EM_STXP7X))
 #define XLAT_STR_123 STRINGIFY(EM_STXP7X)
 XLAT(EM_NDS32),
 #define XLAT_VAL_124 ((unsigned) (EM_NDS32))
 #define XLAT_STR_124 STRINGIFY(EM_NDS32)
 XLAT(EM_ECOG1X),
 #define XLAT_VAL_125 ((unsigned) (EM_ECOG1X))
 #define XLAT_STR_125 STRINGIFY(EM_ECOG1X)
 XLAT(EM_MAXQ30),
 #define XLAT_VAL_126 ((unsigned) (EM_MAXQ30))
 #define XLAT_STR_126 STRINGIFY(EM_MAXQ30)
 XLAT(EM_XIMO16),
 #define XLAT_VAL_127 ((unsigned) (EM_XIMO16))
 #define XLAT_STR_127 STRINGIFY(EM_XIMO16)
 XLAT(EM_MANIK),
 #define XLAT_VAL_128 ((unsigned) (EM_MANIK))
 #define XLAT_STR_128 STRINGIFY(EM_MANIK)
 XLAT(EM_CRAYNV2),
 #define XLAT_VAL_129 ((unsigned) (EM_CRAYNV2))
 #define XLAT_STR_129 STRINGIFY(EM_CRAYNV2)
 XLAT(EM_RX),
 #define XLAT_VAL_130 ((unsigned) (EM_RX))
 #define XLAT_STR_130 STRINGIFY(EM_RX)
 XLAT(EM_METAG),
 #define XLAT_VAL_131 ((unsigned) (EM_METAG))
 #define XLAT_STR_131 STRINGIFY(EM_METAG)
 XLAT(EM_MCST_ELBRUS),
 #define XLAT_VAL_132 ((unsigned) (EM_MCST_ELBRUS))
 #define XLAT_STR_132 STRINGIFY(EM_MCST_ELBRUS)
 XLAT(EM_ECOG16),
 #define XLAT_VAL_133 ((unsigned) (EM_ECOG16))
 #define XLAT_STR_133 STRINGIFY(EM_ECOG16)
 XLAT(EM_CR16),
 #define XLAT_VAL_134 ((unsigned) (EM_CR16))
 #define XLAT_STR_134 STRINGIFY(EM_CR16)
 XLAT(EM_ETPU),
 #define XLAT_VAL_135 ((unsigned) (EM_ETPU))
 #define XLAT_STR_135 STRINGIFY(EM_ETPU)
 XLAT(EM_SLE9X),
 #define XLAT_VAL_136 ((unsigned) (EM_SLE9X))
 #define XLAT_STR_136 STRINGIFY(EM_SLE9X)
 XLAT(EM_L10M),
 #define XLAT_VAL_137 ((unsigned) (EM_L10M))
 #define XLAT_STR_137 STRINGIFY(EM_L10M)
 XLAT(EM_K10M),
 #define XLAT_VAL_138 ((unsigned) (EM_K10M))
 #define XLAT_STR_138 STRINGIFY(EM_K10M)

 XLAT(EM_AARCH64),
 #define XLAT_VAL_139 ((unsigned) (EM_AARCH64))
 #define XLAT_STR_139 STRINGIFY(EM_AARCH64)


 XLAT(EM_STM8),
 #define XLAT_VAL_140 ((unsigned) (EM_STM8))
 #define XLAT_STR_140 STRINGIFY(EM_STM8)
 XLAT(EM_TILE64),
 #define XLAT_VAL_141 ((unsigned) (EM_TILE64))
 #define XLAT_STR_141 STRINGIFY(EM_TILE64)
 XLAT(EM_TILEPRO),
 #define XLAT_VAL_142 ((unsigned) (EM_TILEPRO))
 #define XLAT_STR_142 STRINGIFY(EM_TILEPRO)
 XLAT(EM_MICROBLAZE),
 #define XLAT_VAL_143 ((unsigned) (EM_MICROBLAZE))
 #define XLAT_STR_143 STRINGIFY(EM_MICROBLAZE)
 XLAT(EM_CUDA),
 #define XLAT_VAL_144 ((unsigned) (EM_CUDA))
 #define XLAT_STR_144 STRINGIFY(EM_CUDA)
 XLAT(EM_TILEGX),
 #define XLAT_VAL_145 ((unsigned) (EM_TILEGX))
 #define XLAT_STR_145 STRINGIFY(EM_TILEGX)
 XLAT(EM_CLOUDSHIELD),
 #define XLAT_VAL_146 ((unsigned) (EM_CLOUDSHIELD))
 #define XLAT_STR_146 STRINGIFY(EM_CLOUDSHIELD)
 XLAT(EM_COREA_1ST),
 #define XLAT_VAL_147 ((unsigned) (EM_COREA_1ST))
 #define XLAT_STR_147 STRINGIFY(EM_COREA_1ST)
 XLAT(EM_COREA_2ND),
 #define XLAT_VAL_148 ((unsigned) (EM_COREA_2ND))
 #define XLAT_STR_148 STRINGIFY(EM_COREA_2ND)
 XLAT(EM_ARCV2),
 #define XLAT_VAL_149 ((unsigned) (EM_ARCV2))
 #define XLAT_STR_149 STRINGIFY(EM_ARCV2)
 XLAT(EM_OPEN8),
 #define XLAT_VAL_150 ((unsigned) (EM_OPEN8))
 #define XLAT_STR_150 STRINGIFY(EM_OPEN8)
 XLAT(EM_RL78),
 #define XLAT_VAL_151 ((unsigned) (EM_RL78))
 #define XLAT_STR_151 STRINGIFY(EM_RL78)
 XLAT(EM_VIDEOCORE5),
 #define XLAT_VAL_152 ((unsigned) (EM_VIDEOCORE5))
 #define XLAT_STR_152 STRINGIFY(EM_VIDEOCORE5)
 XLAT(EM_78KOR),
 #define XLAT_VAL_153 ((unsigned) (EM_78KOR))
 #define XLAT_STR_153 STRINGIFY(EM_78KOR)
 XLAT(EM_56800EX),
 #define XLAT_VAL_154 ((unsigned) (EM_56800EX))
 #define XLAT_STR_154 STRINGIFY(EM_56800EX)
 XLAT(EM_BA1),
 #define XLAT_VAL_155 ((unsigned) (EM_BA1))
 #define XLAT_STR_155 STRINGIFY(EM_BA1)
 XLAT(EM_BA2),
 #define XLAT_VAL_156 ((unsigned) (EM_BA2))
 #define XLAT_STR_156 STRINGIFY(EM_BA2)
 XLAT(EM_XCORE),
 #define XLAT_VAL_157 ((unsigned) (EM_XCORE))
 #define XLAT_STR_157 STRINGIFY(EM_XCORE)
 XLAT(EM_MCHP_PIC),
 #define XLAT_VAL_158 ((unsigned) (EM_MCHP_PIC))
 #define XLAT_STR_158 STRINGIFY(EM_MCHP_PIC)

 XLAT(EM_KM32),
 #define XLAT_VAL_159 ((unsigned) (EM_KM32))
 #define XLAT_STR_159 STRINGIFY(EM_KM32)
 XLAT(EM_KMX32),
 #define XLAT_VAL_160 ((unsigned) (EM_KMX32))
 #define XLAT_STR_160 STRINGIFY(EM_KMX32)
 XLAT(EM_KMX16),
 #define XLAT_VAL_161 ((unsigned) (EM_KMX16))
 #define XLAT_STR_161 STRINGIFY(EM_KMX16)
 XLAT(EM_KMX8),
 #define XLAT_VAL_162 ((unsigned) (EM_KMX8))
 #define XLAT_STR_162 STRINGIFY(EM_KMX8)
 XLAT(EM_KVARC),
 #define XLAT_VAL_163 ((unsigned) (EM_KVARC))
 #define XLAT_STR_163 STRINGIFY(EM_KVARC)
 XLAT(EM_CDP),
 #define XLAT_VAL_164 ((unsigned) (EM_CDP))
 #define XLAT_STR_164 STRINGIFY(EM_CDP)
 XLAT(EM_COGE),
 #define XLAT_VAL_165 ((unsigned) (EM_COGE))
 #define XLAT_STR_165 STRINGIFY(EM_COGE)
 XLAT(EM_COOL),
 #define XLAT_VAL_166 ((unsigned) (EM_COOL))
 #define XLAT_STR_166 STRINGIFY(EM_COOL)
 XLAT(EM_NORC),
 #define XLAT_VAL_167 ((unsigned) (EM_NORC))
 #define XLAT_STR_167 STRINGIFY(EM_NORC)
 XLAT(EM_CSR_KALIMBA),
 #define XLAT_VAL_168 ((unsigned) (EM_CSR_KALIMBA))
 #define XLAT_STR_168 STRINGIFY(EM_CSR_KALIMBA)
 XLAT(EM_Z80),
 #define XLAT_VAL_169 ((unsigned) (EM_Z80))
 #define XLAT_STR_169 STRINGIFY(EM_Z80)
 XLAT(EM_VISIUM),
 #define XLAT_VAL_170 ((unsigned) (EM_VISIUM))
 #define XLAT_STR_170 STRINGIFY(EM_VISIUM)
 XLAT(EM_FT32),
 #define XLAT_VAL_171 ((unsigned) (EM_FT32))
 #define XLAT_STR_171 STRINGIFY(EM_FT32)
 XLAT(EM_MOXIE),
 #define XLAT_VAL_172 ((unsigned) (EM_MOXIE))
 #define XLAT_STR_172 STRINGIFY(EM_MOXIE)
 XLAT(EM_AMDGPU),
 #define XLAT_VAL_173 ((unsigned) (EM_AMDGPU))
 #define XLAT_STR_173 STRINGIFY(EM_AMDGPU)
 XLAT(EM_RISCV),
 #define XLAT_VAL_174 ((unsigned) (EM_RISCV))
 #define XLAT_STR_174 STRINGIFY(EM_RISCV)
 XLAT(EM_BPF),
 #define XLAT_VAL_175 ((unsigned) (EM_BPF))
 #define XLAT_STR_175 STRINGIFY(EM_BPF)
 XLAT(EM_CSKY),
 #define XLAT_VAL_176 ((unsigned) (EM_CSKY))
 #define XLAT_STR_176 STRINGIFY(EM_CSKY)
 XLAT(EM_LOONGARCH),
 #define XLAT_VAL_177 ((unsigned) (EM_LOONGARCH))
 #define XLAT_STR_177 STRINGIFY(EM_LOONGARCH)
 XLAT(EM_AVR32),
 #define XLAT_VAL_178 ((unsigned) (EM_AVR32))
 #define XLAT_STR_178 STRINGIFY(EM_AVR32)
 XLAT(EM_FRV),
 #define XLAT_VAL_179 ((unsigned) (EM_FRV))
 #define XLAT_STR_179 STRINGIFY(EM_FRV)
 XLAT(EM_OR32),
 #define XLAT_VAL_180 ((unsigned) (EM_OR32))
 #define XLAT_STR_180 STRINGIFY(EM_OR32)
 XLAT(EM_ALPHA),
 #define XLAT_VAL_181 ((unsigned) (EM_ALPHA))
 #define XLAT_STR_181 STRINGIFY(EM_ALPHA)
 XLAT(EM_CYGNUS_M32R),
 #define XLAT_VAL_182 ((unsigned) (EM_CYGNUS_M32R))
 #define XLAT_STR_182 STRINGIFY(EM_CYGNUS_M32R)
 XLAT(EM_CYGNUS_V850),
 #define XLAT_VAL_183 ((unsigned) (EM_CYGNUS_V850))
 #define XLAT_STR_183 STRINGIFY(EM_CYGNUS_V850)
 XLAT(EM_S390_OLD),
 #define XLAT_VAL_184 ((unsigned) (EM_S390_OLD))
 #define XLAT_STR_184 STRINGIFY(EM_S390_OLD)
 XLAT(EM_XTENSA_OLD),
 #define XLAT_VAL_185 ((unsigned) (EM_XTENSA_OLD))
 #define XLAT_STR_185 STRINGIFY(EM_XTENSA_OLD)
 XLAT(EM_MICROBLAZE_OLD),
 #define XLAT_VAL_186 ((unsigned) (EM_MICROBLAZE_OLD))
 #define XLAT_STR_186 STRINGIFY(EM_MICROBLAZE_OLD)
 XLAT(EM_CYGNUS_MN10300),
 #define XLAT_VAL_187 ((unsigned) (EM_CYGNUS_MN10300))
 #define XLAT_STR_187 STRINGIFY(EM_CYGNUS_MN10300)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat elf_em[1] = { {
 .data = elf_em_xdata,
 .size = ARRAY_SIZE(elf_em_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
#  ifdef XLAT_VAL_79
  | XLAT_VAL_79
#  endif
#  ifdef XLAT_VAL_80
  | XLAT_VAL_80
#  endif
#  ifdef XLAT_VAL_81
  | XLAT_VAL_81
#  endif
#  ifdef XLAT_VAL_82
  | XLAT_VAL_82
#  endif
#  ifdef XLAT_VAL_83
  | XLAT_VAL_83
#  endif
#  ifdef XLAT_VAL_84
  | XLAT_VAL_84
#  endif
#  ifdef XLAT_VAL_85
  | XLAT_VAL_85
#  endif
#  ifdef XLAT_VAL_86
  | XLAT_VAL_86
#  endif
#  ifdef XLAT_VAL_87
  | XLAT_VAL_87
#  endif
#  ifdef XLAT_VAL_88
  | XLAT_VAL_88
#  endif
#  ifdef XLAT_VAL_89
  | XLAT_VAL_89
#  endif
#  ifdef XLAT_VAL_90
  | XLAT_VAL_90
#  endif
#  ifdef XLAT_VAL_91
  | XLAT_VAL_91
#  endif
#  ifdef XLAT_VAL_92
  | XLAT_VAL_92
#  endif
#  ifdef XLAT_VAL_93
  | XLAT_VAL_93
#  endif
#  ifdef XLAT_VAL_94
  | XLAT_VAL_94
#  endif
#  ifdef XLAT_VAL_95
  | XLAT_VAL_95
#  endif
#  ifdef XLAT_VAL_96
  | XLAT_VAL_96
#  endif
#  ifdef XLAT_VAL_97
  | XLAT_VAL_97
#  endif
#  ifdef XLAT_VAL_98
  | XLAT_VAL_98
#  endif
#  ifdef XLAT_VAL_99
  | XLAT_VAL_99
#  endif
#  ifdef XLAT_VAL_100
  | XLAT_VAL_100
#  endif
#  ifdef XLAT_VAL_101
  | XLAT_VAL_101
#  endif
#  ifdef XLAT_VAL_102
  | XLAT_VAL_102
#  endif
#  ifdef XLAT_VAL_103
  | XLAT_VAL_103
#  endif
#  ifdef XLAT_VAL_104
  | XLAT_VAL_104
#  endif
#  ifdef XLAT_VAL_105
  | XLAT_VAL_105
#  endif
#  ifdef XLAT_VAL_106
  | XLAT_VAL_106
#  endif
#  ifdef XLAT_VAL_107
  | XLAT_VAL_107
#  endif
#  ifdef XLAT_VAL_108
  | XLAT_VAL_108
#  endif
#  ifdef XLAT_VAL_109
  | XLAT_VAL_109
#  endif
#  ifdef XLAT_VAL_110
  | XLAT_VAL_110
#  endif
#  ifdef XLAT_VAL_111
  | XLAT_VAL_111
#  endif
#  ifdef XLAT_VAL_112
  | XLAT_VAL_112
#  endif
#  ifdef XLAT_VAL_113
  | XLAT_VAL_113
#  endif
#  ifdef XLAT_VAL_114
  | XLAT_VAL_114
#  endif
#  ifdef XLAT_VAL_115
  | XLAT_VAL_115
#  endif
#  ifdef XLAT_VAL_116
  | XLAT_VAL_116
#  endif
#  ifdef XLAT_VAL_117
  | XLAT_VAL_117
#  endif
#  ifdef XLAT_VAL_118
  | XLAT_VAL_118
#  endif
#  ifdef XLAT_VAL_119
  | XLAT_VAL_119
#  endif
#  ifdef XLAT_VAL_120
  | XLAT_VAL_120
#  endif
#  ifdef XLAT_VAL_121
  | XLAT_VAL_121
#  endif
#  ifdef XLAT_VAL_122
  | XLAT_VAL_122
#  endif
#  ifdef XLAT_VAL_123
  | XLAT_VAL_123
#  endif
#  ifdef XLAT_VAL_124
  | XLAT_VAL_124
#  endif
#  ifdef XLAT_VAL_125
  | XLAT_VAL_125
#  endif
#  ifdef XLAT_VAL_126
  | XLAT_VAL_126
#  endif
#  ifdef XLAT_VAL_127
  | XLAT_VAL_127
#  endif
#  ifdef XLAT_VAL_128
  | XLAT_VAL_128
#  endif
#  ifdef XLAT_VAL_129
  | XLAT_VAL_129
#  endif
#  ifdef XLAT_VAL_130
  | XLAT_VAL_130
#  endif
#  ifdef XLAT_VAL_131
  | XLAT_VAL_131
#  endif
#  ifdef XLAT_VAL_132
  | XLAT_VAL_132
#  endif
#  ifdef XLAT_VAL_133
  | XLAT_VAL_133
#  endif
#  ifdef XLAT_VAL_134
  | XLAT_VAL_134
#  endif
#  ifdef XLAT_VAL_135
  | XLAT_VAL_135
#  endif
#  ifdef XLAT_VAL_136
  | XLAT_VAL_136
#  endif
#  ifdef XLAT_VAL_137
  | XLAT_VAL_137
#  endif
#  ifdef XLAT_VAL_138
  | XLAT_VAL_138
#  endif
#  ifdef XLAT_VAL_139
  | XLAT_VAL_139
#  endif
#  ifdef XLAT_VAL_140
  | XLAT_VAL_140
#  endif
#  ifdef XLAT_VAL_141
  | XLAT_VAL_141
#  endif
#  ifdef XLAT_VAL_142
  | XLAT_VAL_142
#  endif
#  ifdef XLAT_VAL_143
  | XLAT_VAL_143
#  endif
#  ifdef XLAT_VAL_144
  | XLAT_VAL_144
#  endif
#  ifdef XLAT_VAL_145
  | XLAT_VAL_145
#  endif
#  ifdef XLAT_VAL_146
  | XLAT_VAL_146
#  endif
#  ifdef XLAT_VAL_147
  | XLAT_VAL_147
#  endif
#  ifdef XLAT_VAL_148
  | XLAT_VAL_148
#  endif
#  ifdef XLAT_VAL_149
  | XLAT_VAL_149
#  endif
#  ifdef XLAT_VAL_150
  | XLAT_VAL_150
#  endif
#  ifdef XLAT_VAL_151
  | XLAT_VAL_151
#  endif
#  ifdef XLAT_VAL_152
  | XLAT_VAL_152
#  endif
#  ifdef XLAT_VAL_153
  | XLAT_VAL_153
#  endif
#  ifdef XLAT_VAL_154
  | XLAT_VAL_154
#  endif
#  ifdef XLAT_VAL_155
  | XLAT_VAL_155
#  endif
#  ifdef XLAT_VAL_156
  | XLAT_VAL_156
#  endif
#  ifdef XLAT_VAL_157
  | XLAT_VAL_157
#  endif
#  ifdef XLAT_VAL_158
  | XLAT_VAL_158
#  endif
#  ifdef XLAT_VAL_159
  | XLAT_VAL_159
#  endif
#  ifdef XLAT_VAL_160
  | XLAT_VAL_160
#  endif
#  ifdef XLAT_VAL_161
  | XLAT_VAL_161
#  endif
#  ifdef XLAT_VAL_162
  | XLAT_VAL_162
#  endif
#  ifdef XLAT_VAL_163
  | XLAT_VAL_163
#  endif
#  ifdef XLAT_VAL_164
  | XLAT_VAL_164
#  endif
#  ifdef XLAT_VAL_165
  | XLAT_VAL_165
#  endif
#  ifdef XLAT_VAL_166
  | XLAT_VAL_166
#  endif
#  ifdef XLAT_VAL_167
  | XLAT_VAL_167
#  endif
#  ifdef XLAT_VAL_168
  | XLAT_VAL_168
#  endif
#  ifdef XLAT_VAL_169
  | XLAT_VAL_169
#  endif
#  ifdef XLAT_VAL_170
  | XLAT_VAL_170
#  endif
#  ifdef XLAT_VAL_171
  | XLAT_VAL_171
#  endif
#  ifdef XLAT_VAL_172
  | XLAT_VAL_172
#  endif
#  ifdef XLAT_VAL_173
  | XLAT_VAL_173
#  endif
#  ifdef XLAT_VAL_174
  | XLAT_VAL_174
#  endif
#  ifdef XLAT_VAL_175
  | XLAT_VAL_175
#  endif
#  ifdef XLAT_VAL_176
  | XLAT_VAL_176
#  endif
#  ifdef XLAT_VAL_177
  | XLAT_VAL_177
#  endif
#  ifdef XLAT_VAL_178
  | XLAT_VAL_178
#  endif
#  ifdef XLAT_VAL_179
  | XLAT_VAL_179
#  endif
#  ifdef XLAT_VAL_180
  | XLAT_VAL_180
#  endif
#  ifdef XLAT_VAL_181
  | XLAT_VAL_181
#  endif
#  ifdef XLAT_VAL_182
  | XLAT_VAL_182
#  endif
#  ifdef XLAT_VAL_183
  | XLAT_VAL_183
#  endif
#  ifdef XLAT_VAL_184
  | XLAT_VAL_184
#  endif
#  ifdef XLAT_VAL_185
  | XLAT_VAL_185
#  endif
#  ifdef XLAT_VAL_186
  | XLAT_VAL_186
#  endif
#  ifdef XLAT_VAL_187
  | XLAT_VAL_187
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
#  ifdef XLAT_STR_79
  + sizeof(XLAT_STR_79)
#  endif
#  ifdef XLAT_STR_80
  + sizeof(XLAT_STR_80)
#  endif
#  ifdef XLAT_STR_81
  + sizeof(XLAT_STR_81)
#  endif
#  ifdef XLAT_STR_82
  + sizeof(XLAT_STR_82)
#  endif
#  ifdef XLAT_STR_83
  + sizeof(XLAT_STR_83)
#  endif
#  ifdef XLAT_STR_84
  + sizeof(XLAT_STR_84)
#  endif
#  ifdef XLAT_STR_85
  + sizeof(XLAT_STR_85)
#  endif
#  ifdef XLAT_STR_86
  + sizeof(XLAT_STR_86)
#  endif
#  ifdef XLAT_STR_87
  + sizeof(XLAT_STR_87)
#  endif
#  ifdef XLAT_STR_88
  + sizeof(XLAT_STR_88)
#  endif
#  ifdef XLAT_STR_89
  + sizeof(XLAT_STR_89)
#  endif
#  ifdef XLAT_STR_90
  + sizeof(XLAT_STR_90)
#  endif
#  ifdef XLAT_STR_91
  + sizeof(XLAT_STR_91)
#  endif
#  ifdef XLAT_STR_92
  + sizeof(XLAT_STR_92)
#  endif
#  ifdef XLAT_STR_93
  + sizeof(XLAT_STR_93)
#  endif
#  ifdef XLAT_STR_94
  + sizeof(XLAT_STR_94)
#  endif
#  ifdef XLAT_STR_95
  + sizeof(XLAT_STR_95)
#  endif
#  ifdef XLAT_STR_96
  + sizeof(XLAT_STR_96)
#  endif
#  ifdef XLAT_STR_97
  + sizeof(XLAT_STR_97)
#  endif
#  ifdef XLAT_STR_98
  + sizeof(XLAT_STR_98)
#  endif
#  ifdef XLAT_STR_99
  + sizeof(XLAT_STR_99)
#  endif
#  ifdef XLAT_STR_100
  + sizeof(XLAT_STR_100)
#  endif
#  ifdef XLAT_STR_101
  + sizeof(XLAT_STR_101)
#  endif
#  ifdef XLAT_STR_102
  + sizeof(XLAT_STR_102)
#  endif
#  ifdef XLAT_STR_103
  + sizeof(XLAT_STR_103)
#  endif
#  ifdef XLAT_STR_104
  + sizeof(XLAT_STR_104)
#  endif
#  ifdef XLAT_STR_105
  + sizeof(XLAT_STR_105)
#  endif
#  ifdef XLAT_STR_106
  + sizeof(XLAT_STR_106)
#  endif
#  ifdef XLAT_STR_107
  + sizeof(XLAT_STR_107)
#  endif
#  ifdef XLAT_STR_108
  + sizeof(XLAT_STR_108)
#  endif
#  ifdef XLAT_STR_109
  + sizeof(XLAT_STR_109)
#  endif
#  ifdef XLAT_STR_110
  + sizeof(XLAT_STR_110)
#  endif
#  ifdef XLAT_STR_111
  + sizeof(XLAT_STR_111)
#  endif
#  ifdef XLAT_STR_112
  + sizeof(XLAT_STR_112)
#  endif
#  ifdef XLAT_STR_113
  + sizeof(XLAT_STR_113)
#  endif
#  ifdef XLAT_STR_114
  + sizeof(XLAT_STR_114)
#  endif
#  ifdef XLAT_STR_115
  + sizeof(XLAT_STR_115)
#  endif
#  ifdef XLAT_STR_116
  + sizeof(XLAT_STR_116)
#  endif
#  ifdef XLAT_STR_117
  + sizeof(XLAT_STR_117)
#  endif
#  ifdef XLAT_STR_118
  + sizeof(XLAT_STR_118)
#  endif
#  ifdef XLAT_STR_119
  + sizeof(XLAT_STR_119)
#  endif
#  ifdef XLAT_STR_120
  + sizeof(XLAT_STR_120)
#  endif
#  ifdef XLAT_STR_121
  + sizeof(XLAT_STR_121)
#  endif
#  ifdef XLAT_STR_122
  + sizeof(XLAT_STR_122)
#  endif
#  ifdef XLAT_STR_123
  + sizeof(XLAT_STR_123)
#  endif
#  ifdef XLAT_STR_124
  + sizeof(XLAT_STR_124)
#  endif
#  ifdef XLAT_STR_125
  + sizeof(XLAT_STR_125)
#  endif
#  ifdef XLAT_STR_126
  + sizeof(XLAT_STR_126)
#  endif
#  ifdef XLAT_STR_127
  + sizeof(XLAT_STR_127)
#  endif
#  ifdef XLAT_STR_128
  + sizeof(XLAT_STR_128)
#  endif
#  ifdef XLAT_STR_129
  + sizeof(XLAT_STR_129)
#  endif
#  ifdef XLAT_STR_130
  + sizeof(XLAT_STR_130)
#  endif
#  ifdef XLAT_STR_131
  + sizeof(XLAT_STR_131)
#  endif
#  ifdef XLAT_STR_132
  + sizeof(XLAT_STR_132)
#  endif
#  ifdef XLAT_STR_133
  + sizeof(XLAT_STR_133)
#  endif
#  ifdef XLAT_STR_134
  + sizeof(XLAT_STR_134)
#  endif
#  ifdef XLAT_STR_135
  + sizeof(XLAT_STR_135)
#  endif
#  ifdef XLAT_STR_136
  + sizeof(XLAT_STR_136)
#  endif
#  ifdef XLAT_STR_137
  + sizeof(XLAT_STR_137)
#  endif
#  ifdef XLAT_STR_138
  + sizeof(XLAT_STR_138)
#  endif
#  ifdef XLAT_STR_139
  + sizeof(XLAT_STR_139)
#  endif
#  ifdef XLAT_STR_140
  + sizeof(XLAT_STR_140)
#  endif
#  ifdef XLAT_STR_141
  + sizeof(XLAT_STR_141)
#  endif
#  ifdef XLAT_STR_142
  + sizeof(XLAT_STR_142)
#  endif
#  ifdef XLAT_STR_143
  + sizeof(XLAT_STR_143)
#  endif
#  ifdef XLAT_STR_144
  + sizeof(XLAT_STR_144)
#  endif
#  ifdef XLAT_STR_145
  + sizeof(XLAT_STR_145)
#  endif
#  ifdef XLAT_STR_146
  + sizeof(XLAT_STR_146)
#  endif
#  ifdef XLAT_STR_147
  + sizeof(XLAT_STR_147)
#  endif
#  ifdef XLAT_STR_148
  + sizeof(XLAT_STR_148)
#  endif
#  ifdef XLAT_STR_149
  + sizeof(XLAT_STR_149)
#  endif
#  ifdef XLAT_STR_150
  + sizeof(XLAT_STR_150)
#  endif
#  ifdef XLAT_STR_151
  + sizeof(XLAT_STR_151)
#  endif
#  ifdef XLAT_STR_152
  + sizeof(XLAT_STR_152)
#  endif
#  ifdef XLAT_STR_153
  + sizeof(XLAT_STR_153)
#  endif
#  ifdef XLAT_STR_154
  + sizeof(XLAT_STR_154)
#  endif
#  ifdef XLAT_STR_155
  + sizeof(XLAT_STR_155)
#  endif
#  ifdef XLAT_STR_156
  + sizeof(XLAT_STR_156)
#  endif
#  ifdef XLAT_STR_157
  + sizeof(XLAT_STR_157)
#  endif
#  ifdef XLAT_STR_158
  + sizeof(XLAT_STR_158)
#  endif
#  ifdef XLAT_STR_159
  + sizeof(XLAT_STR_159)
#  endif
#  ifdef XLAT_STR_160
  + sizeof(XLAT_STR_160)
#  endif
#  ifdef XLAT_STR_161
  + sizeof(XLAT_STR_161)
#  endif
#  ifdef XLAT_STR_162
  + sizeof(XLAT_STR_162)
#  endif
#  ifdef XLAT_STR_163
  + sizeof(XLAT_STR_163)
#  endif
#  ifdef XLAT_STR_164
  + sizeof(XLAT_STR_164)
#  endif
#  ifdef XLAT_STR_165
  + sizeof(XLAT_STR_165)
#  endif
#  ifdef XLAT_STR_166
  + sizeof(XLAT_STR_166)
#  endif
#  ifdef XLAT_STR_167
  + sizeof(XLAT_STR_167)
#  endif
#  ifdef XLAT_STR_168
  + sizeof(XLAT_STR_168)
#  endif
#  ifdef XLAT_STR_169
  + sizeof(XLAT_STR_169)
#  endif
#  ifdef XLAT_STR_170
  + sizeof(XLAT_STR_170)
#  endif
#  ifdef XLAT_STR_171
  + sizeof(XLAT_STR_171)
#  endif
#  ifdef XLAT_STR_172
  + sizeof(XLAT_STR_172)
#  endif
#  ifdef XLAT_STR_173
  + sizeof(XLAT_STR_173)
#  endif
#  ifdef XLAT_STR_174
  + sizeof(XLAT_STR_174)
#  endif
#  ifdef XLAT_STR_175
  + sizeof(XLAT_STR_175)
#  endif
#  ifdef XLAT_STR_176
  + sizeof(XLAT_STR_176)
#  endif
#  ifdef XLAT_STR_177
  + sizeof(XLAT_STR_177)
#  endif
#  ifdef XLAT_STR_178
  + sizeof(XLAT_STR_178)
#  endif
#  ifdef XLAT_STR_179
  + sizeof(XLAT_STR_179)
#  endif
#  ifdef XLAT_STR_180
  + sizeof(XLAT_STR_180)
#  endif
#  ifdef XLAT_STR_181
  + sizeof(XLAT_STR_181)
#  endif
#  ifdef XLAT_STR_182
  + sizeof(XLAT_STR_182)
#  endif
#  ifdef XLAT_STR_183
  + sizeof(XLAT_STR_183)
#  endif
#  ifdef XLAT_STR_184
  + sizeof(XLAT_STR_184)
#  endif
#  ifdef XLAT_STR_185
  + sizeof(XLAT_STR_185)
#  endif
#  ifdef XLAT_STR_186
  + sizeof(XLAT_STR_186)
#  endif
#  ifdef XLAT_STR_187
  + sizeof(XLAT_STR_187)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
#  undef XLAT_STR_79
#  undef XLAT_VAL_79
#  undef XLAT_STR_80
#  undef XLAT_VAL_80
#  undef XLAT_STR_81
#  undef XLAT_VAL_81
#  undef XLAT_STR_82
#  undef XLAT_VAL_82
#  undef XLAT_STR_83
#  undef XLAT_VAL_83
#  undef XLAT_STR_84
#  undef XLAT_VAL_84
#  undef XLAT_STR_85
#  undef XLAT_VAL_85
#  undef XLAT_STR_86
#  undef XLAT_VAL_86
#  undef XLAT_STR_87
#  undef XLAT_VAL_87
#  undef XLAT_STR_88
#  undef XLAT_VAL_88
#  undef XLAT_STR_89
#  undef XLAT_VAL_89
#  undef XLAT_STR_90
#  undef XLAT_VAL_90
#  undef XLAT_STR_91
#  undef XLAT_VAL_91
#  undef XLAT_STR_92
#  undef XLAT_VAL_92
#  undef XLAT_STR_93
#  undef XLAT_VAL_93
#  undef XLAT_STR_94
#  undef XLAT_VAL_94
#  undef XLAT_STR_95
#  undef XLAT_VAL_95
#  undef XLAT_STR_96
#  undef XLAT_VAL_96
#  undef XLAT_STR_97
#  undef XLAT_VAL_97
#  undef XLAT_STR_98
#  undef XLAT_VAL_98
#  undef XLAT_STR_99
#  undef XLAT_VAL_99
#  undef XLAT_STR_100
#  undef XLAT_VAL_100
#  undef XLAT_STR_101
#  undef XLAT_VAL_101
#  undef XLAT_STR_102
#  undef XLAT_VAL_102
#  undef XLAT_STR_103
#  undef XLAT_VAL_103
#  undef XLAT_STR_104
#  undef XLAT_VAL_104
#  undef XLAT_STR_105
#  undef XLAT_VAL_105
#  undef XLAT_STR_106
#  undef XLAT_VAL_106
#  undef XLAT_STR_107
#  undef XLAT_VAL_107
#  undef XLAT_STR_108
#  undef XLAT_VAL_108
#  undef XLAT_STR_109
#  undef XLAT_VAL_109
#  undef XLAT_STR_110
#  undef XLAT_VAL_110
#  undef XLAT_STR_111
#  undef XLAT_VAL_111
#  undef XLAT_STR_112
#  undef XLAT_VAL_112
#  undef XLAT_STR_113
#  undef XLAT_VAL_113
#  undef XLAT_STR_114
#  undef XLAT_VAL_114
#  undef XLAT_STR_115
#  undef XLAT_VAL_115
#  undef XLAT_STR_116
#  undef XLAT_VAL_116
#  undef XLAT_STR_117
#  undef XLAT_VAL_117
#  undef XLAT_STR_118
#  undef XLAT_VAL_118
#  undef XLAT_STR_119
#  undef XLAT_VAL_119
#  undef XLAT_STR_120
#  undef XLAT_VAL_120
#  undef XLAT_STR_121
#  undef XLAT_VAL_121
#  undef XLAT_STR_122
#  undef XLAT_VAL_122
#  undef XLAT_STR_123
#  undef XLAT_VAL_123
#  undef XLAT_STR_124
#  undef XLAT_VAL_124
#  undef XLAT_STR_125
#  undef XLAT_VAL_125
#  undef XLAT_STR_126
#  undef XLAT_VAL_126
#  undef XLAT_STR_127
#  undef XLAT_VAL_127
#  undef XLAT_STR_128
#  undef XLAT_VAL_128
#  undef XLAT_STR_129
#  undef XLAT_VAL_129
#  undef XLAT_STR_130
#  undef XLAT_VAL_130
#  undef XLAT_STR_131
#  undef XLAT_VAL_131
#  undef XLAT_STR_132
#  undef XLAT_VAL_132
#  undef XLAT_STR_133
#  undef XLAT_VAL_133
#  undef XLAT_STR_134
#  undef XLAT_VAL_134
#  undef XLAT_STR_135
#  undef XLAT_VAL_135
#  undef XLAT_STR_136
#  undef XLAT_VAL_136
#  undef XLAT_STR_137
#  undef XLAT_VAL_137
#  undef XLAT_STR_138
#  undef XLAT_VAL_138
#  undef XLAT_STR_139
#  undef XLAT_VAL_139
#  undef XLAT_STR_140
#  undef XLAT_VAL_140
#  undef XLAT_STR_141
#  undef XLAT_VAL_141
#  undef XLAT_STR_142
#  undef XLAT_VAL_142
#  undef XLAT_STR_143
#  undef XLAT_VAL_143
#  undef XLAT_STR_144
#  undef XLAT_VAL_144
#  undef XLAT_STR_145
#  undef XLAT_VAL_145
#  undef XLAT_STR_146
#  undef XLAT_VAL_146
#  undef XLAT_STR_147
#  undef XLAT_VAL_147
#  undef XLAT_STR_148
#  undef XLAT_VAL_148
#  undef XLAT_STR_149
#  undef XLAT_VAL_149
#  undef XLAT_STR_150
#  undef XLAT_VAL_150
#  undef XLAT_STR_151
#  undef XLAT_VAL_151
#  undef XLAT_STR_152
#  undef XLAT_VAL_152
#  undef XLAT_STR_153
#  undef XLAT_VAL_153
#  undef XLAT_STR_154
#  undef XLAT_VAL_154
#  undef XLAT_STR_155
#  undef XLAT_VAL_155
#  undef XLAT_STR_156
#  undef XLAT_VAL_156
#  undef XLAT_STR_157
#  undef XLAT_VAL_157
#  undef XLAT_STR_158
#  undef XLAT_VAL_158
#  undef XLAT_STR_159
#  undef XLAT_VAL_159
#  undef XLAT_STR_160
#  undef XLAT_VAL_160
#  undef XLAT_STR_161
#  undef XLAT_VAL_161
#  undef XLAT_STR_162
#  undef XLAT_VAL_162
#  undef XLAT_STR_163
#  undef XLAT_VAL_163
#  undef XLAT_STR_164
#  undef XLAT_VAL_164
#  undef XLAT_STR_165
#  undef XLAT_VAL_165
#  undef XLAT_STR_166
#  undef XLAT_VAL_166
#  undef XLAT_STR_167
#  undef XLAT_VAL_167
#  undef XLAT_STR_168
#  undef XLAT_VAL_168
#  undef XLAT_STR_169
#  undef XLAT_VAL_169
#  undef XLAT_STR_170
#  undef XLAT_VAL_170
#  undef XLAT_STR_171
#  undef XLAT_VAL_171
#  undef XLAT_STR_172
#  undef XLAT_VAL_172
#  undef XLAT_STR_173
#  undef XLAT_VAL_173
#  undef XLAT_STR_174
#  undef XLAT_VAL_174
#  undef XLAT_STR_175
#  undef XLAT_VAL_175
#  undef XLAT_STR_176
#  undef XLAT_VAL_176
#  undef XLAT_STR_177
#  undef XLAT_VAL_177
#  undef XLAT_STR_178
#  undef XLAT_VAL_178
#  undef XLAT_STR_179
#  undef XLAT_VAL_179
#  undef XLAT_STR_180
#  undef XLAT_VAL_180
#  undef XLAT_STR_181
#  undef XLAT_VAL_181
#  undef XLAT_STR_182
#  undef XLAT_VAL_182
#  undef XLAT_STR_183
#  undef XLAT_VAL_183
#  undef XLAT_STR_184
#  undef XLAT_VAL_184
#  undef XLAT_STR_185
#  undef XLAT_VAL_185
#  undef XLAT_STR_186
#  undef XLAT_VAL_186
#  undef XLAT_STR_187
#  undef XLAT_VAL_187
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
