/* Generated by ./src/xlat/gen.sh from ./src/xlat/sigact_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined SA_NOMASK && SA_NODEFER != SA_NOMASK
#endif
#if defined SA_ONESHOT && SA_ONESHOT != SA_RESETHAND
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sigact_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sigact_flags_xdata[] = {
#if defined(SA_RESTORER) || (defined(HAVE_DECL_SA_RESTORER) && HAVE_DECL_SA_RESTORER)
  XLAT(SA_RESTORER),
 #define XLAT_VAL_0 ((unsigned) (SA_RESTORER))
 #define XLAT_STR_0 STRINGIFY(SA_RESTORER)
#endif
#if defined(SA_ONSTACK) || (defined(HAVE_DECL_SA_ONSTACK) && HAVE_DECL_SA_ONSTACK)
  XLAT(SA_ONSTACK),
 #define XLAT_VAL_1 ((unsigned) (SA_ONSTACK))
 #define XLAT_STR_1 STRINGIFY(SA_ONSTACK)
#endif
#if defined(SA_RESTART) || (defined(HAVE_DECL_SA_RESTART) && HAVE_DECL_SA_RESTART)
  XLAT(SA_RESTART),
 #define XLAT_VAL_2 ((unsigned) (SA_RESTART))
 #define XLAT_STR_2 STRINGIFY(SA_RESTART)
#endif
#if defined(SA_INTERRUPT) || (defined(HAVE_DECL_SA_INTERRUPT) && HAVE_DECL_SA_INTERRUPT)
  XLAT(SA_INTERRUPT),
 #define XLAT_VAL_3 ((unsigned) (SA_INTERRUPT))
 #define XLAT_STR_3 STRINGIFY(SA_INTERRUPT)
#endif
#if defined(SA_NODEFER) || (defined(HAVE_DECL_SA_NODEFER) && HAVE_DECL_SA_NODEFER)
  XLAT(SA_NODEFER),
 #define XLAT_VAL_4 ((unsigned) (SA_NODEFER))
 #define XLAT_STR_4 STRINGIFY(SA_NODEFER)
#endif
#if defined SA_NOMASK && SA_NODEFER != SA_NOMASK
#if defined(SA_NOMASK) || (defined(HAVE_DECL_SA_NOMASK) && HAVE_DECL_SA_NOMASK)
  XLAT(SA_NOMASK),
 #define XLAT_VAL_5 ((unsigned) (SA_NOMASK))
 #define XLAT_STR_5 STRINGIFY(SA_NOMASK)
#endif
#endif
#if defined(SA_RESETHAND) || (defined(HAVE_DECL_SA_RESETHAND) && HAVE_DECL_SA_RESETHAND)
  XLAT(SA_RESETHAND),
 #define XLAT_VAL_6 ((unsigned) (SA_RESETHAND))
 #define XLAT_STR_6 STRINGIFY(SA_RESETHAND)
#endif
#if defined SA_ONESHOT && SA_ONESHOT != SA_RESETHAND
#if defined(SA_ONESHOT) || (defined(HAVE_DECL_SA_ONESHOT) && HAVE_DECL_SA_ONESHOT)
  XLAT(SA_ONESHOT),
 #define XLAT_VAL_7 ((unsigned) (SA_ONESHOT))
 #define XLAT_STR_7 STRINGIFY(SA_ONESHOT)
#endif
#endif
#if defined(SA_SIGINFO) || (defined(HAVE_DECL_SA_SIGINFO) && HAVE_DECL_SA_SIGINFO)
  XLAT(SA_SIGINFO),
 #define XLAT_VAL_8 ((unsigned) (SA_SIGINFO))
 #define XLAT_STR_8 STRINGIFY(SA_SIGINFO)
#endif
#if defined(SA_RESETHAND) || (defined(HAVE_DECL_SA_RESETHAND) && HAVE_DECL_SA_RESETHAND)
  XLAT(SA_RESETHAND),
 #define XLAT_VAL_9 ((unsigned) (SA_RESETHAND))
 #define XLAT_STR_9 STRINGIFY(SA_RESETHAND)
#endif
#if defined(SA_ONSTACK) || (defined(HAVE_DECL_SA_ONSTACK) && HAVE_DECL_SA_ONSTACK)
  XLAT(SA_ONSTACK),
 #define XLAT_VAL_10 ((unsigned) (SA_ONSTACK))
 #define XLAT_STR_10 STRINGIFY(SA_ONSTACK)
#endif
#if defined(SA_NODEFER) || (defined(HAVE_DECL_SA_NODEFER) && HAVE_DECL_SA_NODEFER)
  XLAT(SA_NODEFER),
 #define XLAT_VAL_11 ((unsigned) (SA_NODEFER))
 #define XLAT_STR_11 STRINGIFY(SA_NODEFER)
#endif
#if defined(SA_NOCLDSTOP) || (defined(HAVE_DECL_SA_NOCLDSTOP) && HAVE_DECL_SA_NOCLDSTOP)
  XLAT(SA_NOCLDSTOP),
 #define XLAT_VAL_12 ((unsigned) (SA_NOCLDSTOP))
 #define XLAT_STR_12 STRINGIFY(SA_NOCLDSTOP)
#endif
#if defined(SA_NOCLDWAIT) || (defined(HAVE_DECL_SA_NOCLDWAIT) && HAVE_DECL_SA_NOCLDWAIT)
  XLAT(SA_NOCLDWAIT),
 #define XLAT_VAL_13 ((unsigned) (SA_NOCLDWAIT))
 #define XLAT_STR_13 STRINGIFY(SA_NOCLDWAIT)
#endif
#if defined(_SA_BSDCALL) || (defined(HAVE_DECL__SA_BSDCALL) && HAVE_DECL__SA_BSDCALL)
  XLAT(_SA_BSDCALL),
 #define XLAT_VAL_14 ((unsigned) (_SA_BSDCALL))
 #define XLAT_STR_14 STRINGIFY(_SA_BSDCALL)
#endif
#if defined(SA_NOPTRACE) || (defined(HAVE_DECL_SA_NOPTRACE) && HAVE_DECL_SA_NOPTRACE)
  XLAT(SA_NOPTRACE),
 #define XLAT_VAL_15 ((unsigned) (SA_NOPTRACE))
 #define XLAT_STR_15 STRINGIFY(SA_NOPTRACE)
#endif
};
static
const struct xlat sigact_flags[1] = { {
 .data = sigact_flags_xdata,
 .size = ARRAY_SIZE(sigact_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
