/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtnl_ifla_ext_filter_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTEXT_FILTER_VF) == ((1 << 0)), "RTEXT_FILTER_VF != (1 << 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTEXT_FILTER_BRVLAN) == ((1 << 1)), "RTEXT_FILTER_BRVLAN != (1 << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTEXT_FILTER_BRVLAN_COMPRESSED) == ((1 << 2)), "RTEXT_FILTER_BRVLAN_COMPRESSED != (1 << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTEXT_FILTER_SKIP_STATS) == ((1 << 3)), "RTEXT_FILTER_SKIP_STATS != (1 << 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTEXT_FILTER_MRP) == ((1 << 4)), "RTEXT_FILTER_MRP != (1 << 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTEXT_FILTER_CFM_CONFIG) == ((1 << 5)), "RTEXT_FILTER_CFM_CONFIG != (1 << 5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTEXT_FILTER_CFM_STATUS) == ((1 << 6)), "RTEXT_FILTER_CFM_STATUS != (1 << 6)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_ifla_ext_filter_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtnl_ifla_ext_filter_flags_xdata[] = {
 XLAT(RTEXT_FILTER_VF),
 #define XLAT_VAL_0 ((unsigned) (RTEXT_FILTER_VF))
 #define XLAT_STR_0 STRINGIFY(RTEXT_FILTER_VF)
 XLAT(RTEXT_FILTER_BRVLAN),
 #define XLAT_VAL_1 ((unsigned) (RTEXT_FILTER_BRVLAN))
 #define XLAT_STR_1 STRINGIFY(RTEXT_FILTER_BRVLAN)
 XLAT(RTEXT_FILTER_BRVLAN_COMPRESSED),
 #define XLAT_VAL_2 ((unsigned) (RTEXT_FILTER_BRVLAN_COMPRESSED))
 #define XLAT_STR_2 STRINGIFY(RTEXT_FILTER_BRVLAN_COMPRESSED)
 XLAT(RTEXT_FILTER_SKIP_STATS),
 #define XLAT_VAL_3 ((unsigned) (RTEXT_FILTER_SKIP_STATS))
 #define XLAT_STR_3 STRINGIFY(RTEXT_FILTER_SKIP_STATS)
 XLAT(RTEXT_FILTER_MRP),
 #define XLAT_VAL_4 ((unsigned) (RTEXT_FILTER_MRP))
 #define XLAT_STR_4 STRINGIFY(RTEXT_FILTER_MRP)
 XLAT(RTEXT_FILTER_CFM_CONFIG),
 #define XLAT_VAL_5 ((unsigned) (RTEXT_FILTER_CFM_CONFIG))
 #define XLAT_STR_5 STRINGIFY(RTEXT_FILTER_CFM_CONFIG)
 XLAT(RTEXT_FILTER_CFM_STATUS),
 #define XLAT_VAL_6 ((unsigned) (RTEXT_FILTER_CFM_STATUS))
 #define XLAT_STR_6 STRINGIFY(RTEXT_FILTER_CFM_STATUS)
};
static
const struct xlat rtnl_ifla_ext_filter_flags[1] = { {
 .data = rtnl_ifla_ext_filter_flags_xdata,
 .size = ARRAY_SIZE(rtnl_ifla_ext_filter_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
