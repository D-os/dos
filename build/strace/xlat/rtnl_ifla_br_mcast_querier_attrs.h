/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtnl_ifla_br_mcast_querier_attrs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_QUERIER_UNSPEC) == (0), "BRIDGE_QUERIER_UNSPEC != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_QUERIER_IP_ADDRESS) == (1), "BRIDGE_QUERIER_IP_ADDRESS != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_QUERIER_IP_PORT) == (2), "BRIDGE_QUERIER_IP_PORT != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_QUERIER_IP_OTHER_TIMER) == (3), "BRIDGE_QUERIER_IP_OTHER_TIMER != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_QUERIER_PAD) == (4), "BRIDGE_QUERIER_PAD != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_QUERIER_IPV6_ADDRESS) == (5), "BRIDGE_QUERIER_IPV6_ADDRESS != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_QUERIER_IPV6_PORT) == (6), "BRIDGE_QUERIER_IPV6_PORT != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_QUERIER_IPV6_OTHER_TIMER) == (7), "BRIDGE_QUERIER_IPV6_OTHER_TIMER != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_ifla_br_mcast_querier_attrs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtnl_ifla_br_mcast_querier_attrs_xdata[] = {
 [BRIDGE_QUERIER_UNSPEC] = XLAT(BRIDGE_QUERIER_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (BRIDGE_QUERIER_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(BRIDGE_QUERIER_UNSPEC)
 [BRIDGE_QUERIER_IP_ADDRESS] = XLAT(BRIDGE_QUERIER_IP_ADDRESS),
 #define XLAT_VAL_1 ((unsigned) (BRIDGE_QUERIER_IP_ADDRESS))
 #define XLAT_STR_1 STRINGIFY(BRIDGE_QUERIER_IP_ADDRESS)
 [BRIDGE_QUERIER_IP_PORT] = XLAT(BRIDGE_QUERIER_IP_PORT),
 #define XLAT_VAL_2 ((unsigned) (BRIDGE_QUERIER_IP_PORT))
 #define XLAT_STR_2 STRINGIFY(BRIDGE_QUERIER_IP_PORT)
 [BRIDGE_QUERIER_IP_OTHER_TIMER] = XLAT(BRIDGE_QUERIER_IP_OTHER_TIMER),
 #define XLAT_VAL_3 ((unsigned) (BRIDGE_QUERIER_IP_OTHER_TIMER))
 #define XLAT_STR_3 STRINGIFY(BRIDGE_QUERIER_IP_OTHER_TIMER)
 [BRIDGE_QUERIER_PAD] = XLAT(BRIDGE_QUERIER_PAD),
 #define XLAT_VAL_4 ((unsigned) (BRIDGE_QUERIER_PAD))
 #define XLAT_STR_4 STRINGIFY(BRIDGE_QUERIER_PAD)
 [BRIDGE_QUERIER_IPV6_ADDRESS] = XLAT(BRIDGE_QUERIER_IPV6_ADDRESS),
 #define XLAT_VAL_5 ((unsigned) (BRIDGE_QUERIER_IPV6_ADDRESS))
 #define XLAT_STR_5 STRINGIFY(BRIDGE_QUERIER_IPV6_ADDRESS)
 [BRIDGE_QUERIER_IPV6_PORT] = XLAT(BRIDGE_QUERIER_IPV6_PORT),
 #define XLAT_VAL_6 ((unsigned) (BRIDGE_QUERIER_IPV6_PORT))
 #define XLAT_STR_6 STRINGIFY(BRIDGE_QUERIER_IPV6_PORT)
 [BRIDGE_QUERIER_IPV6_OTHER_TIMER] = XLAT(BRIDGE_QUERIER_IPV6_OTHER_TIMER),
 #define XLAT_VAL_7 ((unsigned) (BRIDGE_QUERIER_IPV6_OTHER_TIMER))
 #define XLAT_STR_7 STRINGIFY(BRIDGE_QUERIER_IPV6_OTHER_TIMER)
};
static
const struct xlat rtnl_ifla_br_mcast_querier_attrs[1] = { {
 .data = rtnl_ifla_br_mcast_querier_attrs_xdata,
 .size = ARRAY_SIZE(rtnl_ifla_br_mcast_querier_attrs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
