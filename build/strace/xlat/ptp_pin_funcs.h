/* Generated by ./src/xlat/gen.sh from ./src/xlat/ptp_pin_funcs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(PTP_PF_NONE) || (defined(HAVE_DECL_PTP_PF_NONE) && HAVE_DECL_PTP_PF_NONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PTP_PF_NONE) == (0), "PTP_PF_NONE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PTP_PF_NONE 0
#endif
#if defined(PTP_PF_EXTTS) || (defined(HAVE_DECL_PTP_PF_EXTTS) && HAVE_DECL_PTP_PF_EXTTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PTP_PF_EXTTS) == (1), "PTP_PF_EXTTS != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PTP_PF_EXTTS 1
#endif
#if defined(PTP_PF_PEROUT) || (defined(HAVE_DECL_PTP_PF_PEROUT) && HAVE_DECL_PTP_PF_PEROUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PTP_PF_PEROUT) == (2), "PTP_PF_PEROUT != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PTP_PF_PEROUT 2
#endif
#if defined(PTP_PF_PHYSYNC) || (defined(HAVE_DECL_PTP_PF_PHYSYNC) && HAVE_DECL_PTP_PF_PHYSYNC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((PTP_PF_PHYSYNC) == (3), "PTP_PF_PHYSYNC != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define PTP_PF_PHYSYNC 3
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ptp_pin_funcs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data ptp_pin_funcs_xdata[] = {
 [PTP_PF_NONE] = XLAT(PTP_PF_NONE),
 #define XLAT_VAL_0 ((unsigned) (PTP_PF_NONE))
 #define XLAT_STR_0 STRINGIFY(PTP_PF_NONE)
 [PTP_PF_EXTTS] = XLAT(PTP_PF_EXTTS),
 #define XLAT_VAL_1 ((unsigned) (PTP_PF_EXTTS))
 #define XLAT_STR_1 STRINGIFY(PTP_PF_EXTTS)
 [PTP_PF_PEROUT] = XLAT(PTP_PF_PEROUT),
 #define XLAT_VAL_2 ((unsigned) (PTP_PF_PEROUT))
 #define XLAT_STR_2 STRINGIFY(PTP_PF_PEROUT)
 [PTP_PF_PHYSYNC] = XLAT(PTP_PF_PHYSYNC),
 #define XLAT_VAL_3 ((unsigned) (PTP_PF_PHYSYNC))
 #define XLAT_STR_3 STRINGIFY(PTP_PF_PHYSYNC)
};
static
const struct xlat ptp_pin_funcs[1] = { {
 .data = ptp_pin_funcs_xdata,
 .size = ARRAY_SIZE(ptp_pin_funcs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
