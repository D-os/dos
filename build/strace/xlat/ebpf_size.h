/* Generated by ./src/xlat/gen.sh from ./src/xlat/ebpf_size.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BPF_DW) || (defined(HAVE_DECL_BPF_DW) && HAVE_DECL_BPF_DW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_DW) == (0x18), "BPF_DW != 0x18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_DW 0x18
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ebpf_size in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data ebpf_size_xdata[] = {
 XLAT(BPF_DW),
 #define XLAT_VAL_0 ((unsigned) (BPF_DW))
 #define XLAT_STR_0 STRINGIFY(BPF_DW)
};
static
const struct xlat ebpf_size[1] = { {
 .data = ebpf_size_xdata,
 .size = ARRAY_SIZE(ebpf_size_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
