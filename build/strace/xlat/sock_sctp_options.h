/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_sctp_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SCTP_RTOINFO) || (defined(HAVE_DECL_SCTP_RTOINFO) && HAVE_DECL_SCTP_RTOINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_RTOINFO) == (0), "SCTP_RTOINFO != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_RTOINFO 0
#endif
#if defined(SCTP_RTOINFO) || (defined(HAVE_DECL_SCTP_RTOINFO) && HAVE_DECL_SCTP_RTOINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_RTOINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_RTOINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_RTOINFO)
#endif
#if defined(SCTP_ASSOCINFO) || (defined(HAVE_DECL_SCTP_ASSOCINFO) && HAVE_DECL_SCTP_ASSOCINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_ASSOCINFO) == (1), "SCTP_ASSOCINFO != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_ASSOCINFO 1
#endif
#if defined(SCTP_ASSOCINFO) || (defined(HAVE_DECL_SCTP_ASSOCINFO) && HAVE_DECL_SCTP_ASSOCINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_ASSOCINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_ASSOCINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_ASSOCINFO)
#endif
#if defined(SCTP_INITMSG) || (defined(HAVE_DECL_SCTP_INITMSG) && HAVE_DECL_SCTP_INITMSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_INITMSG) == (2), "SCTP_INITMSG != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_INITMSG 2
#endif
#if defined(SCTP_INITMSG) || (defined(HAVE_DECL_SCTP_INITMSG) && HAVE_DECL_SCTP_INITMSG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_INITMSG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_INITMSG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_INITMSG)
#endif
#if defined(SCTP_NODELAY) || (defined(HAVE_DECL_SCTP_NODELAY) && HAVE_DECL_SCTP_NODELAY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_NODELAY) == (3), "SCTP_NODELAY != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_NODELAY 3
#endif
#if defined(SCTP_NODELAY) || (defined(HAVE_DECL_SCTP_NODELAY) && HAVE_DECL_SCTP_NODELAY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_NODELAY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_NODELAY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_NODELAY)
#endif
#if defined(SCTP_AUTOCLOSE) || (defined(HAVE_DECL_SCTP_AUTOCLOSE) && HAVE_DECL_SCTP_AUTOCLOSE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_AUTOCLOSE) == (4), "SCTP_AUTOCLOSE != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_AUTOCLOSE 4
#endif
#if defined(SCTP_AUTOCLOSE) || (defined(HAVE_DECL_SCTP_AUTOCLOSE) && HAVE_DECL_SCTP_AUTOCLOSE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_AUTOCLOSE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_AUTOCLOSE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_AUTOCLOSE)
#endif
#if defined(SCTP_SET_PEER_PRIMARY_ADDR) || (defined(HAVE_DECL_SCTP_SET_PEER_PRIMARY_ADDR) && HAVE_DECL_SCTP_SET_PEER_PRIMARY_ADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_SET_PEER_PRIMARY_ADDR) == (5), "SCTP_SET_PEER_PRIMARY_ADDR != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_SET_PEER_PRIMARY_ADDR 5
#endif
#if defined(SCTP_SET_PEER_PRIMARY_ADDR) || (defined(HAVE_DECL_SCTP_SET_PEER_PRIMARY_ADDR) && HAVE_DECL_SCTP_SET_PEER_PRIMARY_ADDR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_SET_PEER_PRIMARY_ADDR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_SET_PEER_PRIMARY_ADDR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_SET_PEER_PRIMARY_ADDR)
#endif
#if defined(SCTP_PRIMARY_ADDR) || (defined(HAVE_DECL_SCTP_PRIMARY_ADDR) && HAVE_DECL_SCTP_PRIMARY_ADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PRIMARY_ADDR) == (6), "SCTP_PRIMARY_ADDR != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PRIMARY_ADDR 6
#endif
#if defined(SCTP_PRIMARY_ADDR) || (defined(HAVE_DECL_SCTP_PRIMARY_ADDR) && HAVE_DECL_SCTP_PRIMARY_ADDR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PRIMARY_ADDR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PRIMARY_ADDR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PRIMARY_ADDR)
#endif
#if defined(SCTP_ADAPTATION_LAYER) || (defined(HAVE_DECL_SCTP_ADAPTATION_LAYER) && HAVE_DECL_SCTP_ADAPTATION_LAYER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_ADAPTATION_LAYER) == (7), "SCTP_ADAPTATION_LAYER != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_ADAPTATION_LAYER 7
#endif
#if defined(SCTP_ADAPTATION_LAYER) || (defined(HAVE_DECL_SCTP_ADAPTATION_LAYER) && HAVE_DECL_SCTP_ADAPTATION_LAYER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_ADAPTATION_LAYER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_ADAPTATION_LAYER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_ADAPTATION_LAYER)
#endif
#if defined(SCTP_DISABLE_FRAGMENTS) || (defined(HAVE_DECL_SCTP_DISABLE_FRAGMENTS) && HAVE_DECL_SCTP_DISABLE_FRAGMENTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_DISABLE_FRAGMENTS) == (8), "SCTP_DISABLE_FRAGMENTS != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_DISABLE_FRAGMENTS 8
#endif
#if defined(SCTP_DISABLE_FRAGMENTS) || (defined(HAVE_DECL_SCTP_DISABLE_FRAGMENTS) && HAVE_DECL_SCTP_DISABLE_FRAGMENTS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_DISABLE_FRAGMENTS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_DISABLE_FRAGMENTS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_DISABLE_FRAGMENTS)
#endif
#if defined(SCTP_PEER_ADDR_PARAMS) || (defined(HAVE_DECL_SCTP_PEER_ADDR_PARAMS) && HAVE_DECL_SCTP_PEER_ADDR_PARAMS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PEER_ADDR_PARAMS) == (9), "SCTP_PEER_ADDR_PARAMS != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PEER_ADDR_PARAMS 9
#endif
#if defined(SCTP_PEER_ADDR_PARAMS) || (defined(HAVE_DECL_SCTP_PEER_ADDR_PARAMS) && HAVE_DECL_SCTP_PEER_ADDR_PARAMS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PEER_ADDR_PARAMS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PEER_ADDR_PARAMS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PEER_ADDR_PARAMS)
#endif
#if defined(SCTP_DEFAULT_SEND_PARAM) || (defined(HAVE_DECL_SCTP_DEFAULT_SEND_PARAM) && HAVE_DECL_SCTP_DEFAULT_SEND_PARAM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_DEFAULT_SEND_PARAM) == (10), "SCTP_DEFAULT_SEND_PARAM != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_DEFAULT_SEND_PARAM 10
#endif
#if defined(SCTP_DEFAULT_SEND_PARAM) || (defined(HAVE_DECL_SCTP_DEFAULT_SEND_PARAM) && HAVE_DECL_SCTP_DEFAULT_SEND_PARAM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_DEFAULT_SEND_PARAM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_DEFAULT_SEND_PARAM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_DEFAULT_SEND_PARAM)
#endif
#if defined(SCTP_EVENTS) || (defined(HAVE_DECL_SCTP_EVENTS) && HAVE_DECL_SCTP_EVENTS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_EVENTS) == (11), "SCTP_EVENTS != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_EVENTS 11
#endif
#if defined(SCTP_EVENTS) || (defined(HAVE_DECL_SCTP_EVENTS) && HAVE_DECL_SCTP_EVENTS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_EVENTS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_EVENTS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_EVENTS)
#endif
#if defined(SCTP_I_WANT_MAPPED_V4_ADDR) || (defined(HAVE_DECL_SCTP_I_WANT_MAPPED_V4_ADDR) && HAVE_DECL_SCTP_I_WANT_MAPPED_V4_ADDR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_I_WANT_MAPPED_V4_ADDR) == (12), "SCTP_I_WANT_MAPPED_V4_ADDR != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_I_WANT_MAPPED_V4_ADDR 12
#endif
#if defined(SCTP_I_WANT_MAPPED_V4_ADDR) || (defined(HAVE_DECL_SCTP_I_WANT_MAPPED_V4_ADDR) && HAVE_DECL_SCTP_I_WANT_MAPPED_V4_ADDR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_I_WANT_MAPPED_V4_ADDR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_I_WANT_MAPPED_V4_ADDR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_I_WANT_MAPPED_V4_ADDR)
#endif
#if defined(SCTP_MAXSEG) || (defined(HAVE_DECL_SCTP_MAXSEG) && HAVE_DECL_SCTP_MAXSEG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_MAXSEG) == (13), "SCTP_MAXSEG != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_MAXSEG 13
#endif
#if defined(SCTP_MAXSEG) || (defined(HAVE_DECL_SCTP_MAXSEG) && HAVE_DECL_SCTP_MAXSEG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_MAXSEG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_MAXSEG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_MAXSEG)
#endif
#if defined(SCTP_STATUS) || (defined(HAVE_DECL_SCTP_STATUS) && HAVE_DECL_SCTP_STATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_STATUS) == (14), "SCTP_STATUS != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_STATUS 14
#endif
#if defined(SCTP_STATUS) || (defined(HAVE_DECL_SCTP_STATUS) && HAVE_DECL_SCTP_STATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_STATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_STATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_STATUS)
#endif
#if defined(SCTP_GET_PEER_ADDR_INFO) || (defined(HAVE_DECL_SCTP_GET_PEER_ADDR_INFO) && HAVE_DECL_SCTP_GET_PEER_ADDR_INFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_PEER_ADDR_INFO) == (15), "SCTP_GET_PEER_ADDR_INFO != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_PEER_ADDR_INFO 15
#endif
#if defined(SCTP_GET_PEER_ADDR_INFO) || (defined(HAVE_DECL_SCTP_GET_PEER_ADDR_INFO) && HAVE_DECL_SCTP_GET_PEER_ADDR_INFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_PEER_ADDR_INFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_PEER_ADDR_INFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_PEER_ADDR_INFO)
#endif
#if defined(SCTP_DELAYED_SACK) || (defined(HAVE_DECL_SCTP_DELAYED_SACK) && HAVE_DECL_SCTP_DELAYED_SACK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_DELAYED_SACK) == (16), "SCTP_DELAYED_SACK != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_DELAYED_SACK 16
#endif
#if defined(SCTP_DELAYED_SACK) || (defined(HAVE_DECL_SCTP_DELAYED_SACK) && HAVE_DECL_SCTP_DELAYED_SACK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_DELAYED_SACK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_DELAYED_SACK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_DELAYED_SACK)
#endif
#if defined(SCTP_CONTEXT) || (defined(HAVE_DECL_SCTP_CONTEXT) && HAVE_DECL_SCTP_CONTEXT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_CONTEXT) == (17), "SCTP_CONTEXT != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_CONTEXT 17
#endif
#if defined(SCTP_CONTEXT) || (defined(HAVE_DECL_SCTP_CONTEXT) && HAVE_DECL_SCTP_CONTEXT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_CONTEXT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_CONTEXT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_CONTEXT)
#endif
#if defined(SCTP_FRAGMENT_INTERLEAVE) || (defined(HAVE_DECL_SCTP_FRAGMENT_INTERLEAVE) && HAVE_DECL_SCTP_FRAGMENT_INTERLEAVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_FRAGMENT_INTERLEAVE) == (18), "SCTP_FRAGMENT_INTERLEAVE != 18");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_FRAGMENT_INTERLEAVE 18
#endif
#if defined(SCTP_FRAGMENT_INTERLEAVE) || (defined(HAVE_DECL_SCTP_FRAGMENT_INTERLEAVE) && HAVE_DECL_SCTP_FRAGMENT_INTERLEAVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_FRAGMENT_INTERLEAVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_FRAGMENT_INTERLEAVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_FRAGMENT_INTERLEAVE)
#endif
#if defined(SCTP_PARTIAL_DELIVERY_POINT) || (defined(HAVE_DECL_SCTP_PARTIAL_DELIVERY_POINT) && HAVE_DECL_SCTP_PARTIAL_DELIVERY_POINT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PARTIAL_DELIVERY_POINT) == (19), "SCTP_PARTIAL_DELIVERY_POINT != 19");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PARTIAL_DELIVERY_POINT 19
#endif
#if defined(SCTP_PARTIAL_DELIVERY_POINT) || (defined(HAVE_DECL_SCTP_PARTIAL_DELIVERY_POINT) && HAVE_DECL_SCTP_PARTIAL_DELIVERY_POINT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PARTIAL_DELIVERY_POINT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PARTIAL_DELIVERY_POINT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PARTIAL_DELIVERY_POINT)
#endif
#if defined(SCTP_MAX_BURST) || (defined(HAVE_DECL_SCTP_MAX_BURST) && HAVE_DECL_SCTP_MAX_BURST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_MAX_BURST) == (20), "SCTP_MAX_BURST != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_MAX_BURST 20
#endif
#if defined(SCTP_MAX_BURST) || (defined(HAVE_DECL_SCTP_MAX_BURST) && HAVE_DECL_SCTP_MAX_BURST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_MAX_BURST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_MAX_BURST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_MAX_BURST)
#endif
#if defined(SCTP_AUTH_CHUNK) || (defined(HAVE_DECL_SCTP_AUTH_CHUNK) && HAVE_DECL_SCTP_AUTH_CHUNK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_AUTH_CHUNK) == (21), "SCTP_AUTH_CHUNK != 21");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_AUTH_CHUNK 21
#endif
#if defined(SCTP_AUTH_CHUNK) || (defined(HAVE_DECL_SCTP_AUTH_CHUNK) && HAVE_DECL_SCTP_AUTH_CHUNK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_AUTH_CHUNK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_AUTH_CHUNK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_AUTH_CHUNK)
#endif
#if defined(SCTP_HMAC_IDENT) || (defined(HAVE_DECL_SCTP_HMAC_IDENT) && HAVE_DECL_SCTP_HMAC_IDENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_HMAC_IDENT) == (22), "SCTP_HMAC_IDENT != 22");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_HMAC_IDENT 22
#endif
#if defined(SCTP_HMAC_IDENT) || (defined(HAVE_DECL_SCTP_HMAC_IDENT) && HAVE_DECL_SCTP_HMAC_IDENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_HMAC_IDENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_HMAC_IDENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_HMAC_IDENT)
#endif
#if defined(SCTP_AUTH_KEY) || (defined(HAVE_DECL_SCTP_AUTH_KEY) && HAVE_DECL_SCTP_AUTH_KEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_AUTH_KEY) == (23), "SCTP_AUTH_KEY != 23");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_AUTH_KEY 23
#endif
#if defined(SCTP_AUTH_KEY) || (defined(HAVE_DECL_SCTP_AUTH_KEY) && HAVE_DECL_SCTP_AUTH_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_AUTH_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_AUTH_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_AUTH_KEY)
#endif
#if defined(SCTP_AUTH_ACTIVE_KEY) || (defined(HAVE_DECL_SCTP_AUTH_ACTIVE_KEY) && HAVE_DECL_SCTP_AUTH_ACTIVE_KEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_AUTH_ACTIVE_KEY) == (24), "SCTP_AUTH_ACTIVE_KEY != 24");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_AUTH_ACTIVE_KEY 24
#endif
#if defined(SCTP_AUTH_ACTIVE_KEY) || (defined(HAVE_DECL_SCTP_AUTH_ACTIVE_KEY) && HAVE_DECL_SCTP_AUTH_ACTIVE_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_AUTH_ACTIVE_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_AUTH_ACTIVE_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_AUTH_ACTIVE_KEY)
#endif
#if defined(SCTP_AUTH_DELETE_KEY) || (defined(HAVE_DECL_SCTP_AUTH_DELETE_KEY) && HAVE_DECL_SCTP_AUTH_DELETE_KEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_AUTH_DELETE_KEY) == (25), "SCTP_AUTH_DELETE_KEY != 25");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_AUTH_DELETE_KEY 25
#endif
#if defined(SCTP_AUTH_DELETE_KEY) || (defined(HAVE_DECL_SCTP_AUTH_DELETE_KEY) && HAVE_DECL_SCTP_AUTH_DELETE_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_AUTH_DELETE_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_AUTH_DELETE_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_AUTH_DELETE_KEY)
#endif
#if defined(SCTP_PEER_AUTH_CHUNKS) || (defined(HAVE_DECL_SCTP_PEER_AUTH_CHUNKS) && HAVE_DECL_SCTP_PEER_AUTH_CHUNKS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PEER_AUTH_CHUNKS) == (26), "SCTP_PEER_AUTH_CHUNKS != 26");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PEER_AUTH_CHUNKS 26
#endif
#if defined(SCTP_PEER_AUTH_CHUNKS) || (defined(HAVE_DECL_SCTP_PEER_AUTH_CHUNKS) && HAVE_DECL_SCTP_PEER_AUTH_CHUNKS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PEER_AUTH_CHUNKS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PEER_AUTH_CHUNKS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PEER_AUTH_CHUNKS)
#endif
#if defined(SCTP_LOCAL_AUTH_CHUNKS) || (defined(HAVE_DECL_SCTP_LOCAL_AUTH_CHUNKS) && HAVE_DECL_SCTP_LOCAL_AUTH_CHUNKS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_LOCAL_AUTH_CHUNKS) == (27), "SCTP_LOCAL_AUTH_CHUNKS != 27");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_LOCAL_AUTH_CHUNKS 27
#endif
#if defined(SCTP_LOCAL_AUTH_CHUNKS) || (defined(HAVE_DECL_SCTP_LOCAL_AUTH_CHUNKS) && HAVE_DECL_SCTP_LOCAL_AUTH_CHUNKS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_LOCAL_AUTH_CHUNKS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_LOCAL_AUTH_CHUNKS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_LOCAL_AUTH_CHUNKS)
#endif
#if defined(SCTP_GET_ASSOC_NUMBER) || (defined(HAVE_DECL_SCTP_GET_ASSOC_NUMBER) && HAVE_DECL_SCTP_GET_ASSOC_NUMBER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_ASSOC_NUMBER) == (28), "SCTP_GET_ASSOC_NUMBER != 28");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_ASSOC_NUMBER 28
#endif
#if defined(SCTP_GET_ASSOC_NUMBER) || (defined(HAVE_DECL_SCTP_GET_ASSOC_NUMBER) && HAVE_DECL_SCTP_GET_ASSOC_NUMBER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_ASSOC_NUMBER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_ASSOC_NUMBER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_ASSOC_NUMBER)
#endif
#if defined(SCTP_GET_ASSOC_ID_LIST) || (defined(HAVE_DECL_SCTP_GET_ASSOC_ID_LIST) && HAVE_DECL_SCTP_GET_ASSOC_ID_LIST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_ASSOC_ID_LIST) == (29), "SCTP_GET_ASSOC_ID_LIST != 29");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_ASSOC_ID_LIST 29
#endif
#if defined(SCTP_GET_ASSOC_ID_LIST) || (defined(HAVE_DECL_SCTP_GET_ASSOC_ID_LIST) && HAVE_DECL_SCTP_GET_ASSOC_ID_LIST)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_ASSOC_ID_LIST)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_ASSOC_ID_LIST"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_ASSOC_ID_LIST)
#endif
#if defined(SCTP_AUTO_ASCONF) || (defined(HAVE_DECL_SCTP_AUTO_ASCONF) && HAVE_DECL_SCTP_AUTO_ASCONF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_AUTO_ASCONF) == (30), "SCTP_AUTO_ASCONF != 30");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_AUTO_ASCONF 30
#endif
#if defined(SCTP_AUTO_ASCONF) || (defined(HAVE_DECL_SCTP_AUTO_ASCONF) && HAVE_DECL_SCTP_AUTO_ASCONF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_AUTO_ASCONF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_AUTO_ASCONF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_AUTO_ASCONF)
#endif
#if defined(SCTP_PEER_ADDR_THLDS) || (defined(HAVE_DECL_SCTP_PEER_ADDR_THLDS) && HAVE_DECL_SCTP_PEER_ADDR_THLDS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PEER_ADDR_THLDS) == (31), "SCTP_PEER_ADDR_THLDS != 31");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PEER_ADDR_THLDS 31
#endif
#if defined(SCTP_PEER_ADDR_THLDS) || (defined(HAVE_DECL_SCTP_PEER_ADDR_THLDS) && HAVE_DECL_SCTP_PEER_ADDR_THLDS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PEER_ADDR_THLDS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PEER_ADDR_THLDS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PEER_ADDR_THLDS)
#endif
#if defined(SCTP_RECVRCVINFO) || (defined(HAVE_DECL_SCTP_RECVRCVINFO) && HAVE_DECL_SCTP_RECVRCVINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_RECVRCVINFO) == (32), "SCTP_RECVRCVINFO != 32");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_RECVRCVINFO 32
#endif
#if defined(SCTP_RECVRCVINFO) || (defined(HAVE_DECL_SCTP_RECVRCVINFO) && HAVE_DECL_SCTP_RECVRCVINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_RECVRCVINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_RECVRCVINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_RECVRCVINFO)
#endif
#if defined(SCTP_RECVNXTINFO) || (defined(HAVE_DECL_SCTP_RECVNXTINFO) && HAVE_DECL_SCTP_RECVNXTINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_RECVNXTINFO) == (33), "SCTP_RECVNXTINFO != 33");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_RECVNXTINFO 33
#endif
#if defined(SCTP_RECVNXTINFO) || (defined(HAVE_DECL_SCTP_RECVNXTINFO) && HAVE_DECL_SCTP_RECVNXTINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_RECVNXTINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_RECVNXTINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_RECVNXTINFO)
#endif
#if defined(SCTP_DEFAULT_SNDINFO) || (defined(HAVE_DECL_SCTP_DEFAULT_SNDINFO) && HAVE_DECL_SCTP_DEFAULT_SNDINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_DEFAULT_SNDINFO) == (34), "SCTP_DEFAULT_SNDINFO != 34");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_DEFAULT_SNDINFO 34
#endif
#if defined(SCTP_DEFAULT_SNDINFO) || (defined(HAVE_DECL_SCTP_DEFAULT_SNDINFO) && HAVE_DECL_SCTP_DEFAULT_SNDINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_DEFAULT_SNDINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_DEFAULT_SNDINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_DEFAULT_SNDINFO)
#endif
#if defined(SCTP_AUTH_DEACTIVATE_KEY) || (defined(HAVE_DECL_SCTP_AUTH_DEACTIVATE_KEY) && HAVE_DECL_SCTP_AUTH_DEACTIVATE_KEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_AUTH_DEACTIVATE_KEY) == (35), "SCTP_AUTH_DEACTIVATE_KEY != 35");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_AUTH_DEACTIVATE_KEY 35
#endif
#if defined(SCTP_AUTH_DEACTIVATE_KEY) || (defined(HAVE_DECL_SCTP_AUTH_DEACTIVATE_KEY) && HAVE_DECL_SCTP_AUTH_DEACTIVATE_KEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_AUTH_DEACTIVATE_KEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_AUTH_DEACTIVATE_KEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_AUTH_DEACTIVATE_KEY)
#endif
#if defined(SCTP_REUSE_PORT) || (defined(HAVE_DECL_SCTP_REUSE_PORT) && HAVE_DECL_SCTP_REUSE_PORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_REUSE_PORT) == (36), "SCTP_REUSE_PORT != 36");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_REUSE_PORT 36
#endif
#if defined(SCTP_REUSE_PORT) || (defined(HAVE_DECL_SCTP_REUSE_PORT) && HAVE_DECL_SCTP_REUSE_PORT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_REUSE_PORT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_REUSE_PORT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_REUSE_PORT)
#endif
#if defined(SCTP_PEER_ADDR_THLDS_V2) || (defined(HAVE_DECL_SCTP_PEER_ADDR_THLDS_V2) && HAVE_DECL_SCTP_PEER_ADDR_THLDS_V2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PEER_ADDR_THLDS_V2) == (37), "SCTP_PEER_ADDR_THLDS_V2 != 37");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PEER_ADDR_THLDS_V2 37
#endif
#if defined(SCTP_PEER_ADDR_THLDS_V2) || (defined(HAVE_DECL_SCTP_PEER_ADDR_THLDS_V2) && HAVE_DECL_SCTP_PEER_ADDR_THLDS_V2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PEER_ADDR_THLDS_V2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PEER_ADDR_THLDS_V2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PEER_ADDR_THLDS_V2)
#endif
#if defined(SCTP_SOCKOPT_BINDX_ADD) || (defined(HAVE_DECL_SCTP_SOCKOPT_BINDX_ADD) && HAVE_DECL_SCTP_SOCKOPT_BINDX_ADD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_SOCKOPT_BINDX_ADD) == (100), "SCTP_SOCKOPT_BINDX_ADD != 100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_SOCKOPT_BINDX_ADD 100
#endif
#if defined(SCTP_SOCKOPT_BINDX_ADD) || (defined(HAVE_DECL_SCTP_SOCKOPT_BINDX_ADD) && HAVE_DECL_SCTP_SOCKOPT_BINDX_ADD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_SOCKOPT_BINDX_ADD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_SOCKOPT_BINDX_ADD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_SOCKOPT_BINDX_ADD)
#endif
#if defined(SCTP_SOCKOPT_BINDX_REM) || (defined(HAVE_DECL_SCTP_SOCKOPT_BINDX_REM) && HAVE_DECL_SCTP_SOCKOPT_BINDX_REM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_SOCKOPT_BINDX_REM) == (101), "SCTP_SOCKOPT_BINDX_REM != 101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_SOCKOPT_BINDX_REM 101
#endif
#if defined(SCTP_SOCKOPT_BINDX_REM) || (defined(HAVE_DECL_SCTP_SOCKOPT_BINDX_REM) && HAVE_DECL_SCTP_SOCKOPT_BINDX_REM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_SOCKOPT_BINDX_REM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_SOCKOPT_BINDX_REM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_SOCKOPT_BINDX_REM)
#endif
#if defined(SCTP_SOCKOPT_PEELOFF) || (defined(HAVE_DECL_SCTP_SOCKOPT_PEELOFF) && HAVE_DECL_SCTP_SOCKOPT_PEELOFF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_SOCKOPT_PEELOFF) == (102), "SCTP_SOCKOPT_PEELOFF != 102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_SOCKOPT_PEELOFF 102
#endif
#if defined(SCTP_SOCKOPT_PEELOFF) || (defined(HAVE_DECL_SCTP_SOCKOPT_PEELOFF) && HAVE_DECL_SCTP_SOCKOPT_PEELOFF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_SOCKOPT_PEELOFF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_SOCKOPT_PEELOFF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_SOCKOPT_PEELOFF)
#endif
#if defined(SCTP_GET_PEER_ADDRS_NUM_OLD) || (defined(HAVE_DECL_SCTP_GET_PEER_ADDRS_NUM_OLD) && HAVE_DECL_SCTP_GET_PEER_ADDRS_NUM_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_PEER_ADDRS_NUM_OLD) == (103), "SCTP_GET_PEER_ADDRS_NUM_OLD != 103");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_PEER_ADDRS_NUM_OLD 103
#endif
#if defined(SCTP_GET_PEER_ADDRS_NUM_OLD) || (defined(HAVE_DECL_SCTP_GET_PEER_ADDRS_NUM_OLD) && HAVE_DECL_SCTP_GET_PEER_ADDRS_NUM_OLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_PEER_ADDRS_NUM_OLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_PEER_ADDRS_NUM_OLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_PEER_ADDRS_NUM_OLD)
#endif
#if defined(SCTP_GET_PEER_ADDRS_OLD) || (defined(HAVE_DECL_SCTP_GET_PEER_ADDRS_OLD) && HAVE_DECL_SCTP_GET_PEER_ADDRS_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_PEER_ADDRS_OLD) == (104), "SCTP_GET_PEER_ADDRS_OLD != 104");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_PEER_ADDRS_OLD 104
#endif
#if defined(SCTP_GET_PEER_ADDRS_OLD) || (defined(HAVE_DECL_SCTP_GET_PEER_ADDRS_OLD) && HAVE_DECL_SCTP_GET_PEER_ADDRS_OLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_PEER_ADDRS_OLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_PEER_ADDRS_OLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_PEER_ADDRS_OLD)
#endif
#if defined(SCTP_GET_LOCAL_ADDRS_NUM_OLD) || (defined(HAVE_DECL_SCTP_GET_LOCAL_ADDRS_NUM_OLD) && HAVE_DECL_SCTP_GET_LOCAL_ADDRS_NUM_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_LOCAL_ADDRS_NUM_OLD) == (105), "SCTP_GET_LOCAL_ADDRS_NUM_OLD != 105");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_LOCAL_ADDRS_NUM_OLD 105
#endif
#if defined(SCTP_GET_LOCAL_ADDRS_NUM_OLD) || (defined(HAVE_DECL_SCTP_GET_LOCAL_ADDRS_NUM_OLD) && HAVE_DECL_SCTP_GET_LOCAL_ADDRS_NUM_OLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_LOCAL_ADDRS_NUM_OLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_LOCAL_ADDRS_NUM_OLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_LOCAL_ADDRS_NUM_OLD)
#endif
#if defined(SCTP_GET_LOCAL_ADDRS_OLD) || (defined(HAVE_DECL_SCTP_GET_LOCAL_ADDRS_OLD) && HAVE_DECL_SCTP_GET_LOCAL_ADDRS_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_LOCAL_ADDRS_OLD) == (106), "SCTP_GET_LOCAL_ADDRS_OLD != 106");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_LOCAL_ADDRS_OLD 106
#endif
#if defined(SCTP_GET_LOCAL_ADDRS_OLD) || (defined(HAVE_DECL_SCTP_GET_LOCAL_ADDRS_OLD) && HAVE_DECL_SCTP_GET_LOCAL_ADDRS_OLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_LOCAL_ADDRS_OLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_LOCAL_ADDRS_OLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_LOCAL_ADDRS_OLD)
#endif
#if defined(SCTP_SOCKOPT_CONNECTX_OLD) || (defined(HAVE_DECL_SCTP_SOCKOPT_CONNECTX_OLD) && HAVE_DECL_SCTP_SOCKOPT_CONNECTX_OLD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_SOCKOPT_CONNECTX_OLD) == (107), "SCTP_SOCKOPT_CONNECTX_OLD != 107");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_SOCKOPT_CONNECTX_OLD 107
#endif
#if defined(SCTP_SOCKOPT_CONNECTX_OLD) || (defined(HAVE_DECL_SCTP_SOCKOPT_CONNECTX_OLD) && HAVE_DECL_SCTP_SOCKOPT_CONNECTX_OLD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_SOCKOPT_CONNECTX_OLD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_SOCKOPT_CONNECTX_OLD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_SOCKOPT_CONNECTX_OLD)
#endif
#if defined(SCTP_GET_PEER_ADDRS) || (defined(HAVE_DECL_SCTP_GET_PEER_ADDRS) && HAVE_DECL_SCTP_GET_PEER_ADDRS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_PEER_ADDRS) == (108), "SCTP_GET_PEER_ADDRS != 108");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_PEER_ADDRS 108
#endif
#if defined(SCTP_GET_PEER_ADDRS) || (defined(HAVE_DECL_SCTP_GET_PEER_ADDRS) && HAVE_DECL_SCTP_GET_PEER_ADDRS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_PEER_ADDRS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_PEER_ADDRS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_PEER_ADDRS)
#endif
#if defined(SCTP_GET_LOCAL_ADDRS) || (defined(HAVE_DECL_SCTP_GET_LOCAL_ADDRS) && HAVE_DECL_SCTP_GET_LOCAL_ADDRS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_LOCAL_ADDRS) == (109), "SCTP_GET_LOCAL_ADDRS != 109");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_LOCAL_ADDRS 109
#endif
#if defined(SCTP_GET_LOCAL_ADDRS) || (defined(HAVE_DECL_SCTP_GET_LOCAL_ADDRS) && HAVE_DECL_SCTP_GET_LOCAL_ADDRS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_LOCAL_ADDRS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_LOCAL_ADDRS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_LOCAL_ADDRS)
#endif
#if defined(SCTP_SOCKOPT_CONNECTX) || (defined(HAVE_DECL_SCTP_SOCKOPT_CONNECTX) && HAVE_DECL_SCTP_SOCKOPT_CONNECTX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_SOCKOPT_CONNECTX) == (110), "SCTP_SOCKOPT_CONNECTX != 110");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_SOCKOPT_CONNECTX 110
#endif
#if defined(SCTP_SOCKOPT_CONNECTX) || (defined(HAVE_DECL_SCTP_SOCKOPT_CONNECTX) && HAVE_DECL_SCTP_SOCKOPT_CONNECTX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_SOCKOPT_CONNECTX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_SOCKOPT_CONNECTX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_SOCKOPT_CONNECTX)
#endif
#if defined(SCTP_SOCKOPT_CONNECTX3) || (defined(HAVE_DECL_SCTP_SOCKOPT_CONNECTX3) && HAVE_DECL_SCTP_SOCKOPT_CONNECTX3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_SOCKOPT_CONNECTX3) == (111), "SCTP_SOCKOPT_CONNECTX3 != 111");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_SOCKOPT_CONNECTX3 111
#endif
#if defined(SCTP_SOCKOPT_CONNECTX3) || (defined(HAVE_DECL_SCTP_SOCKOPT_CONNECTX3) && HAVE_DECL_SCTP_SOCKOPT_CONNECTX3)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_SOCKOPT_CONNECTX3)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_SOCKOPT_CONNECTX3"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_SOCKOPT_CONNECTX3)
#endif
#if defined(SCTP_GET_ASSOC_STATS) || (defined(HAVE_DECL_SCTP_GET_ASSOC_STATS) && HAVE_DECL_SCTP_GET_ASSOC_STATS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_GET_ASSOC_STATS) == (112), "SCTP_GET_ASSOC_STATS != 112");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_GET_ASSOC_STATS 112
#endif
#if defined(SCTP_GET_ASSOC_STATS) || (defined(HAVE_DECL_SCTP_GET_ASSOC_STATS) && HAVE_DECL_SCTP_GET_ASSOC_STATS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_GET_ASSOC_STATS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_GET_ASSOC_STATS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_GET_ASSOC_STATS)
#endif
#if defined(SCTP_PR_SUPPORTED) || (defined(HAVE_DECL_SCTP_PR_SUPPORTED) && HAVE_DECL_SCTP_PR_SUPPORTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PR_SUPPORTED) == (113), "SCTP_PR_SUPPORTED != 113");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PR_SUPPORTED 113
#endif
#if defined(SCTP_PR_SUPPORTED) || (defined(HAVE_DECL_SCTP_PR_SUPPORTED) && HAVE_DECL_SCTP_PR_SUPPORTED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PR_SUPPORTED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PR_SUPPORTED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PR_SUPPORTED)
#endif
#if defined(SCTP_DEFAULT_PRINFO) || (defined(HAVE_DECL_SCTP_DEFAULT_PRINFO) && HAVE_DECL_SCTP_DEFAULT_PRINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_DEFAULT_PRINFO) == (114), "SCTP_DEFAULT_PRINFO != 114");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_DEFAULT_PRINFO 114
#endif
#if defined(SCTP_DEFAULT_PRINFO) || (defined(HAVE_DECL_SCTP_DEFAULT_PRINFO) && HAVE_DECL_SCTP_DEFAULT_PRINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_DEFAULT_PRINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_DEFAULT_PRINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_DEFAULT_PRINFO)
#endif
#if defined(SCTP_PR_ASSOC_STATUS) || (defined(HAVE_DECL_SCTP_PR_ASSOC_STATUS) && HAVE_DECL_SCTP_PR_ASSOC_STATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PR_ASSOC_STATUS) == (115), "SCTP_PR_ASSOC_STATUS != 115");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PR_ASSOC_STATUS 115
#endif
#if defined(SCTP_PR_ASSOC_STATUS) || (defined(HAVE_DECL_SCTP_PR_ASSOC_STATUS) && HAVE_DECL_SCTP_PR_ASSOC_STATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PR_ASSOC_STATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PR_ASSOC_STATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PR_ASSOC_STATUS)
#endif
#if defined(SCTP_PR_STREAM_STATUS) || (defined(HAVE_DECL_SCTP_PR_STREAM_STATUS) && HAVE_DECL_SCTP_PR_STREAM_STATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PR_STREAM_STATUS) == (116), "SCTP_PR_STREAM_STATUS != 116");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PR_STREAM_STATUS 116
#endif
#if defined(SCTP_PR_STREAM_STATUS) || (defined(HAVE_DECL_SCTP_PR_STREAM_STATUS) && HAVE_DECL_SCTP_PR_STREAM_STATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PR_STREAM_STATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PR_STREAM_STATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PR_STREAM_STATUS)
#endif
#if defined(SCTP_RECONFIG_SUPPORTED) || (defined(HAVE_DECL_SCTP_RECONFIG_SUPPORTED) && HAVE_DECL_SCTP_RECONFIG_SUPPORTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_RECONFIG_SUPPORTED) == (117), "SCTP_RECONFIG_SUPPORTED != 117");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_RECONFIG_SUPPORTED 117
#endif
#if defined(SCTP_RECONFIG_SUPPORTED) || (defined(HAVE_DECL_SCTP_RECONFIG_SUPPORTED) && HAVE_DECL_SCTP_RECONFIG_SUPPORTED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_RECONFIG_SUPPORTED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_RECONFIG_SUPPORTED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_RECONFIG_SUPPORTED)
#endif
#if defined(SCTP_ENABLE_STREAM_RESET) || (defined(HAVE_DECL_SCTP_ENABLE_STREAM_RESET) && HAVE_DECL_SCTP_ENABLE_STREAM_RESET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_ENABLE_STREAM_RESET) == (118), "SCTP_ENABLE_STREAM_RESET != 118");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_ENABLE_STREAM_RESET 118
#endif
#if defined(SCTP_ENABLE_STREAM_RESET) || (defined(HAVE_DECL_SCTP_ENABLE_STREAM_RESET) && HAVE_DECL_SCTP_ENABLE_STREAM_RESET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_ENABLE_STREAM_RESET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_ENABLE_STREAM_RESET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_ENABLE_STREAM_RESET)
#endif
#if defined(SCTP_RESET_STREAMS) || (defined(HAVE_DECL_SCTP_RESET_STREAMS) && HAVE_DECL_SCTP_RESET_STREAMS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_RESET_STREAMS) == (119), "SCTP_RESET_STREAMS != 119");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_RESET_STREAMS 119
#endif
#if defined(SCTP_RESET_STREAMS) || (defined(HAVE_DECL_SCTP_RESET_STREAMS) && HAVE_DECL_SCTP_RESET_STREAMS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_RESET_STREAMS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_RESET_STREAMS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_RESET_STREAMS)
#endif
#if defined(SCTP_RESET_ASSOC) || (defined(HAVE_DECL_SCTP_RESET_ASSOC) && HAVE_DECL_SCTP_RESET_ASSOC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_RESET_ASSOC) == (120), "SCTP_RESET_ASSOC != 120");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_RESET_ASSOC 120
#endif
#if defined(SCTP_RESET_ASSOC) || (defined(HAVE_DECL_SCTP_RESET_ASSOC) && HAVE_DECL_SCTP_RESET_ASSOC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_RESET_ASSOC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_RESET_ASSOC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_RESET_ASSOC)
#endif
#if defined(SCTP_ADD_STREAMS) || (defined(HAVE_DECL_SCTP_ADD_STREAMS) && HAVE_DECL_SCTP_ADD_STREAMS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_ADD_STREAMS) == (121), "SCTP_ADD_STREAMS != 121");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_ADD_STREAMS 121
#endif
#if defined(SCTP_ADD_STREAMS) || (defined(HAVE_DECL_SCTP_ADD_STREAMS) && HAVE_DECL_SCTP_ADD_STREAMS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_ADD_STREAMS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_ADD_STREAMS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_ADD_STREAMS)
#endif
#if defined(SCTP_SOCKOPT_PEELOFF_FLAGS) || (defined(HAVE_DECL_SCTP_SOCKOPT_PEELOFF_FLAGS) && HAVE_DECL_SCTP_SOCKOPT_PEELOFF_FLAGS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_SOCKOPT_PEELOFF_FLAGS) == (122), "SCTP_SOCKOPT_PEELOFF_FLAGS != 122");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_SOCKOPT_PEELOFF_FLAGS 122
#endif
#if defined(SCTP_SOCKOPT_PEELOFF_FLAGS) || (defined(HAVE_DECL_SCTP_SOCKOPT_PEELOFF_FLAGS) && HAVE_DECL_SCTP_SOCKOPT_PEELOFF_FLAGS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_SOCKOPT_PEELOFF_FLAGS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_SOCKOPT_PEELOFF_FLAGS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_SOCKOPT_PEELOFF_FLAGS)
#endif
#if defined(SCTP_STREAM_SCHEDULER) || (defined(HAVE_DECL_SCTP_STREAM_SCHEDULER) && HAVE_DECL_SCTP_STREAM_SCHEDULER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_STREAM_SCHEDULER) == (123), "SCTP_STREAM_SCHEDULER != 123");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_STREAM_SCHEDULER 123
#endif
#if defined(SCTP_STREAM_SCHEDULER) || (defined(HAVE_DECL_SCTP_STREAM_SCHEDULER) && HAVE_DECL_SCTP_STREAM_SCHEDULER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_STREAM_SCHEDULER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_STREAM_SCHEDULER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_STREAM_SCHEDULER)
#endif
#if defined(SCTP_STREAM_SCHEDULER_VALUE) || (defined(HAVE_DECL_SCTP_STREAM_SCHEDULER_VALUE) && HAVE_DECL_SCTP_STREAM_SCHEDULER_VALUE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_STREAM_SCHEDULER_VALUE) == (124), "SCTP_STREAM_SCHEDULER_VALUE != 124");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_STREAM_SCHEDULER_VALUE 124
#endif
#if defined(SCTP_STREAM_SCHEDULER_VALUE) || (defined(HAVE_DECL_SCTP_STREAM_SCHEDULER_VALUE) && HAVE_DECL_SCTP_STREAM_SCHEDULER_VALUE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_STREAM_SCHEDULER_VALUE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_STREAM_SCHEDULER_VALUE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_STREAM_SCHEDULER_VALUE)
#endif
#if defined(SCTP_INTERLEAVING_SUPPORTED) || (defined(HAVE_DECL_SCTP_INTERLEAVING_SUPPORTED) && HAVE_DECL_SCTP_INTERLEAVING_SUPPORTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_INTERLEAVING_SUPPORTED) == (125), "SCTP_INTERLEAVING_SUPPORTED != 125");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_INTERLEAVING_SUPPORTED 125
#endif
#if defined(SCTP_INTERLEAVING_SUPPORTED) || (defined(HAVE_DECL_SCTP_INTERLEAVING_SUPPORTED) && HAVE_DECL_SCTP_INTERLEAVING_SUPPORTED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_INTERLEAVING_SUPPORTED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_INTERLEAVING_SUPPORTED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_INTERLEAVING_SUPPORTED)
#endif
#if defined(SCTP_SENDMSG_CONNECT) || (defined(HAVE_DECL_SCTP_SENDMSG_CONNECT) && HAVE_DECL_SCTP_SENDMSG_CONNECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_SENDMSG_CONNECT) == (126), "SCTP_SENDMSG_CONNECT != 126");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_SENDMSG_CONNECT 126
#endif
#if defined(SCTP_SENDMSG_CONNECT) || (defined(HAVE_DECL_SCTP_SENDMSG_CONNECT) && HAVE_DECL_SCTP_SENDMSG_CONNECT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_SENDMSG_CONNECT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_SENDMSG_CONNECT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_SENDMSG_CONNECT)
#endif
#if defined(SCTP_EVENT) || (defined(HAVE_DECL_SCTP_EVENT) && HAVE_DECL_SCTP_EVENT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_EVENT) == (127), "SCTP_EVENT != 127");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_EVENT 127
#endif
#if defined(SCTP_EVENT) || (defined(HAVE_DECL_SCTP_EVENT) && HAVE_DECL_SCTP_EVENT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_EVENT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_EVENT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_EVENT)
#endif
#if defined(SCTP_ASCONF_SUPPORTED) || (defined(HAVE_DECL_SCTP_ASCONF_SUPPORTED) && HAVE_DECL_SCTP_ASCONF_SUPPORTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_ASCONF_SUPPORTED) == (128), "SCTP_ASCONF_SUPPORTED != 128");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_ASCONF_SUPPORTED 128
#endif
#if defined(SCTP_ASCONF_SUPPORTED) || (defined(HAVE_DECL_SCTP_ASCONF_SUPPORTED) && HAVE_DECL_SCTP_ASCONF_SUPPORTED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_ASCONF_SUPPORTED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_ASCONF_SUPPORTED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_ASCONF_SUPPORTED)
#endif
#if defined(SCTP_AUTH_SUPPORTED) || (defined(HAVE_DECL_SCTP_AUTH_SUPPORTED) && HAVE_DECL_SCTP_AUTH_SUPPORTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_AUTH_SUPPORTED) == (129), "SCTP_AUTH_SUPPORTED != 129");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_AUTH_SUPPORTED 129
#endif
#if defined(SCTP_AUTH_SUPPORTED) || (defined(HAVE_DECL_SCTP_AUTH_SUPPORTED) && HAVE_DECL_SCTP_AUTH_SUPPORTED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_AUTH_SUPPORTED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_AUTH_SUPPORTED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_AUTH_SUPPORTED)
#endif
#if defined(SCTP_ECN_SUPPORTED) || (defined(HAVE_DECL_SCTP_ECN_SUPPORTED) && HAVE_DECL_SCTP_ECN_SUPPORTED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_ECN_SUPPORTED) == (130), "SCTP_ECN_SUPPORTED != 130");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_ECN_SUPPORTED 130
#endif
#if defined(SCTP_ECN_SUPPORTED) || (defined(HAVE_DECL_SCTP_ECN_SUPPORTED) && HAVE_DECL_SCTP_ECN_SUPPORTED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_ECN_SUPPORTED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_ECN_SUPPORTED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_ECN_SUPPORTED)
#endif
#if defined(SCTP_EXPOSE_POTENTIALLY_FAILED_STATE) || (defined(HAVE_DECL_SCTP_EXPOSE_POTENTIALLY_FAILED_STATE) && HAVE_DECL_SCTP_EXPOSE_POTENTIALLY_FAILED_STATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_EXPOSE_POTENTIALLY_FAILED_STATE) == (131), "SCTP_EXPOSE_POTENTIALLY_FAILED_STATE != 131");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_EXPOSE_POTENTIALLY_FAILED_STATE 131
#endif
#if defined(SCTP_EXPOSE_POTENTIALLY_FAILED_STATE) || (defined(HAVE_DECL_SCTP_EXPOSE_POTENTIALLY_FAILED_STATE) && HAVE_DECL_SCTP_EXPOSE_POTENTIALLY_FAILED_STATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_EXPOSE_POTENTIALLY_FAILED_STATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_EXPOSE_POTENTIALLY_FAILED_STATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_EXPOSE_POTENTIALLY_FAILED_STATE)
#endif
#if defined(SCTP_REMOTE_UDP_ENCAPS_PORT) || (defined(HAVE_DECL_SCTP_REMOTE_UDP_ENCAPS_PORT) && HAVE_DECL_SCTP_REMOTE_UDP_ENCAPS_PORT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_REMOTE_UDP_ENCAPS_PORT) == (132), "SCTP_REMOTE_UDP_ENCAPS_PORT != 132");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_REMOTE_UDP_ENCAPS_PORT 132
#endif
#if defined(SCTP_REMOTE_UDP_ENCAPS_PORT) || (defined(HAVE_DECL_SCTP_REMOTE_UDP_ENCAPS_PORT) && HAVE_DECL_SCTP_REMOTE_UDP_ENCAPS_PORT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_REMOTE_UDP_ENCAPS_PORT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_REMOTE_UDP_ENCAPS_PORT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_REMOTE_UDP_ENCAPS_PORT)
#endif
#if defined(SCTP_PLPMTUD_PROBE_INTERVAL) || (defined(HAVE_DECL_SCTP_PLPMTUD_PROBE_INTERVAL) && HAVE_DECL_SCTP_PLPMTUD_PROBE_INTERVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCTP_PLPMTUD_PROBE_INTERVAL) == (133), "SCTP_PLPMTUD_PROBE_INTERVAL != 133");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCTP_PLPMTUD_PROBE_INTERVAL 133
#endif
#if defined(SCTP_PLPMTUD_PROBE_INTERVAL) || (defined(HAVE_DECL_SCTP_PLPMTUD_PROBE_INTERVAL) && HAVE_DECL_SCTP_PLPMTUD_PROBE_INTERVAL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (SCTP_PLPMTUD_PROBE_INTERVAL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: SCTP_PLPMTUD_PROBE_INTERVAL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (SCTP_PLPMTUD_PROBE_INTERVAL)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_sctp_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_sctp_options_xdata[] = {
 XLAT(SCTP_RTOINFO),
 #define XLAT_VAL_0 ((unsigned) (SCTP_RTOINFO))
 #define XLAT_STR_0 STRINGIFY(SCTP_RTOINFO)
 XLAT(SCTP_ASSOCINFO),
 #define XLAT_VAL_1 ((unsigned) (SCTP_ASSOCINFO))
 #define XLAT_STR_1 STRINGIFY(SCTP_ASSOCINFO)
 XLAT(SCTP_INITMSG),
 #define XLAT_VAL_2 ((unsigned) (SCTP_INITMSG))
 #define XLAT_STR_2 STRINGIFY(SCTP_INITMSG)
 XLAT(SCTP_NODELAY),
 #define XLAT_VAL_3 ((unsigned) (SCTP_NODELAY))
 #define XLAT_STR_3 STRINGIFY(SCTP_NODELAY)
 XLAT(SCTP_AUTOCLOSE),
 #define XLAT_VAL_4 ((unsigned) (SCTP_AUTOCLOSE))
 #define XLAT_STR_4 STRINGIFY(SCTP_AUTOCLOSE)
 XLAT(SCTP_SET_PEER_PRIMARY_ADDR),
 #define XLAT_VAL_5 ((unsigned) (SCTP_SET_PEER_PRIMARY_ADDR))
 #define XLAT_STR_5 STRINGIFY(SCTP_SET_PEER_PRIMARY_ADDR)
 XLAT(SCTP_PRIMARY_ADDR),
 #define XLAT_VAL_6 ((unsigned) (SCTP_PRIMARY_ADDR))
 #define XLAT_STR_6 STRINGIFY(SCTP_PRIMARY_ADDR)
 XLAT(SCTP_ADAPTATION_LAYER),
 #define XLAT_VAL_7 ((unsigned) (SCTP_ADAPTATION_LAYER))
 #define XLAT_STR_7 STRINGIFY(SCTP_ADAPTATION_LAYER)
 XLAT(SCTP_DISABLE_FRAGMENTS),
 #define XLAT_VAL_8 ((unsigned) (SCTP_DISABLE_FRAGMENTS))
 #define XLAT_STR_8 STRINGIFY(SCTP_DISABLE_FRAGMENTS)
 XLAT(SCTP_PEER_ADDR_PARAMS),
 #define XLAT_VAL_9 ((unsigned) (SCTP_PEER_ADDR_PARAMS))
 #define XLAT_STR_9 STRINGIFY(SCTP_PEER_ADDR_PARAMS)
 XLAT(SCTP_DEFAULT_SEND_PARAM),
 #define XLAT_VAL_10 ((unsigned) (SCTP_DEFAULT_SEND_PARAM))
 #define XLAT_STR_10 STRINGIFY(SCTP_DEFAULT_SEND_PARAM)
 XLAT(SCTP_EVENTS),
 #define XLAT_VAL_11 ((unsigned) (SCTP_EVENTS))
 #define XLAT_STR_11 STRINGIFY(SCTP_EVENTS)
 XLAT(SCTP_I_WANT_MAPPED_V4_ADDR),
 #define XLAT_VAL_12 ((unsigned) (SCTP_I_WANT_MAPPED_V4_ADDR))
 #define XLAT_STR_12 STRINGIFY(SCTP_I_WANT_MAPPED_V4_ADDR)
 XLAT(SCTP_MAXSEG),
 #define XLAT_VAL_13 ((unsigned) (SCTP_MAXSEG))
 #define XLAT_STR_13 STRINGIFY(SCTP_MAXSEG)
 XLAT(SCTP_STATUS),
 #define XLAT_VAL_14 ((unsigned) (SCTP_STATUS))
 #define XLAT_STR_14 STRINGIFY(SCTP_STATUS)
 XLAT(SCTP_GET_PEER_ADDR_INFO),
 #define XLAT_VAL_15 ((unsigned) (SCTP_GET_PEER_ADDR_INFO))
 #define XLAT_STR_15 STRINGIFY(SCTP_GET_PEER_ADDR_INFO)
 XLAT(SCTP_DELAYED_SACK),
 #define XLAT_VAL_16 ((unsigned) (SCTP_DELAYED_SACK))
 #define XLAT_STR_16 STRINGIFY(SCTP_DELAYED_SACK)
 XLAT(SCTP_CONTEXT),
 #define XLAT_VAL_17 ((unsigned) (SCTP_CONTEXT))
 #define XLAT_STR_17 STRINGIFY(SCTP_CONTEXT)
 XLAT(SCTP_FRAGMENT_INTERLEAVE),
 #define XLAT_VAL_18 ((unsigned) (SCTP_FRAGMENT_INTERLEAVE))
 #define XLAT_STR_18 STRINGIFY(SCTP_FRAGMENT_INTERLEAVE)
 XLAT(SCTP_PARTIAL_DELIVERY_POINT),
 #define XLAT_VAL_19 ((unsigned) (SCTP_PARTIAL_DELIVERY_POINT))
 #define XLAT_STR_19 STRINGIFY(SCTP_PARTIAL_DELIVERY_POINT)
 XLAT(SCTP_MAX_BURST),
 #define XLAT_VAL_20 ((unsigned) (SCTP_MAX_BURST))
 #define XLAT_STR_20 STRINGIFY(SCTP_MAX_BURST)
 XLAT(SCTP_AUTH_CHUNK),
 #define XLAT_VAL_21 ((unsigned) (SCTP_AUTH_CHUNK))
 #define XLAT_STR_21 STRINGIFY(SCTP_AUTH_CHUNK)
 XLAT(SCTP_HMAC_IDENT),
 #define XLAT_VAL_22 ((unsigned) (SCTP_HMAC_IDENT))
 #define XLAT_STR_22 STRINGIFY(SCTP_HMAC_IDENT)
 XLAT(SCTP_AUTH_KEY),
 #define XLAT_VAL_23 ((unsigned) (SCTP_AUTH_KEY))
 #define XLAT_STR_23 STRINGIFY(SCTP_AUTH_KEY)
 XLAT(SCTP_AUTH_ACTIVE_KEY),
 #define XLAT_VAL_24 ((unsigned) (SCTP_AUTH_ACTIVE_KEY))
 #define XLAT_STR_24 STRINGIFY(SCTP_AUTH_ACTIVE_KEY)
 XLAT(SCTP_AUTH_DELETE_KEY),
 #define XLAT_VAL_25 ((unsigned) (SCTP_AUTH_DELETE_KEY))
 #define XLAT_STR_25 STRINGIFY(SCTP_AUTH_DELETE_KEY)
 XLAT(SCTP_PEER_AUTH_CHUNKS),
 #define XLAT_VAL_26 ((unsigned) (SCTP_PEER_AUTH_CHUNKS))
 #define XLAT_STR_26 STRINGIFY(SCTP_PEER_AUTH_CHUNKS)
 XLAT(SCTP_LOCAL_AUTH_CHUNKS),
 #define XLAT_VAL_27 ((unsigned) (SCTP_LOCAL_AUTH_CHUNKS))
 #define XLAT_STR_27 STRINGIFY(SCTP_LOCAL_AUTH_CHUNKS)
 XLAT(SCTP_GET_ASSOC_NUMBER),
 #define XLAT_VAL_28 ((unsigned) (SCTP_GET_ASSOC_NUMBER))
 #define XLAT_STR_28 STRINGIFY(SCTP_GET_ASSOC_NUMBER)
 XLAT(SCTP_GET_ASSOC_ID_LIST),
 #define XLAT_VAL_29 ((unsigned) (SCTP_GET_ASSOC_ID_LIST))
 #define XLAT_STR_29 STRINGIFY(SCTP_GET_ASSOC_ID_LIST)
 XLAT(SCTP_AUTO_ASCONF),
 #define XLAT_VAL_30 ((unsigned) (SCTP_AUTO_ASCONF))
 #define XLAT_STR_30 STRINGIFY(SCTP_AUTO_ASCONF)
 XLAT(SCTP_PEER_ADDR_THLDS),
 #define XLAT_VAL_31 ((unsigned) (SCTP_PEER_ADDR_THLDS))
 #define XLAT_STR_31 STRINGIFY(SCTP_PEER_ADDR_THLDS)
 XLAT(SCTP_RECVRCVINFO),
 #define XLAT_VAL_32 ((unsigned) (SCTP_RECVRCVINFO))
 #define XLAT_STR_32 STRINGIFY(SCTP_RECVRCVINFO)
 XLAT(SCTP_RECVNXTINFO),
 #define XLAT_VAL_33 ((unsigned) (SCTP_RECVNXTINFO))
 #define XLAT_STR_33 STRINGIFY(SCTP_RECVNXTINFO)
 XLAT(SCTP_DEFAULT_SNDINFO),
 #define XLAT_VAL_34 ((unsigned) (SCTP_DEFAULT_SNDINFO))
 #define XLAT_STR_34 STRINGIFY(SCTP_DEFAULT_SNDINFO)
 XLAT(SCTP_AUTH_DEACTIVATE_KEY),
 #define XLAT_VAL_35 ((unsigned) (SCTP_AUTH_DEACTIVATE_KEY))
 #define XLAT_STR_35 STRINGIFY(SCTP_AUTH_DEACTIVATE_KEY)
 XLAT(SCTP_REUSE_PORT),
 #define XLAT_VAL_36 ((unsigned) (SCTP_REUSE_PORT))
 #define XLAT_STR_36 STRINGIFY(SCTP_REUSE_PORT)
 XLAT(SCTP_PEER_ADDR_THLDS_V2),
 #define XLAT_VAL_37 ((unsigned) (SCTP_PEER_ADDR_THLDS_V2))
 #define XLAT_STR_37 STRINGIFY(SCTP_PEER_ADDR_THLDS_V2)

 XLAT(SCTP_SOCKOPT_BINDX_ADD),
 #define XLAT_VAL_38 ((unsigned) (SCTP_SOCKOPT_BINDX_ADD))
 #define XLAT_STR_38 STRINGIFY(SCTP_SOCKOPT_BINDX_ADD)
 XLAT(SCTP_SOCKOPT_BINDX_REM),
 #define XLAT_VAL_39 ((unsigned) (SCTP_SOCKOPT_BINDX_REM))
 #define XLAT_STR_39 STRINGIFY(SCTP_SOCKOPT_BINDX_REM)
 XLAT(SCTP_SOCKOPT_PEELOFF),
 #define XLAT_VAL_40 ((unsigned) (SCTP_SOCKOPT_PEELOFF))
 #define XLAT_STR_40 STRINGIFY(SCTP_SOCKOPT_PEELOFF)
 XLAT(SCTP_GET_PEER_ADDRS_NUM_OLD),
 #define XLAT_VAL_41 ((unsigned) (SCTP_GET_PEER_ADDRS_NUM_OLD))
 #define XLAT_STR_41 STRINGIFY(SCTP_GET_PEER_ADDRS_NUM_OLD)
 XLAT(SCTP_GET_PEER_ADDRS_OLD),
 #define XLAT_VAL_42 ((unsigned) (SCTP_GET_PEER_ADDRS_OLD))
 #define XLAT_STR_42 STRINGIFY(SCTP_GET_PEER_ADDRS_OLD)
 XLAT(SCTP_GET_LOCAL_ADDRS_NUM_OLD),
 #define XLAT_VAL_43 ((unsigned) (SCTP_GET_LOCAL_ADDRS_NUM_OLD))
 #define XLAT_STR_43 STRINGIFY(SCTP_GET_LOCAL_ADDRS_NUM_OLD)
 XLAT(SCTP_GET_LOCAL_ADDRS_OLD),
 #define XLAT_VAL_44 ((unsigned) (SCTP_GET_LOCAL_ADDRS_OLD))
 #define XLAT_STR_44 STRINGIFY(SCTP_GET_LOCAL_ADDRS_OLD)
 XLAT(SCTP_SOCKOPT_CONNECTX_OLD),
 #define XLAT_VAL_45 ((unsigned) (SCTP_SOCKOPT_CONNECTX_OLD))
 #define XLAT_STR_45 STRINGIFY(SCTP_SOCKOPT_CONNECTX_OLD)
 XLAT(SCTP_GET_PEER_ADDRS),
 #define XLAT_VAL_46 ((unsigned) (SCTP_GET_PEER_ADDRS))
 #define XLAT_STR_46 STRINGIFY(SCTP_GET_PEER_ADDRS)
 XLAT(SCTP_GET_LOCAL_ADDRS),
 #define XLAT_VAL_47 ((unsigned) (SCTP_GET_LOCAL_ADDRS))
 #define XLAT_STR_47 STRINGIFY(SCTP_GET_LOCAL_ADDRS)
 XLAT(SCTP_SOCKOPT_CONNECTX),
 #define XLAT_VAL_48 ((unsigned) (SCTP_SOCKOPT_CONNECTX))
 #define XLAT_STR_48 STRINGIFY(SCTP_SOCKOPT_CONNECTX)
 XLAT(SCTP_SOCKOPT_CONNECTX3),
 #define XLAT_VAL_49 ((unsigned) (SCTP_SOCKOPT_CONNECTX3))
 #define XLAT_STR_49 STRINGIFY(SCTP_SOCKOPT_CONNECTX3)
 XLAT(SCTP_GET_ASSOC_STATS),
 #define XLAT_VAL_50 ((unsigned) (SCTP_GET_ASSOC_STATS))
 #define XLAT_STR_50 STRINGIFY(SCTP_GET_ASSOC_STATS)
 XLAT(SCTP_PR_SUPPORTED),
 #define XLAT_VAL_51 ((unsigned) (SCTP_PR_SUPPORTED))
 #define XLAT_STR_51 STRINGIFY(SCTP_PR_SUPPORTED)
 XLAT(SCTP_DEFAULT_PRINFO),
 #define XLAT_VAL_52 ((unsigned) (SCTP_DEFAULT_PRINFO))
 #define XLAT_STR_52 STRINGIFY(SCTP_DEFAULT_PRINFO)
 XLAT(SCTP_PR_ASSOC_STATUS),
 #define XLAT_VAL_53 ((unsigned) (SCTP_PR_ASSOC_STATUS))
 #define XLAT_STR_53 STRINGIFY(SCTP_PR_ASSOC_STATUS)
 XLAT(SCTP_PR_STREAM_STATUS),
 #define XLAT_VAL_54 ((unsigned) (SCTP_PR_STREAM_STATUS))
 #define XLAT_STR_54 STRINGIFY(SCTP_PR_STREAM_STATUS)
 XLAT(SCTP_RECONFIG_SUPPORTED),
 #define XLAT_VAL_55 ((unsigned) (SCTP_RECONFIG_SUPPORTED))
 #define XLAT_STR_55 STRINGIFY(SCTP_RECONFIG_SUPPORTED)
 XLAT(SCTP_ENABLE_STREAM_RESET),
 #define XLAT_VAL_56 ((unsigned) (SCTP_ENABLE_STREAM_RESET))
 #define XLAT_STR_56 STRINGIFY(SCTP_ENABLE_STREAM_RESET)
 XLAT(SCTP_RESET_STREAMS),
 #define XLAT_VAL_57 ((unsigned) (SCTP_RESET_STREAMS))
 #define XLAT_STR_57 STRINGIFY(SCTP_RESET_STREAMS)
 XLAT(SCTP_RESET_ASSOC),
 #define XLAT_VAL_58 ((unsigned) (SCTP_RESET_ASSOC))
 #define XLAT_STR_58 STRINGIFY(SCTP_RESET_ASSOC)
 XLAT(SCTP_ADD_STREAMS),
 #define XLAT_VAL_59 ((unsigned) (SCTP_ADD_STREAMS))
 #define XLAT_STR_59 STRINGIFY(SCTP_ADD_STREAMS)
 XLAT(SCTP_SOCKOPT_PEELOFF_FLAGS),
 #define XLAT_VAL_60 ((unsigned) (SCTP_SOCKOPT_PEELOFF_FLAGS))
 #define XLAT_STR_60 STRINGIFY(SCTP_SOCKOPT_PEELOFF_FLAGS)
 XLAT(SCTP_STREAM_SCHEDULER),
 #define XLAT_VAL_61 ((unsigned) (SCTP_STREAM_SCHEDULER))
 #define XLAT_STR_61 STRINGIFY(SCTP_STREAM_SCHEDULER)
 XLAT(SCTP_STREAM_SCHEDULER_VALUE),
 #define XLAT_VAL_62 ((unsigned) (SCTP_STREAM_SCHEDULER_VALUE))
 #define XLAT_STR_62 STRINGIFY(SCTP_STREAM_SCHEDULER_VALUE)
 XLAT(SCTP_INTERLEAVING_SUPPORTED),
 #define XLAT_VAL_63 ((unsigned) (SCTP_INTERLEAVING_SUPPORTED))
 #define XLAT_STR_63 STRINGIFY(SCTP_INTERLEAVING_SUPPORTED)
 XLAT(SCTP_SENDMSG_CONNECT),
 #define XLAT_VAL_64 ((unsigned) (SCTP_SENDMSG_CONNECT))
 #define XLAT_STR_64 STRINGIFY(SCTP_SENDMSG_CONNECT)
 XLAT(SCTP_EVENT),
 #define XLAT_VAL_65 ((unsigned) (SCTP_EVENT))
 #define XLAT_STR_65 STRINGIFY(SCTP_EVENT)
 XLAT(SCTP_ASCONF_SUPPORTED),
 #define XLAT_VAL_66 ((unsigned) (SCTP_ASCONF_SUPPORTED))
 #define XLAT_STR_66 STRINGIFY(SCTP_ASCONF_SUPPORTED)
 XLAT(SCTP_AUTH_SUPPORTED),
 #define XLAT_VAL_67 ((unsigned) (SCTP_AUTH_SUPPORTED))
 #define XLAT_STR_67 STRINGIFY(SCTP_AUTH_SUPPORTED)
 XLAT(SCTP_ECN_SUPPORTED),
 #define XLAT_VAL_68 ((unsigned) (SCTP_ECN_SUPPORTED))
 #define XLAT_STR_68 STRINGIFY(SCTP_ECN_SUPPORTED)
 XLAT(SCTP_EXPOSE_POTENTIALLY_FAILED_STATE),
 #define XLAT_VAL_69 ((unsigned) (SCTP_EXPOSE_POTENTIALLY_FAILED_STATE))
 #define XLAT_STR_69 STRINGIFY(SCTP_EXPOSE_POTENTIALLY_FAILED_STATE)
 XLAT(SCTP_REMOTE_UDP_ENCAPS_PORT),
 #define XLAT_VAL_70 ((unsigned) (SCTP_REMOTE_UDP_ENCAPS_PORT))
 #define XLAT_STR_70 STRINGIFY(SCTP_REMOTE_UDP_ENCAPS_PORT)
 XLAT(SCTP_PLPMTUD_PROBE_INTERVAL),
 #define XLAT_VAL_71 ((unsigned) (SCTP_PLPMTUD_PROBE_INTERVAL))
 #define XLAT_STR_71 STRINGIFY(SCTP_PLPMTUD_PROBE_INTERVAL)
};
static
const struct xlat sock_sctp_options[1] = { {
 .data = sock_sctp_options_xdata,
 .size = ARRAY_SIZE(sock_sctp_options_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
