/* Generated by ./src/xlat/gen.sh from ./src/xlat/keyctl_commands.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat keyctl_commands in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data keyctl_commands_xdata[] = {
 [KEYCTL_GET_KEYRING_ID] = XLAT(KEYCTL_GET_KEYRING_ID),
 #define XLAT_VAL_0 ((unsigned) (KEYCTL_GET_KEYRING_ID))
 #define XLAT_STR_0 STRINGIFY(KEYCTL_GET_KEYRING_ID)
 [KEYCTL_JOIN_SESSION_KEYRING] = XLAT(KEYCTL_JOIN_SESSION_KEYRING),
 #define XLAT_VAL_1 ((unsigned) (KEYCTL_JOIN_SESSION_KEYRING))
 #define XLAT_STR_1 STRINGIFY(KEYCTL_JOIN_SESSION_KEYRING)
 [KEYCTL_UPDATE] = XLAT(KEYCTL_UPDATE),
 #define XLAT_VAL_2 ((unsigned) (KEYCTL_UPDATE))
 #define XLAT_STR_2 STRINGIFY(KEYCTL_UPDATE)
 [KEYCTL_REVOKE] = XLAT(KEYCTL_REVOKE),
 #define XLAT_VAL_3 ((unsigned) (KEYCTL_REVOKE))
 #define XLAT_STR_3 STRINGIFY(KEYCTL_REVOKE)
 [KEYCTL_CHOWN] = XLAT(KEYCTL_CHOWN),
 #define XLAT_VAL_4 ((unsigned) (KEYCTL_CHOWN))
 #define XLAT_STR_4 STRINGIFY(KEYCTL_CHOWN)
 [KEYCTL_SETPERM] = XLAT(KEYCTL_SETPERM),
 #define XLAT_VAL_5 ((unsigned) (KEYCTL_SETPERM))
 #define XLAT_STR_5 STRINGIFY(KEYCTL_SETPERM)
 [KEYCTL_DESCRIBE] = XLAT(KEYCTL_DESCRIBE),
 #define XLAT_VAL_6 ((unsigned) (KEYCTL_DESCRIBE))
 #define XLAT_STR_6 STRINGIFY(KEYCTL_DESCRIBE)
 [KEYCTL_CLEAR] = XLAT(KEYCTL_CLEAR),
 #define XLAT_VAL_7 ((unsigned) (KEYCTL_CLEAR))
 #define XLAT_STR_7 STRINGIFY(KEYCTL_CLEAR)
 [KEYCTL_LINK] = XLAT(KEYCTL_LINK),
 #define XLAT_VAL_8 ((unsigned) (KEYCTL_LINK))
 #define XLAT_STR_8 STRINGIFY(KEYCTL_LINK)
 [KEYCTL_UNLINK] = XLAT(KEYCTL_UNLINK),
 #define XLAT_VAL_9 ((unsigned) (KEYCTL_UNLINK))
 #define XLAT_STR_9 STRINGIFY(KEYCTL_UNLINK)
 [KEYCTL_SEARCH] = XLAT(KEYCTL_SEARCH),
 #define XLAT_VAL_10 ((unsigned) (KEYCTL_SEARCH))
 #define XLAT_STR_10 STRINGIFY(KEYCTL_SEARCH)
 [KEYCTL_READ] = XLAT(KEYCTL_READ),
 #define XLAT_VAL_11 ((unsigned) (KEYCTL_READ))
 #define XLAT_STR_11 STRINGIFY(KEYCTL_READ)
 [KEYCTL_INSTANTIATE] = XLAT(KEYCTL_INSTANTIATE),
 #define XLAT_VAL_12 ((unsigned) (KEYCTL_INSTANTIATE))
 #define XLAT_STR_12 STRINGIFY(KEYCTL_INSTANTIATE)
 [KEYCTL_NEGATE] = XLAT(KEYCTL_NEGATE),
 #define XLAT_VAL_13 ((unsigned) (KEYCTL_NEGATE))
 #define XLAT_STR_13 STRINGIFY(KEYCTL_NEGATE)
 [KEYCTL_SET_REQKEY_KEYRING] = XLAT(KEYCTL_SET_REQKEY_KEYRING),
 #define XLAT_VAL_14 ((unsigned) (KEYCTL_SET_REQKEY_KEYRING))
 #define XLAT_STR_14 STRINGIFY(KEYCTL_SET_REQKEY_KEYRING)
 [KEYCTL_SET_TIMEOUT] = XLAT(KEYCTL_SET_TIMEOUT),
 #define XLAT_VAL_15 ((unsigned) (KEYCTL_SET_TIMEOUT))
 #define XLAT_STR_15 STRINGIFY(KEYCTL_SET_TIMEOUT)
 [KEYCTL_ASSUME_AUTHORITY] = XLAT(KEYCTL_ASSUME_AUTHORITY),
 #define XLAT_VAL_16 ((unsigned) (KEYCTL_ASSUME_AUTHORITY))
 #define XLAT_STR_16 STRINGIFY(KEYCTL_ASSUME_AUTHORITY)
 [KEYCTL_GET_SECURITY] = XLAT(KEYCTL_GET_SECURITY),
 #define XLAT_VAL_17 ((unsigned) (KEYCTL_GET_SECURITY))
 #define XLAT_STR_17 STRINGIFY(KEYCTL_GET_SECURITY)
 [KEYCTL_SESSION_TO_PARENT] = XLAT(KEYCTL_SESSION_TO_PARENT),
 #define XLAT_VAL_18 ((unsigned) (KEYCTL_SESSION_TO_PARENT))
 #define XLAT_STR_18 STRINGIFY(KEYCTL_SESSION_TO_PARENT)
 [KEYCTL_REJECT] = XLAT(KEYCTL_REJECT),
 #define XLAT_VAL_19 ((unsigned) (KEYCTL_REJECT))
 #define XLAT_STR_19 STRINGIFY(KEYCTL_REJECT)
 [KEYCTL_INSTANTIATE_IOV] = XLAT(KEYCTL_INSTANTIATE_IOV),
 #define XLAT_VAL_20 ((unsigned) (KEYCTL_INSTANTIATE_IOV))
 #define XLAT_STR_20 STRINGIFY(KEYCTL_INSTANTIATE_IOV)
 [KEYCTL_INVALIDATE] = XLAT(KEYCTL_INVALIDATE),
 #define XLAT_VAL_21 ((unsigned) (KEYCTL_INVALIDATE))
 #define XLAT_STR_21 STRINGIFY(KEYCTL_INVALIDATE)
 [KEYCTL_GET_PERSISTENT] = XLAT(KEYCTL_GET_PERSISTENT),
 #define XLAT_VAL_22 ((unsigned) (KEYCTL_GET_PERSISTENT))
 #define XLAT_STR_22 STRINGIFY(KEYCTL_GET_PERSISTENT)
 [KEYCTL_DH_COMPUTE] = XLAT(KEYCTL_DH_COMPUTE),
 #define XLAT_VAL_23 ((unsigned) (KEYCTL_DH_COMPUTE))
 #define XLAT_STR_23 STRINGIFY(KEYCTL_DH_COMPUTE)
 [KEYCTL_PKEY_QUERY] = XLAT(KEYCTL_PKEY_QUERY),
 #define XLAT_VAL_24 ((unsigned) (KEYCTL_PKEY_QUERY))
 #define XLAT_STR_24 STRINGIFY(KEYCTL_PKEY_QUERY)
 [KEYCTL_PKEY_ENCRYPT] = XLAT(KEYCTL_PKEY_ENCRYPT),
 #define XLAT_VAL_25 ((unsigned) (KEYCTL_PKEY_ENCRYPT))
 #define XLAT_STR_25 STRINGIFY(KEYCTL_PKEY_ENCRYPT)
 [KEYCTL_PKEY_DECRYPT] = XLAT(KEYCTL_PKEY_DECRYPT),
 #define XLAT_VAL_26 ((unsigned) (KEYCTL_PKEY_DECRYPT))
 #define XLAT_STR_26 STRINGIFY(KEYCTL_PKEY_DECRYPT)
 [KEYCTL_PKEY_SIGN] = XLAT(KEYCTL_PKEY_SIGN),
 #define XLAT_VAL_27 ((unsigned) (KEYCTL_PKEY_SIGN))
 #define XLAT_STR_27 STRINGIFY(KEYCTL_PKEY_SIGN)
 [KEYCTL_PKEY_VERIFY] = XLAT(KEYCTL_PKEY_VERIFY),
 #define XLAT_VAL_28 ((unsigned) (KEYCTL_PKEY_VERIFY))
 #define XLAT_STR_28 STRINGIFY(KEYCTL_PKEY_VERIFY)
 [KEYCTL_RESTRICT_KEYRING] = XLAT(KEYCTL_RESTRICT_KEYRING),
 #define XLAT_VAL_29 ((unsigned) (KEYCTL_RESTRICT_KEYRING))
 #define XLAT_STR_29 STRINGIFY(KEYCTL_RESTRICT_KEYRING)
 [KEYCTL_MOVE] = XLAT(KEYCTL_MOVE),
 #define XLAT_VAL_30 ((unsigned) (KEYCTL_MOVE))
 #define XLAT_STR_30 STRINGIFY(KEYCTL_MOVE)
 [KEYCTL_CAPABILITIES] = XLAT(KEYCTL_CAPABILITIES),
 #define XLAT_VAL_31 ((unsigned) (KEYCTL_CAPABILITIES))
 #define XLAT_STR_31 STRINGIFY(KEYCTL_CAPABILITIES)
 [KEYCTL_WATCH_KEY] = XLAT(KEYCTL_WATCH_KEY),
 #define XLAT_VAL_32 ((unsigned) (KEYCTL_WATCH_KEY))
 #define XLAT_STR_32 STRINGIFY(KEYCTL_WATCH_KEY)
};
static
const struct xlat keyctl_commands[1] = { {
 .data = keyctl_commands_xdata,
 .size = ARRAY_SIZE(keyctl_commands_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
