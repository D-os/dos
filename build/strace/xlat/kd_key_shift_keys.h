/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_key_shift_keys.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(K_SHIFT) || (defined(HAVE_DECL_K_SHIFT) && HAVE_DECL_K_SHIFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_SHIFT) == (K(KT_SHIFT,KG_SHIFT)), "K_SHIFT != K(KT_SHIFT,KG_SHIFT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_SHIFT K(KT_SHIFT,KG_SHIFT)
#endif
#if defined(K_SHIFT) || (defined(HAVE_DECL_K_SHIFT) && HAVE_DECL_K_SHIFT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_SHIFT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_SHIFT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_SHIFT)
#endif
#if defined(K_ALTGR) || (defined(HAVE_DECL_K_ALTGR) && HAVE_DECL_K_ALTGR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_ALTGR) == (K(KT_SHIFT,KG_ALTGR)), "K_ALTGR != K(KT_SHIFT,KG_ALTGR)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_ALTGR K(KT_SHIFT,KG_ALTGR)
#endif
#if defined(K_ALTGR) || (defined(HAVE_DECL_K_ALTGR) && HAVE_DECL_K_ALTGR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_ALTGR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_ALTGR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_ALTGR)
#endif
#if defined(K_CTRL) || (defined(HAVE_DECL_K_CTRL) && HAVE_DECL_K_CTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_CTRL) == (K(KT_SHIFT,KG_CTRL)), "K_CTRL != K(KT_SHIFT,KG_CTRL)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_CTRL K(KT_SHIFT,KG_CTRL)
#endif
#if defined(K_CTRL) || (defined(HAVE_DECL_K_CTRL) && HAVE_DECL_K_CTRL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_CTRL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_CTRL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_CTRL)
#endif
#if defined(K_ALT) || (defined(HAVE_DECL_K_ALT) && HAVE_DECL_K_ALT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_ALT) == (K(KT_SHIFT,KG_ALT)), "K_ALT != K(KT_SHIFT,KG_ALT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_ALT K(KT_SHIFT,KG_ALT)
#endif
#if defined(K_ALT) || (defined(HAVE_DECL_K_ALT) && HAVE_DECL_K_ALT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_ALT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_ALT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_ALT)
#endif
#if defined(K_SHIFTL) || (defined(HAVE_DECL_K_SHIFTL) && HAVE_DECL_K_SHIFTL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_SHIFTL) == (K(KT_SHIFT,KG_SHIFTL)), "K_SHIFTL != K(KT_SHIFT,KG_SHIFTL)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_SHIFTL K(KT_SHIFT,KG_SHIFTL)
#endif
#if defined(K_SHIFTL) || (defined(HAVE_DECL_K_SHIFTL) && HAVE_DECL_K_SHIFTL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_SHIFTL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_SHIFTL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_SHIFTL)
#endif
#if defined(K_SHIFTR) || (defined(HAVE_DECL_K_SHIFTR) && HAVE_DECL_K_SHIFTR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_SHIFTR) == (K(KT_SHIFT,KG_SHIFTR)), "K_SHIFTR != K(KT_SHIFT,KG_SHIFTR)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_SHIFTR K(KT_SHIFT,KG_SHIFTR)
#endif
#if defined(K_SHIFTR) || (defined(HAVE_DECL_K_SHIFTR) && HAVE_DECL_K_SHIFTR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_SHIFTR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_SHIFTR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_SHIFTR)
#endif
#if defined(K_CTRLL) || (defined(HAVE_DECL_K_CTRLL) && HAVE_DECL_K_CTRLL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_CTRLL) == (K(KT_SHIFT,KG_CTRLL)), "K_CTRLL != K(KT_SHIFT,KG_CTRLL)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_CTRLL K(KT_SHIFT,KG_CTRLL)
#endif
#if defined(K_CTRLL) || (defined(HAVE_DECL_K_CTRLL) && HAVE_DECL_K_CTRLL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_CTRLL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_CTRLL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_CTRLL)
#endif
#if defined(K_CTRLR) || (defined(HAVE_DECL_K_CTRLR) && HAVE_DECL_K_CTRLR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_CTRLR) == (K(KT_SHIFT,KG_CTRLR)), "K_CTRLR != K(KT_SHIFT,KG_CTRLR)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_CTRLR K(KT_SHIFT,KG_CTRLR)
#endif
#if defined(K_CTRLR) || (defined(HAVE_DECL_K_CTRLR) && HAVE_DECL_K_CTRLR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_CTRLR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_CTRLR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_CTRLR)
#endif
#if defined(K_CAPSSHIFT) || (defined(HAVE_DECL_K_CAPSSHIFT) && HAVE_DECL_K_CAPSSHIFT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_CAPSSHIFT) == (K(KT_SHIFT,KG_CAPSSHIFT)), "K_CAPSSHIFT != K(KT_SHIFT,KG_CAPSSHIFT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_CAPSSHIFT K(KT_SHIFT,KG_CAPSSHIFT)
#endif
#if defined(K_CAPSSHIFT) || (defined(HAVE_DECL_K_CAPSSHIFT) && HAVE_DECL_K_CAPSSHIFT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_CAPSSHIFT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_CAPSSHIFT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_CAPSSHIFT)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat kd_key_shift_keys in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_key_shift_keys_xdata[] = {
 XLAT(K_SHIFT),
 #define XLAT_VAL_0 ((unsigned) (K_SHIFT))
 #define XLAT_STR_0 STRINGIFY(K_SHIFT)
 XLAT(K_ALTGR),
 #define XLAT_VAL_1 ((unsigned) (K_ALTGR))
 #define XLAT_STR_1 STRINGIFY(K_ALTGR)
 XLAT(K_CTRL),
 #define XLAT_VAL_2 ((unsigned) (K_CTRL))
 #define XLAT_STR_2 STRINGIFY(K_CTRL)
 XLAT(K_ALT),
 #define XLAT_VAL_3 ((unsigned) (K_ALT))
 #define XLAT_STR_3 STRINGIFY(K_ALT)
 XLAT(K_SHIFTL),
 #define XLAT_VAL_4 ((unsigned) (K_SHIFTL))
 #define XLAT_STR_4 STRINGIFY(K_SHIFTL)
 XLAT(K_SHIFTR),
 #define XLAT_VAL_5 ((unsigned) (K_SHIFTR))
 #define XLAT_STR_5 STRINGIFY(K_SHIFTR)
 XLAT(K_CTRLL),
 #define XLAT_VAL_6 ((unsigned) (K_CTRLL))
 #define XLAT_STR_6 STRINGIFY(K_CTRLL)
 XLAT(K_CTRLR),
 #define XLAT_VAL_7 ((unsigned) (K_CTRLR))
 #define XLAT_STR_7 STRINGIFY(K_CTRLR)
 XLAT(K_CAPSSHIFT),
 #define XLAT_VAL_8 ((unsigned) (K_CAPSSHIFT))
 #define XLAT_STR_8 STRINGIFY(K_CAPSSHIFT)
};
static
const struct xlat kd_key_shift_keys[1] = { {
 .data = kd_key_shift_keys_xdata,
 .size = ARRAY_SIZE(kd_key_shift_keys_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
