/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_netlink_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_netlink_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_netlink_options_xdata[] = {
 [NETLINK_ADD_MEMBERSHIP] = XLAT(NETLINK_ADD_MEMBERSHIP),
 #define XLAT_VAL_0 ((unsigned) (NETLINK_ADD_MEMBERSHIP))
 #define XLAT_STR_0 STRINGIFY(NETLINK_ADD_MEMBERSHIP)
 [NETLINK_DROP_MEMBERSHIP] = XLAT(NETLINK_DROP_MEMBERSHIP),
 #define XLAT_VAL_1 ((unsigned) (NETLINK_DROP_MEMBERSHIP))
 #define XLAT_STR_1 STRINGIFY(NETLINK_DROP_MEMBERSHIP)
 [NETLINK_PKTINFO] = XLAT(NETLINK_PKTINFO),
 #define XLAT_VAL_2 ((unsigned) (NETLINK_PKTINFO))
 #define XLAT_STR_2 STRINGIFY(NETLINK_PKTINFO)
 [NETLINK_BROADCAST_ERROR] = XLAT(NETLINK_BROADCAST_ERROR),
 #define XLAT_VAL_3 ((unsigned) (NETLINK_BROADCAST_ERROR))
 #define XLAT_STR_3 STRINGIFY(NETLINK_BROADCAST_ERROR)
 [NETLINK_NO_ENOBUFS] = XLAT(NETLINK_NO_ENOBUFS),
 #define XLAT_VAL_4 ((unsigned) (NETLINK_NO_ENOBUFS))
 #define XLAT_STR_4 STRINGIFY(NETLINK_NO_ENOBUFS)
 [NETLINK_RX_RING] = XLAT(NETLINK_RX_RING),
 #define XLAT_VAL_5 ((unsigned) (NETLINK_RX_RING))
 #define XLAT_STR_5 STRINGIFY(NETLINK_RX_RING)
 [NETLINK_TX_RING] = XLAT(NETLINK_TX_RING),
 #define XLAT_VAL_6 ((unsigned) (NETLINK_TX_RING))
 #define XLAT_STR_6 STRINGIFY(NETLINK_TX_RING)
 [NETLINK_LISTEN_ALL_NSID] = XLAT(NETLINK_LISTEN_ALL_NSID),
 #define XLAT_VAL_7 ((unsigned) (NETLINK_LISTEN_ALL_NSID))
 #define XLAT_STR_7 STRINGIFY(NETLINK_LISTEN_ALL_NSID)
 [NETLINK_LIST_MEMBERSHIPS] = XLAT(NETLINK_LIST_MEMBERSHIPS),
 #define XLAT_VAL_8 ((unsigned) (NETLINK_LIST_MEMBERSHIPS))
 #define XLAT_STR_8 STRINGIFY(NETLINK_LIST_MEMBERSHIPS)
 [NETLINK_CAP_ACK] = XLAT(NETLINK_CAP_ACK),
 #define XLAT_VAL_9 ((unsigned) (NETLINK_CAP_ACK))
 #define XLAT_STR_9 STRINGIFY(NETLINK_CAP_ACK)
 [NETLINK_EXT_ACK] = XLAT(NETLINK_EXT_ACK),
 #define XLAT_VAL_10 ((unsigned) (NETLINK_EXT_ACK))
 #define XLAT_STR_10 STRINGIFY(NETLINK_EXT_ACK)
 [NETLINK_GET_STRICT_CHK] = XLAT(NETLINK_GET_STRICT_CHK),
 #define XLAT_VAL_11 ((unsigned) (NETLINK_GET_STRICT_CHK))
 #define XLAT_STR_11 STRINGIFY(NETLINK_GET_STRICT_CHK)
};
static
const struct xlat sock_netlink_options[1] = { {
 .data = sock_netlink_options_xdata,
 .size = ARRAY_SIZE(sock_netlink_options_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
