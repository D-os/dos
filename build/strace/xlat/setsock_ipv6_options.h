/* Generated by ./src/xlat/gen.sh from ./src/xlat/setsock_ipv6_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(IP6T_SO_SET_REPLACE) || (defined(HAVE_DECL_IP6T_SO_SET_REPLACE) && HAVE_DECL_IP6T_SO_SET_REPLACE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IP6T_SO_SET_REPLACE) == (64), "IP6T_SO_SET_REPLACE != 64");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IP6T_SO_SET_REPLACE 64
#endif
#if defined(IP6T_SO_SET_ADD_COUNTERS) || (defined(HAVE_DECL_IP6T_SO_SET_ADD_COUNTERS) && HAVE_DECL_IP6T_SO_SET_ADD_COUNTERS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IP6T_SO_SET_ADD_COUNTERS) == (65), "IP6T_SO_SET_ADD_COUNTERS != 65");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IP6T_SO_SET_ADD_COUNTERS 65
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat setsock_ipv6_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data setsock_ipv6_options_xdata[] = {
/*
* Options specific to setsockopt(SOL_IPV6).
* Common {g,s}etsockopt(SOL_IPV6) options
* should be in sock_ipv6_options.in instead.
*/

 XLAT(IP6T_SO_SET_REPLACE),
 #define XLAT_VAL_0 ((unsigned) (IP6T_SO_SET_REPLACE))
 #define XLAT_STR_0 STRINGIFY(IP6T_SO_SET_REPLACE)
 XLAT(IP6T_SO_SET_ADD_COUNTERS),
 #define XLAT_VAL_1 ((unsigned) (IP6T_SO_SET_ADD_COUNTERS))
 #define XLAT_STR_1 STRINGIFY(IP6T_SO_SET_ADD_COUNTERS)
};
static
const struct xlat setsock_ipv6_options[1] = { {
 .data = setsock_ipv6_options_xdata,
 .size = ARRAY_SIZE(setsock_ipv6_options_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
