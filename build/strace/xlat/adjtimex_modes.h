/* Generated by ./src/xlat/gen.sh from ./src/xlat/adjtimex_modes.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(ADJ_OFFSET_SS_READ) || (defined(HAVE_DECL_ADJ_OFFSET_SS_READ) && HAVE_DECL_ADJ_OFFSET_SS_READ)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_OFFSET_SS_READ) == (0xa001), "ADJ_OFFSET_SS_READ != 0xa001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_OFFSET_SS_READ 0xa001
#endif
#if defined(ADJ_OFFSET_SINGLESHOT) || (defined(HAVE_DECL_ADJ_OFFSET_SINGLESHOT) && HAVE_DECL_ADJ_OFFSET_SINGLESHOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_OFFSET_SINGLESHOT) == (0x8001), "ADJ_OFFSET_SINGLESHOT != 0x8001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_OFFSET_SINGLESHOT 0x8001
#endif
#if defined(ADJ_OFFSET) || (defined(HAVE_DECL_ADJ_OFFSET) && HAVE_DECL_ADJ_OFFSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_OFFSET) == (0x0001), "ADJ_OFFSET != 0x0001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_OFFSET 0x0001
#endif
#if defined(ADJ_FREQUENCY) || (defined(HAVE_DECL_ADJ_FREQUENCY) && HAVE_DECL_ADJ_FREQUENCY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_FREQUENCY) == (0x0002), "ADJ_FREQUENCY != 0x0002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_FREQUENCY 0x0002
#endif
#if defined(ADJ_MAXERROR) || (defined(HAVE_DECL_ADJ_MAXERROR) && HAVE_DECL_ADJ_MAXERROR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_MAXERROR) == (0x0004), "ADJ_MAXERROR != 0x0004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_MAXERROR 0x0004
#endif
#if defined(ADJ_ESTERROR) || (defined(HAVE_DECL_ADJ_ESTERROR) && HAVE_DECL_ADJ_ESTERROR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_ESTERROR) == (0x0008), "ADJ_ESTERROR != 0x0008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_ESTERROR 0x0008
#endif
#if defined(ADJ_STATUS) || (defined(HAVE_DECL_ADJ_STATUS) && HAVE_DECL_ADJ_STATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_STATUS) == (0x0010), "ADJ_STATUS != 0x0010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_STATUS 0x0010
#endif
#if defined(ADJ_TIMECONST) || (defined(HAVE_DECL_ADJ_TIMECONST) && HAVE_DECL_ADJ_TIMECONST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_TIMECONST) == (0x0020), "ADJ_TIMECONST != 0x0020");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_TIMECONST 0x0020
#endif
#if defined(ADJ_TAI) || (defined(HAVE_DECL_ADJ_TAI) && HAVE_DECL_ADJ_TAI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_TAI) == (0x0080), "ADJ_TAI != 0x0080");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_TAI 0x0080
#endif
#if defined(ADJ_SETOFFSET) || (defined(HAVE_DECL_ADJ_SETOFFSET) && HAVE_DECL_ADJ_SETOFFSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_SETOFFSET) == (0x0100), "ADJ_SETOFFSET != 0x0100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_SETOFFSET 0x0100
#endif
#if defined(ADJ_MICRO) || (defined(HAVE_DECL_ADJ_MICRO) && HAVE_DECL_ADJ_MICRO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_MICRO) == (0x1000), "ADJ_MICRO != 0x1000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_MICRO 0x1000
#endif
#if defined(ADJ_NANO) || (defined(HAVE_DECL_ADJ_NANO) && HAVE_DECL_ADJ_NANO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_NANO) == (0x2000), "ADJ_NANO != 0x2000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_NANO 0x2000
#endif
#if defined(ADJ_TICK) || (defined(HAVE_DECL_ADJ_TICK) && HAVE_DECL_ADJ_TICK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((ADJ_TICK) == (0x4000), "ADJ_TICK != 0x4000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define ADJ_TICK 0x4000
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat adjtimex_modes in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data adjtimex_modes_xdata[] = {
 XLAT(ADJ_OFFSET_SS_READ),
 #define XLAT_VAL_0 ((unsigned) (ADJ_OFFSET_SS_READ))
 #define XLAT_STR_0 STRINGIFY(ADJ_OFFSET_SS_READ)
 XLAT(ADJ_OFFSET_SINGLESHOT),
 #define XLAT_VAL_1 ((unsigned) (ADJ_OFFSET_SINGLESHOT))
 #define XLAT_STR_1 STRINGIFY(ADJ_OFFSET_SINGLESHOT)
 XLAT(ADJ_OFFSET),
 #define XLAT_VAL_2 ((unsigned) (ADJ_OFFSET))
 #define XLAT_STR_2 STRINGIFY(ADJ_OFFSET)
 XLAT(ADJ_FREQUENCY),
 #define XLAT_VAL_3 ((unsigned) (ADJ_FREQUENCY))
 #define XLAT_STR_3 STRINGIFY(ADJ_FREQUENCY)
 XLAT(ADJ_MAXERROR),
 #define XLAT_VAL_4 ((unsigned) (ADJ_MAXERROR))
 #define XLAT_STR_4 STRINGIFY(ADJ_MAXERROR)
 XLAT(ADJ_ESTERROR),
 #define XLAT_VAL_5 ((unsigned) (ADJ_ESTERROR))
 #define XLAT_STR_5 STRINGIFY(ADJ_ESTERROR)
 XLAT(ADJ_STATUS),
 #define XLAT_VAL_6 ((unsigned) (ADJ_STATUS))
 #define XLAT_STR_6 STRINGIFY(ADJ_STATUS)
 XLAT(ADJ_TIMECONST),
 #define XLAT_VAL_7 ((unsigned) (ADJ_TIMECONST))
 #define XLAT_STR_7 STRINGIFY(ADJ_TIMECONST)
 XLAT(ADJ_TAI),
 #define XLAT_VAL_8 ((unsigned) (ADJ_TAI))
 #define XLAT_STR_8 STRINGIFY(ADJ_TAI)
 XLAT(ADJ_SETOFFSET),
 #define XLAT_VAL_9 ((unsigned) (ADJ_SETOFFSET))
 #define XLAT_STR_9 STRINGIFY(ADJ_SETOFFSET)
 XLAT(ADJ_MICRO),
 #define XLAT_VAL_10 ((unsigned) (ADJ_MICRO))
 #define XLAT_STR_10 STRINGIFY(ADJ_MICRO)
 XLAT(ADJ_NANO),
 #define XLAT_VAL_11 ((unsigned) (ADJ_NANO))
 #define XLAT_STR_11 STRINGIFY(ADJ_NANO)
 XLAT(ADJ_TICK),
 #define XLAT_VAL_12 ((unsigned) (ADJ_TICK))
 #define XLAT_STR_12 STRINGIFY(ADJ_TICK)
};
static
const struct xlat adjtimex_modes[1] = { {
 .data = adjtimex_modes_xdata,
 .size = ARRAY_SIZE(adjtimex_modes_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
