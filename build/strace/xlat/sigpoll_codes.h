/* Generated by ./src/xlat/gen.sh from ./src/xlat/sigpoll_codes.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(POLL_IN) || (defined(HAVE_DECL_POLL_IN) && HAVE_DECL_POLL_IN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((POLL_IN) == (1), "POLL_IN != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define POLL_IN 1
#endif
#if defined(POLL_OUT) || (defined(HAVE_DECL_POLL_OUT) && HAVE_DECL_POLL_OUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((POLL_OUT) == (2), "POLL_OUT != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define POLL_OUT 2
#endif
#if defined(POLL_MSG) || (defined(HAVE_DECL_POLL_MSG) && HAVE_DECL_POLL_MSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((POLL_MSG) == (3), "POLL_MSG != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define POLL_MSG 3
#endif
#if defined(POLL_ERR) || (defined(HAVE_DECL_POLL_ERR) && HAVE_DECL_POLL_ERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((POLL_ERR) == (4), "POLL_ERR != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define POLL_ERR 4
#endif
#if defined(POLL_PRI) || (defined(HAVE_DECL_POLL_PRI) && HAVE_DECL_POLL_PRI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((POLL_PRI) == (5), "POLL_PRI != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define POLL_PRI 5
#endif
#if defined(POLL_HUP) || (defined(HAVE_DECL_POLL_HUP) && HAVE_DECL_POLL_HUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((POLL_HUP) == (6), "POLL_HUP != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define POLL_HUP 6
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat sigpoll_codes[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sigpoll_codes_xdata[] = {
 [POLL_IN] = XLAT(POLL_IN),
 #define XLAT_VAL_0 ((unsigned) (POLL_IN))
 #define XLAT_STR_0 STRINGIFY(POLL_IN)
 [POLL_OUT] = XLAT(POLL_OUT),
 #define XLAT_VAL_1 ((unsigned) (POLL_OUT))
 #define XLAT_STR_1 STRINGIFY(POLL_OUT)
 [POLL_MSG] = XLAT(POLL_MSG),
 #define XLAT_VAL_2 ((unsigned) (POLL_MSG))
 #define XLAT_STR_2 STRINGIFY(POLL_MSG)
 [POLL_ERR] = XLAT(POLL_ERR),
 #define XLAT_VAL_3 ((unsigned) (POLL_ERR))
 #define XLAT_STR_3 STRINGIFY(POLL_ERR)
 [POLL_PRI] = XLAT(POLL_PRI),
 #define XLAT_VAL_4 ((unsigned) (POLL_PRI))
 #define XLAT_STR_4 STRINGIFY(POLL_PRI)
 [POLL_HUP] = XLAT(POLL_HUP),
 #define XLAT_VAL_5 ((unsigned) (POLL_HUP))
 #define XLAT_STR_5 STRINGIFY(POLL_HUP)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat sigpoll_codes[1] = { {
 .data = sigpoll_codes_xdata,
 .size = ARRAY_SIZE(sigpoll_codes_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
