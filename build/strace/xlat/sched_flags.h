/* Generated by ./src/xlat/gen.sh from ./src/xlat/sched_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SCHED_FLAG_RESET_ON_FORK) || (defined(HAVE_DECL_SCHED_FLAG_RESET_ON_FORK) && HAVE_DECL_SCHED_FLAG_RESET_ON_FORK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCHED_FLAG_RESET_ON_FORK) == (0x01), "SCHED_FLAG_RESET_ON_FORK != 0x01");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCHED_FLAG_RESET_ON_FORK 0x01
#endif
#if defined(SCHED_FLAG_RECLAIM) || (defined(HAVE_DECL_SCHED_FLAG_RECLAIM) && HAVE_DECL_SCHED_FLAG_RECLAIM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCHED_FLAG_RECLAIM) == (0x02), "SCHED_FLAG_RECLAIM != 0x02");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCHED_FLAG_RECLAIM 0x02
#endif
#if defined(SCHED_FLAG_DL_OVERRUN) || (defined(HAVE_DECL_SCHED_FLAG_DL_OVERRUN) && HAVE_DECL_SCHED_FLAG_DL_OVERRUN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCHED_FLAG_DL_OVERRUN) == (0x04), "SCHED_FLAG_DL_OVERRUN != 0x04");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCHED_FLAG_DL_OVERRUN 0x04
#endif
#if defined(SCHED_FLAG_KEEP_POLICY) || (defined(HAVE_DECL_SCHED_FLAG_KEEP_POLICY) && HAVE_DECL_SCHED_FLAG_KEEP_POLICY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCHED_FLAG_KEEP_POLICY) == (0x08), "SCHED_FLAG_KEEP_POLICY != 0x08");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCHED_FLAG_KEEP_POLICY 0x08
#endif
#if defined(SCHED_FLAG_KEEP_PARAMS) || (defined(HAVE_DECL_SCHED_FLAG_KEEP_PARAMS) && HAVE_DECL_SCHED_FLAG_KEEP_PARAMS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCHED_FLAG_KEEP_PARAMS) == (0x10), "SCHED_FLAG_KEEP_PARAMS != 0x10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCHED_FLAG_KEEP_PARAMS 0x10
#endif
#if defined(SCHED_FLAG_UTIL_CLAMP_MIN) || (defined(HAVE_DECL_SCHED_FLAG_UTIL_CLAMP_MIN) && HAVE_DECL_SCHED_FLAG_UTIL_CLAMP_MIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCHED_FLAG_UTIL_CLAMP_MIN) == (0x20), "SCHED_FLAG_UTIL_CLAMP_MIN != 0x20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCHED_FLAG_UTIL_CLAMP_MIN 0x20
#endif
#if defined(SCHED_FLAG_UTIL_CLAMP_MAX) || (defined(HAVE_DECL_SCHED_FLAG_UTIL_CLAMP_MAX) && HAVE_DECL_SCHED_FLAG_UTIL_CLAMP_MAX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SCHED_FLAG_UTIL_CLAMP_MAX) == (0x40), "SCHED_FLAG_UTIL_CLAMP_MAX != 0x40");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SCHED_FLAG_UTIL_CLAMP_MAX 0x40
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sched_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sched_flags_xdata[] = {
 XLAT(SCHED_FLAG_RESET_ON_FORK),
 #define XLAT_VAL_0 ((unsigned) (SCHED_FLAG_RESET_ON_FORK))
 #define XLAT_STR_0 STRINGIFY(SCHED_FLAG_RESET_ON_FORK)
 XLAT(SCHED_FLAG_RECLAIM),
 #define XLAT_VAL_1 ((unsigned) (SCHED_FLAG_RECLAIM))
 #define XLAT_STR_1 STRINGIFY(SCHED_FLAG_RECLAIM)
 XLAT(SCHED_FLAG_DL_OVERRUN),
 #define XLAT_VAL_2 ((unsigned) (SCHED_FLAG_DL_OVERRUN))
 #define XLAT_STR_2 STRINGIFY(SCHED_FLAG_DL_OVERRUN)
 XLAT(SCHED_FLAG_KEEP_POLICY),
 #define XLAT_VAL_3 ((unsigned) (SCHED_FLAG_KEEP_POLICY))
 #define XLAT_STR_3 STRINGIFY(SCHED_FLAG_KEEP_POLICY)
 XLAT(SCHED_FLAG_KEEP_PARAMS),
 #define XLAT_VAL_4 ((unsigned) (SCHED_FLAG_KEEP_PARAMS))
 #define XLAT_STR_4 STRINGIFY(SCHED_FLAG_KEEP_PARAMS)
 XLAT(SCHED_FLAG_UTIL_CLAMP_MIN),
 #define XLAT_VAL_5 ((unsigned) (SCHED_FLAG_UTIL_CLAMP_MIN))
 #define XLAT_STR_5 STRINGIFY(SCHED_FLAG_UTIL_CLAMP_MIN)
 XLAT(SCHED_FLAG_UTIL_CLAMP_MAX),
 #define XLAT_VAL_6 ((unsigned) (SCHED_FLAG_UTIL_CLAMP_MAX))
 #define XLAT_STR_6 STRINGIFY(SCHED_FLAG_UTIL_CLAMP_MAX)
};
static
const struct xlat sched_flags[1] = { {
 .data = sched_flags_xdata,
 .size = ARRAY_SIZE(sched_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
