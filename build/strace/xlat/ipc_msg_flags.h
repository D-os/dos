/* Generated by ./src/xlat/gen.sh from ./src/xlat/ipc_msg_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(MSG_NOERROR) || (defined(HAVE_DECL_MSG_NOERROR) && HAVE_DECL_MSG_NOERROR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSG_NOERROR) == (010000), "MSG_NOERROR != 010000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSG_NOERROR 010000
#endif
#if defined(MSG_EXCEPT) || (defined(HAVE_DECL_MSG_EXCEPT) && HAVE_DECL_MSG_EXCEPT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSG_EXCEPT) == (020000), "MSG_EXCEPT != 020000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSG_EXCEPT 020000
#endif
#if defined(MSG_COPY) || (defined(HAVE_DECL_MSG_COPY) && HAVE_DECL_MSG_COPY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((MSG_COPY) == (040000), "MSG_COPY != 040000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define MSG_COPY 040000
#endif
#if defined(IPC_NOWAIT) || (defined(HAVE_DECL_IPC_NOWAIT) && HAVE_DECL_IPC_NOWAIT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IPC_NOWAIT) == (004000), "IPC_NOWAIT != 004000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define IPC_NOWAIT 004000
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ipc_msg_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data ipc_msg_flags_xdata[] = {
 XLAT(MSG_NOERROR),
 #define XLAT_VAL_0 ((unsigned) (MSG_NOERROR))
 #define XLAT_STR_0 STRINGIFY(MSG_NOERROR)
 XLAT(MSG_EXCEPT),
 #define XLAT_VAL_1 ((unsigned) (MSG_EXCEPT))
 #define XLAT_STR_1 STRINGIFY(MSG_EXCEPT)
 XLAT(MSG_COPY),
 #define XLAT_VAL_2 ((unsigned) (MSG_COPY))
 #define XLAT_STR_2 STRINGIFY(MSG_COPY)
 XLAT(IPC_NOWAIT),
 #define XLAT_VAL_3 ((unsigned) (IPC_NOWAIT))
 #define XLAT_STR_3 STRINGIFY(IPC_NOWAIT)
};
static
const struct xlat ipc_msg_flags[1] = { {
 .data = ipc_msg_flags_xdata,
 .size = ARRAY_SIZE(ipc_msg_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
