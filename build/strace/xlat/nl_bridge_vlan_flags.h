/* Generated by ./src/xlat/gen.sh from ./src/xlat/nl_bridge_vlan_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_VLAN_INFO_MASTER) == ((1<<0)), "BRIDGE_VLAN_INFO_MASTER != (1<<0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_VLAN_INFO_PVID) == ((1<<1)), "BRIDGE_VLAN_INFO_PVID != (1<<1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_VLAN_INFO_UNTAGGED) == ((1<<2)), "BRIDGE_VLAN_INFO_UNTAGGED != (1<<2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_VLAN_INFO_RANGE_BEGIN) == ((1<<3)), "BRIDGE_VLAN_INFO_RANGE_BEGIN != (1<<3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_VLAN_INFO_RANGE_END) == ((1<<4)), "BRIDGE_VLAN_INFO_RANGE_END != (1<<4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_VLAN_INFO_BRENTRY) == ((1<<5)), "BRIDGE_VLAN_INFO_BRENTRY != (1<<5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BRIDGE_VLAN_INFO_ONLY_OPTS) == ((1<<6)), "BRIDGE_VLAN_INFO_ONLY_OPTS != (1<<6)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data nl_bridge_vlan_flags_xdata[] = {
 XLAT(BRIDGE_VLAN_INFO_MASTER),
 #define XLAT_VAL_0 ((unsigned) (BRIDGE_VLAN_INFO_MASTER))
 #define XLAT_STR_0 STRINGIFY(BRIDGE_VLAN_INFO_MASTER)
 XLAT(BRIDGE_VLAN_INFO_PVID),
 #define XLAT_VAL_1 ((unsigned) (BRIDGE_VLAN_INFO_PVID))
 #define XLAT_STR_1 STRINGIFY(BRIDGE_VLAN_INFO_PVID)
 XLAT(BRIDGE_VLAN_INFO_UNTAGGED),
 #define XLAT_VAL_2 ((unsigned) (BRIDGE_VLAN_INFO_UNTAGGED))
 #define XLAT_STR_2 STRINGIFY(BRIDGE_VLAN_INFO_UNTAGGED)
 XLAT(BRIDGE_VLAN_INFO_RANGE_BEGIN),
 #define XLAT_VAL_3 ((unsigned) (BRIDGE_VLAN_INFO_RANGE_BEGIN))
 #define XLAT_STR_3 STRINGIFY(BRIDGE_VLAN_INFO_RANGE_BEGIN)
 XLAT(BRIDGE_VLAN_INFO_RANGE_END),
 #define XLAT_VAL_4 ((unsigned) (BRIDGE_VLAN_INFO_RANGE_END))
 #define XLAT_STR_4 STRINGIFY(BRIDGE_VLAN_INFO_RANGE_END)
 XLAT(BRIDGE_VLAN_INFO_BRENTRY),
 #define XLAT_VAL_5 ((unsigned) (BRIDGE_VLAN_INFO_BRENTRY))
 #define XLAT_STR_5 STRINGIFY(BRIDGE_VLAN_INFO_BRENTRY)
 XLAT(BRIDGE_VLAN_INFO_ONLY_OPTS),
 #define XLAT_VAL_6 ((unsigned) (BRIDGE_VLAN_INFO_ONLY_OPTS))
 #define XLAT_STR_6 STRINGIFY(BRIDGE_VLAN_INFO_ONLY_OPTS)
};
const struct xlat nl_bridge_vlan_flags[1] = { {
 .data = nl_bridge_vlan_flags_xdata,
 .size = ARRAY_SIZE(nl_bridge_vlan_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
