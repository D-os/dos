/* Generated by ./src/xlat/gen.sh from ./src/xlat/epollevents.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(EPOLLIN) || (defined(HAVE_DECL_EPOLLIN) && HAVE_DECL_EPOLLIN)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLIN) == (0x00000001), "EPOLLIN != 0x00000001");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLIN 0x00000001
#endif
#if defined(EPOLLPRI) || (defined(HAVE_DECL_EPOLLPRI) && HAVE_DECL_EPOLLPRI)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLPRI) == (0x00000002), "EPOLLPRI != 0x00000002");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLPRI 0x00000002
#endif
#if defined(EPOLLOUT) || (defined(HAVE_DECL_EPOLLOUT) && HAVE_DECL_EPOLLOUT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLOUT) == (0x00000004), "EPOLLOUT != 0x00000004");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLOUT 0x00000004
#endif
#if defined(EPOLLERR) || (defined(HAVE_DECL_EPOLLERR) && HAVE_DECL_EPOLLERR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLERR) == (0x00000008), "EPOLLERR != 0x00000008");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLERR 0x00000008
#endif
#if defined(EPOLLHUP) || (defined(HAVE_DECL_EPOLLHUP) && HAVE_DECL_EPOLLHUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLHUP) == (0x00000010), "EPOLLHUP != 0x00000010");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLHUP 0x00000010
#endif
#if defined(EPOLLNVAL) || (defined(HAVE_DECL_EPOLLNVAL) && HAVE_DECL_EPOLLNVAL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLNVAL) == (0x00000020), "EPOLLNVAL != 0x00000020");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLNVAL 0x00000020
#endif
#if defined(EPOLLRDNORM) || (defined(HAVE_DECL_EPOLLRDNORM) && HAVE_DECL_EPOLLRDNORM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLRDNORM) == (0x00000040), "EPOLLRDNORM != 0x00000040");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLRDNORM 0x00000040
#endif
#if defined(EPOLLRDBAND) || (defined(HAVE_DECL_EPOLLRDBAND) && HAVE_DECL_EPOLLRDBAND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLRDBAND) == (0x00000080), "EPOLLRDBAND != 0x00000080");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLRDBAND 0x00000080
#endif
#if defined(EPOLLWRNORM) || (defined(HAVE_DECL_EPOLLWRNORM) && HAVE_DECL_EPOLLWRNORM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLWRNORM) == (0x00000100), "EPOLLWRNORM != 0x00000100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLWRNORM 0x00000100
#endif
#if defined(EPOLLWRBAND) || (defined(HAVE_DECL_EPOLLWRBAND) && HAVE_DECL_EPOLLWRBAND)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLWRBAND) == (0x00000200), "EPOLLWRBAND != 0x00000200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLWRBAND 0x00000200
#endif
#if defined(EPOLLMSG) || (defined(HAVE_DECL_EPOLLMSG) && HAVE_DECL_EPOLLMSG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLMSG) == (0x00000400), "EPOLLMSG != 0x00000400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLMSG 0x00000400
#endif
#if defined(EPOLLRDHUP) || (defined(HAVE_DECL_EPOLLRDHUP) && HAVE_DECL_EPOLLRDHUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLRDHUP) == (0x00002000), "EPOLLRDHUP != 0x00002000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLRDHUP 0x00002000
#endif
#if defined(EPOLLEXCLUSIVE) || (defined(HAVE_DECL_EPOLLEXCLUSIVE) && HAVE_DECL_EPOLLEXCLUSIVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLEXCLUSIVE) == (0x10000000), "EPOLLEXCLUSIVE != 0x10000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLEXCLUSIVE 0x10000000
#endif
#if defined(EPOLLWAKEUP) || (defined(HAVE_DECL_EPOLLWAKEUP) && HAVE_DECL_EPOLLWAKEUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLWAKEUP) == (0x20000000), "EPOLLWAKEUP != 0x20000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLWAKEUP 0x20000000
#endif
#if defined(EPOLLONESHOT) || (defined(HAVE_DECL_EPOLLONESHOT) && HAVE_DECL_EPOLLONESHOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLONESHOT) == (0x40000000), "EPOLLONESHOT != 0x40000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLONESHOT 0x40000000
#endif
#if defined(EPOLLET) || (defined(HAVE_DECL_EPOLLET) && HAVE_DECL_EPOLLET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((EPOLLET) == (0x80000000), "EPOLLET != 0x80000000");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define EPOLLET 0x80000000
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat epollevents in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data epollevents_xdata[] = {
 XLAT(EPOLLIN),
 #define XLAT_VAL_0 ((unsigned) (EPOLLIN))
 #define XLAT_STR_0 STRINGIFY(EPOLLIN)
 XLAT(EPOLLPRI),
 #define XLAT_VAL_1 ((unsigned) (EPOLLPRI))
 #define XLAT_STR_1 STRINGIFY(EPOLLPRI)
 XLAT(EPOLLOUT),
 #define XLAT_VAL_2 ((unsigned) (EPOLLOUT))
 #define XLAT_STR_2 STRINGIFY(EPOLLOUT)
 XLAT(EPOLLERR),
 #define XLAT_VAL_3 ((unsigned) (EPOLLERR))
 #define XLAT_STR_3 STRINGIFY(EPOLLERR)
 XLAT(EPOLLHUP),
 #define XLAT_VAL_4 ((unsigned) (EPOLLHUP))
 #define XLAT_STR_4 STRINGIFY(EPOLLHUP)
 XLAT(EPOLLNVAL),
 #define XLAT_VAL_5 ((unsigned) (EPOLLNVAL))
 #define XLAT_STR_5 STRINGIFY(EPOLLNVAL)
 XLAT(EPOLLRDNORM),
 #define XLAT_VAL_6 ((unsigned) (EPOLLRDNORM))
 #define XLAT_STR_6 STRINGIFY(EPOLLRDNORM)
 XLAT(EPOLLRDBAND),
 #define XLAT_VAL_7 ((unsigned) (EPOLLRDBAND))
 #define XLAT_STR_7 STRINGIFY(EPOLLRDBAND)
 XLAT(EPOLLWRNORM),
 #define XLAT_VAL_8 ((unsigned) (EPOLLWRNORM))
 #define XLAT_STR_8 STRINGIFY(EPOLLWRNORM)
 XLAT(EPOLLWRBAND),
 #define XLAT_VAL_9 ((unsigned) (EPOLLWRBAND))
 #define XLAT_STR_9 STRINGIFY(EPOLLWRBAND)
 XLAT(EPOLLMSG),
 #define XLAT_VAL_10 ((unsigned) (EPOLLMSG))
 #define XLAT_STR_10 STRINGIFY(EPOLLMSG)
 XLAT(EPOLLRDHUP),
 #define XLAT_VAL_11 ((unsigned) (EPOLLRDHUP))
 #define XLAT_STR_11 STRINGIFY(EPOLLRDHUP)
 XLAT(EPOLLEXCLUSIVE),
 #define XLAT_VAL_12 ((unsigned) (EPOLLEXCLUSIVE))
 #define XLAT_STR_12 STRINGIFY(EPOLLEXCLUSIVE)
 XLAT(EPOLLWAKEUP),
 #define XLAT_VAL_13 ((unsigned) (EPOLLWAKEUP))
 #define XLAT_STR_13 STRINGIFY(EPOLLWAKEUP)
 XLAT(EPOLLONESHOT),
 #define XLAT_VAL_14 ((unsigned) (EPOLLONESHOT))
 #define XLAT_STR_14 STRINGIFY(EPOLLONESHOT)
 XLAT(EPOLLET),
 #define XLAT_VAL_15 ((unsigned) (EPOLLET))
 #define XLAT_STR_15 STRINGIFY(EPOLLET)
};
static
const struct xlat epollevents[1] = { {
 .data = epollevents_xdata,
 .size = ARRAY_SIZE(epollevents_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
