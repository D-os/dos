/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtc_vl_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(RTC_VL_DATA_INVALID) || (defined(HAVE_DECL_RTC_VL_DATA_INVALID) && HAVE_DECL_RTC_VL_DATA_INVALID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_VL_DATA_INVALID) == ((1 << 0)), "RTC_VL_DATA_INVALID != (1 << 0)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_VL_DATA_INVALID (1 << 0)
#endif
#if defined(RTC_VL_BACKUP_LOW) || (defined(HAVE_DECL_RTC_VL_BACKUP_LOW) && HAVE_DECL_RTC_VL_BACKUP_LOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_VL_BACKUP_LOW) == ((1 << 1)), "RTC_VL_BACKUP_LOW != (1 << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_VL_BACKUP_LOW (1 << 1)
#endif
#if defined(RTC_VL_BACKUP_EMPTY) || (defined(HAVE_DECL_RTC_VL_BACKUP_EMPTY) && HAVE_DECL_RTC_VL_BACKUP_EMPTY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_VL_BACKUP_EMPTY) == ((1 << 2)), "RTC_VL_BACKUP_EMPTY != (1 << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_VL_BACKUP_EMPTY (1 << 2)
#endif
#if defined(RTC_VL_ACCURACY_LOW) || (defined(HAVE_DECL_RTC_VL_ACCURACY_LOW) && HAVE_DECL_RTC_VL_ACCURACY_LOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_VL_ACCURACY_LOW) == ((1 << 3)), "RTC_VL_ACCURACY_LOW != (1 << 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_VL_ACCURACY_LOW (1 << 3)
#endif
#if defined(RTC_VL_BACKUP_SWITCH) || (defined(HAVE_DECL_RTC_VL_BACKUP_SWITCH) && HAVE_DECL_RTC_VL_BACKUP_SWITCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_VL_BACKUP_SWITCH) == ((1 << 4)), "RTC_VL_BACKUP_SWITCH != (1 << 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_VL_BACKUP_SWITCH (1 << 4)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat rtc_vl_flags[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtc_vl_flags_xdata[] = {
 XLAT(RTC_VL_DATA_INVALID),
 #define XLAT_VAL_0 ((unsigned) (RTC_VL_DATA_INVALID))
 #define XLAT_STR_0 STRINGIFY(RTC_VL_DATA_INVALID)
 XLAT(RTC_VL_BACKUP_LOW),
 #define XLAT_VAL_1 ((unsigned) (RTC_VL_BACKUP_LOW))
 #define XLAT_STR_1 STRINGIFY(RTC_VL_BACKUP_LOW)
 XLAT(RTC_VL_BACKUP_EMPTY),
 #define XLAT_VAL_2 ((unsigned) (RTC_VL_BACKUP_EMPTY))
 #define XLAT_STR_2 STRINGIFY(RTC_VL_BACKUP_EMPTY)
 XLAT(RTC_VL_ACCURACY_LOW),
 #define XLAT_VAL_3 ((unsigned) (RTC_VL_ACCURACY_LOW))
 #define XLAT_STR_3 STRINGIFY(RTC_VL_ACCURACY_LOW)
 XLAT(RTC_VL_BACKUP_SWITCH),
 #define XLAT_VAL_4 ((unsigned) (RTC_VL_BACKUP_SWITCH))
 #define XLAT_STR_4 STRINGIFY(RTC_VL_BACKUP_SWITCH)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat rtc_vl_flags[1] = { {
 .data = rtc_vl_flags_xdata,
 .size = ARRAY_SIZE(rtc_vl_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
