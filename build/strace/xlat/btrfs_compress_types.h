/* Generated by ./src/xlat/gen.sh from ./src/xlat/btrfs_compress_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BTRFS_COMPRESS_NONE) || (defined(HAVE_DECL_BTRFS_COMPRESS_NONE) && HAVE_DECL_BTRFS_COMPRESS_NONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_COMPRESS_NONE) == (0), "BTRFS_COMPRESS_NONE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_COMPRESS_NONE 0
#endif
#if defined(BTRFS_COMPRESS_ZLIB) || (defined(HAVE_DECL_BTRFS_COMPRESS_ZLIB) && HAVE_DECL_BTRFS_COMPRESS_ZLIB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_COMPRESS_ZLIB) == (1), "BTRFS_COMPRESS_ZLIB != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_COMPRESS_ZLIB 1
#endif
#if defined(BTRFS_COMPRESS_LZO) || (defined(HAVE_DECL_BTRFS_COMPRESS_LZO) && HAVE_DECL_BTRFS_COMPRESS_LZO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_COMPRESS_LZO) == (2), "BTRFS_COMPRESS_LZO != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_COMPRESS_LZO 2
#endif
#if defined(BTRFS_COMPRESS_ZSTD) || (defined(HAVE_DECL_BTRFS_COMPRESS_ZSTD) && HAVE_DECL_BTRFS_COMPRESS_ZSTD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BTRFS_COMPRESS_ZSTD) == (3), "BTRFS_COMPRESS_ZSTD != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BTRFS_COMPRESS_ZSTD 3
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat btrfs_compress_types[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data btrfs_compress_types_xdata[] = {
 [BTRFS_COMPRESS_NONE] = XLAT(BTRFS_COMPRESS_NONE),
 #define XLAT_VAL_0 ((unsigned) (BTRFS_COMPRESS_NONE))
 #define XLAT_STR_0 STRINGIFY(BTRFS_COMPRESS_NONE)
 [BTRFS_COMPRESS_ZLIB] = XLAT(BTRFS_COMPRESS_ZLIB),
 #define XLAT_VAL_1 ((unsigned) (BTRFS_COMPRESS_ZLIB))
 #define XLAT_STR_1 STRINGIFY(BTRFS_COMPRESS_ZLIB)
 [BTRFS_COMPRESS_LZO] = XLAT(BTRFS_COMPRESS_LZO),
 #define XLAT_VAL_2 ((unsigned) (BTRFS_COMPRESS_LZO))
 #define XLAT_STR_2 STRINGIFY(BTRFS_COMPRESS_LZO)
 [BTRFS_COMPRESS_ZSTD] = XLAT(BTRFS_COMPRESS_ZSTD),
 #define XLAT_VAL_3 ((unsigned) (BTRFS_COMPRESS_ZSTD))
 #define XLAT_STR_3 STRINGIFY(BTRFS_COMPRESS_ZSTD)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat btrfs_compress_types[1] = { {
 .data = btrfs_compress_types_xdata,
 .size = ARRAY_SIZE(btrfs_compress_types_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
