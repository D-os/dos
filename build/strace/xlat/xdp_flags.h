/* Generated by ./src/xlat/gen.sh from ./src/xlat/xdp_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(XDP_FLAGS_MODES) || (defined(HAVE_DECL_XDP_FLAGS_MODES) && HAVE_DECL_XDP_FLAGS_MODES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XDP_FLAGS_MODES) == (0x0e), "XDP_FLAGS_MODES != 0x0e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XDP_FLAGS_MODES 0x0e
#endif
#if defined(XDP_FLAGS_UPDATE_IF_NOEXIST) || (defined(HAVE_DECL_XDP_FLAGS_UPDATE_IF_NOEXIST) && HAVE_DECL_XDP_FLAGS_UPDATE_IF_NOEXIST)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XDP_FLAGS_UPDATE_IF_NOEXIST) == (0x01), "XDP_FLAGS_UPDATE_IF_NOEXIST != 0x01");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XDP_FLAGS_UPDATE_IF_NOEXIST 0x01
#endif
#if defined(XDP_FLAGS_SKB_MODE) || (defined(HAVE_DECL_XDP_FLAGS_SKB_MODE) && HAVE_DECL_XDP_FLAGS_SKB_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XDP_FLAGS_SKB_MODE) == (0x02), "XDP_FLAGS_SKB_MODE != 0x02");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XDP_FLAGS_SKB_MODE 0x02
#endif
#if defined(XDP_FLAGS_DRV_MODE) || (defined(HAVE_DECL_XDP_FLAGS_DRV_MODE) && HAVE_DECL_XDP_FLAGS_DRV_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XDP_FLAGS_DRV_MODE) == (0x04), "XDP_FLAGS_DRV_MODE != 0x04");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XDP_FLAGS_DRV_MODE 0x04
#endif
#if defined(XDP_FLAGS_HW_MODE) || (defined(HAVE_DECL_XDP_FLAGS_HW_MODE) && HAVE_DECL_XDP_FLAGS_HW_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XDP_FLAGS_HW_MODE) == (0x08), "XDP_FLAGS_HW_MODE != 0x08");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XDP_FLAGS_HW_MODE 0x08
#endif
#if defined(XDP_FLAGS_REPLACE) || (defined(HAVE_DECL_XDP_FLAGS_REPLACE) && HAVE_DECL_XDP_FLAGS_REPLACE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((XDP_FLAGS_REPLACE) == (0x10), "XDP_FLAGS_REPLACE != 0x10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define XDP_FLAGS_REPLACE 0x10
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat xdp_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data xdp_flags_xdata[] = {
 XLAT(XDP_FLAGS_MODES),
 #define XLAT_VAL_0 ((unsigned) (XDP_FLAGS_MODES))
 #define XLAT_STR_0 STRINGIFY(XDP_FLAGS_MODES)
 XLAT(XDP_FLAGS_UPDATE_IF_NOEXIST),
 #define XLAT_VAL_1 ((unsigned) (XDP_FLAGS_UPDATE_IF_NOEXIST))
 #define XLAT_STR_1 STRINGIFY(XDP_FLAGS_UPDATE_IF_NOEXIST)
 XLAT(XDP_FLAGS_SKB_MODE),
 #define XLAT_VAL_2 ((unsigned) (XDP_FLAGS_SKB_MODE))
 #define XLAT_STR_2 STRINGIFY(XDP_FLAGS_SKB_MODE)
 XLAT(XDP_FLAGS_DRV_MODE),
 #define XLAT_VAL_3 ((unsigned) (XDP_FLAGS_DRV_MODE))
 #define XLAT_STR_3 STRINGIFY(XDP_FLAGS_DRV_MODE)
 XLAT(XDP_FLAGS_HW_MODE),
 #define XLAT_VAL_4 ((unsigned) (XDP_FLAGS_HW_MODE))
 #define XLAT_STR_4 STRINGIFY(XDP_FLAGS_HW_MODE)
 XLAT(XDP_FLAGS_REPLACE),
 #define XLAT_VAL_5 ((unsigned) (XDP_FLAGS_REPLACE))
 #define XLAT_STR_5 STRINGIFY(XDP_FLAGS_REPLACE)
};
static
const struct xlat xdp_flags[1] = { {
 .data = xdp_flags_xdata,
 .size = ARRAY_SIZE(xdp_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
