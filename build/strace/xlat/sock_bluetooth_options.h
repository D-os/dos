/* Generated by ./src/xlat/gen.sh from ./src/xlat/sock_bluetooth_options.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BT_SECURITY) || (defined(HAVE_DECL_BT_SECURITY) && HAVE_DECL_BT_SECURITY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BT_SECURITY) == (4), "BT_SECURITY != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BT_SECURITY 4
#endif
#if defined(BT_SECURITY) || (defined(HAVE_DECL_BT_SECURITY) && HAVE_DECL_BT_SECURITY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BT_SECURITY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BT_SECURITY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BT_SECURITY)
#endif
#if defined(BT_DEFER_SETUP) || (defined(HAVE_DECL_BT_DEFER_SETUP) && HAVE_DECL_BT_DEFER_SETUP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BT_DEFER_SETUP) == (7), "BT_DEFER_SETUP != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BT_DEFER_SETUP 7
#endif
#if defined(BT_DEFER_SETUP) || (defined(HAVE_DECL_BT_DEFER_SETUP) && HAVE_DECL_BT_DEFER_SETUP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BT_DEFER_SETUP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BT_DEFER_SETUP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BT_DEFER_SETUP)
#endif
#if defined(BT_FLUSHABLE) || (defined(HAVE_DECL_BT_FLUSHABLE) && HAVE_DECL_BT_FLUSHABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BT_FLUSHABLE) == (8), "BT_FLUSHABLE != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BT_FLUSHABLE 8
#endif
#if defined(BT_FLUSHABLE) || (defined(HAVE_DECL_BT_FLUSHABLE) && HAVE_DECL_BT_FLUSHABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BT_FLUSHABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BT_FLUSHABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BT_FLUSHABLE)
#endif
#if defined(BT_POWER) || (defined(HAVE_DECL_BT_POWER) && HAVE_DECL_BT_POWER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BT_POWER) == (9), "BT_POWER != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BT_POWER 9
#endif
#if defined(BT_POWER) || (defined(HAVE_DECL_BT_POWER) && HAVE_DECL_BT_POWER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BT_POWER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BT_POWER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BT_POWER)
#endif
#if defined(BT_CHANNEL_POLICY) || (defined(HAVE_DECL_BT_CHANNEL_POLICY) && HAVE_DECL_BT_CHANNEL_POLICY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BT_CHANNEL_POLICY) == (10), "BT_CHANNEL_POLICY != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BT_CHANNEL_POLICY 10
#endif
#if defined(BT_CHANNEL_POLICY) || (defined(HAVE_DECL_BT_CHANNEL_POLICY) && HAVE_DECL_BT_CHANNEL_POLICY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BT_CHANNEL_POLICY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BT_CHANNEL_POLICY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BT_CHANNEL_POLICY)
#endif
#if defined(BT_VOICE) || (defined(HAVE_DECL_BT_VOICE) && HAVE_DECL_BT_VOICE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BT_VOICE) == (11), "BT_VOICE != 11");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BT_VOICE 11
#endif
#if defined(BT_VOICE) || (defined(HAVE_DECL_BT_VOICE) && HAVE_DECL_BT_VOICE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BT_VOICE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BT_VOICE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BT_VOICE)
#endif
#if defined(BT_SNDMTU) || (defined(HAVE_DECL_BT_SNDMTU) && HAVE_DECL_BT_SNDMTU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BT_SNDMTU) == (12), "BT_SNDMTU != 12");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BT_SNDMTU 12
#endif
#if defined(BT_SNDMTU) || (defined(HAVE_DECL_BT_SNDMTU) && HAVE_DECL_BT_SNDMTU)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BT_SNDMTU)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BT_SNDMTU"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BT_SNDMTU)
#endif
#if defined(BT_RCVMTU) || (defined(HAVE_DECL_BT_RCVMTU) && HAVE_DECL_BT_RCVMTU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BT_RCVMTU) == (13), "BT_RCVMTU != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BT_RCVMTU 13
#endif
#if defined(BT_RCVMTU) || (defined(HAVE_DECL_BT_RCVMTU) && HAVE_DECL_BT_RCVMTU)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (BT_RCVMTU)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: BT_RCVMTU"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (BT_RCVMTU)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat sock_bluetooth_options in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data sock_bluetooth_options_xdata[] = {
 XLAT(BT_SECURITY),
 #define XLAT_VAL_0 ((unsigned) (BT_SECURITY))
 #define XLAT_STR_0 STRINGIFY(BT_SECURITY)
 XLAT(BT_DEFER_SETUP),
 #define XLAT_VAL_1 ((unsigned) (BT_DEFER_SETUP))
 #define XLAT_STR_1 STRINGIFY(BT_DEFER_SETUP)
 XLAT(BT_FLUSHABLE),
 #define XLAT_VAL_2 ((unsigned) (BT_FLUSHABLE))
 #define XLAT_STR_2 STRINGIFY(BT_FLUSHABLE)
 XLAT(BT_POWER),
 #define XLAT_VAL_3 ((unsigned) (BT_POWER))
 #define XLAT_STR_3 STRINGIFY(BT_POWER)
 XLAT(BT_CHANNEL_POLICY),
 #define XLAT_VAL_4 ((unsigned) (BT_CHANNEL_POLICY))
 #define XLAT_STR_4 STRINGIFY(BT_CHANNEL_POLICY)
 XLAT(BT_VOICE),
 #define XLAT_VAL_5 ((unsigned) (BT_VOICE))
 #define XLAT_STR_5 STRINGIFY(BT_VOICE)
 XLAT(BT_SNDMTU),
 #define XLAT_VAL_6 ((unsigned) (BT_SNDMTU))
 #define XLAT_STR_6 STRINGIFY(BT_SNDMTU)
 XLAT(BT_RCVMTU),
 #define XLAT_VAL_7 ((unsigned) (BT_RCVMTU))
 #define XLAT_STR_7 STRINGIFY(BT_RCVMTU)
};
static
const struct xlat sock_bluetooth_options[1] = { {
 .data = sock_bluetooth_options_xdata,
 .size = ARRAY_SIZE(sock_bluetooth_options_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
