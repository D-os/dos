/* Generated by ./src/xlat/gen.sh from ./src/xlat/routing_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTM_F_NOTIFY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTM_F_NOTIFY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTM_F_NOTIFY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTM_F_CLONED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTM_F_CLONED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTM_F_CLONED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTM_F_EQUALIZE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTM_F_EQUALIZE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTM_F_EQUALIZE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTM_F_PREFIX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTM_F_PREFIX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTM_F_PREFIX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTM_F_LOOKUP_TABLE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTM_F_LOOKUP_TABLE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTM_F_LOOKUP_TABLE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTM_F_FIB_MATCH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTM_F_FIB_MATCH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTM_F_FIB_MATCH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTM_F_OFFLOAD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTM_F_OFFLOAD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTM_F_OFFLOAD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTM_F_TRAP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTM_F_TRAP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTM_F_TRAP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (RTM_F_OFFLOAD_FAILED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: RTM_F_OFFLOAD_FAILED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (RTM_F_OFFLOAD_FAILED)
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat routing_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data routing_flags_xdata[] = {
 XLAT(RTM_F_NOTIFY),
 #define XLAT_VAL_0 ((unsigned) (RTM_F_NOTIFY))
 #define XLAT_STR_0 STRINGIFY(RTM_F_NOTIFY)
 XLAT(RTM_F_CLONED),
 #define XLAT_VAL_1 ((unsigned) (RTM_F_CLONED))
 #define XLAT_STR_1 STRINGIFY(RTM_F_CLONED)
 XLAT(RTM_F_EQUALIZE),
 #define XLAT_VAL_2 ((unsigned) (RTM_F_EQUALIZE))
 #define XLAT_STR_2 STRINGIFY(RTM_F_EQUALIZE)
 XLAT(RTM_F_PREFIX),
 #define XLAT_VAL_3 ((unsigned) (RTM_F_PREFIX))
 #define XLAT_STR_3 STRINGIFY(RTM_F_PREFIX)
 XLAT(RTM_F_LOOKUP_TABLE),
 #define XLAT_VAL_4 ((unsigned) (RTM_F_LOOKUP_TABLE))
 #define XLAT_STR_4 STRINGIFY(RTM_F_LOOKUP_TABLE)
 XLAT(RTM_F_FIB_MATCH),
 #define XLAT_VAL_5 ((unsigned) (RTM_F_FIB_MATCH))
 #define XLAT_STR_5 STRINGIFY(RTM_F_FIB_MATCH)
 XLAT(RTM_F_OFFLOAD),
 #define XLAT_VAL_6 ((unsigned) (RTM_F_OFFLOAD))
 #define XLAT_STR_6 STRINGIFY(RTM_F_OFFLOAD)
 XLAT(RTM_F_TRAP),
 #define XLAT_VAL_7 ((unsigned) (RTM_F_TRAP))
 #define XLAT_STR_7 STRINGIFY(RTM_F_TRAP)
 XLAT(RTM_F_OFFLOAD_FAILED),
 #define XLAT_VAL_8 ((unsigned) (RTM_F_OFFLOAD_FAILED))
 #define XLAT_STR_8 STRINGIFY(RTM_F_OFFLOAD_FAILED)
};
static
const struct xlat routing_flags[1] = { {
 .data = routing_flags_xdata,
 .size = ARRAY_SIZE(routing_flags_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
