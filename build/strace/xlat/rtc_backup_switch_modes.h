/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtc_backup_switch_modes.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(RTC_BSM_DISABLED) || (defined(HAVE_DECL_RTC_BSM_DISABLED) && HAVE_DECL_RTC_BSM_DISABLED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_BSM_DISABLED) == (0), "RTC_BSM_DISABLED != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_BSM_DISABLED 0
#endif
#if defined(RTC_BSM_DIRECT) || (defined(HAVE_DECL_RTC_BSM_DIRECT) && HAVE_DECL_RTC_BSM_DIRECT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_BSM_DIRECT) == (1), "RTC_BSM_DIRECT != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_BSM_DIRECT 1
#endif
#if defined(RTC_BSM_LEVEL) || (defined(HAVE_DECL_RTC_BSM_LEVEL) && HAVE_DECL_RTC_BSM_LEVEL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_BSM_LEVEL) == (2), "RTC_BSM_LEVEL != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_BSM_LEVEL 2
#endif
#if defined(RTC_BSM_STANDBY) || (defined(HAVE_DECL_RTC_BSM_STANDBY) && HAVE_DECL_RTC_BSM_STANDBY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_BSM_STANDBY) == (3), "RTC_BSM_STANDBY != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_BSM_STANDBY 3
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat rtc_backup_switch_modes[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtc_backup_switch_modes_xdata[] = {
 [RTC_BSM_DISABLED] = XLAT(RTC_BSM_DISABLED),
 #define XLAT_VAL_0 ((unsigned) (RTC_BSM_DISABLED))
 #define XLAT_STR_0 STRINGIFY(RTC_BSM_DISABLED)
 [RTC_BSM_DIRECT] = XLAT(RTC_BSM_DIRECT),
 #define XLAT_VAL_1 ((unsigned) (RTC_BSM_DIRECT))
 #define XLAT_STR_1 STRINGIFY(RTC_BSM_DIRECT)
 [RTC_BSM_LEVEL] = XLAT(RTC_BSM_LEVEL),
 #define XLAT_VAL_2 ((unsigned) (RTC_BSM_LEVEL))
 #define XLAT_STR_2 STRINGIFY(RTC_BSM_LEVEL)
 [RTC_BSM_STANDBY] = XLAT(RTC_BSM_STANDBY),
 #define XLAT_VAL_3 ((unsigned) (RTC_BSM_STANDBY))
 #define XLAT_STR_3 STRINGIFY(RTC_BSM_STANDBY)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat rtc_backup_switch_modes[1] = { {
 .data = rtc_backup_switch_modes_xdata,
 .size = ARRAY_SIZE(rtc_backup_switch_modes_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
