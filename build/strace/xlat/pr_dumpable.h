/* Generated by ./src/xlat/gen.sh from ./src/xlat/pr_dumpable.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(SUID_DUMP_DISABLE) || (defined(HAVE_DECL_SUID_DUMP_DISABLE) && HAVE_DECL_SUID_DUMP_DISABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SUID_DUMP_DISABLE) == (0), "SUID_DUMP_DISABLE != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SUID_DUMP_DISABLE 0
#endif
#if defined(SUID_DUMP_USER) || (defined(HAVE_DECL_SUID_DUMP_USER) && HAVE_DECL_SUID_DUMP_USER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SUID_DUMP_USER) == (1), "SUID_DUMP_USER != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SUID_DUMP_USER 1
#endif
#if defined(SUID_DUMP_ROOT) || (defined(HAVE_DECL_SUID_DUMP_ROOT) && HAVE_DECL_SUID_DUMP_ROOT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((SUID_DUMP_ROOT) == (2), "SUID_DUMP_ROOT != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define SUID_DUMP_ROOT 2
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat pr_dumpable in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data pr_dumpable_xdata[] = {

 [SUID_DUMP_DISABLE] = XLAT(SUID_DUMP_DISABLE),
 #define XLAT_VAL_0 ((unsigned) (SUID_DUMP_DISABLE))
 #define XLAT_STR_0 STRINGIFY(SUID_DUMP_DISABLE)
 [SUID_DUMP_USER] = XLAT(SUID_DUMP_USER),
 #define XLAT_VAL_1 ((unsigned) (SUID_DUMP_USER))
 #define XLAT_STR_1 STRINGIFY(SUID_DUMP_USER)
 [SUID_DUMP_ROOT] = XLAT(SUID_DUMP_ROOT),
 #define XLAT_VAL_2 ((unsigned) (SUID_DUMP_ROOT))
 #define XLAT_STR_2 STRINGIFY(SUID_DUMP_ROOT)
};
static
const struct xlat pr_dumpable[1] = { {
 .data = pr_dumpable_xdata,
 .size = ARRAY_SIZE(pr_dumpable_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
