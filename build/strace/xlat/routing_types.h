/* Generated by ./src/xlat/gen.sh from ./src/xlat/routing_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifndef IN_MPERS

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data routing_types_xdata[] = {
 [RTN_UNSPEC] = XLAT(RTN_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (RTN_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(RTN_UNSPEC)
 [RTN_UNICAST] = XLAT(RTN_UNICAST),
 #define XLAT_VAL_1 ((unsigned) (RTN_UNICAST))
 #define XLAT_STR_1 STRINGIFY(RTN_UNICAST)
 [RTN_LOCAL] = XLAT(RTN_LOCAL),
 #define XLAT_VAL_2 ((unsigned) (RTN_LOCAL))
 #define XLAT_STR_2 STRINGIFY(RTN_LOCAL)
 [RTN_BROADCAST] = XLAT(RTN_BROADCAST),
 #define XLAT_VAL_3 ((unsigned) (RTN_BROADCAST))
 #define XLAT_STR_3 STRINGIFY(RTN_BROADCAST)
 [RTN_ANYCAST] = XLAT(RTN_ANYCAST),
 #define XLAT_VAL_4 ((unsigned) (RTN_ANYCAST))
 #define XLAT_STR_4 STRINGIFY(RTN_ANYCAST)
 [RTN_MULTICAST] = XLAT(RTN_MULTICAST),
 #define XLAT_VAL_5 ((unsigned) (RTN_MULTICAST))
 #define XLAT_STR_5 STRINGIFY(RTN_MULTICAST)
 [RTN_BLACKHOLE] = XLAT(RTN_BLACKHOLE),
 #define XLAT_VAL_6 ((unsigned) (RTN_BLACKHOLE))
 #define XLAT_STR_6 STRINGIFY(RTN_BLACKHOLE)
 [RTN_UNREACHABLE] = XLAT(RTN_UNREACHABLE),
 #define XLAT_VAL_7 ((unsigned) (RTN_UNREACHABLE))
 #define XLAT_STR_7 STRINGIFY(RTN_UNREACHABLE)
 [RTN_PROHIBIT] = XLAT(RTN_PROHIBIT),
 #define XLAT_VAL_8 ((unsigned) (RTN_PROHIBIT))
 #define XLAT_STR_8 STRINGIFY(RTN_PROHIBIT)
 [RTN_THROW] = XLAT(RTN_THROW),
 #define XLAT_VAL_9 ((unsigned) (RTN_THROW))
 #define XLAT_STR_9 STRINGIFY(RTN_THROW)
 [RTN_NAT] = XLAT(RTN_NAT),
 #define XLAT_VAL_10 ((unsigned) (RTN_NAT))
 #define XLAT_STR_10 STRINGIFY(RTN_NAT)
 [RTN_XRESOLVE] = XLAT(RTN_XRESOLVE),
 #define XLAT_VAL_11 ((unsigned) (RTN_XRESOLVE))
 #define XLAT_STR_11 STRINGIFY(RTN_XRESOLVE)
};
const struct xlat routing_types[1] = { {
 .data = routing_types_xdata,
 .size = ARRAY_SIZE(routing_types_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
