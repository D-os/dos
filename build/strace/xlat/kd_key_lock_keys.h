/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_key_lock_keys.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(K_SHIFTLOCK) || (defined(HAVE_DECL_K_SHIFTLOCK) && HAVE_DECL_K_SHIFTLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_SHIFTLOCK) == (K(KT_LOCK,KG_SHIFT)), "K_SHIFTLOCK != K(KT_LOCK,KG_SHIFT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_SHIFTLOCK K(KT_LOCK,KG_SHIFT)
#endif
#if defined(K_SHIFTLOCK) || (defined(HAVE_DECL_K_SHIFTLOCK) && HAVE_DECL_K_SHIFTLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_SHIFTLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_SHIFTLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_SHIFTLOCK)
#endif
#if defined(K_ALTGRLOCK) || (defined(HAVE_DECL_K_ALTGRLOCK) && HAVE_DECL_K_ALTGRLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_ALTGRLOCK) == (K(KT_LOCK,KG_ALTGR)), "K_ALTGRLOCK != K(KT_LOCK,KG_ALTGR)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_ALTGRLOCK K(KT_LOCK,KG_ALTGR)
#endif
#if defined(K_ALTGRLOCK) || (defined(HAVE_DECL_K_ALTGRLOCK) && HAVE_DECL_K_ALTGRLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_ALTGRLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_ALTGRLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_ALTGRLOCK)
#endif
#if defined(K_CTRLLOCK) || (defined(HAVE_DECL_K_CTRLLOCK) && HAVE_DECL_K_CTRLLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_CTRLLOCK) == (K(KT_LOCK,KG_CTRL)), "K_CTRLLOCK != K(KT_LOCK,KG_CTRL)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_CTRLLOCK K(KT_LOCK,KG_CTRL)
#endif
#if defined(K_CTRLLOCK) || (defined(HAVE_DECL_K_CTRLLOCK) && HAVE_DECL_K_CTRLLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_CTRLLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_CTRLLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_CTRLLOCK)
#endif
#if defined(K_ALTLOCK) || (defined(HAVE_DECL_K_ALTLOCK) && HAVE_DECL_K_ALTLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_ALTLOCK) == (K(KT_LOCK,KG_ALT)), "K_ALTLOCK != K(KT_LOCK,KG_ALT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_ALTLOCK K(KT_LOCK,KG_ALT)
#endif
#if defined(K_ALTLOCK) || (defined(HAVE_DECL_K_ALTLOCK) && HAVE_DECL_K_ALTLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_ALTLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_ALTLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_ALTLOCK)
#endif
#if defined(K_SHIFTLLOCK) || (defined(HAVE_DECL_K_SHIFTLLOCK) && HAVE_DECL_K_SHIFTLLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_SHIFTLLOCK) == (K(KT_LOCK,KG_SHIFTL)), "K_SHIFTLLOCK != K(KT_LOCK,KG_SHIFTL)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_SHIFTLLOCK K(KT_LOCK,KG_SHIFTL)
#endif
#if defined(K_SHIFTLLOCK) || (defined(HAVE_DECL_K_SHIFTLLOCK) && HAVE_DECL_K_SHIFTLLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_SHIFTLLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_SHIFTLLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_SHIFTLLOCK)
#endif
#if defined(K_SHIFTRLOCK) || (defined(HAVE_DECL_K_SHIFTRLOCK) && HAVE_DECL_K_SHIFTRLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_SHIFTRLOCK) == (K(KT_LOCK,KG_SHIFTR)), "K_SHIFTRLOCK != K(KT_LOCK,KG_SHIFTR)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_SHIFTRLOCK K(KT_LOCK,KG_SHIFTR)
#endif
#if defined(K_SHIFTRLOCK) || (defined(HAVE_DECL_K_SHIFTRLOCK) && HAVE_DECL_K_SHIFTRLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_SHIFTRLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_SHIFTRLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_SHIFTRLOCK)
#endif
#if defined(K_CTRLLLOCK) || (defined(HAVE_DECL_K_CTRLLLOCK) && HAVE_DECL_K_CTRLLLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_CTRLLLOCK) == (K(KT_LOCK,KG_CTRLL)), "K_CTRLLLOCK != K(KT_LOCK,KG_CTRLL)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_CTRLLLOCK K(KT_LOCK,KG_CTRLL)
#endif
#if defined(K_CTRLLLOCK) || (defined(HAVE_DECL_K_CTRLLLOCK) && HAVE_DECL_K_CTRLLLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_CTRLLLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_CTRLLLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_CTRLLLOCK)
#endif
#if defined(K_CTRLRLOCK) || (defined(HAVE_DECL_K_CTRLRLOCK) && HAVE_DECL_K_CTRLRLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_CTRLRLOCK) == (K(KT_LOCK,KG_CTRLR)), "K_CTRLRLOCK != K(KT_LOCK,KG_CTRLR)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_CTRLRLOCK K(KT_LOCK,KG_CTRLR)
#endif
#if defined(K_CTRLRLOCK) || (defined(HAVE_DECL_K_CTRLRLOCK) && HAVE_DECL_K_CTRLRLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_CTRLRLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_CTRLRLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_CTRLRLOCK)
#endif
#if defined(K_CAPSSHIFTLOCK) || (defined(HAVE_DECL_K_CAPSSHIFTLOCK) && HAVE_DECL_K_CAPSSHIFTLOCK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((K_CAPSSHIFTLOCK) == (K(KT_LOCK,KG_CAPSSHIFT)), "K_CAPSSHIFTLOCK != K(KT_LOCK,KG_CAPSSHIFT)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define K_CAPSSHIFTLOCK K(KT_LOCK,KG_CAPSSHIFT)
#endif
#if defined(K_CAPSSHIFTLOCK) || (defined(HAVE_DECL_K_CAPSSHIFTLOCK) && HAVE_DECL_K_CAPSSHIFTLOCK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (K_CAPSSHIFTLOCK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: K_CAPSSHIFTLOCK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (K_CAPSSHIFTLOCK)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat kd_key_lock_keys in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_key_lock_keys_xdata[] = {
 XLAT(K_SHIFTLOCK),
 #define XLAT_VAL_0 ((unsigned) (K_SHIFTLOCK))
 #define XLAT_STR_0 STRINGIFY(K_SHIFTLOCK)
 XLAT(K_ALTGRLOCK),
 #define XLAT_VAL_1 ((unsigned) (K_ALTGRLOCK))
 #define XLAT_STR_1 STRINGIFY(K_ALTGRLOCK)
 XLAT(K_CTRLLOCK),
 #define XLAT_VAL_2 ((unsigned) (K_CTRLLOCK))
 #define XLAT_STR_2 STRINGIFY(K_CTRLLOCK)
 XLAT(K_ALTLOCK),
 #define XLAT_VAL_3 ((unsigned) (K_ALTLOCK))
 #define XLAT_STR_3 STRINGIFY(K_ALTLOCK)
 XLAT(K_SHIFTLLOCK),
 #define XLAT_VAL_4 ((unsigned) (K_SHIFTLLOCK))
 #define XLAT_STR_4 STRINGIFY(K_SHIFTLLOCK)
 XLAT(K_SHIFTRLOCK),
 #define XLAT_VAL_5 ((unsigned) (K_SHIFTRLOCK))
 #define XLAT_STR_5 STRINGIFY(K_SHIFTRLOCK)
 XLAT(K_CTRLLLOCK),
 #define XLAT_VAL_6 ((unsigned) (K_CTRLLLOCK))
 #define XLAT_STR_6 STRINGIFY(K_CTRLLLOCK)
 XLAT(K_CTRLRLOCK),
 #define XLAT_VAL_7 ((unsigned) (K_CTRLRLOCK))
 #define XLAT_STR_7 STRINGIFY(K_CTRLRLOCK)
 XLAT(K_CAPSSHIFTLOCK),
 #define XLAT_VAL_8 ((unsigned) (K_CAPSSHIFTLOCK))
 #define XLAT_STR_8 STRINGIFY(K_CAPSSHIFTLOCK)
};
static
const struct xlat kd_key_lock_keys[1] = { {
 .data = kd_key_lock_keys_xdata,
 .size = ARRAY_SIZE(kd_key_lock_keys_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
