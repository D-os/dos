/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtnl_ip6mra_creport_attr.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IP6MRA_CREPORT_UNSPEC) == (0), "IP6MRA_CREPORT_UNSPEC != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IP6MRA_CREPORT_MSGTYPE) == (1), "IP6MRA_CREPORT_MSGTYPE != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IP6MRA_CREPORT_MIF_ID) == (2), "IP6MRA_CREPORT_MIF_ID != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IP6MRA_CREPORT_SRC_ADDR) == (3), "IP6MRA_CREPORT_SRC_ADDR != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IP6MRA_CREPORT_DST_ADDR) == (4), "IP6MRA_CREPORT_DST_ADDR != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((IP6MRA_CREPORT_PKT) == (5), "IP6MRA_CREPORT_PKT != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat rtnl_ip6mra_creport_attr in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtnl_ip6mra_creport_attr_xdata[] = {
 [IP6MRA_CREPORT_UNSPEC] = XLAT(IP6MRA_CREPORT_UNSPEC),
 #define XLAT_VAL_0 ((unsigned) (IP6MRA_CREPORT_UNSPEC))
 #define XLAT_STR_0 STRINGIFY(IP6MRA_CREPORT_UNSPEC)
 [IP6MRA_CREPORT_MSGTYPE] = XLAT(IP6MRA_CREPORT_MSGTYPE),
 #define XLAT_VAL_1 ((unsigned) (IP6MRA_CREPORT_MSGTYPE))
 #define XLAT_STR_1 STRINGIFY(IP6MRA_CREPORT_MSGTYPE)
 [IP6MRA_CREPORT_MIF_ID] = XLAT(IP6MRA_CREPORT_MIF_ID),
 #define XLAT_VAL_2 ((unsigned) (IP6MRA_CREPORT_MIF_ID))
 #define XLAT_STR_2 STRINGIFY(IP6MRA_CREPORT_MIF_ID)
 [IP6MRA_CREPORT_SRC_ADDR] = XLAT(IP6MRA_CREPORT_SRC_ADDR),
 #define XLAT_VAL_3 ((unsigned) (IP6MRA_CREPORT_SRC_ADDR))
 #define XLAT_STR_3 STRINGIFY(IP6MRA_CREPORT_SRC_ADDR)
 [IP6MRA_CREPORT_DST_ADDR] = XLAT(IP6MRA_CREPORT_DST_ADDR),
 #define XLAT_VAL_4 ((unsigned) (IP6MRA_CREPORT_DST_ADDR))
 #define XLAT_STR_4 STRINGIFY(IP6MRA_CREPORT_DST_ADDR)
 [IP6MRA_CREPORT_PKT] = XLAT(IP6MRA_CREPORT_PKT),
 #define XLAT_VAL_5 ((unsigned) (IP6MRA_CREPORT_PKT))
 #define XLAT_STR_5 STRINGIFY(IP6MRA_CREPORT_PKT)
};
static
const struct xlat rtnl_ip6mra_creport_attr[1] = { {
 .data = rtnl_ip6mra_creport_attr_xdata,
 .size = ARRAY_SIZE(rtnl_ip6mra_creport_attr_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
