/* Generated by ./src/xlat/gen.sh from ./src/xlat/nt_descriptor_types.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(NT_PRSTATUS) || (defined(HAVE_DECL_NT_PRSTATUS) && HAVE_DECL_NT_PRSTATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PRSTATUS) == (1), "NT_PRSTATUS != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PRSTATUS 1
#endif
#if defined(NT_PRSTATUS) || (defined(HAVE_DECL_NT_PRSTATUS) && HAVE_DECL_NT_PRSTATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PRSTATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PRSTATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PRSTATUS)
#endif
#if defined(NT_FPREGSET) || (defined(HAVE_DECL_NT_FPREGSET) && HAVE_DECL_NT_FPREGSET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_FPREGSET) == (2), "NT_FPREGSET != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_FPREGSET 2
#endif
#if defined(NT_FPREGSET) || (defined(HAVE_DECL_NT_FPREGSET) && HAVE_DECL_NT_FPREGSET)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_FPREGSET)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_FPREGSET"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_FPREGSET)
#endif
#if defined(NT_PRPSINFO) || (defined(HAVE_DECL_NT_PRPSINFO) && HAVE_DECL_NT_PRPSINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PRPSINFO) == (3), "NT_PRPSINFO != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PRPSINFO 3
#endif
#if defined(NT_PRPSINFO) || (defined(HAVE_DECL_NT_PRPSINFO) && HAVE_DECL_NT_PRPSINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PRPSINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PRPSINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PRPSINFO)
#endif
#if defined(NT_PRXREG) || (defined(HAVE_DECL_NT_PRXREG) && HAVE_DECL_NT_PRXREG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PRXREG) == (4), "NT_PRXREG != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PRXREG 4
#endif
#if defined(NT_PRXREG) || (defined(HAVE_DECL_NT_PRXREG) && HAVE_DECL_NT_PRXREG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PRXREG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PRXREG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PRXREG)
#endif
#if defined(NT_PLATFORM) || (defined(HAVE_DECL_NT_PLATFORM) && HAVE_DECL_NT_PLATFORM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PLATFORM) == (5), "NT_PLATFORM != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PLATFORM 5
#endif
#if defined(NT_PLATFORM) || (defined(HAVE_DECL_NT_PLATFORM) && HAVE_DECL_NT_PLATFORM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PLATFORM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PLATFORM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PLATFORM)
#endif
#if defined(NT_AUXV) || (defined(HAVE_DECL_NT_AUXV) && HAVE_DECL_NT_AUXV)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_AUXV) == (6), "NT_AUXV != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_AUXV 6
#endif
#if defined(NT_AUXV) || (defined(HAVE_DECL_NT_AUXV) && HAVE_DECL_NT_AUXV)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_AUXV)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_AUXV"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_AUXV)
#endif
#if defined(NT_GWINDOWS) || (defined(HAVE_DECL_NT_GWINDOWS) && HAVE_DECL_NT_GWINDOWS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_GWINDOWS) == (7), "NT_GWINDOWS != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_GWINDOWS 7
#endif
#if defined(NT_GWINDOWS) || (defined(HAVE_DECL_NT_GWINDOWS) && HAVE_DECL_NT_GWINDOWS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_GWINDOWS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_GWINDOWS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_GWINDOWS)
#endif
#if defined(NT_ASRS) || (defined(HAVE_DECL_NT_ASRS) && HAVE_DECL_NT_ASRS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ASRS) == (8), "NT_ASRS != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ASRS 8
#endif
#if defined(NT_ASRS) || (defined(HAVE_DECL_NT_ASRS) && HAVE_DECL_NT_ASRS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ASRS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ASRS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ASRS)
#endif
#if defined(NT_PSTATUS) || (defined(HAVE_DECL_NT_PSTATUS) && HAVE_DECL_NT_PSTATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PSTATUS) == (10), "NT_PSTATUS != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PSTATUS 10
#endif
#if defined(NT_PSTATUS) || (defined(HAVE_DECL_NT_PSTATUS) && HAVE_DECL_NT_PSTATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PSTATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PSTATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PSTATUS)
#endif
#if defined(NT_PSINFO) || (defined(HAVE_DECL_NT_PSINFO) && HAVE_DECL_NT_PSINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PSINFO) == (13), "NT_PSINFO != 13");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PSINFO 13
#endif
#if defined(NT_PSINFO) || (defined(HAVE_DECL_NT_PSINFO) && HAVE_DECL_NT_PSINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PSINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PSINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PSINFO)
#endif
#if defined(NT_PRCRED) || (defined(HAVE_DECL_NT_PRCRED) && HAVE_DECL_NT_PRCRED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PRCRED) == (14), "NT_PRCRED != 14");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PRCRED 14
#endif
#if defined(NT_PRCRED) || (defined(HAVE_DECL_NT_PRCRED) && HAVE_DECL_NT_PRCRED)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PRCRED)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PRCRED"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PRCRED)
#endif
#if defined(NT_UTSNAME) || (defined(HAVE_DECL_NT_UTSNAME) && HAVE_DECL_NT_UTSNAME)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_UTSNAME) == (15), "NT_UTSNAME != 15");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_UTSNAME 15
#endif
#if defined(NT_UTSNAME) || (defined(HAVE_DECL_NT_UTSNAME) && HAVE_DECL_NT_UTSNAME)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_UTSNAME)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_UTSNAME"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_UTSNAME)
#endif
#if defined(NT_LWPSTATUS) || (defined(HAVE_DECL_NT_LWPSTATUS) && HAVE_DECL_NT_LWPSTATUS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_LWPSTATUS) == (16), "NT_LWPSTATUS != 16");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_LWPSTATUS 16
#endif
#if defined(NT_LWPSTATUS) || (defined(HAVE_DECL_NT_LWPSTATUS) && HAVE_DECL_NT_LWPSTATUS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_LWPSTATUS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_LWPSTATUS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_LWPSTATUS)
#endif
#if defined(NT_LWPSINFO) || (defined(HAVE_DECL_NT_LWPSINFO) && HAVE_DECL_NT_LWPSINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_LWPSINFO) == (17), "NT_LWPSINFO != 17");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_LWPSINFO 17
#endif
#if defined(NT_LWPSINFO) || (defined(HAVE_DECL_NT_LWPSINFO) && HAVE_DECL_NT_LWPSINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_LWPSINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_LWPSINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_LWPSINFO)
#endif
#if defined(NT_PRFPXREG) || (defined(HAVE_DECL_NT_PRFPXREG) && HAVE_DECL_NT_PRFPXREG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PRFPXREG) == (20), "NT_PRFPXREG != 20");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PRFPXREG 20
#endif
#if defined(NT_PRFPXREG) || (defined(HAVE_DECL_NT_PRFPXREG) && HAVE_DECL_NT_PRFPXREG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PRFPXREG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PRFPXREG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PRFPXREG)
#endif
#if defined(NT_PPC_VMX) || (defined(HAVE_DECL_NT_PPC_VMX) && HAVE_DECL_NT_PPC_VMX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_VMX) == (0x100), "NT_PPC_VMX != 0x100");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_VMX 0x100
#endif
#if defined(NT_PPC_VMX) || (defined(HAVE_DECL_NT_PPC_VMX) && HAVE_DECL_NT_PPC_VMX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_VMX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_VMX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_VMX)
#endif
#if defined(NT_PPC_SPE) || (defined(HAVE_DECL_NT_PPC_SPE) && HAVE_DECL_NT_PPC_SPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_SPE) == (0x101), "NT_PPC_SPE != 0x101");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_SPE 0x101
#endif
#if defined(NT_PPC_SPE) || (defined(HAVE_DECL_NT_PPC_SPE) && HAVE_DECL_NT_PPC_SPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_SPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_SPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_SPE)
#endif
#if defined(NT_PPC_VSX) || (defined(HAVE_DECL_NT_PPC_VSX) && HAVE_DECL_NT_PPC_VSX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_VSX) == (0x102), "NT_PPC_VSX != 0x102");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_VSX 0x102
#endif
#if defined(NT_PPC_VSX) || (defined(HAVE_DECL_NT_PPC_VSX) && HAVE_DECL_NT_PPC_VSX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_VSX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_VSX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_VSX)
#endif
#if defined(NT_PPC_TAR) || (defined(HAVE_DECL_NT_PPC_TAR) && HAVE_DECL_NT_PPC_TAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_TAR) == (0x103), "NT_PPC_TAR != 0x103");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_TAR 0x103
#endif
#if defined(NT_PPC_TAR) || (defined(HAVE_DECL_NT_PPC_TAR) && HAVE_DECL_NT_PPC_TAR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_TAR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_TAR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_TAR)
#endif
#if defined(NT_PPC_PPR) || (defined(HAVE_DECL_NT_PPC_PPR) && HAVE_DECL_NT_PPC_PPR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_PPR) == (0x104), "NT_PPC_PPR != 0x104");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_PPR 0x104
#endif
#if defined(NT_PPC_PPR) || (defined(HAVE_DECL_NT_PPC_PPR) && HAVE_DECL_NT_PPC_PPR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_PPR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_PPR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_PPR)
#endif
#if defined(NT_PPC_DSCR) || (defined(HAVE_DECL_NT_PPC_DSCR) && HAVE_DECL_NT_PPC_DSCR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_DSCR) == (0x105), "NT_PPC_DSCR != 0x105");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_DSCR 0x105
#endif
#if defined(NT_PPC_DSCR) || (defined(HAVE_DECL_NT_PPC_DSCR) && HAVE_DECL_NT_PPC_DSCR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_DSCR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_DSCR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_DSCR)
#endif
#if defined(NT_PPC_EBB) || (defined(HAVE_DECL_NT_PPC_EBB) && HAVE_DECL_NT_PPC_EBB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_EBB) == (0x106), "NT_PPC_EBB != 0x106");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_EBB 0x106
#endif
#if defined(NT_PPC_EBB) || (defined(HAVE_DECL_NT_PPC_EBB) && HAVE_DECL_NT_PPC_EBB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_EBB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_EBB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_EBB)
#endif
#if defined(NT_PPC_PMU) || (defined(HAVE_DECL_NT_PPC_PMU) && HAVE_DECL_NT_PPC_PMU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_PMU) == (0x107), "NT_PPC_PMU != 0x107");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_PMU 0x107
#endif
#if defined(NT_PPC_PMU) || (defined(HAVE_DECL_NT_PPC_PMU) && HAVE_DECL_NT_PPC_PMU)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_PMU)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_PMU"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_PMU)
#endif
#if defined(NT_PPC_TM_CGPR) || (defined(HAVE_DECL_NT_PPC_TM_CGPR) && HAVE_DECL_NT_PPC_TM_CGPR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_TM_CGPR) == (0x108), "NT_PPC_TM_CGPR != 0x108");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_TM_CGPR 0x108
#endif
#if defined(NT_PPC_TM_CGPR) || (defined(HAVE_DECL_NT_PPC_TM_CGPR) && HAVE_DECL_NT_PPC_TM_CGPR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_TM_CGPR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_TM_CGPR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_TM_CGPR)
#endif
#if defined(NT_PPC_TM_CFPR) || (defined(HAVE_DECL_NT_PPC_TM_CFPR) && HAVE_DECL_NT_PPC_TM_CFPR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_TM_CFPR) == (0x109), "NT_PPC_TM_CFPR != 0x109");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_TM_CFPR 0x109
#endif
#if defined(NT_PPC_TM_CFPR) || (defined(HAVE_DECL_NT_PPC_TM_CFPR) && HAVE_DECL_NT_PPC_TM_CFPR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_TM_CFPR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_TM_CFPR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_TM_CFPR)
#endif
#if defined(NT_PPC_TM_CVMX) || (defined(HAVE_DECL_NT_PPC_TM_CVMX) && HAVE_DECL_NT_PPC_TM_CVMX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_TM_CVMX) == (0x10a), "NT_PPC_TM_CVMX != 0x10a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_TM_CVMX 0x10a
#endif
#if defined(NT_PPC_TM_CVMX) || (defined(HAVE_DECL_NT_PPC_TM_CVMX) && HAVE_DECL_NT_PPC_TM_CVMX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_TM_CVMX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_TM_CVMX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_TM_CVMX)
#endif
#if defined(NT_PPC_TM_CVSX) || (defined(HAVE_DECL_NT_PPC_TM_CVSX) && HAVE_DECL_NT_PPC_TM_CVSX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_TM_CVSX) == (0x10b), "NT_PPC_TM_CVSX != 0x10b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_TM_CVSX 0x10b
#endif
#if defined(NT_PPC_TM_CVSX) || (defined(HAVE_DECL_NT_PPC_TM_CVSX) && HAVE_DECL_NT_PPC_TM_CVSX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_TM_CVSX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_TM_CVSX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_TM_CVSX)
#endif
#if defined(NT_PPC_TM_SPR) || (defined(HAVE_DECL_NT_PPC_TM_SPR) && HAVE_DECL_NT_PPC_TM_SPR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_TM_SPR) == (0x10c), "NT_PPC_TM_SPR != 0x10c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_TM_SPR 0x10c
#endif
#if defined(NT_PPC_TM_SPR) || (defined(HAVE_DECL_NT_PPC_TM_SPR) && HAVE_DECL_NT_PPC_TM_SPR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_TM_SPR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_TM_SPR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_TM_SPR)
#endif
#if defined(NT_PPC_TM_CTAR) || (defined(HAVE_DECL_NT_PPC_TM_CTAR) && HAVE_DECL_NT_PPC_TM_CTAR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_TM_CTAR) == (0x10d), "NT_PPC_TM_CTAR != 0x10d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_TM_CTAR 0x10d
#endif
#if defined(NT_PPC_TM_CTAR) || (defined(HAVE_DECL_NT_PPC_TM_CTAR) && HAVE_DECL_NT_PPC_TM_CTAR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_TM_CTAR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_TM_CTAR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_TM_CTAR)
#endif
#if defined(NT_PPC_TM_CPPR) || (defined(HAVE_DECL_NT_PPC_TM_CPPR) && HAVE_DECL_NT_PPC_TM_CPPR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_TM_CPPR) == (0x10e), "NT_PPC_TM_CPPR != 0x10e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_TM_CPPR 0x10e
#endif
#if defined(NT_PPC_TM_CPPR) || (defined(HAVE_DECL_NT_PPC_TM_CPPR) && HAVE_DECL_NT_PPC_TM_CPPR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_TM_CPPR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_TM_CPPR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_TM_CPPR)
#endif
#if defined(NT_PPC_TM_CDSCR) || (defined(HAVE_DECL_NT_PPC_TM_CDSCR) && HAVE_DECL_NT_PPC_TM_CDSCR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_TM_CDSCR) == (0x10f), "NT_PPC_TM_CDSCR != 0x10f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_TM_CDSCR 0x10f
#endif
#if defined(NT_PPC_TM_CDSCR) || (defined(HAVE_DECL_NT_PPC_TM_CDSCR) && HAVE_DECL_NT_PPC_TM_CDSCR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_TM_CDSCR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_TM_CDSCR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_TM_CDSCR)
#endif
#if defined(NT_PPC_PKEY) || (defined(HAVE_DECL_NT_PPC_PKEY) && HAVE_DECL_NT_PPC_PKEY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PPC_PKEY) == (0x110), "NT_PPC_PKEY != 0x110");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PPC_PKEY 0x110
#endif
#if defined(NT_PPC_PKEY) || (defined(HAVE_DECL_NT_PPC_PKEY) && HAVE_DECL_NT_PPC_PKEY)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PPC_PKEY)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PPC_PKEY"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PPC_PKEY)
#endif
#if defined(NT_386_TLS) || (defined(HAVE_DECL_NT_386_TLS) && HAVE_DECL_NT_386_TLS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_386_TLS) == (0x200), "NT_386_TLS != 0x200");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_386_TLS 0x200
#endif
#if defined(NT_386_TLS) || (defined(HAVE_DECL_NT_386_TLS) && HAVE_DECL_NT_386_TLS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_386_TLS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_386_TLS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_386_TLS)
#endif
#if defined(NT_386_IOPERM) || (defined(HAVE_DECL_NT_386_IOPERM) && HAVE_DECL_NT_386_IOPERM)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_386_IOPERM) == (0x201), "NT_386_IOPERM != 0x201");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_386_IOPERM 0x201
#endif
#if defined(NT_386_IOPERM) || (defined(HAVE_DECL_NT_386_IOPERM) && HAVE_DECL_NT_386_IOPERM)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_386_IOPERM)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_386_IOPERM"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_386_IOPERM)
#endif
#if defined(NT_X86_XSTATE) || (defined(HAVE_DECL_NT_X86_XSTATE) && HAVE_DECL_NT_X86_XSTATE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_X86_XSTATE) == (0x202), "NT_X86_XSTATE != 0x202");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_X86_XSTATE 0x202
#endif
#if defined(NT_X86_XSTATE) || (defined(HAVE_DECL_NT_X86_XSTATE) && HAVE_DECL_NT_X86_XSTATE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_X86_XSTATE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_X86_XSTATE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_X86_XSTATE)
#endif
#if defined(NT_S390_HIGH_GPRS) || (defined(HAVE_DECL_NT_S390_HIGH_GPRS) && HAVE_DECL_NT_S390_HIGH_GPRS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_HIGH_GPRS) == (0x300), "NT_S390_HIGH_GPRS != 0x300");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_HIGH_GPRS 0x300
#endif
#if defined(NT_S390_HIGH_GPRS) || (defined(HAVE_DECL_NT_S390_HIGH_GPRS) && HAVE_DECL_NT_S390_HIGH_GPRS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_HIGH_GPRS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_HIGH_GPRS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_HIGH_GPRS)
#endif
#if defined(NT_S390_TIMER) || (defined(HAVE_DECL_NT_S390_TIMER) && HAVE_DECL_NT_S390_TIMER)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_TIMER) == (0x301), "NT_S390_TIMER != 0x301");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_TIMER 0x301
#endif
#if defined(NT_S390_TIMER) || (defined(HAVE_DECL_NT_S390_TIMER) && HAVE_DECL_NT_S390_TIMER)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_TIMER)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_TIMER"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_TIMER)
#endif
#if defined(NT_S390_TODCMP) || (defined(HAVE_DECL_NT_S390_TODCMP) && HAVE_DECL_NT_S390_TODCMP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_TODCMP) == (0x302), "NT_S390_TODCMP != 0x302");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_TODCMP 0x302
#endif
#if defined(NT_S390_TODCMP) || (defined(HAVE_DECL_NT_S390_TODCMP) && HAVE_DECL_NT_S390_TODCMP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_TODCMP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_TODCMP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_TODCMP)
#endif
#if defined(NT_S390_TODPREG) || (defined(HAVE_DECL_NT_S390_TODPREG) && HAVE_DECL_NT_S390_TODPREG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_TODPREG) == (0x303), "NT_S390_TODPREG != 0x303");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_TODPREG 0x303
#endif
#if defined(NT_S390_TODPREG) || (defined(HAVE_DECL_NT_S390_TODPREG) && HAVE_DECL_NT_S390_TODPREG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_TODPREG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_TODPREG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_TODPREG)
#endif
#if defined(NT_S390_CTRS) || (defined(HAVE_DECL_NT_S390_CTRS) && HAVE_DECL_NT_S390_CTRS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_CTRS) == (0x304), "NT_S390_CTRS != 0x304");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_CTRS 0x304
#endif
#if defined(NT_S390_CTRS) || (defined(HAVE_DECL_NT_S390_CTRS) && HAVE_DECL_NT_S390_CTRS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_CTRS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_CTRS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_CTRS)
#endif
#if defined(NT_S390_PREFIX) || (defined(HAVE_DECL_NT_S390_PREFIX) && HAVE_DECL_NT_S390_PREFIX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_PREFIX) == (0x305), "NT_S390_PREFIX != 0x305");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_PREFIX 0x305
#endif
#if defined(NT_S390_PREFIX) || (defined(HAVE_DECL_NT_S390_PREFIX) && HAVE_DECL_NT_S390_PREFIX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_PREFIX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_PREFIX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_PREFIX)
#endif
#if defined(NT_S390_LAST_BREAK) || (defined(HAVE_DECL_NT_S390_LAST_BREAK) && HAVE_DECL_NT_S390_LAST_BREAK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_LAST_BREAK) == (0x306), "NT_S390_LAST_BREAK != 0x306");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_LAST_BREAK 0x306
#endif
#if defined(NT_S390_LAST_BREAK) || (defined(HAVE_DECL_NT_S390_LAST_BREAK) && HAVE_DECL_NT_S390_LAST_BREAK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_LAST_BREAK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_LAST_BREAK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_LAST_BREAK)
#endif
#if defined(NT_S390_SYSTEM_CALL) || (defined(HAVE_DECL_NT_S390_SYSTEM_CALL) && HAVE_DECL_NT_S390_SYSTEM_CALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_SYSTEM_CALL) == (0x307), "NT_S390_SYSTEM_CALL != 0x307");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_SYSTEM_CALL 0x307
#endif
#if defined(NT_S390_SYSTEM_CALL) || (defined(HAVE_DECL_NT_S390_SYSTEM_CALL) && HAVE_DECL_NT_S390_SYSTEM_CALL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_SYSTEM_CALL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_SYSTEM_CALL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_SYSTEM_CALL)
#endif
#if defined(NT_S390_TDB) || (defined(HAVE_DECL_NT_S390_TDB) && HAVE_DECL_NT_S390_TDB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_TDB) == (0x308), "NT_S390_TDB != 0x308");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_TDB 0x308
#endif
#if defined(NT_S390_TDB) || (defined(HAVE_DECL_NT_S390_TDB) && HAVE_DECL_NT_S390_TDB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_TDB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_TDB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_TDB)
#endif
#if defined(NT_S390_VXRS_LOW) || (defined(HAVE_DECL_NT_S390_VXRS_LOW) && HAVE_DECL_NT_S390_VXRS_LOW)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_VXRS_LOW) == (0x309), "NT_S390_VXRS_LOW != 0x309");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_VXRS_LOW 0x309
#endif
#if defined(NT_S390_VXRS_LOW) || (defined(HAVE_DECL_NT_S390_VXRS_LOW) && HAVE_DECL_NT_S390_VXRS_LOW)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_VXRS_LOW)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_VXRS_LOW"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_VXRS_LOW)
#endif
#if defined(NT_S390_VXRS_HIGH) || (defined(HAVE_DECL_NT_S390_VXRS_HIGH) && HAVE_DECL_NT_S390_VXRS_HIGH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_VXRS_HIGH) == (0x30a), "NT_S390_VXRS_HIGH != 0x30a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_VXRS_HIGH 0x30a
#endif
#if defined(NT_S390_VXRS_HIGH) || (defined(HAVE_DECL_NT_S390_VXRS_HIGH) && HAVE_DECL_NT_S390_VXRS_HIGH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_VXRS_HIGH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_VXRS_HIGH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_VXRS_HIGH)
#endif
#if defined(NT_S390_GS_CB) || (defined(HAVE_DECL_NT_S390_GS_CB) && HAVE_DECL_NT_S390_GS_CB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_GS_CB) == (0x30b), "NT_S390_GS_CB != 0x30b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_GS_CB 0x30b
#endif
#if defined(NT_S390_GS_CB) || (defined(HAVE_DECL_NT_S390_GS_CB) && HAVE_DECL_NT_S390_GS_CB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_GS_CB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_GS_CB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_GS_CB)
#endif
#if defined(NT_S390_GS_BC) || (defined(HAVE_DECL_NT_S390_GS_BC) && HAVE_DECL_NT_S390_GS_BC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_GS_BC) == (0x30c), "NT_S390_GS_BC != 0x30c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_GS_BC 0x30c
#endif
#if defined(NT_S390_GS_BC) || (defined(HAVE_DECL_NT_S390_GS_BC) && HAVE_DECL_NT_S390_GS_BC)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_GS_BC)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_GS_BC"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_GS_BC)
#endif
#if defined(NT_S390_RI_CB) || (defined(HAVE_DECL_NT_S390_RI_CB) && HAVE_DECL_NT_S390_RI_CB)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_RI_CB) == (0x30d), "NT_S390_RI_CB != 0x30d");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_RI_CB 0x30d
#endif
#if defined(NT_S390_RI_CB) || (defined(HAVE_DECL_NT_S390_RI_CB) && HAVE_DECL_NT_S390_RI_CB)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_RI_CB)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_RI_CB"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_RI_CB)
#endif
#if defined(NT_S390_PV_CPU_DATA) || (defined(HAVE_DECL_NT_S390_PV_CPU_DATA) && HAVE_DECL_NT_S390_PV_CPU_DATA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_S390_PV_CPU_DATA) == (0x30e), "NT_S390_PV_CPU_DATA != 0x30e");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_S390_PV_CPU_DATA 0x30e
#endif
#if defined(NT_S390_PV_CPU_DATA) || (defined(HAVE_DECL_NT_S390_PV_CPU_DATA) && HAVE_DECL_NT_S390_PV_CPU_DATA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_S390_PV_CPU_DATA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_S390_PV_CPU_DATA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_S390_PV_CPU_DATA)
#endif
#if defined(NT_ARM_VFP) || (defined(HAVE_DECL_NT_ARM_VFP) && HAVE_DECL_NT_ARM_VFP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_VFP) == (0x400), "NT_ARM_VFP != 0x400");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_VFP 0x400
#endif
#if defined(NT_ARM_VFP) || (defined(HAVE_DECL_NT_ARM_VFP) && HAVE_DECL_NT_ARM_VFP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_VFP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_VFP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_VFP)
#endif
#if defined(NT_ARM_TLS) || (defined(HAVE_DECL_NT_ARM_TLS) && HAVE_DECL_NT_ARM_TLS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_TLS) == (0x401), "NT_ARM_TLS != 0x401");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_TLS 0x401
#endif
#if defined(NT_ARM_TLS) || (defined(HAVE_DECL_NT_ARM_TLS) && HAVE_DECL_NT_ARM_TLS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_TLS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_TLS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_TLS)
#endif
#if defined(NT_ARM_HW_BREAK) || (defined(HAVE_DECL_NT_ARM_HW_BREAK) && HAVE_DECL_NT_ARM_HW_BREAK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_HW_BREAK) == (0x402), "NT_ARM_HW_BREAK != 0x402");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_HW_BREAK 0x402
#endif
#if defined(NT_ARM_HW_BREAK) || (defined(HAVE_DECL_NT_ARM_HW_BREAK) && HAVE_DECL_NT_ARM_HW_BREAK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_HW_BREAK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_HW_BREAK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_HW_BREAK)
#endif
#if defined(NT_ARM_HW_WATCH) || (defined(HAVE_DECL_NT_ARM_HW_WATCH) && HAVE_DECL_NT_ARM_HW_WATCH)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_HW_WATCH) == (0x403), "NT_ARM_HW_WATCH != 0x403");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_HW_WATCH 0x403
#endif
#if defined(NT_ARM_HW_WATCH) || (defined(HAVE_DECL_NT_ARM_HW_WATCH) && HAVE_DECL_NT_ARM_HW_WATCH)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_HW_WATCH)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_HW_WATCH"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_HW_WATCH)
#endif
#if defined(NT_ARM_SYSTEM_CALL) || (defined(HAVE_DECL_NT_ARM_SYSTEM_CALL) && HAVE_DECL_NT_ARM_SYSTEM_CALL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_SYSTEM_CALL) == (0x404), "NT_ARM_SYSTEM_CALL != 0x404");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_SYSTEM_CALL 0x404
#endif
#if defined(NT_ARM_SYSTEM_CALL) || (defined(HAVE_DECL_NT_ARM_SYSTEM_CALL) && HAVE_DECL_NT_ARM_SYSTEM_CALL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_SYSTEM_CALL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_SYSTEM_CALL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_SYSTEM_CALL)
#endif
#if defined(NT_ARM_SVE) || (defined(HAVE_DECL_NT_ARM_SVE) && HAVE_DECL_NT_ARM_SVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_SVE) == (0x405), "NT_ARM_SVE != 0x405");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_SVE 0x405
#endif
#if defined(NT_ARM_SVE) || (defined(HAVE_DECL_NT_ARM_SVE) && HAVE_DECL_NT_ARM_SVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_SVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_SVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_SVE)
#endif
#if defined(NT_ARM_PAC_MASK) || (defined(HAVE_DECL_NT_ARM_PAC_MASK) && HAVE_DECL_NT_ARM_PAC_MASK)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_PAC_MASK) == (0x406), "NT_ARM_PAC_MASK != 0x406");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_PAC_MASK 0x406
#endif
#if defined(NT_ARM_PAC_MASK) || (defined(HAVE_DECL_NT_ARM_PAC_MASK) && HAVE_DECL_NT_ARM_PAC_MASK)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_PAC_MASK)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_PAC_MASK"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_PAC_MASK)
#endif
#if defined(NT_ARM_PACA_KEYS) || (defined(HAVE_DECL_NT_ARM_PACA_KEYS) && HAVE_DECL_NT_ARM_PACA_KEYS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_PACA_KEYS) == (0x407), "NT_ARM_PACA_KEYS != 0x407");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_PACA_KEYS 0x407
#endif
#if defined(NT_ARM_PACA_KEYS) || (defined(HAVE_DECL_NT_ARM_PACA_KEYS) && HAVE_DECL_NT_ARM_PACA_KEYS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_PACA_KEYS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_PACA_KEYS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_PACA_KEYS)
#endif
#if defined(NT_ARM_PACG_KEYS) || (defined(HAVE_DECL_NT_ARM_PACG_KEYS) && HAVE_DECL_NT_ARM_PACG_KEYS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_PACG_KEYS) == (0x408), "NT_ARM_PACG_KEYS != 0x408");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_PACG_KEYS 0x408
#endif
#if defined(NT_ARM_PACG_KEYS) || (defined(HAVE_DECL_NT_ARM_PACG_KEYS) && HAVE_DECL_NT_ARM_PACG_KEYS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_PACG_KEYS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_PACG_KEYS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_PACG_KEYS)
#endif
#if defined(NT_ARM_TAGGED_ADDR_CTRL) || (defined(HAVE_DECL_NT_ARM_TAGGED_ADDR_CTRL) && HAVE_DECL_NT_ARM_TAGGED_ADDR_CTRL)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_TAGGED_ADDR_CTRL) == (0x409), "NT_ARM_TAGGED_ADDR_CTRL != 0x409");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_TAGGED_ADDR_CTRL 0x409
#endif
#if defined(NT_ARM_TAGGED_ADDR_CTRL) || (defined(HAVE_DECL_NT_ARM_TAGGED_ADDR_CTRL) && HAVE_DECL_NT_ARM_TAGGED_ADDR_CTRL)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_TAGGED_ADDR_CTRL)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_TAGGED_ADDR_CTRL"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_TAGGED_ADDR_CTRL)
#endif
#if defined(NT_ARM_PAC_ENABLED_KEYS) || (defined(HAVE_DECL_NT_ARM_PAC_ENABLED_KEYS) && HAVE_DECL_NT_ARM_PAC_ENABLED_KEYS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_PAC_ENABLED_KEYS) == (0x40a), "NT_ARM_PAC_ENABLED_KEYS != 0x40a");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_PAC_ENABLED_KEYS 0x40a
#endif
#if defined(NT_ARM_PAC_ENABLED_KEYS) || (defined(HAVE_DECL_NT_ARM_PAC_ENABLED_KEYS) && HAVE_DECL_NT_ARM_PAC_ENABLED_KEYS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_PAC_ENABLED_KEYS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_PAC_ENABLED_KEYS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_PAC_ENABLED_KEYS)
#endif
#if defined(NT_ARM_SSVE) || (defined(HAVE_DECL_NT_ARM_SSVE) && HAVE_DECL_NT_ARM_SSVE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_SSVE) == (0x40b), "NT_ARM_SSVE != 0x40b");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_SSVE 0x40b
#endif
#if defined(NT_ARM_SSVE) || (defined(HAVE_DECL_NT_ARM_SSVE) && HAVE_DECL_NT_ARM_SSVE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_SSVE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_SSVE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_SSVE)
#endif
#if defined(NT_ARM_ZA) || (defined(HAVE_DECL_NT_ARM_ZA) && HAVE_DECL_NT_ARM_ZA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARM_ZA) == (0x40c), "NT_ARM_ZA != 0x40c");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARM_ZA 0x40c
#endif
#if defined(NT_ARM_ZA) || (defined(HAVE_DECL_NT_ARM_ZA) && HAVE_DECL_NT_ARM_ZA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARM_ZA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARM_ZA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARM_ZA)
#endif
#if defined(NT_METAG_CBUF) || (defined(HAVE_DECL_NT_METAG_CBUF) && HAVE_DECL_NT_METAG_CBUF)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_METAG_CBUF) == (0x500), "NT_METAG_CBUF != 0x500");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_METAG_CBUF 0x500
#endif
#if defined(NT_METAG_CBUF) || (defined(HAVE_DECL_NT_METAG_CBUF) && HAVE_DECL_NT_METAG_CBUF)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_METAG_CBUF)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_METAG_CBUF"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_METAG_CBUF)
#endif
#if defined(NT_METAG_RPIPE) || (defined(HAVE_DECL_NT_METAG_RPIPE) && HAVE_DECL_NT_METAG_RPIPE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_METAG_RPIPE) == (0x501), "NT_METAG_RPIPE != 0x501");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_METAG_RPIPE 0x501
#endif
#if defined(NT_METAG_RPIPE) || (defined(HAVE_DECL_NT_METAG_RPIPE) && HAVE_DECL_NT_METAG_RPIPE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_METAG_RPIPE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_METAG_RPIPE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_METAG_RPIPE)
#endif
#if defined(NT_METAG_TLS) || (defined(HAVE_DECL_NT_METAG_TLS) && HAVE_DECL_NT_METAG_TLS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_METAG_TLS) == (0x502), "NT_METAG_TLS != 0x502");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_METAG_TLS 0x502
#endif
#if defined(NT_METAG_TLS) || (defined(HAVE_DECL_NT_METAG_TLS) && HAVE_DECL_NT_METAG_TLS)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_METAG_TLS)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_METAG_TLS"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_METAG_TLS)
#endif
#if defined(NT_ARC_V2) || (defined(HAVE_DECL_NT_ARC_V2) && HAVE_DECL_NT_ARC_V2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_ARC_V2) == (0x600), "NT_ARC_V2 != 0x600");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_ARC_V2 0x600
#endif
#if defined(NT_ARC_V2) || (defined(HAVE_DECL_NT_ARC_V2) && HAVE_DECL_NT_ARC_V2)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_ARC_V2)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_ARC_V2"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_ARC_V2)
#endif
#if defined(NT_VMCOREDD) || (defined(HAVE_DECL_NT_VMCOREDD) && HAVE_DECL_NT_VMCOREDD)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_VMCOREDD) == (0x700), "NT_VMCOREDD != 0x700");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_VMCOREDD 0x700
#endif
#if defined(NT_VMCOREDD) || (defined(HAVE_DECL_NT_VMCOREDD) && HAVE_DECL_NT_VMCOREDD)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_VMCOREDD)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_VMCOREDD"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_VMCOREDD)
#endif
#if defined(NT_MIPS_DSP) || (defined(HAVE_DECL_NT_MIPS_DSP) && HAVE_DECL_NT_MIPS_DSP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_MIPS_DSP) == (0x800), "NT_MIPS_DSP != 0x800");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_MIPS_DSP 0x800
#endif
#if defined(NT_MIPS_DSP) || (defined(HAVE_DECL_NT_MIPS_DSP) && HAVE_DECL_NT_MIPS_DSP)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_MIPS_DSP)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_MIPS_DSP"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_MIPS_DSP)
#endif
#if defined(NT_MIPS_FP_MODE) || (defined(HAVE_DECL_NT_MIPS_FP_MODE) && HAVE_DECL_NT_MIPS_FP_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_MIPS_FP_MODE) == (0x801), "NT_MIPS_FP_MODE != 0x801");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_MIPS_FP_MODE 0x801
#endif
#if defined(NT_MIPS_FP_MODE) || (defined(HAVE_DECL_NT_MIPS_FP_MODE) && HAVE_DECL_NT_MIPS_FP_MODE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_MIPS_FP_MODE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_MIPS_FP_MODE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_MIPS_FP_MODE)
#endif
#if defined(NT_MIPS_MSA) || (defined(HAVE_DECL_NT_MIPS_MSA) && HAVE_DECL_NT_MIPS_MSA)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_MIPS_MSA) == (0x802), "NT_MIPS_MSA != 0x802");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_MIPS_MSA 0x802
#endif
#if defined(NT_MIPS_MSA) || (defined(HAVE_DECL_NT_MIPS_MSA) && HAVE_DECL_NT_MIPS_MSA)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_MIPS_MSA)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_MIPS_MSA"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_MIPS_MSA)
#endif
#if defined(NT_LOONGARCH_CPUCFG) || (defined(HAVE_DECL_NT_LOONGARCH_CPUCFG) && HAVE_DECL_NT_LOONGARCH_CPUCFG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_LOONGARCH_CPUCFG) == (0xa00), "NT_LOONGARCH_CPUCFG != 0xa00");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_LOONGARCH_CPUCFG 0xa00
#endif
#if defined(NT_LOONGARCH_CPUCFG) || (defined(HAVE_DECL_NT_LOONGARCH_CPUCFG) && HAVE_DECL_NT_LOONGARCH_CPUCFG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_LOONGARCH_CPUCFG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_LOONGARCH_CPUCFG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_LOONGARCH_CPUCFG)
#endif
#if defined(NT_LOONGARCH_CSR) || (defined(HAVE_DECL_NT_LOONGARCH_CSR) && HAVE_DECL_NT_LOONGARCH_CSR)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_LOONGARCH_CSR) == (0xa01), "NT_LOONGARCH_CSR != 0xa01");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_LOONGARCH_CSR 0xa01
#endif
#if defined(NT_LOONGARCH_CSR) || (defined(HAVE_DECL_NT_LOONGARCH_CSR) && HAVE_DECL_NT_LOONGARCH_CSR)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_LOONGARCH_CSR)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_LOONGARCH_CSR"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_LOONGARCH_CSR)
#endif
#if defined(NT_LOONGARCH_LSX) || (defined(HAVE_DECL_NT_LOONGARCH_LSX) && HAVE_DECL_NT_LOONGARCH_LSX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_LOONGARCH_LSX) == (0xa02), "NT_LOONGARCH_LSX != 0xa02");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_LOONGARCH_LSX 0xa02
#endif
#if defined(NT_LOONGARCH_LSX) || (defined(HAVE_DECL_NT_LOONGARCH_LSX) && HAVE_DECL_NT_LOONGARCH_LSX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_LOONGARCH_LSX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_LOONGARCH_LSX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_LOONGARCH_LSX)
#endif
#if defined(NT_LOONGARCH_LASX) || (defined(HAVE_DECL_NT_LOONGARCH_LASX) && HAVE_DECL_NT_LOONGARCH_LASX)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_LOONGARCH_LASX) == (0xa03), "NT_LOONGARCH_LASX != 0xa03");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_LOONGARCH_LASX 0xa03
#endif
#if defined(NT_LOONGARCH_LASX) || (defined(HAVE_DECL_NT_LOONGARCH_LASX) && HAVE_DECL_NT_LOONGARCH_LASX)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_LOONGARCH_LASX)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_LOONGARCH_LASX"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_LOONGARCH_LASX)
#endif
#if defined(NT_LOONGARCH_LBT) || (defined(HAVE_DECL_NT_LOONGARCH_LBT) && HAVE_DECL_NT_LOONGARCH_LBT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_LOONGARCH_LBT) == (0xa04), "NT_LOONGARCH_LBT != 0xa04");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_LOONGARCH_LBT 0xa04
#endif
#if defined(NT_LOONGARCH_LBT) || (defined(HAVE_DECL_NT_LOONGARCH_LBT) && HAVE_DECL_NT_LOONGARCH_LBT)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_LOONGARCH_LBT)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_LOONGARCH_LBT"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_LOONGARCH_LBT)
#endif
#if defined(NT_FILE) || (defined(HAVE_DECL_NT_FILE) && HAVE_DECL_NT_FILE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_FILE) == (0x46494c45), "NT_FILE != 0x46494c45");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_FILE 0x46494c45
#endif
#if defined(NT_FILE) || (defined(HAVE_DECL_NT_FILE) && HAVE_DECL_NT_FILE)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_FILE)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_FILE"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_FILE)
#endif
#if defined(NT_PRXFPREG) || (defined(HAVE_DECL_NT_PRXFPREG) && HAVE_DECL_NT_PRXFPREG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_PRXFPREG) == (0x46e62b7f), "NT_PRXFPREG != 0x46e62b7f");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_PRXFPREG 0x46e62b7f
#endif
#if defined(NT_PRXFPREG) || (defined(HAVE_DECL_NT_PRXFPREG) && HAVE_DECL_NT_PRXFPREG)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_PRXFPREG)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_PRXFPREG"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_PRXFPREG)
#endif
#if defined(NT_SIGINFO) || (defined(HAVE_DECL_NT_SIGINFO) && HAVE_DECL_NT_SIGINFO)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((NT_SIGINFO) == (0x53494749), "NT_SIGINFO != 0x53494749");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define NT_SIGINFO 0x53494749
#endif
#if defined(NT_SIGINFO) || (defined(HAVE_DECL_NT_SIGINFO) && HAVE_DECL_NT_SIGINFO)
#if defined XLAT_PREV_VAL
static_assert((unsigned long long) (NT_SIGINFO)
      > (unsigned long long) (XLAT_PREV_VAL),
      "Incorrect order in #sorted xlat: NT_SIGINFO"
      " is not larger than the previous value");
#endif
#undef XLAT_PREV_VAL
#define XLAT_PREV_VAL (NT_SIGINFO)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat nt_descriptor_types in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data nt_descriptor_types_xdata[] = {
 XLAT(NT_PRSTATUS),
 #define XLAT_VAL_0 ((unsigned) (NT_PRSTATUS))
 #define XLAT_STR_0 STRINGIFY(NT_PRSTATUS)
 XLAT(NT_FPREGSET),
 #define XLAT_VAL_1 ((unsigned) (NT_FPREGSET))
 #define XLAT_STR_1 STRINGIFY(NT_FPREGSET)
 XLAT(NT_PRPSINFO),
 #define XLAT_VAL_2 ((unsigned) (NT_PRPSINFO))
 #define XLAT_STR_2 STRINGIFY(NT_PRPSINFO)
 XLAT(NT_PRXREG),
 #define XLAT_VAL_3 ((unsigned) (NT_PRXREG))
 #define XLAT_STR_3 STRINGIFY(NT_PRXREG)
 XLAT(NT_PLATFORM),
 #define XLAT_VAL_4 ((unsigned) (NT_PLATFORM))
 #define XLAT_STR_4 STRINGIFY(NT_PLATFORM)
 XLAT(NT_AUXV),
 #define XLAT_VAL_5 ((unsigned) (NT_AUXV))
 #define XLAT_STR_5 STRINGIFY(NT_AUXV)
 XLAT(NT_GWINDOWS),
 #define XLAT_VAL_6 ((unsigned) (NT_GWINDOWS))
 #define XLAT_STR_6 STRINGIFY(NT_GWINDOWS)
 XLAT(NT_ASRS),
 #define XLAT_VAL_7 ((unsigned) (NT_ASRS))
 #define XLAT_STR_7 STRINGIFY(NT_ASRS)
 XLAT(NT_PSTATUS),
 #define XLAT_VAL_8 ((unsigned) (NT_PSTATUS))
 #define XLAT_STR_8 STRINGIFY(NT_PSTATUS)
 XLAT(NT_PSINFO),
 #define XLAT_VAL_9 ((unsigned) (NT_PSINFO))
 #define XLAT_STR_9 STRINGIFY(NT_PSINFO)
 XLAT(NT_PRCRED),
 #define XLAT_VAL_10 ((unsigned) (NT_PRCRED))
 #define XLAT_STR_10 STRINGIFY(NT_PRCRED)
 XLAT(NT_UTSNAME),
 #define XLAT_VAL_11 ((unsigned) (NT_UTSNAME))
 #define XLAT_STR_11 STRINGIFY(NT_UTSNAME)
 XLAT(NT_LWPSTATUS),
 #define XLAT_VAL_12 ((unsigned) (NT_LWPSTATUS))
 #define XLAT_STR_12 STRINGIFY(NT_LWPSTATUS)
 XLAT(NT_LWPSINFO),
 #define XLAT_VAL_13 ((unsigned) (NT_LWPSINFO))
 #define XLAT_STR_13 STRINGIFY(NT_LWPSINFO)
 XLAT(NT_PRFPXREG),
 #define XLAT_VAL_14 ((unsigned) (NT_PRFPXREG))
 #define XLAT_STR_14 STRINGIFY(NT_PRFPXREG)
 XLAT(NT_PPC_VMX),
 #define XLAT_VAL_15 ((unsigned) (NT_PPC_VMX))
 #define XLAT_STR_15 STRINGIFY(NT_PPC_VMX)
 XLAT(NT_PPC_SPE),
 #define XLAT_VAL_16 ((unsigned) (NT_PPC_SPE))
 #define XLAT_STR_16 STRINGIFY(NT_PPC_SPE)
 XLAT(NT_PPC_VSX),
 #define XLAT_VAL_17 ((unsigned) (NT_PPC_VSX))
 #define XLAT_STR_17 STRINGIFY(NT_PPC_VSX)
 XLAT(NT_PPC_TAR),
 #define XLAT_VAL_18 ((unsigned) (NT_PPC_TAR))
 #define XLAT_STR_18 STRINGIFY(NT_PPC_TAR)
 XLAT(NT_PPC_PPR),
 #define XLAT_VAL_19 ((unsigned) (NT_PPC_PPR))
 #define XLAT_STR_19 STRINGIFY(NT_PPC_PPR)
 XLAT(NT_PPC_DSCR),
 #define XLAT_VAL_20 ((unsigned) (NT_PPC_DSCR))
 #define XLAT_STR_20 STRINGIFY(NT_PPC_DSCR)
 XLAT(NT_PPC_EBB),
 #define XLAT_VAL_21 ((unsigned) (NT_PPC_EBB))
 #define XLAT_STR_21 STRINGIFY(NT_PPC_EBB)
 XLAT(NT_PPC_PMU),
 #define XLAT_VAL_22 ((unsigned) (NT_PPC_PMU))
 #define XLAT_STR_22 STRINGIFY(NT_PPC_PMU)
 XLAT(NT_PPC_TM_CGPR),
 #define XLAT_VAL_23 ((unsigned) (NT_PPC_TM_CGPR))
 #define XLAT_STR_23 STRINGIFY(NT_PPC_TM_CGPR)
 XLAT(NT_PPC_TM_CFPR),
 #define XLAT_VAL_24 ((unsigned) (NT_PPC_TM_CFPR))
 #define XLAT_STR_24 STRINGIFY(NT_PPC_TM_CFPR)
 XLAT(NT_PPC_TM_CVMX),
 #define XLAT_VAL_25 ((unsigned) (NT_PPC_TM_CVMX))
 #define XLAT_STR_25 STRINGIFY(NT_PPC_TM_CVMX)
 XLAT(NT_PPC_TM_CVSX),
 #define XLAT_VAL_26 ((unsigned) (NT_PPC_TM_CVSX))
 #define XLAT_STR_26 STRINGIFY(NT_PPC_TM_CVSX)
 XLAT(NT_PPC_TM_SPR),
 #define XLAT_VAL_27 ((unsigned) (NT_PPC_TM_SPR))
 #define XLAT_STR_27 STRINGIFY(NT_PPC_TM_SPR)
 XLAT(NT_PPC_TM_CTAR),
 #define XLAT_VAL_28 ((unsigned) (NT_PPC_TM_CTAR))
 #define XLAT_STR_28 STRINGIFY(NT_PPC_TM_CTAR)
 XLAT(NT_PPC_TM_CPPR),
 #define XLAT_VAL_29 ((unsigned) (NT_PPC_TM_CPPR))
 #define XLAT_STR_29 STRINGIFY(NT_PPC_TM_CPPR)
 XLAT(NT_PPC_TM_CDSCR),
 #define XLAT_VAL_30 ((unsigned) (NT_PPC_TM_CDSCR))
 #define XLAT_STR_30 STRINGIFY(NT_PPC_TM_CDSCR)
 XLAT(NT_PPC_PKEY),
 #define XLAT_VAL_31 ((unsigned) (NT_PPC_PKEY))
 #define XLAT_STR_31 STRINGIFY(NT_PPC_PKEY)
 XLAT(NT_386_TLS),
 #define XLAT_VAL_32 ((unsigned) (NT_386_TLS))
 #define XLAT_STR_32 STRINGIFY(NT_386_TLS)
 XLAT(NT_386_IOPERM),
 #define XLAT_VAL_33 ((unsigned) (NT_386_IOPERM))
 #define XLAT_STR_33 STRINGIFY(NT_386_IOPERM)
 XLAT(NT_X86_XSTATE),
 #define XLAT_VAL_34 ((unsigned) (NT_X86_XSTATE))
 #define XLAT_STR_34 STRINGIFY(NT_X86_XSTATE)
 XLAT(NT_S390_HIGH_GPRS),
 #define XLAT_VAL_35 ((unsigned) (NT_S390_HIGH_GPRS))
 #define XLAT_STR_35 STRINGIFY(NT_S390_HIGH_GPRS)
 XLAT(NT_S390_TIMER),
 #define XLAT_VAL_36 ((unsigned) (NT_S390_TIMER))
 #define XLAT_STR_36 STRINGIFY(NT_S390_TIMER)
 XLAT(NT_S390_TODCMP),
 #define XLAT_VAL_37 ((unsigned) (NT_S390_TODCMP))
 #define XLAT_STR_37 STRINGIFY(NT_S390_TODCMP)
 XLAT(NT_S390_TODPREG),
 #define XLAT_VAL_38 ((unsigned) (NT_S390_TODPREG))
 #define XLAT_STR_38 STRINGIFY(NT_S390_TODPREG)
 XLAT(NT_S390_CTRS),
 #define XLAT_VAL_39 ((unsigned) (NT_S390_CTRS))
 #define XLAT_STR_39 STRINGIFY(NT_S390_CTRS)
 XLAT(NT_S390_PREFIX),
 #define XLAT_VAL_40 ((unsigned) (NT_S390_PREFIX))
 #define XLAT_STR_40 STRINGIFY(NT_S390_PREFIX)
 XLAT(NT_S390_LAST_BREAK),
 #define XLAT_VAL_41 ((unsigned) (NT_S390_LAST_BREAK))
 #define XLAT_STR_41 STRINGIFY(NT_S390_LAST_BREAK)
 XLAT(NT_S390_SYSTEM_CALL),
 #define XLAT_VAL_42 ((unsigned) (NT_S390_SYSTEM_CALL))
 #define XLAT_STR_42 STRINGIFY(NT_S390_SYSTEM_CALL)
 XLAT(NT_S390_TDB),
 #define XLAT_VAL_43 ((unsigned) (NT_S390_TDB))
 #define XLAT_STR_43 STRINGIFY(NT_S390_TDB)
 XLAT(NT_S390_VXRS_LOW),
 #define XLAT_VAL_44 ((unsigned) (NT_S390_VXRS_LOW))
 #define XLAT_STR_44 STRINGIFY(NT_S390_VXRS_LOW)
 XLAT(NT_S390_VXRS_HIGH),
 #define XLAT_VAL_45 ((unsigned) (NT_S390_VXRS_HIGH))
 #define XLAT_STR_45 STRINGIFY(NT_S390_VXRS_HIGH)
 XLAT(NT_S390_GS_CB),
 #define XLAT_VAL_46 ((unsigned) (NT_S390_GS_CB))
 #define XLAT_STR_46 STRINGIFY(NT_S390_GS_CB)
 XLAT(NT_S390_GS_BC),
 #define XLAT_VAL_47 ((unsigned) (NT_S390_GS_BC))
 #define XLAT_STR_47 STRINGIFY(NT_S390_GS_BC)
 XLAT(NT_S390_RI_CB),
 #define XLAT_VAL_48 ((unsigned) (NT_S390_RI_CB))
 #define XLAT_STR_48 STRINGIFY(NT_S390_RI_CB)
 XLAT(NT_S390_PV_CPU_DATA),
 #define XLAT_VAL_49 ((unsigned) (NT_S390_PV_CPU_DATA))
 #define XLAT_STR_49 STRINGIFY(NT_S390_PV_CPU_DATA)
 XLAT(NT_ARM_VFP),
 #define XLAT_VAL_50 ((unsigned) (NT_ARM_VFP))
 #define XLAT_STR_50 STRINGIFY(NT_ARM_VFP)
 XLAT(NT_ARM_TLS),
 #define XLAT_VAL_51 ((unsigned) (NT_ARM_TLS))
 #define XLAT_STR_51 STRINGIFY(NT_ARM_TLS)
 XLAT(NT_ARM_HW_BREAK),
 #define XLAT_VAL_52 ((unsigned) (NT_ARM_HW_BREAK))
 #define XLAT_STR_52 STRINGIFY(NT_ARM_HW_BREAK)
 XLAT(NT_ARM_HW_WATCH),
 #define XLAT_VAL_53 ((unsigned) (NT_ARM_HW_WATCH))
 #define XLAT_STR_53 STRINGIFY(NT_ARM_HW_WATCH)
 XLAT(NT_ARM_SYSTEM_CALL),
 #define XLAT_VAL_54 ((unsigned) (NT_ARM_SYSTEM_CALL))
 #define XLAT_STR_54 STRINGIFY(NT_ARM_SYSTEM_CALL)
 XLAT(NT_ARM_SVE),
 #define XLAT_VAL_55 ((unsigned) (NT_ARM_SVE))
 #define XLAT_STR_55 STRINGIFY(NT_ARM_SVE)
 XLAT(NT_ARM_PAC_MASK),
 #define XLAT_VAL_56 ((unsigned) (NT_ARM_PAC_MASK))
 #define XLAT_STR_56 STRINGIFY(NT_ARM_PAC_MASK)
 XLAT(NT_ARM_PACA_KEYS),
 #define XLAT_VAL_57 ((unsigned) (NT_ARM_PACA_KEYS))
 #define XLAT_STR_57 STRINGIFY(NT_ARM_PACA_KEYS)
 XLAT(NT_ARM_PACG_KEYS),
 #define XLAT_VAL_58 ((unsigned) (NT_ARM_PACG_KEYS))
 #define XLAT_STR_58 STRINGIFY(NT_ARM_PACG_KEYS)
 XLAT(NT_ARM_TAGGED_ADDR_CTRL),
 #define XLAT_VAL_59 ((unsigned) (NT_ARM_TAGGED_ADDR_CTRL))
 #define XLAT_STR_59 STRINGIFY(NT_ARM_TAGGED_ADDR_CTRL)
 XLAT(NT_ARM_PAC_ENABLED_KEYS),
 #define XLAT_VAL_60 ((unsigned) (NT_ARM_PAC_ENABLED_KEYS))
 #define XLAT_STR_60 STRINGIFY(NT_ARM_PAC_ENABLED_KEYS)
 XLAT(NT_ARM_SSVE),
 #define XLAT_VAL_61 ((unsigned) (NT_ARM_SSVE))
 #define XLAT_STR_61 STRINGIFY(NT_ARM_SSVE)
 XLAT(NT_ARM_ZA),
 #define XLAT_VAL_62 ((unsigned) (NT_ARM_ZA))
 #define XLAT_STR_62 STRINGIFY(NT_ARM_ZA)
 XLAT(NT_METAG_CBUF),
 #define XLAT_VAL_63 ((unsigned) (NT_METAG_CBUF))
 #define XLAT_STR_63 STRINGIFY(NT_METAG_CBUF)
 XLAT(NT_METAG_RPIPE),
 #define XLAT_VAL_64 ((unsigned) (NT_METAG_RPIPE))
 #define XLAT_STR_64 STRINGIFY(NT_METAG_RPIPE)
 XLAT(NT_METAG_TLS),
 #define XLAT_VAL_65 ((unsigned) (NT_METAG_TLS))
 #define XLAT_STR_65 STRINGIFY(NT_METAG_TLS)
 XLAT(NT_ARC_V2),
 #define XLAT_VAL_66 ((unsigned) (NT_ARC_V2))
 #define XLAT_STR_66 STRINGIFY(NT_ARC_V2)
 XLAT(NT_VMCOREDD),
 #define XLAT_VAL_67 ((unsigned) (NT_VMCOREDD))
 #define XLAT_STR_67 STRINGIFY(NT_VMCOREDD)
 XLAT(NT_MIPS_DSP),
 #define XLAT_VAL_68 ((unsigned) (NT_MIPS_DSP))
 #define XLAT_STR_68 STRINGIFY(NT_MIPS_DSP)
 XLAT(NT_MIPS_FP_MODE),
 #define XLAT_VAL_69 ((unsigned) (NT_MIPS_FP_MODE))
 #define XLAT_STR_69 STRINGIFY(NT_MIPS_FP_MODE)
 XLAT(NT_MIPS_MSA),
 #define XLAT_VAL_70 ((unsigned) (NT_MIPS_MSA))
 #define XLAT_STR_70 STRINGIFY(NT_MIPS_MSA)
 XLAT(NT_LOONGARCH_CPUCFG),
 #define XLAT_VAL_71 ((unsigned) (NT_LOONGARCH_CPUCFG))
 #define XLAT_STR_71 STRINGIFY(NT_LOONGARCH_CPUCFG)
 XLAT(NT_LOONGARCH_CSR),
 #define XLAT_VAL_72 ((unsigned) (NT_LOONGARCH_CSR))
 #define XLAT_STR_72 STRINGIFY(NT_LOONGARCH_CSR)
 XLAT(NT_LOONGARCH_LSX),
 #define XLAT_VAL_73 ((unsigned) (NT_LOONGARCH_LSX))
 #define XLAT_STR_73 STRINGIFY(NT_LOONGARCH_LSX)
 XLAT(NT_LOONGARCH_LASX),
 #define XLAT_VAL_74 ((unsigned) (NT_LOONGARCH_LASX))
 #define XLAT_STR_74 STRINGIFY(NT_LOONGARCH_LASX)
 XLAT(NT_LOONGARCH_LBT),
 #define XLAT_VAL_75 ((unsigned) (NT_LOONGARCH_LBT))
 #define XLAT_STR_75 STRINGIFY(NT_LOONGARCH_LBT)
 XLAT(NT_FILE),
 #define XLAT_VAL_76 ((unsigned) (NT_FILE))
 #define XLAT_STR_76 STRINGIFY(NT_FILE)
 XLAT(NT_PRXFPREG),
 #define XLAT_VAL_77 ((unsigned) (NT_PRXFPREG))
 #define XLAT_STR_77 STRINGIFY(NT_PRXFPREG)
 XLAT(NT_SIGINFO),
 #define XLAT_VAL_78 ((unsigned) (NT_SIGINFO))
 #define XLAT_STR_78 STRINGIFY(NT_SIGINFO)
};
static
const struct xlat nt_descriptor_types[1] = { {
 .data = nt_descriptor_types_xdata,
 .size = ARRAY_SIZE(nt_descriptor_types_xdata),
 .type = XT_SORTED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
#  ifdef XLAT_VAL_13
  | XLAT_VAL_13
#  endif
#  ifdef XLAT_VAL_14
  | XLAT_VAL_14
#  endif
#  ifdef XLAT_VAL_15
  | XLAT_VAL_15
#  endif
#  ifdef XLAT_VAL_16
  | XLAT_VAL_16
#  endif
#  ifdef XLAT_VAL_17
  | XLAT_VAL_17
#  endif
#  ifdef XLAT_VAL_18
  | XLAT_VAL_18
#  endif
#  ifdef XLAT_VAL_19
  | XLAT_VAL_19
#  endif
#  ifdef XLAT_VAL_20
  | XLAT_VAL_20
#  endif
#  ifdef XLAT_VAL_21
  | XLAT_VAL_21
#  endif
#  ifdef XLAT_VAL_22
  | XLAT_VAL_22
#  endif
#  ifdef XLAT_VAL_23
  | XLAT_VAL_23
#  endif
#  ifdef XLAT_VAL_24
  | XLAT_VAL_24
#  endif
#  ifdef XLAT_VAL_25
  | XLAT_VAL_25
#  endif
#  ifdef XLAT_VAL_26
  | XLAT_VAL_26
#  endif
#  ifdef XLAT_VAL_27
  | XLAT_VAL_27
#  endif
#  ifdef XLAT_VAL_28
  | XLAT_VAL_28
#  endif
#  ifdef XLAT_VAL_29
  | XLAT_VAL_29
#  endif
#  ifdef XLAT_VAL_30
  | XLAT_VAL_30
#  endif
#  ifdef XLAT_VAL_31
  | XLAT_VAL_31
#  endif
#  ifdef XLAT_VAL_32
  | XLAT_VAL_32
#  endif
#  ifdef XLAT_VAL_33
  | XLAT_VAL_33
#  endif
#  ifdef XLAT_VAL_34
  | XLAT_VAL_34
#  endif
#  ifdef XLAT_VAL_35
  | XLAT_VAL_35
#  endif
#  ifdef XLAT_VAL_36
  | XLAT_VAL_36
#  endif
#  ifdef XLAT_VAL_37
  | XLAT_VAL_37
#  endif
#  ifdef XLAT_VAL_38
  | XLAT_VAL_38
#  endif
#  ifdef XLAT_VAL_39
  | XLAT_VAL_39
#  endif
#  ifdef XLAT_VAL_40
  | XLAT_VAL_40
#  endif
#  ifdef XLAT_VAL_41
  | XLAT_VAL_41
#  endif
#  ifdef XLAT_VAL_42
  | XLAT_VAL_42
#  endif
#  ifdef XLAT_VAL_43
  | XLAT_VAL_43
#  endif
#  ifdef XLAT_VAL_44
  | XLAT_VAL_44
#  endif
#  ifdef XLAT_VAL_45
  | XLAT_VAL_45
#  endif
#  ifdef XLAT_VAL_46
  | XLAT_VAL_46
#  endif
#  ifdef XLAT_VAL_47
  | XLAT_VAL_47
#  endif
#  ifdef XLAT_VAL_48
  | XLAT_VAL_48
#  endif
#  ifdef XLAT_VAL_49
  | XLAT_VAL_49
#  endif
#  ifdef XLAT_VAL_50
  | XLAT_VAL_50
#  endif
#  ifdef XLAT_VAL_51
  | XLAT_VAL_51
#  endif
#  ifdef XLAT_VAL_52
  | XLAT_VAL_52
#  endif
#  ifdef XLAT_VAL_53
  | XLAT_VAL_53
#  endif
#  ifdef XLAT_VAL_54
  | XLAT_VAL_54
#  endif
#  ifdef XLAT_VAL_55
  | XLAT_VAL_55
#  endif
#  ifdef XLAT_VAL_56
  | XLAT_VAL_56
#  endif
#  ifdef XLAT_VAL_57
  | XLAT_VAL_57
#  endif
#  ifdef XLAT_VAL_58
  | XLAT_VAL_58
#  endif
#  ifdef XLAT_VAL_59
  | XLAT_VAL_59
#  endif
#  ifdef XLAT_VAL_60
  | XLAT_VAL_60
#  endif
#  ifdef XLAT_VAL_61
  | XLAT_VAL_61
#  endif
#  ifdef XLAT_VAL_62
  | XLAT_VAL_62
#  endif
#  ifdef XLAT_VAL_63
  | XLAT_VAL_63
#  endif
#  ifdef XLAT_VAL_64
  | XLAT_VAL_64
#  endif
#  ifdef XLAT_VAL_65
  | XLAT_VAL_65
#  endif
#  ifdef XLAT_VAL_66
  | XLAT_VAL_66
#  endif
#  ifdef XLAT_VAL_67
  | XLAT_VAL_67
#  endif
#  ifdef XLAT_VAL_68
  | XLAT_VAL_68
#  endif
#  ifdef XLAT_VAL_69
  | XLAT_VAL_69
#  endif
#  ifdef XLAT_VAL_70
  | XLAT_VAL_70
#  endif
#  ifdef XLAT_VAL_71
  | XLAT_VAL_71
#  endif
#  ifdef XLAT_VAL_72
  | XLAT_VAL_72
#  endif
#  ifdef XLAT_VAL_73
  | XLAT_VAL_73
#  endif
#  ifdef XLAT_VAL_74
  | XLAT_VAL_74
#  endif
#  ifdef XLAT_VAL_75
  | XLAT_VAL_75
#  endif
#  ifdef XLAT_VAL_76
  | XLAT_VAL_76
#  endif
#  ifdef XLAT_VAL_77
  | XLAT_VAL_77
#  endif
#  ifdef XLAT_VAL_78
  | XLAT_VAL_78
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
#  ifdef XLAT_STR_13
  + sizeof(XLAT_STR_13)
#  endif
#  ifdef XLAT_STR_14
  + sizeof(XLAT_STR_14)
#  endif
#  ifdef XLAT_STR_15
  + sizeof(XLAT_STR_15)
#  endif
#  ifdef XLAT_STR_16
  + sizeof(XLAT_STR_16)
#  endif
#  ifdef XLAT_STR_17
  + sizeof(XLAT_STR_17)
#  endif
#  ifdef XLAT_STR_18
  + sizeof(XLAT_STR_18)
#  endif
#  ifdef XLAT_STR_19
  + sizeof(XLAT_STR_19)
#  endif
#  ifdef XLAT_STR_20
  + sizeof(XLAT_STR_20)
#  endif
#  ifdef XLAT_STR_21
  + sizeof(XLAT_STR_21)
#  endif
#  ifdef XLAT_STR_22
  + sizeof(XLAT_STR_22)
#  endif
#  ifdef XLAT_STR_23
  + sizeof(XLAT_STR_23)
#  endif
#  ifdef XLAT_STR_24
  + sizeof(XLAT_STR_24)
#  endif
#  ifdef XLAT_STR_25
  + sizeof(XLAT_STR_25)
#  endif
#  ifdef XLAT_STR_26
  + sizeof(XLAT_STR_26)
#  endif
#  ifdef XLAT_STR_27
  + sizeof(XLAT_STR_27)
#  endif
#  ifdef XLAT_STR_28
  + sizeof(XLAT_STR_28)
#  endif
#  ifdef XLAT_STR_29
  + sizeof(XLAT_STR_29)
#  endif
#  ifdef XLAT_STR_30
  + sizeof(XLAT_STR_30)
#  endif
#  ifdef XLAT_STR_31
  + sizeof(XLAT_STR_31)
#  endif
#  ifdef XLAT_STR_32
  + sizeof(XLAT_STR_32)
#  endif
#  ifdef XLAT_STR_33
  + sizeof(XLAT_STR_33)
#  endif
#  ifdef XLAT_STR_34
  + sizeof(XLAT_STR_34)
#  endif
#  ifdef XLAT_STR_35
  + sizeof(XLAT_STR_35)
#  endif
#  ifdef XLAT_STR_36
  + sizeof(XLAT_STR_36)
#  endif
#  ifdef XLAT_STR_37
  + sizeof(XLAT_STR_37)
#  endif
#  ifdef XLAT_STR_38
  + sizeof(XLAT_STR_38)
#  endif
#  ifdef XLAT_STR_39
  + sizeof(XLAT_STR_39)
#  endif
#  ifdef XLAT_STR_40
  + sizeof(XLAT_STR_40)
#  endif
#  ifdef XLAT_STR_41
  + sizeof(XLAT_STR_41)
#  endif
#  ifdef XLAT_STR_42
  + sizeof(XLAT_STR_42)
#  endif
#  ifdef XLAT_STR_43
  + sizeof(XLAT_STR_43)
#  endif
#  ifdef XLAT_STR_44
  + sizeof(XLAT_STR_44)
#  endif
#  ifdef XLAT_STR_45
  + sizeof(XLAT_STR_45)
#  endif
#  ifdef XLAT_STR_46
  + sizeof(XLAT_STR_46)
#  endif
#  ifdef XLAT_STR_47
  + sizeof(XLAT_STR_47)
#  endif
#  ifdef XLAT_STR_48
  + sizeof(XLAT_STR_48)
#  endif
#  ifdef XLAT_STR_49
  + sizeof(XLAT_STR_49)
#  endif
#  ifdef XLAT_STR_50
  + sizeof(XLAT_STR_50)
#  endif
#  ifdef XLAT_STR_51
  + sizeof(XLAT_STR_51)
#  endif
#  ifdef XLAT_STR_52
  + sizeof(XLAT_STR_52)
#  endif
#  ifdef XLAT_STR_53
  + sizeof(XLAT_STR_53)
#  endif
#  ifdef XLAT_STR_54
  + sizeof(XLAT_STR_54)
#  endif
#  ifdef XLAT_STR_55
  + sizeof(XLAT_STR_55)
#  endif
#  ifdef XLAT_STR_56
  + sizeof(XLAT_STR_56)
#  endif
#  ifdef XLAT_STR_57
  + sizeof(XLAT_STR_57)
#  endif
#  ifdef XLAT_STR_58
  + sizeof(XLAT_STR_58)
#  endif
#  ifdef XLAT_STR_59
  + sizeof(XLAT_STR_59)
#  endif
#  ifdef XLAT_STR_60
  + sizeof(XLAT_STR_60)
#  endif
#  ifdef XLAT_STR_61
  + sizeof(XLAT_STR_61)
#  endif
#  ifdef XLAT_STR_62
  + sizeof(XLAT_STR_62)
#  endif
#  ifdef XLAT_STR_63
  + sizeof(XLAT_STR_63)
#  endif
#  ifdef XLAT_STR_64
  + sizeof(XLAT_STR_64)
#  endif
#  ifdef XLAT_STR_65
  + sizeof(XLAT_STR_65)
#  endif
#  ifdef XLAT_STR_66
  + sizeof(XLAT_STR_66)
#  endif
#  ifdef XLAT_STR_67
  + sizeof(XLAT_STR_67)
#  endif
#  ifdef XLAT_STR_68
  + sizeof(XLAT_STR_68)
#  endif
#  ifdef XLAT_STR_69
  + sizeof(XLAT_STR_69)
#  endif
#  ifdef XLAT_STR_70
  + sizeof(XLAT_STR_70)
#  endif
#  ifdef XLAT_STR_71
  + sizeof(XLAT_STR_71)
#  endif
#  ifdef XLAT_STR_72
  + sizeof(XLAT_STR_72)
#  endif
#  ifdef XLAT_STR_73
  + sizeof(XLAT_STR_73)
#  endif
#  ifdef XLAT_STR_74
  + sizeof(XLAT_STR_74)
#  endif
#  ifdef XLAT_STR_75
  + sizeof(XLAT_STR_75)
#  endif
#  ifdef XLAT_STR_76
  + sizeof(XLAT_STR_76)
#  endif
#  ifdef XLAT_STR_77
  + sizeof(XLAT_STR_77)
#  endif
#  ifdef XLAT_STR_78
  + sizeof(XLAT_STR_78)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
#  undef XLAT_STR_13
#  undef XLAT_VAL_13
#  undef XLAT_STR_14
#  undef XLAT_VAL_14
#  undef XLAT_STR_15
#  undef XLAT_VAL_15
#  undef XLAT_STR_16
#  undef XLAT_VAL_16
#  undef XLAT_STR_17
#  undef XLAT_VAL_17
#  undef XLAT_STR_18
#  undef XLAT_VAL_18
#  undef XLAT_STR_19
#  undef XLAT_VAL_19
#  undef XLAT_STR_20
#  undef XLAT_VAL_20
#  undef XLAT_STR_21
#  undef XLAT_VAL_21
#  undef XLAT_STR_22
#  undef XLAT_VAL_22
#  undef XLAT_STR_23
#  undef XLAT_VAL_23
#  undef XLAT_STR_24
#  undef XLAT_VAL_24
#  undef XLAT_STR_25
#  undef XLAT_VAL_25
#  undef XLAT_STR_26
#  undef XLAT_VAL_26
#  undef XLAT_STR_27
#  undef XLAT_VAL_27
#  undef XLAT_STR_28
#  undef XLAT_VAL_28
#  undef XLAT_STR_29
#  undef XLAT_VAL_29
#  undef XLAT_STR_30
#  undef XLAT_VAL_30
#  undef XLAT_STR_31
#  undef XLAT_VAL_31
#  undef XLAT_STR_32
#  undef XLAT_VAL_32
#  undef XLAT_STR_33
#  undef XLAT_VAL_33
#  undef XLAT_STR_34
#  undef XLAT_VAL_34
#  undef XLAT_STR_35
#  undef XLAT_VAL_35
#  undef XLAT_STR_36
#  undef XLAT_VAL_36
#  undef XLAT_STR_37
#  undef XLAT_VAL_37
#  undef XLAT_STR_38
#  undef XLAT_VAL_38
#  undef XLAT_STR_39
#  undef XLAT_VAL_39
#  undef XLAT_STR_40
#  undef XLAT_VAL_40
#  undef XLAT_STR_41
#  undef XLAT_VAL_41
#  undef XLAT_STR_42
#  undef XLAT_VAL_42
#  undef XLAT_STR_43
#  undef XLAT_VAL_43
#  undef XLAT_STR_44
#  undef XLAT_VAL_44
#  undef XLAT_STR_45
#  undef XLAT_VAL_45
#  undef XLAT_STR_46
#  undef XLAT_VAL_46
#  undef XLAT_STR_47
#  undef XLAT_VAL_47
#  undef XLAT_STR_48
#  undef XLAT_VAL_48
#  undef XLAT_STR_49
#  undef XLAT_VAL_49
#  undef XLAT_STR_50
#  undef XLAT_VAL_50
#  undef XLAT_STR_51
#  undef XLAT_VAL_51
#  undef XLAT_STR_52
#  undef XLAT_VAL_52
#  undef XLAT_STR_53
#  undef XLAT_VAL_53
#  undef XLAT_STR_54
#  undef XLAT_VAL_54
#  undef XLAT_STR_55
#  undef XLAT_VAL_55
#  undef XLAT_STR_56
#  undef XLAT_VAL_56
#  undef XLAT_STR_57
#  undef XLAT_VAL_57
#  undef XLAT_STR_58
#  undef XLAT_VAL_58
#  undef XLAT_STR_59
#  undef XLAT_VAL_59
#  undef XLAT_STR_60
#  undef XLAT_VAL_60
#  undef XLAT_STR_61
#  undef XLAT_VAL_61
#  undef XLAT_STR_62
#  undef XLAT_VAL_62
#  undef XLAT_STR_63
#  undef XLAT_VAL_63
#  undef XLAT_STR_64
#  undef XLAT_VAL_64
#  undef XLAT_STR_65
#  undef XLAT_VAL_65
#  undef XLAT_STR_66
#  undef XLAT_VAL_66
#  undef XLAT_STR_67
#  undef XLAT_VAL_67
#  undef XLAT_STR_68
#  undef XLAT_VAL_68
#  undef XLAT_STR_69
#  undef XLAT_VAL_69
#  undef XLAT_STR_70
#  undef XLAT_VAL_70
#  undef XLAT_STR_71
#  undef XLAT_VAL_71
#  undef XLAT_STR_72
#  undef XLAT_VAL_72
#  undef XLAT_STR_73
#  undef XLAT_VAL_73
#  undef XLAT_STR_74
#  undef XLAT_VAL_74
#  undef XLAT_STR_75
#  undef XLAT_VAL_75
#  undef XLAT_STR_76
#  undef XLAT_VAL_76
#  undef XLAT_STR_77
#  undef XLAT_VAL_77
#  undef XLAT_STR_78
#  undef XLAT_VAL_78
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
