/* Generated by ./src/xlat/gen.sh from ./src/xlat/bpf_map_flags.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BPF_F_NO_PREALLOC) || (defined(HAVE_DECL_BPF_F_NO_PREALLOC) && HAVE_DECL_BPF_F_NO_PREALLOC)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_NO_PREALLOC) == (1U), "BPF_F_NO_PREALLOC != 1U");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_NO_PREALLOC 1U
#endif
#if defined(BPF_F_NO_COMMON_LRU) || (defined(HAVE_DECL_BPF_F_NO_COMMON_LRU) && HAVE_DECL_BPF_F_NO_COMMON_LRU)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_NO_COMMON_LRU) == ((1U << 1)), "BPF_F_NO_COMMON_LRU != (1U << 1)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_NO_COMMON_LRU (1U << 1)
#endif
#if defined(BPF_F_NUMA_NODE) || (defined(HAVE_DECL_BPF_F_NUMA_NODE) && HAVE_DECL_BPF_F_NUMA_NODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_NUMA_NODE) == ((1U << 2)), "BPF_F_NUMA_NODE != (1U << 2)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_NUMA_NODE (1U << 2)
#endif
#if defined(BPF_F_RDONLY) || (defined(HAVE_DECL_BPF_F_RDONLY) && HAVE_DECL_BPF_F_RDONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_RDONLY) == ((1U << 3)), "BPF_F_RDONLY != (1U << 3)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_RDONLY (1U << 3)
#endif
#if defined(BPF_F_WRONLY) || (defined(HAVE_DECL_BPF_F_WRONLY) && HAVE_DECL_BPF_F_WRONLY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_WRONLY) == ((1U << 4)), "BPF_F_WRONLY != (1U << 4)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_WRONLY (1U << 4)
#endif
#if defined(BPF_F_STACK_BUILD_ID) || (defined(HAVE_DECL_BPF_F_STACK_BUILD_ID) && HAVE_DECL_BPF_F_STACK_BUILD_ID)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_STACK_BUILD_ID) == ((1U << 5)), "BPF_F_STACK_BUILD_ID != (1U << 5)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_STACK_BUILD_ID (1U << 5)
#endif
#if defined(BPF_F_ZERO_SEED) || (defined(HAVE_DECL_BPF_F_ZERO_SEED) && HAVE_DECL_BPF_F_ZERO_SEED)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_ZERO_SEED) == ((1U << 6)), "BPF_F_ZERO_SEED != (1U << 6)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_ZERO_SEED (1U << 6)
#endif
#if defined(BPF_F_RDONLY_PROG) || (defined(HAVE_DECL_BPF_F_RDONLY_PROG) && HAVE_DECL_BPF_F_RDONLY_PROG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_RDONLY_PROG) == ((1U << 7)), "BPF_F_RDONLY_PROG != (1U << 7)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_RDONLY_PROG (1U << 7)
#endif
#if defined(BPF_F_WRONLY_PROG) || (defined(HAVE_DECL_BPF_F_WRONLY_PROG) && HAVE_DECL_BPF_F_WRONLY_PROG)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_WRONLY_PROG) == ((1U << 8)), "BPF_F_WRONLY_PROG != (1U << 8)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_WRONLY_PROG (1U << 8)
#endif
#if defined(BPF_F_CLONE) || (defined(HAVE_DECL_BPF_F_CLONE) && HAVE_DECL_BPF_F_CLONE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_CLONE) == ((1U << 9)), "BPF_F_CLONE != (1U << 9)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_CLONE (1U << 9)
#endif
#if defined(BPF_F_MMAPABLE) || (defined(HAVE_DECL_BPF_F_MMAPABLE) && HAVE_DECL_BPF_F_MMAPABLE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_MMAPABLE) == ((1U << 10)), "BPF_F_MMAPABLE != (1U << 10)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_MMAPABLE (1U << 10)
#endif
#if defined(BPF_F_PRESERVE_ELEMS) || (defined(HAVE_DECL_BPF_F_PRESERVE_ELEMS) && HAVE_DECL_BPF_F_PRESERVE_ELEMS)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_PRESERVE_ELEMS) == ((1U << 11)), "BPF_F_PRESERVE_ELEMS != (1U << 11)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_PRESERVE_ELEMS (1U << 11)
#endif
#if defined(BPF_F_INNER_MAP) || (defined(HAVE_DECL_BPF_F_INNER_MAP) && HAVE_DECL_BPF_F_INNER_MAP)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_F_INNER_MAP) == ((1U << 12)), "BPF_F_INNER_MAP != (1U << 12)");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_F_INNER_MAP (1U << 12)
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat bpf_map_flags in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data bpf_map_flags_xdata[] = {
 XLAT(BPF_F_NO_PREALLOC),
 #define XLAT_VAL_0 ((unsigned) (BPF_F_NO_PREALLOC))
 #define XLAT_STR_0 STRINGIFY(BPF_F_NO_PREALLOC)
 XLAT(BPF_F_NO_COMMON_LRU),
 #define XLAT_VAL_1 ((unsigned) (BPF_F_NO_COMMON_LRU))
 #define XLAT_STR_1 STRINGIFY(BPF_F_NO_COMMON_LRU)
 XLAT(BPF_F_NUMA_NODE),
 #define XLAT_VAL_2 ((unsigned) (BPF_F_NUMA_NODE))
 #define XLAT_STR_2 STRINGIFY(BPF_F_NUMA_NODE)
 XLAT(BPF_F_RDONLY),
 #define XLAT_VAL_3 ((unsigned) (BPF_F_RDONLY))
 #define XLAT_STR_3 STRINGIFY(BPF_F_RDONLY)
 XLAT(BPF_F_WRONLY),
 #define XLAT_VAL_4 ((unsigned) (BPF_F_WRONLY))
 #define XLAT_STR_4 STRINGIFY(BPF_F_WRONLY)
 XLAT(BPF_F_STACK_BUILD_ID),
 #define XLAT_VAL_5 ((unsigned) (BPF_F_STACK_BUILD_ID))
 #define XLAT_STR_5 STRINGIFY(BPF_F_STACK_BUILD_ID)
 XLAT(BPF_F_ZERO_SEED),
 #define XLAT_VAL_6 ((unsigned) (BPF_F_ZERO_SEED))
 #define XLAT_STR_6 STRINGIFY(BPF_F_ZERO_SEED)
 XLAT(BPF_F_RDONLY_PROG),
 #define XLAT_VAL_7 ((unsigned) (BPF_F_RDONLY_PROG))
 #define XLAT_STR_7 STRINGIFY(BPF_F_RDONLY_PROG)
 XLAT(BPF_F_WRONLY_PROG),
 #define XLAT_VAL_8 ((unsigned) (BPF_F_WRONLY_PROG))
 #define XLAT_STR_8 STRINGIFY(BPF_F_WRONLY_PROG)
 XLAT(BPF_F_CLONE),
 #define XLAT_VAL_9 ((unsigned) (BPF_F_CLONE))
 #define XLAT_STR_9 STRINGIFY(BPF_F_CLONE)
 XLAT(BPF_F_MMAPABLE),
 #define XLAT_VAL_10 ((unsigned) (BPF_F_MMAPABLE))
 #define XLAT_STR_10 STRINGIFY(BPF_F_MMAPABLE)
 XLAT(BPF_F_PRESERVE_ELEMS),
 #define XLAT_VAL_11 ((unsigned) (BPF_F_PRESERVE_ELEMS))
 #define XLAT_STR_11 STRINGIFY(BPF_F_PRESERVE_ELEMS)
 XLAT(BPF_F_INNER_MAP),
 #define XLAT_VAL_12 ((unsigned) (BPF_F_INNER_MAP))
 #define XLAT_STR_12 STRINGIFY(BPF_F_INNER_MAP)
};
static
const struct xlat bpf_map_flags[1] = { {
 .data = bpf_map_flags_xdata,
 .size = ARRAY_SIZE(bpf_map_flags_xdata),
 .type = XT_NORMAL,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
#  ifdef XLAT_VAL_11
  | XLAT_VAL_11
#  endif
#  ifdef XLAT_VAL_12
  | XLAT_VAL_12
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
#  ifdef XLAT_STR_11
  + sizeof(XLAT_STR_11)
#  endif
#  ifdef XLAT_STR_12
  + sizeof(XLAT_STR_12)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
#  undef XLAT_STR_11
#  undef XLAT_VAL_11
#  undef XLAT_STR_12
#  undef XLAT_VAL_12
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
