/* Generated by ./src/xlat/gen.sh from ./src/xlat/ebpf_regs.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(BPF_REG_0) || (defined(HAVE_DECL_BPF_REG_0) && HAVE_DECL_BPF_REG_0)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_0) == (0), "BPF_REG_0 != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_0 0
#endif
#if defined(BPF_REG_1) || (defined(HAVE_DECL_BPF_REG_1) && HAVE_DECL_BPF_REG_1)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_1) == (1), "BPF_REG_1 != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_1 1
#endif
#if defined(BPF_REG_2) || (defined(HAVE_DECL_BPF_REG_2) && HAVE_DECL_BPF_REG_2)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_2) == (2), "BPF_REG_2 != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_2 2
#endif
#if defined(BPF_REG_3) || (defined(HAVE_DECL_BPF_REG_3) && HAVE_DECL_BPF_REG_3)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_3) == (3), "BPF_REG_3 != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_3 3
#endif
#if defined(BPF_REG_4) || (defined(HAVE_DECL_BPF_REG_4) && HAVE_DECL_BPF_REG_4)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_4) == (4), "BPF_REG_4 != 4");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_4 4
#endif
#if defined(BPF_REG_5) || (defined(HAVE_DECL_BPF_REG_5) && HAVE_DECL_BPF_REG_5)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_5) == (5), "BPF_REG_5 != 5");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_5 5
#endif
#if defined(BPF_REG_6) || (defined(HAVE_DECL_BPF_REG_6) && HAVE_DECL_BPF_REG_6)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_6) == (6), "BPF_REG_6 != 6");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_6 6
#endif
#if defined(BPF_REG_7) || (defined(HAVE_DECL_BPF_REG_7) && HAVE_DECL_BPF_REG_7)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_7) == (7), "BPF_REG_7 != 7");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_7 7
#endif
#if defined(BPF_REG_8) || (defined(HAVE_DECL_BPF_REG_8) && HAVE_DECL_BPF_REG_8)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_8) == (8), "BPF_REG_8 != 8");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_8 8
#endif
#if defined(BPF_REG_9) || (defined(HAVE_DECL_BPF_REG_9) && HAVE_DECL_BPF_REG_9)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_9) == (9), "BPF_REG_9 != 9");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_9 9
#endif
#if defined(BPF_REG_10) || (defined(HAVE_DECL_BPF_REG_10) && HAVE_DECL_BPF_REG_10)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((BPF_REG_10) == (10), "BPF_REG_10 != 10");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define BPF_REG_10 10
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

#  error static const struct xlat ebpf_regs in mpers mode

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data ebpf_regs_xdata[] = {
 [BPF_REG_0] = XLAT(BPF_REG_0),
 #define XLAT_VAL_0 ((unsigned) (BPF_REG_0))
 #define XLAT_STR_0 STRINGIFY(BPF_REG_0)
 [BPF_REG_1] = XLAT(BPF_REG_1),
 #define XLAT_VAL_1 ((unsigned) (BPF_REG_1))
 #define XLAT_STR_1 STRINGIFY(BPF_REG_1)
 [BPF_REG_2] = XLAT(BPF_REG_2),
 #define XLAT_VAL_2 ((unsigned) (BPF_REG_2))
 #define XLAT_STR_2 STRINGIFY(BPF_REG_2)
 [BPF_REG_3] = XLAT(BPF_REG_3),
 #define XLAT_VAL_3 ((unsigned) (BPF_REG_3))
 #define XLAT_STR_3 STRINGIFY(BPF_REG_3)
 [BPF_REG_4] = XLAT(BPF_REG_4),
 #define XLAT_VAL_4 ((unsigned) (BPF_REG_4))
 #define XLAT_STR_4 STRINGIFY(BPF_REG_4)
 [BPF_REG_5] = XLAT(BPF_REG_5),
 #define XLAT_VAL_5 ((unsigned) (BPF_REG_5))
 #define XLAT_STR_5 STRINGIFY(BPF_REG_5)
 [BPF_REG_6] = XLAT(BPF_REG_6),
 #define XLAT_VAL_6 ((unsigned) (BPF_REG_6))
 #define XLAT_STR_6 STRINGIFY(BPF_REG_6)
 [BPF_REG_7] = XLAT(BPF_REG_7),
 #define XLAT_VAL_7 ((unsigned) (BPF_REG_7))
 #define XLAT_STR_7 STRINGIFY(BPF_REG_7)
 [BPF_REG_8] = XLAT(BPF_REG_8),
 #define XLAT_VAL_8 ((unsigned) (BPF_REG_8))
 #define XLAT_STR_8 STRINGIFY(BPF_REG_8)
 [BPF_REG_9] = XLAT(BPF_REG_9),
 #define XLAT_VAL_9 ((unsigned) (BPF_REG_9))
 #define XLAT_STR_9 STRINGIFY(BPF_REG_9)
 [BPF_REG_10] = XLAT(BPF_REG_10),
 #define XLAT_VAL_10 ((unsigned) (BPF_REG_10))
 #define XLAT_STR_10 STRINGIFY(BPF_REG_10)
};
static
const struct xlat ebpf_regs[1] = { {
 .data = ebpf_regs_xdata,
 .size = ARRAY_SIZE(ebpf_regs_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
#  ifdef XLAT_VAL_4
  | XLAT_VAL_4
#  endif
#  ifdef XLAT_VAL_5
  | XLAT_VAL_5
#  endif
#  ifdef XLAT_VAL_6
  | XLAT_VAL_6
#  endif
#  ifdef XLAT_VAL_7
  | XLAT_VAL_7
#  endif
#  ifdef XLAT_VAL_8
  | XLAT_VAL_8
#  endif
#  ifdef XLAT_VAL_9
  | XLAT_VAL_9
#  endif
#  ifdef XLAT_VAL_10
  | XLAT_VAL_10
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
#  ifdef XLAT_STR_4
  + sizeof(XLAT_STR_4)
#  endif
#  ifdef XLAT_STR_5
  + sizeof(XLAT_STR_5)
#  endif
#  ifdef XLAT_STR_6
  + sizeof(XLAT_STR_6)
#  endif
#  ifdef XLAT_STR_7
  + sizeof(XLAT_STR_7)
#  endif
#  ifdef XLAT_STR_8
  + sizeof(XLAT_STR_8)
#  endif
#  ifdef XLAT_STR_9
  + sizeof(XLAT_STR_9)
#  endif
#  ifdef XLAT_STR_10
  + sizeof(XLAT_STR_10)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
#  undef XLAT_STR_4
#  undef XLAT_VAL_4
#  undef XLAT_STR_5
#  undef XLAT_VAL_5
#  undef XLAT_STR_6
#  undef XLAT_VAL_6
#  undef XLAT_STR_7
#  undef XLAT_VAL_7
#  undef XLAT_STR_8
#  undef XLAT_VAL_8
#  undef XLAT_STR_9
#  undef XLAT_VAL_9
#  undef XLAT_STR_10
#  undef XLAT_VAL_10
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
