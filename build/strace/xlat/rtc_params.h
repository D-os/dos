/* Generated by ./src/xlat/gen.sh from ./src/xlat/rtc_params.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(RTC_PARAM_FEATURES) || (defined(HAVE_DECL_RTC_PARAM_FEATURES) && HAVE_DECL_RTC_PARAM_FEATURES)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_PARAM_FEATURES) == (0), "RTC_PARAM_FEATURES != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_PARAM_FEATURES 0
#endif
#if defined(RTC_PARAM_CORRECTION) || (defined(HAVE_DECL_RTC_PARAM_CORRECTION) && HAVE_DECL_RTC_PARAM_CORRECTION)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_PARAM_CORRECTION) == (1), "RTC_PARAM_CORRECTION != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_PARAM_CORRECTION 1
#endif
#if defined(RTC_PARAM_BACKUP_SWITCH_MODE) || (defined(HAVE_DECL_RTC_PARAM_BACKUP_SWITCH_MODE) && HAVE_DECL_RTC_PARAM_BACKUP_SWITCH_MODE)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((RTC_PARAM_BACKUP_SWITCH_MODE) == (2), "RTC_PARAM_BACKUP_SWITCH_MODE != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define RTC_PARAM_BACKUP_SWITCH_MODE 2
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat rtc_params[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data rtc_params_xdata[] = {
 [RTC_PARAM_FEATURES] = XLAT(RTC_PARAM_FEATURES),
 #define XLAT_VAL_0 ((unsigned) (RTC_PARAM_FEATURES))
 #define XLAT_STR_0 STRINGIFY(RTC_PARAM_FEATURES)
 [RTC_PARAM_CORRECTION] = XLAT(RTC_PARAM_CORRECTION),
 #define XLAT_VAL_1 ((unsigned) (RTC_PARAM_CORRECTION))
 #define XLAT_STR_1 STRINGIFY(RTC_PARAM_CORRECTION)
 [RTC_PARAM_BACKUP_SWITCH_MODE] = XLAT(RTC_PARAM_BACKUP_SWITCH_MODE),
 #define XLAT_VAL_2 ((unsigned) (RTC_PARAM_BACKUP_SWITCH_MODE))
 #define XLAT_STR_2 STRINGIFY(RTC_PARAM_BACKUP_SWITCH_MODE)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat rtc_params[1] = { {
 .data = rtc_params_xdata,
 .size = ARRAY_SIZE(rtc_params_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
