/* Generated by ./src/xlat/gen.sh from ./src/xlat/kd_font_ops.in; do not edit. */

#include "gcc_compat.h"
#include "static_assert.h"

#if defined(KD_FONT_OP_SET) || (defined(HAVE_DECL_KD_FONT_OP_SET) && HAVE_DECL_KD_FONT_OP_SET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KD_FONT_OP_SET) == (0), "KD_FONT_OP_SET != 0");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KD_FONT_OP_SET 0
#endif
#if defined(KD_FONT_OP_GET) || (defined(HAVE_DECL_KD_FONT_OP_GET) && HAVE_DECL_KD_FONT_OP_GET)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KD_FONT_OP_GET) == (1), "KD_FONT_OP_GET != 1");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KD_FONT_OP_GET 1
#endif
#if defined(KD_FONT_OP_SET_DEFAULT) || (defined(HAVE_DECL_KD_FONT_OP_SET_DEFAULT) && HAVE_DECL_KD_FONT_OP_SET_DEFAULT)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KD_FONT_OP_SET_DEFAULT) == (2), "KD_FONT_OP_SET_DEFAULT != 2");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KD_FONT_OP_SET_DEFAULT 2
#endif
#if defined(KD_FONT_OP_COPY) || (defined(HAVE_DECL_KD_FONT_OP_COPY) && HAVE_DECL_KD_FONT_OP_COPY)
DIAG_PUSH_IGNORE_TAUTOLOGICAL_COMPARE
static_assert((KD_FONT_OP_COPY) == (3), "KD_FONT_OP_COPY != 3");
DIAG_POP_IGNORE_TAUTOLOGICAL_COMPARE
#else
# define KD_FONT_OP_COPY 3
#endif
#undef XLAT_PREV_VAL

#ifndef XLAT_MACROS_ONLY

# ifdef IN_MPERS

extern const struct xlat kd_font_ops[];

# else

DIAG_PUSH_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE
static const struct xlat_data kd_font_ops_xdata[] = {
 [KD_FONT_OP_SET] = XLAT(KD_FONT_OP_SET),
 #define XLAT_VAL_0 ((unsigned) (KD_FONT_OP_SET))
 #define XLAT_STR_0 STRINGIFY(KD_FONT_OP_SET)
 [KD_FONT_OP_GET] = XLAT(KD_FONT_OP_GET),
 #define XLAT_VAL_1 ((unsigned) (KD_FONT_OP_GET))
 #define XLAT_STR_1 STRINGIFY(KD_FONT_OP_GET)
 [KD_FONT_OP_SET_DEFAULT] = XLAT(KD_FONT_OP_SET_DEFAULT),
 #define XLAT_VAL_2 ((unsigned) (KD_FONT_OP_SET_DEFAULT))
 #define XLAT_STR_2 STRINGIFY(KD_FONT_OP_SET_DEFAULT)
 [KD_FONT_OP_COPY] = XLAT(KD_FONT_OP_COPY),
 #define XLAT_VAL_3 ((unsigned) (KD_FONT_OP_COPY))
 #define XLAT_STR_3 STRINGIFY(KD_FONT_OP_COPY)
};
#  if !(defined HAVE_M32_MPERS || defined HAVE_MX32_MPERS)
static
#  endif
const struct xlat kd_font_ops[1] = { {
 .data = kd_font_ops_xdata,
 .size = ARRAY_SIZE(kd_font_ops_xdata),
 .type = XT_INDEXED,
 .flags_mask = 0
#  ifdef XLAT_VAL_0
  | XLAT_VAL_0
#  endif
#  ifdef XLAT_VAL_1
  | XLAT_VAL_1
#  endif
#  ifdef XLAT_VAL_2
  | XLAT_VAL_2
#  endif
#  ifdef XLAT_VAL_3
  | XLAT_VAL_3
#  endif
  ,
 .flags_strsz = 0
#  ifdef XLAT_STR_0
  + sizeof(XLAT_STR_0)
#  endif
#  ifdef XLAT_STR_1
  + sizeof(XLAT_STR_1)
#  endif
#  ifdef XLAT_STR_2
  + sizeof(XLAT_STR_2)
#  endif
#  ifdef XLAT_STR_3
  + sizeof(XLAT_STR_3)
#  endif
  ,
} };
DIAG_POP_IGNORE_TAUTOLOGICAL_CONSTANT_COMPARE

#  undef XLAT_STR_0
#  undef XLAT_VAL_0
#  undef XLAT_STR_1
#  undef XLAT_VAL_1
#  undef XLAT_STR_2
#  undef XLAT_VAL_2
#  undef XLAT_STR_3
#  undef XLAT_VAL_3
# endif /* !IN_MPERS */

#endif /* !XLAT_MACROS_ONLY */
