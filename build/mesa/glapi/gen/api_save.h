/* DO NOT EDIT - This file generated automatically by api_save_h.py script */

/*
 * Copyright (C) 2012 Intel Corporation
 * Copyright (C) 2021 Advanced Micro Devices, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sub license,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * AUTHORS,
 * AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef API_SAVE_H
#define API_SAVE_H

#include "GL/gl.h"

void GLAPIENTRY save_NewList(GLuint list, GLenum mode);
void GLAPIENTRY save_ListBase(GLuint base);
void GLAPIENTRY save_Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
void GLAPIENTRY save_RasterPos2d(GLdouble x, GLdouble y);
void GLAPIENTRY save_RasterPos2dv(const GLdouble * v);
void GLAPIENTRY save_RasterPos2f(GLfloat x, GLfloat y);
void GLAPIENTRY save_RasterPos2fv(const GLfloat * v);
void GLAPIENTRY save_RasterPos2i(GLint x, GLint y);
void GLAPIENTRY save_RasterPos2iv(const GLint * v);
void GLAPIENTRY save_RasterPos2s(GLshort x, GLshort y);
void GLAPIENTRY save_RasterPos2sv(const GLshort * v);
void GLAPIENTRY save_RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_RasterPos3dv(const GLdouble * v);
void GLAPIENTRY save_RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY save_RasterPos3fv(const GLfloat * v);
void GLAPIENTRY save_RasterPos3i(GLint x, GLint y, GLint z);
void GLAPIENTRY save_RasterPos3iv(const GLint * v);
void GLAPIENTRY save_RasterPos3s(GLshort x, GLshort y, GLshort z);
void GLAPIENTRY save_RasterPos3sv(const GLshort * v);
void GLAPIENTRY save_RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY save_RasterPos4dv(const GLdouble * v);
void GLAPIENTRY save_RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY save_RasterPos4fv(const GLfloat * v);
void GLAPIENTRY save_RasterPos4i(GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY save_RasterPos4iv(const GLint * v);
void GLAPIENTRY save_RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY save_RasterPos4sv(const GLshort * v);
void GLAPIENTRY save_Rectdv(const GLdouble * v1, const GLdouble * v2);
void GLAPIENTRY save_Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void GLAPIENTRY save_Rectfv(const GLfloat * v1, const GLfloat * v2);
void GLAPIENTRY save_Recti(GLint x1, GLint y1, GLint x2, GLint y2);
void GLAPIENTRY save_Rectiv(const GLint * v1, const GLint * v2);
void GLAPIENTRY save_Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void GLAPIENTRY save_Rectsv(const GLshort * v1, const GLshort * v2);
void GLAPIENTRY save_ClipPlane(GLenum plane, const GLdouble * equation);
void GLAPIENTRY save_ColorMaterial(GLenum face, GLenum mode);
void GLAPIENTRY save_CullFace(GLenum mode);
void GLAPIENTRY save_Fogf(GLenum pname, GLfloat param);
void GLAPIENTRY save_Fogfv(GLenum pname, const GLfloat * params);
void GLAPIENTRY save_Fogi(GLenum pname, GLint param);
void GLAPIENTRY save_Fogiv(GLenum pname, const GLint * params);
void GLAPIENTRY save_FrontFace(GLenum mode);
void GLAPIENTRY save_Hint(GLenum target, GLenum mode);
void GLAPIENTRY save_Lightf(GLenum light, GLenum pname, GLfloat param);
void GLAPIENTRY save_Lightfv(GLenum light, GLenum pname, const GLfloat * params);
void GLAPIENTRY save_Lighti(GLenum light, GLenum pname, GLint param);
void GLAPIENTRY save_Lightiv(GLenum light, GLenum pname, const GLint * params);
void GLAPIENTRY save_LightModelf(GLenum pname, GLfloat param);
void GLAPIENTRY save_LightModelfv(GLenum pname, const GLfloat * params);
void GLAPIENTRY save_LightModeli(GLenum pname, GLint param);
void GLAPIENTRY save_LightModeliv(GLenum pname, const GLint * params);
void GLAPIENTRY save_LineStipple(GLint factor, GLushort pattern);
void GLAPIENTRY save_LineWidth(GLfloat width);
void GLAPIENTRY save_PointSize(GLfloat size);
void GLAPIENTRY save_PolygonMode(GLenum face, GLenum mode);
void GLAPIENTRY save_PolygonStipple(const GLubyte * mask);
void GLAPIENTRY save_Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY save_ShadeModel(GLenum mode);
void GLAPIENTRY save_TexParameterf(GLenum target, GLenum pname, GLfloat param);
void GLAPIENTRY save_TexParameterfv(GLenum target, GLenum pname, const GLfloat * params);
void GLAPIENTRY save_TexParameteri(GLenum target, GLenum pname, GLint param);
void GLAPIENTRY save_TexParameteriv(GLenum target, GLenum pname, const GLint * params);
void GLAPIENTRY save_TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_TexEnvf(GLenum target, GLenum pname, GLfloat param);
void GLAPIENTRY save_TexEnvfv(GLenum target, GLenum pname, const GLfloat * params);
void GLAPIENTRY save_TexEnvi(GLenum target, GLenum pname, GLint param);
void GLAPIENTRY save_TexEnviv(GLenum target, GLenum pname, const GLint * params);
void GLAPIENTRY save_TexGend(GLenum coord, GLenum pname, GLdouble param);
void GLAPIENTRY save_TexGendv(GLenum coord, GLenum pname, const GLdouble * params);
void GLAPIENTRY save_TexGenf(GLenum coord, GLenum pname, GLfloat param);
void GLAPIENTRY save_TexGenfv(GLenum coord, GLenum pname, const GLfloat * params);
void GLAPIENTRY save_TexGeni(GLenum coord, GLenum pname, GLint param);
void GLAPIENTRY save_TexGeniv(GLenum coord, GLenum pname, const GLint * params);
void GLAPIENTRY save_InitNames(void);
void GLAPIENTRY save_LoadName(GLuint name);
void GLAPIENTRY save_PassThrough(GLfloat token);
void GLAPIENTRY save_PopName(void);
void GLAPIENTRY save_PushName(GLuint name);
void GLAPIENTRY save_DrawBuffer(GLenum mode);
void GLAPIENTRY save_Clear(GLbitfield mask);
void GLAPIENTRY save_ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void GLAPIENTRY save_ClearIndex(GLfloat c);
void GLAPIENTRY save_ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void GLAPIENTRY save_ClearStencil(GLint s);
void GLAPIENTRY save_ClearDepth(GLclampd depth);
void GLAPIENTRY save_StencilMask(GLuint mask);
void GLAPIENTRY save_ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void GLAPIENTRY save_DepthMask(GLboolean flag);
void GLAPIENTRY save_IndexMask(GLuint mask);
void GLAPIENTRY save_Accum(GLenum op, GLfloat value);
void GLAPIENTRY save_Disable(GLenum cap);
void GLAPIENTRY save_Enable(GLenum cap);
void GLAPIENTRY save_PopAttrib(void);
void GLAPIENTRY save_PushAttrib(GLbitfield mask);
void GLAPIENTRY save_Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
void GLAPIENTRY save_Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
void GLAPIENTRY save_Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
void GLAPIENTRY save_Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
void GLAPIENTRY save_MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
void GLAPIENTRY save_MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
void GLAPIENTRY save_MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void GLAPIENTRY save_MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void GLAPIENTRY save_EvalMesh1(GLenum mode, GLint i1, GLint i2);
void GLAPIENTRY save_EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void GLAPIENTRY save_AlphaFunc(GLenum func, GLclampf ref);
void GLAPIENTRY save_BlendFunc(GLenum sfactor, GLenum dfactor);
void GLAPIENTRY save_LogicOp(GLenum opcode);
void GLAPIENTRY save_StencilFunc(GLenum func, GLint ref, GLuint mask);
void GLAPIENTRY save_StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
void GLAPIENTRY save_DepthFunc(GLenum func);
void GLAPIENTRY save_PixelZoom(GLfloat xfactor, GLfloat yfactor);
void GLAPIENTRY save_PixelTransferf(GLenum pname, GLfloat param);
void GLAPIENTRY save_PixelTransferi(GLenum pname, GLint param);
void GLAPIENTRY save_PixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values);
void GLAPIENTRY save_PixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values);
void GLAPIENTRY save_PixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values);
void GLAPIENTRY save_ReadBuffer(GLenum mode);
void GLAPIENTRY save_CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void GLAPIENTRY save_DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_DepthRange(GLclampd zNear, GLclampd zFar);
void GLAPIENTRY save_Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void GLAPIENTRY save_LoadIdentity(void);
void GLAPIENTRY save_LoadMatrixf(const GLfloat * m);
void GLAPIENTRY save_LoadMatrixd(const GLdouble * m);
void GLAPIENTRY save_MatrixMode(GLenum mode);
void GLAPIENTRY save_MultMatrixf(const GLfloat * m);
void GLAPIENTRY save_MultMatrixd(const GLdouble * m);
void GLAPIENTRY save_Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void GLAPIENTRY save_PopMatrix(void);
void GLAPIENTRY save_PushMatrix(void);
void GLAPIENTRY save_Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY save_Scaled(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_Scalef(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY save_Translated(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_Translatef(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY save_Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY save_DrawArrays(GLenum mode, GLint first, GLsizei count);
void GLAPIENTRY save_DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);
void GLAPIENTRY save_PolygonOffset(GLfloat factor, GLfloat units);
void GLAPIENTRY save_CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void GLAPIENTRY save_CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void GLAPIENTRY save_CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void GLAPIENTRY save_CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY save_TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_BindTexture(GLenum target, GLuint texture);
void GLAPIENTRY save_PrioritizeTextures(GLsizei n, const GLuint * textures, const GLclampf * priorities);
void GLAPIENTRY save_BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void GLAPIENTRY save_BlendEquation(GLenum mode);
void GLAPIENTRY save_DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices);
void GLAPIENTRY save_TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY save_ActiveTexture(GLenum texture);
void GLAPIENTRY save_LoadTransposeMatrixf(const GLfloat * m);
void GLAPIENTRY save_LoadTransposeMatrixd(const GLdouble * m);
void GLAPIENTRY save_MultTransposeMatrixf(const GLfloat * m);
void GLAPIENTRY save_MultTransposeMatrixd(const GLdouble * m);
void GLAPIENTRY save_SampleCoverage(GLclampf value, GLboolean invert);
void GLAPIENTRY save_CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void GLAPIENTRY save_MultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
void GLAPIENTRY save_MultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * const * indices, GLsizei primcount);
void GLAPIENTRY save_PointParameterf(GLenum pname, GLfloat param);
void GLAPIENTRY save_PointParameterfv(GLenum pname, const GLfloat * params);
void GLAPIENTRY save_PointParameteri(GLenum pname, GLint param);
void GLAPIENTRY save_PointParameteriv(GLenum pname, const GLint * params);
void GLAPIENTRY save_WindowPos2d(GLdouble x, GLdouble y);
void GLAPIENTRY save_WindowPos2dv(const GLdouble * v);
void GLAPIENTRY save_WindowPos2f(GLfloat x, GLfloat y);
void GLAPIENTRY save_WindowPos2fv(const GLfloat * v);
void GLAPIENTRY save_WindowPos2i(GLint x, GLint y);
void GLAPIENTRY save_WindowPos2iv(const GLint * v);
void GLAPIENTRY save_WindowPos2s(GLshort x, GLshort y);
void GLAPIENTRY save_WindowPos2sv(const GLshort * v);
void GLAPIENTRY save_WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_WindowPos3dv(const GLdouble * v);
void GLAPIENTRY save_WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY save_WindowPos3fv(const GLfloat * v);
void GLAPIENTRY save_WindowPos3i(GLint x, GLint y, GLint z);
void GLAPIENTRY save_WindowPos3iv(const GLint * v);
void GLAPIENTRY save_WindowPos3s(GLshort x, GLshort y, GLshort z);
void GLAPIENTRY save_WindowPos3sv(const GLshort * v);
void GLAPIENTRY save_BeginQuery(GLenum target, GLuint id);
void GLAPIENTRY save_EndQuery(GLenum target);
void GLAPIENTRY save_BlendEquationSeparate(GLenum modeRGB, GLenum modeA);
void GLAPIENTRY save_DrawBuffers(GLsizei n, const GLenum * bufs);
void GLAPIENTRY save_StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
void GLAPIENTRY save_StencilOpSeparate(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass);
void GLAPIENTRY save_StencilMaskSeparate(GLenum face, GLuint mask);
void GLAPIENTRY save_UseProgram(GLuint program);
void GLAPIENTRY save_Uniform1f(GLint location, GLfloat v0);
void GLAPIENTRY save_Uniform2f(GLint location, GLfloat v0, GLfloat v1);
void GLAPIENTRY save_Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void GLAPIENTRY save_Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void GLAPIENTRY save_Uniform1i(GLint location, GLint v0);
void GLAPIENTRY save_Uniform2i(GLint location, GLint v0, GLint v1);
void GLAPIENTRY save_Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
void GLAPIENTRY save_Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void GLAPIENTRY save_Uniform1fv(GLint location, GLsizei count, const GLfloat * value);
void GLAPIENTRY save_Uniform2fv(GLint location, GLsizei count, const GLfloat * value);
void GLAPIENTRY save_Uniform3fv(GLint location, GLsizei count, const GLfloat * value);
void GLAPIENTRY save_Uniform4fv(GLint location, GLsizei count, const GLfloat * value);
void GLAPIENTRY save_Uniform1iv(GLint location, GLsizei count, const GLint * value);
void GLAPIENTRY save_Uniform2iv(GLint location, GLsizei count, const GLint * value);
void GLAPIENTRY save_Uniform3iv(GLint location, GLsizei count, const GLint * value);
void GLAPIENTRY save_Uniform4iv(GLint location, GLsizei count, const GLint * value);
void GLAPIENTRY save_UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_ProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid * string);
void GLAPIENTRY save_BindProgramARB(GLenum target, GLuint program);
void GLAPIENTRY save_ProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY save_ProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params);
void GLAPIENTRY save_ProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY save_ProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params);
void GLAPIENTRY save_ProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY save_ProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params);
void GLAPIENTRY save_ProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY save_ProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params);
void GLAPIENTRY save_ClampColor(GLenum target, GLenum clamp);
void GLAPIENTRY save_DrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
void GLAPIENTRY save_DrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount);
void GLAPIENTRY save_BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void GLAPIENTRY save_VertexAttribDivisor(GLuint index, GLuint divisor);
void GLAPIENTRY save_UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void GLAPIENTRY save_DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLint basevertex);
void GLAPIENTRY save_MultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * const * indices, GLsizei primcount, const GLint * basevertex);
void GLAPIENTRY save_DrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount, GLint basevertex);
void GLAPIENTRY save_WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void GLAPIENTRY save_BlendEquationiARB(GLuint buf, GLenum mode);
void GLAPIENTRY save_BlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeA);
void GLAPIENTRY save_BlendFunciARB(GLuint buf, GLenum src, GLenum dst);
void GLAPIENTRY save_BlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA);
void GLAPIENTRY save_BindSampler(GLuint unit, GLuint sampler);
void GLAPIENTRY save_SamplerParameteri(GLuint sampler, GLenum pname, GLint param);
void GLAPIENTRY save_SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
void GLAPIENTRY save_SamplerParameteriv(GLuint sampler, GLenum pname, const GLint * params);
void GLAPIENTRY save_SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * params);
void GLAPIENTRY save_SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * params);
void GLAPIENTRY save_SamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * params);
void GLAPIENTRY save_QueryCounter(GLuint id, GLenum target);
void GLAPIENTRY save_UniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices);
void GLAPIENTRY save_PatchParameteri(GLenum pname, GLint value);
void GLAPIENTRY save_PatchParameterfv(GLenum pname, const GLfloat * values);
void GLAPIENTRY save_DrawArraysIndirect(GLenum mode, const GLvoid * indirect);
void GLAPIENTRY save_DrawElementsIndirect(GLenum mode, GLenum type, const GLvoid * indirect);
void GLAPIENTRY save_MultiDrawArraysIndirect(GLenum mode, const GLvoid * indirect, GLsizei primcount, GLsizei stride);
void GLAPIENTRY save_MultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid * indirect, GLsizei primcount, GLsizei stride);
void GLAPIENTRY save_Uniform1d(GLint location, GLdouble x);
void GLAPIENTRY save_Uniform2d(GLint location, GLdouble x, GLdouble y);
void GLAPIENTRY save_Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY save_Uniform1dv(GLint location, GLsizei count, const GLdouble * value);
void GLAPIENTRY save_Uniform2dv(GLint location, GLsizei count, const GLdouble * value);
void GLAPIENTRY save_Uniform3dv(GLint location, GLsizei count, const GLdouble * value);
void GLAPIENTRY save_Uniform4dv(GLint location, GLsizei count, const GLdouble * value);
void GLAPIENTRY save_UniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_UniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_UniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_UniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_UniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_UniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_UniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_UniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_UniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_ProgramUniform1d(GLuint program, GLint location, GLdouble x);
void GLAPIENTRY save_ProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y);
void GLAPIENTRY save_ProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_ProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY save_ProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value);
void GLAPIENTRY save_ProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value);
void GLAPIENTRY save_ProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value);
void GLAPIENTRY save_ProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value);
void GLAPIENTRY save_ProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_ProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_ProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_ProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_ProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_ProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_ProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_ProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_ProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
void GLAPIENTRY save_DrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
void GLAPIENTRY save_BeginQueryIndexed(GLenum target, GLuint index, GLuint id);
void GLAPIENTRY save_EndQueryIndexed(GLenum target, GLuint index);
void GLAPIENTRY save_UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
void GLAPIENTRY save_ProgramUniform1i(GLuint program, GLint location, GLint x);
void GLAPIENTRY save_ProgramUniform2i(GLuint program, GLint location, GLint x, GLint y);
void GLAPIENTRY save_ProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z);
void GLAPIENTRY save_ProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY save_ProgramUniform1ui(GLuint program, GLint location, GLuint x);
void GLAPIENTRY save_ProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y);
void GLAPIENTRY save_ProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z);
void GLAPIENTRY save_ProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
void GLAPIENTRY save_ProgramUniform1f(GLuint program, GLint location, GLfloat x);
void GLAPIENTRY save_ProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y);
void GLAPIENTRY save_ProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY save_ProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY save_ProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value);
void GLAPIENTRY save_ProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value);
void GLAPIENTRY save_ProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value);
void GLAPIENTRY save_ProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value);
void GLAPIENTRY save_ProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value);
void GLAPIENTRY save_ProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value);
void GLAPIENTRY save_ProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value);
void GLAPIENTRY save_ProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value);
void GLAPIENTRY save_ProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value);
void GLAPIENTRY save_ProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value);
void GLAPIENTRY save_ProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value);
void GLAPIENTRY save_ProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value);
void GLAPIENTRY save_ProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_ProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_ProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_ProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_ProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_ProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_ProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_ProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_ProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
void GLAPIENTRY save_DrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance);
void GLAPIENTRY save_DrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount, GLuint baseinstance);
void GLAPIENTRY save_DrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount, GLint basevertex, GLuint baseinstance);
void GLAPIENTRY save_DrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount);
void GLAPIENTRY save_DrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount);
void GLAPIENTRY save_DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void GLAPIENTRY save_DispatchComputeIndirect(GLintptr indirect);
void GLAPIENTRY save_ClipControl(GLenum origin, GLenum depth);
void GLAPIENTRY save_TextureBarrierNV(void);
void GLAPIENTRY save_PrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
void GLAPIENTRY save_Uniform1i64ARB(GLint location, GLint64 x);
void GLAPIENTRY save_Uniform2i64ARB(GLint location, GLint64 x, GLint64 y);
void GLAPIENTRY save_Uniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z);
void GLAPIENTRY save_Uniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
void GLAPIENTRY save_Uniform1i64vARB(GLint location, GLsizei count, const GLint64 * value);
void GLAPIENTRY save_Uniform2i64vARB(GLint location, GLsizei count, const GLint64 * value);
void GLAPIENTRY save_Uniform3i64vARB(GLint location, GLsizei count, const GLint64 * value);
void GLAPIENTRY save_Uniform4i64vARB(GLint location, GLsizei count, const GLint64 * value);
void GLAPIENTRY save_Uniform1ui64ARB(GLint location, GLuint64 x);
void GLAPIENTRY save_Uniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y);
void GLAPIENTRY save_Uniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
void GLAPIENTRY save_Uniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
void GLAPIENTRY save_Uniform1ui64vARB(GLint location, GLsizei count, const GLuint64 * value);
void GLAPIENTRY save_Uniform2ui64vARB(GLint location, GLsizei count, const GLuint64 * value);
void GLAPIENTRY save_Uniform3ui64vARB(GLint location, GLsizei count, const GLuint64 * value);
void GLAPIENTRY save_Uniform4ui64vARB(GLint location, GLsizei count, const GLuint64 * value);
void GLAPIENTRY save_ProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x);
void GLAPIENTRY save_ProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y);
void GLAPIENTRY save_ProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
void GLAPIENTRY save_ProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
void GLAPIENTRY save_ProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value);
void GLAPIENTRY save_ProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value);
void GLAPIENTRY save_ProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value);
void GLAPIENTRY save_ProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value);
void GLAPIENTRY save_ProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x);
void GLAPIENTRY save_ProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y);
void GLAPIENTRY save_ProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
void GLAPIENTRY save_ProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
void GLAPIENTRY save_ProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
void GLAPIENTRY save_ProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
void GLAPIENTRY save_ProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
void GLAPIENTRY save_ProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value);
void GLAPIENTRY save_ViewportArrayv(GLuint first, GLsizei count, const GLfloat * v);
void GLAPIENTRY save_ViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
void GLAPIENTRY save_ViewportIndexedfv(GLuint index, const GLfloat * v);
void GLAPIENTRY save_ScissorArrayv(GLuint first, GLsizei count, const int * v);
void GLAPIENTRY save_ScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
void GLAPIENTRY save_ScissorIndexedv(GLuint index, const GLint * v);
void GLAPIENTRY save_DepthRangeArrayv(GLuint first, GLsizei count, const GLclampd * v);
void GLAPIENTRY save_DepthRangeIndexed(GLuint index, GLclampd n, GLclampd f);
void GLAPIENTRY save_WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY save_WindowPos4dvMESA(const GLdouble * v);
void GLAPIENTRY save_WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY save_WindowPos4fvMESA(const GLfloat * v);
void GLAPIENTRY save_WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY save_WindowPos4ivMESA(const GLint * v);
void GLAPIENTRY save_WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY save_WindowPos4svMESA(const GLshort * v);
void GLAPIENTRY save_BindFragmentShaderATI(GLuint id);
void GLAPIENTRY save_SetFragmentShaderConstantATI(GLuint dst, const GLfloat * value);
void GLAPIENTRY save_ActiveStencilFaceEXT(GLenum face);
void GLAPIENTRY save_DepthBoundsEXT(GLclampd zmin, GLclampd zmax);
void GLAPIENTRY save_ProvokingVertex(GLenum mode);
void GLAPIENTRY save_ColorMaski(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void GLAPIENTRY save_Enablei(GLenum target, GLuint index);
void GLAPIENTRY save_Disablei(GLenum target, GLuint index);
void GLAPIENTRY save_MatrixLoadfEXT(GLenum matrixMode, const GLfloat * m);
void GLAPIENTRY save_MatrixLoaddEXT(GLenum matrixMode, const GLdouble * m);
void GLAPIENTRY save_MatrixMultfEXT(GLenum matrixMode, const GLfloat * m);
void GLAPIENTRY save_MatrixMultdEXT(GLenum matrixMode, const GLdouble * m);
void GLAPIENTRY save_MatrixLoadIdentityEXT(GLenum matrixMode);
void GLAPIENTRY save_MatrixRotatefEXT(GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY save_MatrixRotatedEXT(GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_MatrixScalefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY save_MatrixScaledEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_MatrixTranslatefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY save_MatrixTranslatedEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY save_MatrixOrthoEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
void GLAPIENTRY save_MatrixFrustumEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
void GLAPIENTRY save_MatrixPushEXT(GLenum matrixMode);
void GLAPIENTRY save_MatrixPopEXT(GLenum matrixMode);
void GLAPIENTRY save_TextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, int param);
void GLAPIENTRY save_TextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params);
void GLAPIENTRY save_TextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, float param);
void GLAPIENTRY save_TextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const float * params);
void GLAPIENTRY save_TextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_TextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_TextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_TextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_TextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_TextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);
void GLAPIENTRY save_CopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, int border);
void GLAPIENTRY save_CopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, int border);
void GLAPIENTRY save_CopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void GLAPIENTRY save_CopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY save_CopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY save_BindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture);
void GLAPIENTRY save_MultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
void GLAPIENTRY save_MultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * param);
void GLAPIENTRY save_MultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
void GLAPIENTRY save_MultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * param);
void GLAPIENTRY save_MultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
void GLAPIENTRY save_MultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* param);
void GLAPIENTRY save_MultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
void GLAPIENTRY save_MultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat* param);
void GLAPIENTRY save_MultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
void GLAPIENTRY save_MultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
void GLAPIENTRY save_MultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
void GLAPIENTRY save_MultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels);
void GLAPIENTRY save_MultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
void GLAPIENTRY save_MultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels);
void GLAPIENTRY save_CopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void GLAPIENTRY save_CopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void GLAPIENTRY save_CopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void GLAPIENTRY save_CopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY save_CopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY save_MatrixLoadTransposefEXT(GLenum matrixMode, const GLfloat * m);
void GLAPIENTRY save_MatrixLoadTransposedEXT(GLenum matrixMode, const GLdouble * m);
void GLAPIENTRY save_MatrixMultTransposefEXT(GLenum matrixMode, const GLfloat * m);
void GLAPIENTRY save_MatrixMultTransposedEXT(GLenum matrixMode, const GLdouble * m);
void GLAPIENTRY save_CompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_CompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data);
void GLAPIENTRY save_NamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid* string);
void GLAPIENTRY save_NamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY save_NamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat* params);
void GLAPIENTRY save_NamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY save_NamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble* params);
void GLAPIENTRY save_TextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint* params);
void GLAPIENTRY save_TextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint* params);
void GLAPIENTRY save_MultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
void GLAPIENTRY save_MultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint* params);
void GLAPIENTRY save_SubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits);
void GLAPIENTRY save_ConservativeRasterParameterfNV(GLenum pname, GLfloat param);
void GLAPIENTRY save_ConservativeRasterParameteriNV(GLenum pname, GLint param);
void GLAPIENTRY save_PolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp);
void GLAPIENTRY save_WindowRectanglesEXT(GLenum mode, GLsizei count, const GLint * box);
void GLAPIENTRY save_StencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
void GLAPIENTRY save_ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params);
void GLAPIENTRY save_ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params);
void GLAPIENTRY save_ClearColorIiEXT(GLint r, GLint g, GLint b, GLint a);
void GLAPIENTRY save_ClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a);
void GLAPIENTRY save_TexParameterIiv(GLenum target, GLenum pname, const GLint * params);
void GLAPIENTRY save_TexParameterIuiv(GLenum target, GLenum pname, const GLuint * params);
void GLAPIENTRY save_Uniform1ui(GLint location, GLuint x);
void GLAPIENTRY save_Uniform2ui(GLint location, GLuint x, GLuint y);
void GLAPIENTRY save_Uniform3ui(GLint location, GLuint x, GLuint y, GLuint z);
void GLAPIENTRY save_Uniform4ui(GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
void GLAPIENTRY save_Uniform1uiv(GLint location, GLsizei count, const GLuint * value);
void GLAPIENTRY save_Uniform2uiv(GLint location, GLsizei count, const GLuint * value);
void GLAPIENTRY save_Uniform3uiv(GLint location, GLsizei count, const GLuint * value);
void GLAPIENTRY save_Uniform4uiv(GLint location, GLsizei count, const GLuint * value);
void GLAPIENTRY save_ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value);
void GLAPIENTRY save_ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value);
void GLAPIENTRY save_ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value);
void GLAPIENTRY save_ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void GLAPIENTRY save_BeginTransformFeedback(GLenum mode);
void GLAPIENTRY save_EndTransformFeedback(void);
void GLAPIENTRY save_BeginConditionalRender(GLuint query, GLenum mode);
void GLAPIENTRY save_EndConditionalRender(void);
void GLAPIENTRY save_BindTransformFeedback(GLenum target, GLuint id);
void GLAPIENTRY save_PauseTransformFeedback(void);
void GLAPIENTRY save_ResumeTransformFeedback(void);
void GLAPIENTRY save_DrawTransformFeedback(GLenum mode, GLuint id);

#endif
